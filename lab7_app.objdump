
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00025804 memsz 0x00025804 flags r-x
    LOAD off    0x00026824 vaddr 0x04025824 paddr 0x040277b0 align 2**12
         filesz 0x00001f8c memsz 0x00001f8c flags rw-
    LOAD off    0x0002973c vaddr 0x0402973c paddr 0x0402973c align 2**12
         filesz 0x00000000 memsz 0x000014cc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024f60  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000694  04025190  04025190  00026190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f8c  04025824  040277b0  00026824  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000014cc  0402973c  0402973c  0002973c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0402ac08  0402ac08  000287b0  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  080051c0  080051c0  000287b0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000287b0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001258  00000000  00000000  000287d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f924  00000000  00000000  00029a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b89c  00000000  00000000  00059354  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001131a  00000000  00000000  00064bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003190  00000000  00000000  00075f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004bbb  00000000  00000000  0007909c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d9eb  00000000  00000000  0007dc57  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0009b644  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001bd0  00000000  00000000  0009b688  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000a1415  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000a1418  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a1424  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a1425  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a1426  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a142a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a142e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000a1432  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000a143d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000a1448  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000a1453  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000003  00000000  00000000  000a145b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008c6ef  00000000  00000000  000a145e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04025190 l    d  .rodata	00000000 .rodata
04025824 l    d  .rwdata	00000000 .rwdata
0402973c l    d  .bss	00000000 .bss
0402ac08 l    d  .sdram	00000000 .sdram
080051c0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
04027750 l     O .rwdata	00000004 vga_ctrl
04025824 l     O .rwdata	00000170 colors
04027754 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 palette_test.c
04027758 l     O .rwdata	00000004 vga_ctrl
04025994 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
0402775c l     O .rwdata	00000004 vga_ctrl
04025b04 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
04029770 l     O .bss	00000004 usb_delay.2607
04029774 l     O .bss	00000001 tmp_addr.2608
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 w_log10.c
00000000 l    df *ABS*	00000000 e_log10.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
04025ca4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0402562f l     O .rodata	00000010 zeroes.4389
0402563f l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
0402564f l     O .rodata	00000010 zeroes.4404
040189a4 l     F .text	000000bc __sbprintf
0402565f l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04018bb4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0401a70c l     F .text	00000008 __fp_unlock
0401a720 l     F .text	0000019c __sinit.part.1
0401a8bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
040260e8 l     O .rwdata	00000020 lc_ctype_charset
040260c8 l     O .rwdata	00000020 lc_message_charset
04026108 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0402568c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
040257b0 l     O .rodata	00000010 zeroes.4333
040257c0 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0401f450 l     F .text	000000fc __sprint_r.part.0
040257d0 l     O .rodata	00000010 zeroes.4349
04020a8c l     F .text	000000bc __sbprintf
040257e0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
04022208 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0402231c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04022348 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04022630 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04022718 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04022804 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
04022c48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040277a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04023090 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
040231cc l     F .text	00000034 alt_dev_reg
040266f0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040234c4 l     F .text	0000020c altera_avalon_jtag_uart_irq
040236d0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04023f04 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0402429c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040246fc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0402485c l     F .text	0000003c alt_get_errno
04024898 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
040297bc g     O .bss	00000004 alt_instruction_exception_handler
040140dc g     F .text	00000018 putchar
0401d430 g     F .text	00000074 _mprec_log10
04029810 g     O .bss	00000078 rowCount
0401d51c g     F .text	0000008c __any_on
04021198 g     F .text	00000054 _isatty_r
04025698 g     O .rodata	00000028 __mprec_tinytens
0402291c g     F .text	0000007c alt_main
04027760 g     O .rwdata	00000008 ctrl_xfers
040140f4 g     F .text	000000c0 _puts_r
0402ab08 g     O .bss	00000100 alt_irq
040211ec g     F .text	00000060 _lseek_r
04010138 g     F .text	00000644 USB_Task
040277b0 g       *ABS*	00000000 __flash_rwdata_start
04012ad8 g     F .text	00000088 .hidden __eqdf2
0401b540 g     F .text	0000005c _gettimeofday_r
0402ac08 g       *ABS*	00000000 __alt_heap_start
04014098 g     F .text	0000003c printf
040212ac g     F .text	0000009c _wcrtomb_r
0400f2a4 g     F .text	00000088 kbdPoll
0401dda0 g     F .text	0000005c __sseek
0401aa6c g     F .text	00000010 __sinit
0402973e g     O .bss	00000002 keycode
04020b48 g     F .text	00000140 __swbuf_r
0401b59c g     F .text	0000007c _setlocale_r
0401a8c4 g     F .text	00000078 __sfmoreglue
040229bc g     F .text	00000024 __malloc_unlock
04001004 g     F .text	0000026c textVGAColorScreenSaver
0400026c g     F .text	00000110 GetDriverandReport
0401c26c g     F .text	0000015c memmove
04007f58 g     F .text	00002880 dropTBlock
0401aa54 g     F .text	00000018 _cleanup
0401c4f0 g     F .text	000000a8 _Balloc
04029754 g     O .bss	00000004 timer
0400f3f8 g     F .text	0000008c MAXreg_wr
04025c74 g     O .rwdata	00000030 ClientDriverTable
04012b60 g     F .text	000000dc .hidden __gtdf2
04024ae0 g     F .text	00000024 altera_nios2_gen2_irq_init
04014058 g     F .text	00000010 __errno
0401077c g     F .text	0000002c MSDProbe
0400d550 g     F .text	00000310 ContinueGame
04000000 g     F .entry	0000000c __reset
0400fc98 g     F .text	000000e8 XferCtrlData
04000020 g       *ABS*	00000000 __flash_exceptions_start
040297c0 g     O .bss	00000010 hid_ep
0402113c g     F .text	0000005c _fstat_r
04029778 g     O .bss	00000004 errno
04010984 g     F .text	000001ec floor
0401dd1c g     F .text	00000008 __seofread
0401e0b0 g     F .text	000013a0 ___svfiprintf_internal_r
040297a8 g     O .bss	00000004 alt_argv
0402f750 g       *ABS*	00000000 _gp
04023060 g     F .text	00000030 usleep
0400f5f4 g     F .text	00000078 MAXreg_rd
0402973d g     O .bss	00000001 errorflag
04000cfc g     F .text	00000050 textVGAColorClr
04026570 g     O .rwdata	00000180 alt_fd_list
0400f1dc g     F .text	00000040 HID_init
040140d4 g     F .text	00000008 _putchar_r
04024b04 g     F .text	00000090 alt_find_dev
0401c124 g     F .text	00000148 memcpy
0401a714 g     F .text	0000000c _cleanup_r
04013f18 g     F .text	000000dc .hidden __floatsidf
040247e0 g     F .text	0000007c alt_io_redirect
04012c3c g     F .text	000000f4 .hidden __ltdf2
04025190 g       *ABS*	00000000 __DTOR_END__
040141b4 g     F .text	00000014 puts
04024d60 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04010edc g     F .text	00000074 __fpclassifyd
0401d38c g     F .text	000000a4 __ratio
04005520 g     F .text	00002a38 dropLBlock
04020a70 g     F .text	0000001c __vfiprintf_internal
040238c8 g     F .text	0000021c altera_avalon_jtag_uart_read
04014068 g     F .text	00000030 _printf_r
0400e7a4 g     F .text	00000228 updateHighScore
080051c0 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04011778 g     F .text	00000064 .hidden __udivsi3
0402266c g     F .text	000000ac isatty
040256e8 g     O .rodata	000000c8 __mprec_tens
0400e0b4 g     F .text	00000178 endScreen
0401b618 g     F .text	0000000c __locale_charset
04029794 g     O .bss	00000008 alt_timezone
04029790 g     O .bss	00000004 __malloc_top_pad
04027768 g     O .rwdata	00000001 usb_task_state
0400dfd8 g     F .text	000000dc checkEndGame
04027778 g     O .rwdata	00000004 __mb_cur_max
0401b648 g     F .text	0000000c _localeconv_r
0401c924 g     F .text	0000003c __i2b
0401aef0 g     F .text	000004c8 __sfvwrite_r
0401dc74 g     F .text	00000054 _sbrk_r
0402124c g     F .text	00000060 _read_r
04010d0c g     F .text	000001d0 __ieee754_log10
04029888 g     O .bss	00001138 grid
0400f94c g     F .text	00000094 MAX3421E_init
04000678 g     F .text	00000038 setKeycode
04027798 g     O .rwdata	00000004 alt_max_fd
04020e30 g     F .text	000000f0 _fclose_r
0401a6dc g     F .text	00000030 fflush
0402978c g     O .bss	00000004 __malloc_max_sbrked_mem
0401185c g     F .text	000008ac .hidden __adddf3
040007d0 g     F .text	00000378 keyboard_input
0401d134 g     F .text	0000010c __b2d
04021b9c g     F .text	000005c4 .hidden __umoddi3
04022840 g     F .text	000000dc lseek
0402776c g     O .rwdata	00000004 __fdlib_version
04027770 g     O .rwdata	00000004 _global_impure_ptr
0401d710 g     F .text	00000564 _realloc_r
0402ac08 g       *ABS*	00000000 __bss_end
0402460c g     F .text	000000f0 alt_iic_isr_register
04022f58 g     F .text	00000108 alt_tick
040215a0 g     F .text	000005fc .hidden __udivdi3
04021098 g     F .text	00000024 _fputwc_r
040256c0 g     O .rodata	00000028 __mprec_bigtens
0401c708 g     F .text	00000104 __s2b
04022160 g     F .text	000000a8 .hidden __floatunsidf
0401ce74 g     F .text	00000060 __mcmp
04002ca4 g     F .text	0000287c dropJBlock
0401aa8c g     F .text	00000018 __fp_lock_all
040245c0 g     F .text	0000004c alt_ic_irq_enabled
04022ebc g     F .text	0000009c alt_alarm_stop
040297b8 g     O .bss	00000004 alt_irq_active
04010844 g     F .text	0000002c DummyProbe
0400db7c g     F .text	00000234 shiftGrid
040000fc g     F .exceptions	000000d4 alt_irq_handler
04026548 g     O .rwdata	00000028 alt_dev_null
0400ddb0 g     F .text	00000228 updateScore
0400f21c g     F .text	00000088 mousePoll
0400f7a0 g     F .text	00000024 Vbus_power
0400d968 g     F .text	00000214 clearRow
0402427c g     F .text	00000020 alt_dcache_flush_all
0401c80c g     F .text	00000068 __hi0bits
04013e98 g     F .text	00000080 .hidden __fixdfsi
040277b0 g       *ABS*	00000000 __ram_rwdata_end
04027790 g     O .rwdata	00000008 alt_dev_list
04029758 g     O .bss	00000004 score
040230cc g     F .text	00000100 write
0401d5a8 g     F .text	000000a0 _putc_r
04025824 g       *ABS*	00000000 __ram_rodata_end
04029775 g     O .bss	00000001 usb_error
04022384 g     F .text	000000b8 fstat
04012c3c g     F .text	000000f4 .hidden __ledf2
0401cbec g     F .text	00000140 __pow5mult
0401f564 g     F .text	0000150c ___vfiprintf_internal_r
04029784 g     O .bss	00000004 __nlocale_changed
040117dc g     F .text	00000058 .hidden __umodsi3
0402ac08 g       *ABS*	00000000 end
0402973c g     O .bss	00000001 runningdebugflag
04023404 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0400beb0 g     F .text	000016a0 dropZBlock
0400fdf4 g     F .text	0000011c XferDispatchPkt
04025190 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04023f7c g     F .text	0000007c alt_avalon_timer_sc_init
04013ff4 g     F .text	00000064 .hidden __clzsi2
04023ae4 g     F .text	00000224 altera_avalon_jtag_uart_write
0401aa7c g     F .text	00000004 __sfp_lock_acquire
0401c040 g     F .text	000000e4 memchr
040166ac g     F .text	000022dc ___vfprintf_internal_r
0400fb18 g     F .text	00000034 MaxGpxHandler
04014244 g     F .text	00000058 _sprintf_r
0400d898 g     F .text	000000d0 check_rows
0401abe0 g     F .text	00000310 _free_r
040229e0 g     F .text	0000022c alt_printf
04001270 g     F .text	0000039c create_background
0401b624 g     F .text	00000010 __locale_mb_cur_max
04024fdc g     F .text	00000180 __call_exitprocs
04029780 g     O .bss	00000004 __mlocale_changed
0402777c g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
0400e22c g     F .text	00000578 startGame
040297b0 g     O .bss	00000004 _alt_tick_rate
0400f66c g     F .text	0000008c MAXbytes_rd
040141e0 g     F .text	00000064 rand
0401cd2c g     F .text	00000148 __lshift
04023d08 g     F .text	000001fc alt_avalon_spi_command
040297b4 g     O .bss	00000004 _alt_nticks
04022c84 g     F .text	00000104 read
04023238 g     F .text	00000068 alt_sys_init
0401dee0 g     F .text	000001d0 __ssprint_r
0402aac0 g     O .bss	00000048 devtable
04024ec4 g     F .text	00000118 __register_exitproc
0400edd4 g     F .text	00000408 HIDKProbe
040297d0 g     O .bss	00000018 msd_ep
0401c960 g     F .text	0000028c __multiply
04023770 g     F .text	00000068 altera_avalon_jtag_uart_close
040100a0 g     F .text	00000098 USB_init
0402a9c0 g     O .bss	00000100 bigbuf
04011834 g     F .text	00000028 .hidden __mulsi3
04025824 g       *ABS*	00000000 __ram_rwdata_start
04025190 g       *ABS*	00000000 __ram_rodata_start
040297e8 g     O .bss	00000028 __malloc_current_mallinfo
0402976c g     O .bss	00000001 last_usb_task_state
0401d240 g     F .text	0000014c __d2b
04010b70 g     F .text	0000019c log10
04029764 g     O .bss	00000008 dev0ep
040003c8 g     F .text	00000050 clearLED
040232a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04024c9c g     F .text	000000c4 alt_get_fd
04024124 g     F .text	00000158 alt_busy_sleep
040107a8 g     F .text	00000038 MSDEventHandler
04020d00 g     F .text	00000054 _close_r
04024e48 g     F .text	0000007c memcmp
04023360 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0402ac08 g       *ABS*	00000000 __alt_stack_base
040233b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04018a60 g     F .text	00000154 __swsetup_r
04012108 g     F .text	000009d0 .hidden __divdf3
0401a93c g     F .text	00000118 __sfp
0401d4a4 g     F .text	00000078 __copybits
04026140 g     O .rwdata	00000408 __malloc_av_
0401aa88 g     F .text	00000004 __sinit_lock_release
0401080c g     F .text	00000038 CDCEventHandler
04012d30 g     F .text	0000086c .hidden __muldf3
04010870 g     F .text	00000038 DummyEventHandler
0400d860 g     F .text	00000038 check_col
0401dcc8 g     F .text	00000054 __sread
04024b94 g     F .text	00000108 alt_find_file
0402975c g     O .bss	00000004 highScore
040242d8 g     F .text	000000a4 alt_dev_llist_insert
04022998 g     F .text	00000024 __malloc_lock
04022e0c g     F .text	000000b0 sbrk
040143a0 g     F .text	000022bc ___svfprintf_internal_r
0401a680 g     F .text	0000005c _fflush_r
04020d54 g     F .text	000000dc _calloc_r
0402243c g     F .text	000001f4 gettimeofday
0402973c g       *ABS*	00000000 __bss_start
0400f7c4 g     F .text	00000188 MAX_busprobe
04029760 g     O .bss	00000002 hid_device
0401c3c8 g     F .text	00000128 memset
040006b0 g     F .text	00000120 main
0400f9e0 g     F .text	0000006c MAX3421E_Task
040297ac g     O .bss	00000004 alt_envp
04029788 g     O .bss	00000004 __malloc_max_total_mem
04023300 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04020c88 g     F .text	00000018 __swbuf
040141c8 g     F .text	00000018 srand
04010900 g     F .text	00000084 ConvUTF8ToStr
0401ddfc g     F .text	00000008 __sclose
04010f50 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
04020f20 g     F .text	00000014 fclose
04001dc8 g     F .text	00000edc dropRectangle
04018ddc g     F .text	00001688 _dtoa_r
0401b834 g     F .text	0000080c _malloc_r
04021408 g     F .text	00000030 __ascii_wctomb
0401665c g     F .text	00000050 time
0402779c g     O .rwdata	00000004 alt_errno
0401b3b8 g     F .text	000000c4 _fwalk
0401d648 g     F .text	000000c8 putc
04011680 g     F .text	00000084 .hidden __divsi3
0400ff10 g     F .text	00000190 XferInTransfer
04000e5c g     F .text	000001a8 setColorPalette
04000538 g     F .text	00000140 printSignedHex1
0401aabc g     F .text	00000124 _malloc_trim_r
04025190 g       *ABS*	00000000 __CTOR_END__
040108c8 g     F .text	00000038 GetDevtable
0401de04 g     F .text	000000dc strcmp
04025190 g       *ABS*	00000000 __flash_rodata_start
04025190 g       *ABS*	00000000 __DTOR_LIST__
0400fd80 g     F .text	00000074 XferCtrlND
04012ad8 g     F .text	00000088 .hidden __nedf2
0400f6f8 g     F .text	000000a8 MAX3421E_reset
04023200 g     F .text	00000038 alt_irq_init
04022d88 g     F .text	00000084 alt_release_fd
0401429c g     F .text	0000006c sprintf
040254e6 g     O .rodata	00000100 .hidden __clz_tab
0402977c g     O .bss	00000004 _PathLocale
04024dfc g     F .text	00000014 atexit
04029740 g     O .bss	00000008 kbdbuf
04020ca0 g     F .text	00000060 _write_r
0401b654 g     F .text	00000018 setlocale
04027774 g     O .rwdata	00000004 _impure_ptr
040297a4 g     O .bss	00000004 alt_argc
0401a464 g     F .text	0000021c __sflush_r
040243dc g     F .text	00000060 _do_dtors
0401b640 g     F .text	00000008 __locale_cjk_lang
04010f64 g     F .text	0000071c __ieee754_log
0400f484 g     F .text	00000170 MAXbytes_wr
04029748 g     O .bss	00000008 buf
04000020 g       .exceptions	00000000 alt_irq_entry
0401d0d0 g     F .text	00000064 __ulp
0401aaa4 g     F .text	00000018 __fp_unlock_all
04027788 g     O .rwdata	00000008 alt_fs_list
040107e0 g     F .text	0000002c CDCProbe
0402979c g     O .bss	00000008 alt_resettime
04010f58 g     F .text	0000000c nan
04000020 g       *ABS*	00000000 __ram_exceptions_start
0401b66c g     F .text	0000000c localeconv
0400037c g     F .text	0000004c setLED
040108a8 g     F .text	00000020 GetUsbTaskState
0402445c g     F .text	00000050 alt_ic_isr_register
040251cc g     O .rodata	00000010 devclasses
040277b0 g       *ABS*	00000000 _edata
0400f364 g     F .text	00000038 HIDKEventHandler
0402ac08 g       *ABS*	00000000 _end
0400160c g     F .text	000007bc dropSquare
0400fa4c g     F .text	000000cc MaxIntHandler
04020f34 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
040237d8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04000d4c g     F .text	00000110 textVGADrawColorText
0400f39c g     F .text	00000034 SPI_init
04024534 g     F .text	0000008c alt_ic_irq_disable
0401dd24 g     F .text	0000007c __swrite
04027780 g     O .rwdata	00000004 __malloc_trim_threshold
0401b634 g     F .text	0000000c __locale_msgcharset
04024e10 g     F .text	00000038 exit
0401b47c g     F .text	000000c4 _fwalk_reent
0401ced4 g     F .text	000001fc __mdiff
04011704 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04029750 g     O .bss	00000001 rcode
0401aa80 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400f32c g     F .text	00000038 HIDMEventHandler
0402515c g     F .text	00000034 _exit
04023ff8 g     F .text	0000012c alt_alarm_start
04000418 g     F .text	00000120 printSignedHex0
04021494 g     F .text	0000010c .hidden __muldi3
0401b678 g     F .text	000001bc __smakebuf_r
04014308 g     F .text	00000098 strlen
04029751 g     O .bss	00000001 device
04024984 g     F .text	0000015c open
04012b60 g     F .text	000000dc .hidden __gedf2
04022c0c g     F .text	0000003c alt_putchar
04027784 g     O .rwdata	00000004 __wctomb
0401f54c g     F .text	00000018 __sprint_r
0402443c g     F .text	00000020 alt_icache_flush_all
040277ac g     O .rwdata	00000004 alt_priority_mask
0400a7d8 g     F .text	000016d8 dropSBlock
040244ac g     F .text	00000088 alt_ic_irq_enable
04018988 g     F .text	0000001c __vfprintf_internal
0400e9cc g     F .text	00000408 HIDMProbe
04021438 g     F .text	0000005c _wctomb_r
0400f3d0 g     F .text	00000028 SPI_wr
0401359c g     F .text	000008fc .hidden __subdf3
0401c874 g     F .text	000000b0 __lo0bits
040277a4 g     O .rwdata	00000008 alt_alarm_list
0402437c g     F .text	00000060 _do_ctors
04021348 g     F .text	000000c0 wcrtomb
04022244 g     F .text	000000d8 close
04000b48 g     F .text	000001b4 paletteTest
04022780 g     F .text	00000084 alt_load
040210bc g     F .text	00000080 fputwc
0401aa84 g     F .text	00000004 __sinit_lock_acquire
0400fb4c g     F .text	0000014c XferCtrlReq
0401c5c0 g     F .text	00000148 __multadd
0401c598 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	10aac204 	addi	r2,r2,-21752
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	10aac204 	addi	r2,r2,-21752
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory2_0+0xfbffaf6c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory2_0+0xfbffaf60>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a81b17 	ldw	r2,-24468(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a81b17 	ldw	r2,-24468(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 400023c:	d6bdd414 	ori	gp,gp,63312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000244:	10a5cf14 	ori	r2,r2,38716

    movhi r3, %hi(__bss_end)
 4000248:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 400024c:	18eb0214 	ori	r3,r3,44040

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_mem_onchip_memory2_0+0xfbffb094>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	40227800 	call	4022780 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	402291c0 	call	402291c <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_mem_onchip_memory2_0+0xfbffb0a8>

0400026c <GetDriverandReport>:
BYTE device;
WORD keycode;



BYTE GetDriverandReport() {
 400026c:	defff604 	addi	sp,sp,-40
 4000270:	dfc00915 	stw	ra,36(sp)
 4000274:	df000815 	stw	fp,32(sp)
 4000278:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 400027c:	00bfffc4 	movi	r2,-1
 4000280:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 4000284:	010100b4 	movhi	r4,1026
 4000288:	21147704 	addi	r4,r4,20956
 400028c:	40141b40 	call	40141b4 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 4000290:	00800044 	movi	r2,1
 4000294:	e0bffd05 	stb	r2,-12(fp)
 4000298:	00001f06 	br	4000318 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 400029c:	e0bffd03 	ldbu	r2,-12(fp)
 40002a0:	1009883a 	mov	r4,r2
 40002a4:	40108c80 	call	40108c8 <GetDevtable>
 40002a8:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 40002ac:	e0bffe17 	ldw	r2,-8(fp)
 40002b0:	10800017 	ldw	r2,0(r2)
 40002b4:	10001526 	beq	r2,zero,400030c <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 40002b8:	e0bffd03 	ldbu	r2,-12(fp)
 40002bc:	100b883a 	mov	r5,r2
 40002c0:	010100b4 	movhi	r4,1026
 40002c4:	21148004 	addi	r4,r4,20992
 40002c8:	40140980 	call	4014098 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 40002cc:	e0bffe17 	ldw	r2,-8(fp)
 40002d0:	10800103 	ldbu	r2,4(r2)
 40002d4:	10c03fcc 	andi	r3,r2,255
 40002d8:	008100b4 	movhi	r2,1026
 40002dc:	10947304 	addi	r2,r2,20940
 40002e0:	18c7883a 	add	r3,r3,r3
 40002e4:	18c7883a 	add	r3,r3,r3
 40002e8:	10c5883a 	add	r2,r2,r3
 40002ec:	10800017 	ldw	r2,0(r2)
 40002f0:	100b883a 	mov	r5,r2
 40002f4:	010100b4 	movhi	r4,1026
 40002f8:	21148304 	addi	r4,r4,21004
 40002fc:	40140980 	call	4014098 <printf>
			device = tpl_ptr->devclass;
 4000300:	e0bffe17 	ldw	r2,-8(fp)
 4000304:	10800103 	ldbu	r2,4(r2)
 4000308:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 400030c:	e0bffd03 	ldbu	r2,-12(fp)
 4000310:	10800044 	addi	r2,r2,1
 4000314:	e0bffd05 	stb	r2,-12(fp)
 4000318:	e0bffd03 	ldbu	r2,-12(fp)
 400031c:	10800230 	cmpltui	r2,r2,8
 4000320:	103fde1e 	bne	r2,zero,400029c <__alt_mem_onchip_memory2_0+0xfbffb0dc>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 4000324:	d0a00103 	ldbu	r2,-32764(gp)
 4000328:	11003fcc 	andi	r4,r2,255
 400032c:	d0a80443 	ldbu	r2,-24559(gp)
 4000330:	10803fcc 	andi	r2,r2,255
 4000334:	e0ffff44 	addi	r3,fp,-3
 4000338:	d8c00415 	stw	r3,16(sp)
 400033c:	00c00044 	movi	r3,1
 4000340:	d8c00315 	stw	r3,12(sp)
 4000344:	d8800215 	stw	r2,8(sp)
 4000348:	d8000115 	stw	zero,4(sp)
 400034c:	d8000015 	stw	zero,0(sp)
 4000350:	01c00084 	movi	r7,2
 4000354:	01802844 	movi	r6,161
 4000358:	000b883a 	mov	r5,zero
 400035c:	400fb4c0 	call	400fb4c <XferCtrlReq>
 4000360:	e0bfff05 	stb	r2,-4(fp)
//		printf("GetProto Error. Error code ");
//		printf("%x \n", rcode);
//	} else {
//		printf("%d \n", tmpbyte);
//	}
	return device;
 4000364:	e0bffd43 	ldbu	r2,-11(fp)
}
 4000368:	e037883a 	mov	sp,fp
 400036c:	dfc00117 	ldw	ra,4(sp)
 4000370:	df000017 	ldw	fp,0(sp)
 4000374:	dec00204 	addi	sp,sp,8
 4000378:	f800283a 	ret

0400037c <setLED>:

void setLED(int LED) {
 400037c:	defffe04 	addi	sp,sp,-8
 4000380:	df000115 	stw	fp,4(sp)
 4000384:	df000104 	addi	fp,sp,4
 4000388:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 400038c:	00820034 	movhi	r2,2048
 4000390:	10945404 	addi	r2,r2,20816
 4000394:	10c00037 	ldwio	r3,0(r2)
 4000398:	01000044 	movi	r4,1
 400039c:	e0bfff17 	ldw	r2,-4(fp)
 40003a0:	2084983a 	sll	r2,r4,r2
 40003a4:	1886b03a 	or	r3,r3,r2
 40003a8:	00820034 	movhi	r2,2048
 40003ac:	10945404 	addi	r2,r2,20816
 40003b0:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 40003b4:	0001883a 	nop
 40003b8:	e037883a 	mov	sp,fp
 40003bc:	df000017 	ldw	fp,0(sp)
 40003c0:	dec00104 	addi	sp,sp,4
 40003c4:	f800283a 	ret

040003c8 <clearLED>:

void clearLED(int LED) {
 40003c8:	defffe04 	addi	sp,sp,-8
 40003cc:	df000115 	stw	fp,4(sp)
 40003d0:	df000104 	addi	fp,sp,4
 40003d4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 40003d8:	00820034 	movhi	r2,2048
 40003dc:	10945404 	addi	r2,r2,20816
 40003e0:	10c00037 	ldwio	r3,0(r2)
 40003e4:	01000044 	movi	r4,1
 40003e8:	e0bfff17 	ldw	r2,-4(fp)
 40003ec:	2084983a 	sll	r2,r4,r2
 40003f0:	0084303a 	nor	r2,zero,r2
 40003f4:	1886703a 	and	r3,r3,r2
 40003f8:	00820034 	movhi	r2,2048
 40003fc:	10945404 	addi	r2,r2,20816
 4000400:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 4000404:	0001883a 	nop
 4000408:	e037883a 	mov	sp,fp
 400040c:	df000017 	ldw	fp,0(sp)
 4000410:	dec00104 	addi	sp,sp,4
 4000414:	f800283a 	ret

04000418 <printSignedHex0>:

void printSignedHex0(signed char value) {
 4000418:	defffc04 	addi	sp,sp,-16
 400041c:	dfc00315 	stw	ra,12(sp)
 4000420:	df000215 	stw	fp,8(sp)
 4000424:	df000204 	addi	fp,sp,8
 4000428:	2005883a 	mov	r2,r4
 400042c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000430:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4000434:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 4000438:	00820034 	movhi	r2,2048
 400043c:	10945804 	addi	r2,r2,20832
 4000440:	10800037 	ldwio	r2,0(r2)
 4000444:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 4000448:	e0bfff07 	ldb	r2,-4(fp)
 400044c:	1000060e 	bge	r2,zero,4000468 <printSignedHex0+0x50>
		setLED(11);
 4000450:	010002c4 	movi	r4,11
 4000454:	400037c0 	call	400037c <setLED>
		value = -value;
 4000458:	e0bfff03 	ldbu	r2,-4(fp)
 400045c:	0085c83a 	sub	r2,zero,r2
 4000460:	e0bfff05 	stb	r2,-4(fp)
 4000464:	00000206 	br	4000470 <printSignedHex0+0x58>
	} else {
		clearLED(11);
 4000468:	010002c4 	movi	r4,11
 400046c:	40003c80 	call	40003c8 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 4000470:	e0bfff03 	ldbu	r2,-4(fp)
 4000474:	108018c4 	addi	r2,r2,99
 4000478:	10803fcc 	andi	r2,r2,255
 400047c:	108031f0 	cmpltui	r2,r2,199
 4000480:	1000031e 	bne	r2,zero,4000490 <printSignedHex0+0x78>
		setLED(13);
 4000484:	01000344 	movi	r4,13
 4000488:	400037c0 	call	400037c <setLED>
 400048c:	00000206 	br	4000498 <printSignedHex0+0x80>
	else
		clearLED(13);
 4000490:	01000344 	movi	r4,13
 4000494:	40003c80 	call	40003c8 <clearLED>

	value = value % 100;
 4000498:	e0bfff07 	ldb	r2,-4(fp)
 400049c:	01401904 	movi	r5,100
 40004a0:	1009883a 	mov	r4,r2
 40004a4:	40117040 	call	4011704 <__modsi3>
 40004a8:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40004ac:	e0bfff07 	ldb	r2,-4(fp)
 40004b0:	01400284 	movi	r5,10
 40004b4:	1009883a 	mov	r4,r2
 40004b8:	40116800 	call	4011680 <__divsi3>
 40004bc:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 40004c0:	e0bfff07 	ldb	r2,-4(fp)
 40004c4:	01400284 	movi	r5,10
 40004c8:	1009883a 	mov	r4,r2
 40004cc:	40117040 	call	4011704 <__modsi3>
 40004d0:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 40004d4:	e0bffe8b 	ldhu	r2,-6(fp)
 40004d8:	10803fcc 	andi	r2,r2,255
 40004dc:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 40004e0:	e0bffe03 	ldbu	r2,-8(fp)
 40004e4:	1004933a 	slli	r2,r2,12
 40004e8:	1007883a 	mov	r3,r2
 40004ec:	e0bffe8b 	ldhu	r2,-6(fp)
 40004f0:	1884b03a 	or	r2,r3,r2
 40004f4:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 40004f8:	e0bffe43 	ldbu	r2,-7(fp)
 40004fc:	1004923a 	slli	r2,r2,8
 4000500:	1007883a 	mov	r3,r2
 4000504:	e0bffe8b 	ldhu	r2,-6(fp)
 4000508:	1884b03a 	or	r2,r3,r2
 400050c:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000510:	e0fffe8b 	ldhu	r3,-6(fp)
 4000514:	00820034 	movhi	r2,2048
 4000518:	10945804 	addi	r2,r2,20832
 400051c:	10c00035 	stwio	r3,0(r2)
}
 4000520:	0001883a 	nop
 4000524:	e037883a 	mov	sp,fp
 4000528:	dfc00117 	ldw	ra,4(sp)
 400052c:	df000017 	ldw	fp,0(sp)
 4000530:	dec00204 	addi	sp,sp,8
 4000534:	f800283a 	ret

04000538 <printSignedHex1>:

void printSignedHex1(signed char value) {
 4000538:	defffb04 	addi	sp,sp,-20
 400053c:	dfc00415 	stw	ra,16(sp)
 4000540:	df000315 	stw	fp,12(sp)
 4000544:	df000304 	addi	fp,sp,12
 4000548:	2005883a 	mov	r2,r4
 400054c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000550:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4000554:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 4000558:	00820034 	movhi	r2,2048
 400055c:	10945804 	addi	r2,r2,20832
 4000560:	10800037 	ldwio	r2,0(r2)
 4000564:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 4000568:	e0bfff07 	ldb	r2,-4(fp)
 400056c:	1000060e 	bge	r2,zero,4000588 <printSignedHex1+0x50>
		setLED(10);
 4000570:	01000284 	movi	r4,10
 4000574:	400037c0 	call	400037c <setLED>
		value = -value;
 4000578:	e0bfff03 	ldbu	r2,-4(fp)
 400057c:	0085c83a 	sub	r2,zero,r2
 4000580:	e0bfff05 	stb	r2,-4(fp)
 4000584:	00000206 	br	4000590 <printSignedHex1+0x58>
	} else {
		clearLED(10);
 4000588:	01000284 	movi	r4,10
 400058c:	40003c80 	call	40003c8 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 4000590:	e0bfff03 	ldbu	r2,-4(fp)
 4000594:	108018c4 	addi	r2,r2,99
 4000598:	10803fcc 	andi	r2,r2,255
 400059c:	108031f0 	cmpltui	r2,r2,199
 40005a0:	1000031e 	bne	r2,zero,40005b0 <printSignedHex1+0x78>
		setLED(12);
 40005a4:	01000304 	movi	r4,12
 40005a8:	400037c0 	call	400037c <setLED>
 40005ac:	00000206 	br	40005b8 <printSignedHex1+0x80>
	else
		clearLED(12);
 40005b0:	01000304 	movi	r4,12
 40005b4:	40003c80 	call	40003c8 <clearLED>

	value = value % 100;
 40005b8:	e0bfff07 	ldb	r2,-4(fp)
 40005bc:	01401904 	movi	r5,100
 40005c0:	1009883a 	mov	r4,r2
 40005c4:	40117040 	call	4011704 <__modsi3>
 40005c8:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40005cc:	e0bfff07 	ldb	r2,-4(fp)
 40005d0:	01400284 	movi	r5,10
 40005d4:	1009883a 	mov	r4,r2
 40005d8:	40116800 	call	4011680 <__divsi3>
 40005dc:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 40005e0:	e0bfff07 	ldb	r2,-4(fp)
 40005e4:	01400284 	movi	r5,10
 40005e8:	1009883a 	mov	r4,r2
 40005ec:	40117040 	call	4011704 <__modsi3>
 40005f0:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 40005f4:	e0bfff07 	ldb	r2,-4(fp)
 40005f8:	01400284 	movi	r5,10
 40005fc:	1009883a 	mov	r4,r2
 4000600:	40116800 	call	4011680 <__divsi3>
 4000604:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 4000608:	e0bfff07 	ldb	r2,-4(fp)
 400060c:	01400284 	movi	r5,10
 4000610:	1009883a 	mov	r4,r2
 4000614:	40117040 	call	4011704 <__modsi3>
 4000618:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 400061c:	e0bffe17 	ldw	r2,-8(fp)
 4000620:	10bfc00c 	andi	r2,r2,65280
 4000624:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 4000628:	e0bffd03 	ldbu	r2,-12(fp)
 400062c:	1004913a 	slli	r2,r2,4
 4000630:	1007883a 	mov	r3,r2
 4000634:	e0bffe17 	ldw	r2,-8(fp)
 4000638:	10c4b03a 	or	r2,r2,r3
 400063c:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4000640:	e0bffd43 	ldbu	r2,-11(fp)
 4000644:	e0fffe17 	ldw	r3,-8(fp)
 4000648:	1884b03a 	or	r2,r3,r2
 400064c:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000650:	e0fffe17 	ldw	r3,-8(fp)
 4000654:	00820034 	movhi	r2,2048
 4000658:	10945804 	addi	r2,r2,20832
 400065c:	10c00035 	stwio	r3,0(r2)
}
 4000660:	0001883a 	nop
 4000664:	e037883a 	mov	sp,fp
 4000668:	dfc00117 	ldw	ra,4(sp)
 400066c:	df000017 	ldw	fp,0(sp)
 4000670:	dec00204 	addi	sp,sp,8
 4000674:	f800283a 	ret

04000678 <setKeycode>:

void setKeycode(WORD keycode)
{
 4000678:	defffe04 	addi	sp,sp,-8
 400067c:	df000115 	stw	fp,4(sp)
 4000680:	df000104 	addi	fp,sp,4
 4000684:	2005883a 	mov	r2,r4
 4000688:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(0x80011a0, keycode);
 400068c:	e0ffff0b 	ldhu	r3,-4(fp)
 4000690:	00820034 	movhi	r2,2048
 4000694:	10846804 	addi	r2,r2,4512
 4000698:	10c00035 	stwio	r3,0(r2)
}
 400069c:	0001883a 	nop
 40006a0:	e037883a 	mov	sp,fp
 40006a4:	df000017 	ldw	fp,0(sp)
 40006a8:	dec00104 	addi	sp,sp,4
 40006ac:	f800283a 	ret

040006b0 <main>:
int main() {
 40006b0:	defff904 	addi	sp,sp,-28
 40006b4:	dfc00615 	stw	ra,24(sp)
 40006b8:	df000515 	stw	fp,20(sp)
 40006bc:	dcc00415 	stw	r19,16(sp)
 40006c0:	dc800315 	stw	r18,12(sp)
 40006c4:	dc400215 	stw	r17,8(sp)
 40006c8:	dc000115 	stw	r16,4(sp)
 40006cc:	df000504 	addi	fp,sp,20
	for(int i = 0; i < 16; i++){
 40006d0:	e03ffb15 	stw	zero,-20(fp)
 40006d4:	00002806 	br	4000778 <main+0xc8>
		setColorPalette(i, colors[i].red, colors[i].green, colors[i].blue);
 40006d8:	e0bffb17 	ldw	r2,-20(fp)
 40006dc:	14403fcc 	andi	r17,r2,255
 40006e0:	040100b4 	movhi	r16,1026
 40006e4:	84160904 	addi	r16,r16,22564
 40006e8:	e0bffb17 	ldw	r2,-20(fp)
 40006ec:	014005c4 	movi	r5,23
 40006f0:	1009883a 	mov	r4,r2
 40006f4:	40118340 	call	4011834 <__mulsi3>
 40006f8:	8085883a 	add	r2,r16,r2
 40006fc:	10800504 	addi	r2,r2,20
 4000700:	10800003 	ldbu	r2,0(r2)
 4000704:	14803fcc 	andi	r18,r2,255
 4000708:	040100b4 	movhi	r16,1026
 400070c:	84160904 	addi	r16,r16,22564
 4000710:	e0bffb17 	ldw	r2,-20(fp)
 4000714:	014005c4 	movi	r5,23
 4000718:	1009883a 	mov	r4,r2
 400071c:	40118340 	call	4011834 <__mulsi3>
 4000720:	8085883a 	add	r2,r16,r2
 4000724:	10800544 	addi	r2,r2,21
 4000728:	10800003 	ldbu	r2,0(r2)
 400072c:	14c03fcc 	andi	r19,r2,255
 4000730:	040100b4 	movhi	r16,1026
 4000734:	84160904 	addi	r16,r16,22564
 4000738:	e0bffb17 	ldw	r2,-20(fp)
 400073c:	014005c4 	movi	r5,23
 4000740:	1009883a 	mov	r4,r2
 4000744:	40118340 	call	4011834 <__mulsi3>
 4000748:	8085883a 	add	r2,r16,r2
 400074c:	10800584 	addi	r2,r2,22
 4000750:	10800003 	ldbu	r2,0(r2)
 4000754:	10803fcc 	andi	r2,r2,255
 4000758:	100f883a 	mov	r7,r2
 400075c:	980d883a 	mov	r6,r19
 4000760:	900b883a 	mov	r5,r18
 4000764:	8809883a 	mov	r4,r17
 4000768:	4000e5c0 	call	4000e5c <setColorPalette>
void setKeycode(WORD keycode)
{
	IOWR_ALTERA_AVALON_PIO_DATA(0x80011a0, keycode);
}
int main() {
	for(int i = 0; i < 16; i++){
 400076c:	e0bffb17 	ldw	r2,-20(fp)
 4000770:	10800044 	addi	r2,r2,1
 4000774:	e0bffb15 	stw	r2,-20(fp)
 4000778:	e0bffb17 	ldw	r2,-20(fp)
 400077c:	10800410 	cmplti	r2,r2,16
 4000780:	103fd51e 	bne	r2,zero,40006d8 <__alt_mem_onchip_memory2_0+0xfbffb518>
//	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
//	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
//	BYTE device;
//	WORD keycode;

	printf("initializing MAX3421E...\n");
 4000784:	010100b4 	movhi	r4,1026
 4000788:	21148504 	addi	r4,r4,21012
 400078c:	40141b40 	call	40141b4 <puts>
	MAX3421E_init();
 4000790:	400f94c0 	call	400f94c <MAX3421E_init>
	printf("initializing USB...\n");
 4000794:	010100b4 	movhi	r4,1026
 4000798:	21148c04 	addi	r4,r4,21040
 400079c:	40141b40 	call	40141b4 <puts>
	USB_init();
 40007a0:	40100a00 	call	40100a0 <USB_init>
	ContinueGame();
 40007a4:	400d5500 	call	400d550 <ContinueGame>
//			errorflag = 0;
//			clearLED(9);
//		}
//
//	}
	return 0;
 40007a8:	0005883a 	mov	r2,zero
}
 40007ac:	e6fffc04 	addi	sp,fp,-16
 40007b0:	dfc00517 	ldw	ra,20(sp)
 40007b4:	df000417 	ldw	fp,16(sp)
 40007b8:	dcc00317 	ldw	r19,12(sp)
 40007bc:	dc800217 	ldw	r18,8(sp)
 40007c0:	dc400117 	ldw	r17,4(sp)
 40007c4:	dc000017 	ldw	r16,0(sp)
 40007c8:	dec00604 	addi	sp,sp,24
 40007cc:	f800283a 	ret

040007d0 <keyboard_input>:

BYTE keyboard_input(){
 40007d0:	defffd04 	addi	sp,sp,-12
 40007d4:	dfc00215 	stw	ra,8(sp)
 40007d8:	df000115 	stw	fp,4(sp)
 40007dc:	df000104 	addi	fp,sp,4
	printf(".");
 40007e0:	01000b84 	movi	r4,46
 40007e4:	40140dc0 	call	40140dc <putchar>
	MAX3421E_Task();
 40007e8:	400f9e00 	call	400f9e0 <MAX3421E_Task>
	USB_Task();
 40007ec:	40101380 	call	4010138 <USB_Task>
	//usleep (500000);
	while(1){
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 40007f0:	40108a80 	call	40108a8 <GetUsbTaskState>
 40007f4:	10803fcc 	andi	r2,r2,255
 40007f8:	10801018 	cmpnei	r2,r2,64
 40007fc:	1000a71e 	bne	r2,zero,4000a9c <keyboard_input+0x2cc>
			if (!runningdebugflag) {
 4000800:	d0a7fb03 	ldbu	r2,-24596(gp)
 4000804:	10803fcc 	andi	r2,r2,255
 4000808:	1000071e 	bne	r2,zero,4000828 <keyboard_input+0x58>
				runningdebugflag = 1;
 400080c:	00800044 	movi	r2,1
 4000810:	d0a7fb05 	stb	r2,-24596(gp)
				setLED(9);
 4000814:	01000244 	movi	r4,9
 4000818:	400037c0 	call	400037c <setLED>
				device = GetDriverandReport();
 400081c:	400026c0 	call	400026c <GetDriverandReport>
 4000820:	d0a80045 	stb	r2,-24575(gp)
			clearLED(9);
		}
//		if(kbdbuf.keycode[0] != 0x00){
//			break;
//		}
		break;
 4000824:	0000c106 	br	4000b2c <keyboard_input+0x35c>
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
			if (!runningdebugflag) {
				runningdebugflag = 1;
				setLED(9);
				device = GetDriverandReport();
			} else if (device == 1) {
 4000828:	d0a80043 	ldbu	r2,-24575(gp)
 400082c:	10803fcc 	andi	r2,r2,255
 4000830:	10800058 	cmpnei	r2,r2,1
 4000834:	10003a1e 	bne	r2,zero,4000920 <keyboard_input+0x150>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 4000838:	d127fc04 	addi	r4,gp,-24592
 400083c:	400f2a40 	call	400f2a4 <kbdPoll>
 4000840:	d0a80005 	stb	r2,-24576(gp)
				if (rcode == hrNAK) {
 4000844:	d0a80003 	ldbu	r2,-24576(gp)
 4000848:	10803fcc 	andi	r2,r2,255
 400084c:	10800118 	cmpnei	r2,r2,4
 4000850:	1000031e 	bne	r2,zero,4000860 <keyboard_input+0x90>
					setKeycode(0);
 4000854:	0009883a 	mov	r4,zero
 4000858:	40006780 	call	4000678 <setKeycode>
					break;; //NAK means no new data
 400085c:	0000b406 	br	4000b30 <keyboard_input+0x360>
				} else if (rcode) {
 4000860:	d0a80003 	ldbu	r2,-24576(gp)
 4000864:	10803fcc 	andi	r2,r2,255
 4000868:	10000a26 	beq	r2,zero,4000894 <keyboard_input+0xc4>
					printf("Rcode: ");
 400086c:	010100b4 	movhi	r4,1026
 4000870:	21149104 	addi	r4,r4,21060
 4000874:	40140980 	call	4014098 <printf>
					printf("%x \n", rcode);
 4000878:	d0a80003 	ldbu	r2,-24576(gp)
 400087c:	10803fcc 	andi	r2,r2,255
 4000880:	100b883a 	mov	r5,r2
 4000884:	010100b4 	movhi	r4,1026
 4000888:	21149304 	addi	r4,r4,21068
 400088c:	40140980 	call	4014098 <printf>
					continue;
 4000890:	0000a506 	br	4000b28 <keyboard_input+0x358>
				}
				printf("keycodes: ");
 4000894:	010100b4 	movhi	r4,1026
 4000898:	21149504 	addi	r4,r4,21076
 400089c:	40140980 	call	4014098 <printf>
				for (int i = 0; i < 6; i++) {
 40008a0:	e03fff15 	stw	zero,-4(fp)
 40008a4:	00000c06 	br	40008d8 <keyboard_input+0x108>
					printf("%x ", kbdbuf.keycode[i]);
 40008a8:	e0ffff17 	ldw	r3,-4(fp)
 40008ac:	d0a7fc84 	addi	r2,gp,-24590
 40008b0:	1885883a 	add	r2,r3,r2
 40008b4:	10800003 	ldbu	r2,0(r2)
 40008b8:	10803fcc 	andi	r2,r2,255
 40008bc:	100b883a 	mov	r5,r2
 40008c0:	010100b4 	movhi	r4,1026
 40008c4:	21149804 	addi	r4,r4,21088
 40008c8:	40140980 	call	4014098 <printf>
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
 40008cc:	e0bfff17 	ldw	r2,-4(fp)
 40008d0:	10800044 	addi	r2,r2,1
 40008d4:	e0bfff15 	stw	r2,-4(fp)
 40008d8:	e0bfff17 	ldw	r2,-4(fp)
 40008dc:	10800190 	cmplti	r2,r2,6
 40008e0:	103ff11e 	bne	r2,zero,40008a8 <__alt_mem_onchip_memory2_0+0xfbffb6e8>
					printf("%x ", kbdbuf.keycode[i]);
				}
				setKeycode(kbdbuf.keycode[0]);
 40008e4:	d0a7fc83 	ldbu	r2,-24590(gp)
 40008e8:	10803fcc 	andi	r2,r2,255
 40008ec:	1009883a 	mov	r4,r2
 40008f0:	40006780 	call	4000678 <setKeycode>
				printSignedHex0(       2321);
 40008f4:	01000444 	movi	r4,17
 40008f8:	40004180 	call	4000418 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 40008fc:	d0a7fcc3 	ldbu	r2,-24589(gp)
 4000900:	10803fcc 	andi	r2,r2,255
 4000904:	1080201c 	xori	r2,r2,128
 4000908:	10bfe004 	addi	r2,r2,-128
 400090c:	1009883a 	mov	r4,r2
 4000910:	40005380 	call	4000538 <printSignedHex1>
				printf("\n");
 4000914:	01000284 	movi	r4,10
 4000918:	40140dc0 	call	40140dc <putchar>
			clearLED(9);
		}
//		if(kbdbuf.keycode[0] != 0x00){
//			break;
//		}
		break;
 400091c:	00008306 	br	4000b2c <keyboard_input+0x35c>
				printSignedHex1(kbdbuf.keycode[1]);
				printf("\n");
//				break;
			}

			else if (device == 2) {
 4000920:	d0a80043 	ldbu	r2,-24575(gp)
 4000924:	10803fcc 	andi	r2,r2,255
 4000928:	10800098 	cmpnei	r2,r2,2
 400092c:	10007f1e 	bne	r2,zero,4000b2c <keyboard_input+0x35c>
				rcode = mousePoll(&buf);
 4000930:	d127fe04 	addi	r4,gp,-24584
 4000934:	400f21c0 	call	400f21c <mousePoll>
 4000938:	d0a80005 	stb	r2,-24576(gp)
				if (rcode == hrNAK) {
 400093c:	d0a80003 	ldbu	r2,-24576(gp)
 4000940:	10803fcc 	andi	r2,r2,255
 4000944:	10800118 	cmpnei	r2,r2,4
 4000948:	10007626 	beq	r2,zero,4000b24 <keyboard_input+0x354>
					//NAK means no new data
					continue;
				} else if (rcode) {
 400094c:	d0a80003 	ldbu	r2,-24576(gp)
 4000950:	10803fcc 	andi	r2,r2,255
 4000954:	10000a26 	beq	r2,zero,4000980 <keyboard_input+0x1b0>
					printf("Rcode: ");
 4000958:	010100b4 	movhi	r4,1026
 400095c:	21149104 	addi	r4,r4,21060
 4000960:	40140980 	call	4014098 <printf>
					printf("%x \n", rcode);
 4000964:	d0a80003 	ldbu	r2,-24576(gp)
 4000968:	10803fcc 	andi	r2,r2,255
 400096c:	100b883a 	mov	r5,r2
 4000970:	010100b4 	movhi	r4,1026
 4000974:	21149304 	addi	r4,r4,21068
 4000978:	40140980 	call	4014098 <printf>
					continue;
 400097c:	00006a06 	br	4000b28 <keyboard_input+0x358>
				}
				printf("X displacement: ");
 4000980:	010100b4 	movhi	r4,1026
 4000984:	21149904 	addi	r4,r4,21092
 4000988:	40140980 	call	4014098 <printf>
				printf("%d ", (signed char) buf.Xdispl);
 400098c:	d0a7fe43 	ldbu	r2,-24583(gp)
 4000990:	10803fcc 	andi	r2,r2,255
 4000994:	1080201c 	xori	r2,r2,128
 4000998:	10bfe004 	addi	r2,r2,-128
 400099c:	100b883a 	mov	r5,r2
 40009a0:	010100b4 	movhi	r4,1026
 40009a4:	21149e04 	addi	r4,r4,21112
 40009a8:	40140980 	call	4014098 <printf>
				printSignedHex0((signed char) buf.Xdispl);
 40009ac:	d0a7fe43 	ldbu	r2,-24583(gp)
 40009b0:	10803fcc 	andi	r2,r2,255
 40009b4:	1080201c 	xori	r2,r2,128
 40009b8:	10bfe004 	addi	r2,r2,-128
 40009bc:	1009883a 	mov	r4,r2
 40009c0:	40004180 	call	4000418 <printSignedHex0>
				printf("Y displacement: ");
 40009c4:	010100b4 	movhi	r4,1026
 40009c8:	21149f04 	addi	r4,r4,21116
 40009cc:	40140980 	call	4014098 <printf>
				printf("%d ", (signed char) buf.Ydispl);
 40009d0:	d0a7fe83 	ldbu	r2,-24582(gp)
 40009d4:	10803fcc 	andi	r2,r2,255
 40009d8:	1080201c 	xori	r2,r2,128
 40009dc:	10bfe004 	addi	r2,r2,-128
 40009e0:	100b883a 	mov	r5,r2
 40009e4:	010100b4 	movhi	r4,1026
 40009e8:	21149e04 	addi	r4,r4,21112
 40009ec:	40140980 	call	4014098 <printf>
				printSignedHex1((signed char) buf.Ydispl);
 40009f0:	d0a7fe83 	ldbu	r2,-24582(gp)
 40009f4:	10803fcc 	andi	r2,r2,255
 40009f8:	1080201c 	xori	r2,r2,128
 40009fc:	10bfe004 	addi	r2,r2,-128
 4000a00:	1009883a 	mov	r4,r2
 4000a04:	40005380 	call	4000538 <printSignedHex1>
				printf("Buttons: ");
 4000a08:	010100b4 	movhi	r4,1026
 4000a0c:	2114a404 	addi	r4,r4,21136
 4000a10:	40140980 	call	4014098 <printf>
				printf("%x\n", buf.button);
 4000a14:	d0a7fe03 	ldbu	r2,-24584(gp)
 4000a18:	10803fcc 	andi	r2,r2,255
 4000a1c:	100b883a 	mov	r5,r2
 4000a20:	010100b4 	movhi	r4,1026
 4000a24:	2114a704 	addi	r4,r4,21148
 4000a28:	40140980 	call	4014098 <printf>
				if (buf.button & 0x04)
 4000a2c:	d0a7fe03 	ldbu	r2,-24584(gp)
 4000a30:	10803fcc 	andi	r2,r2,255
 4000a34:	1080010c 	andi	r2,r2,4
 4000a38:	10000326 	beq	r2,zero,4000a48 <keyboard_input+0x278>
					setLED(2);
 4000a3c:	01000084 	movi	r4,2
 4000a40:	400037c0 	call	400037c <setLED>
 4000a44:	00000206 	br	4000a50 <keyboard_input+0x280>
				else
					clearLED(2);
 4000a48:	01000084 	movi	r4,2
 4000a4c:	40003c80 	call	40003c8 <clearLED>
				if (buf.button & 0x02)
 4000a50:	d0a7fe03 	ldbu	r2,-24584(gp)
 4000a54:	10803fcc 	andi	r2,r2,255
 4000a58:	1080008c 	andi	r2,r2,2
 4000a5c:	10000326 	beq	r2,zero,4000a6c <keyboard_input+0x29c>
					setLED(1);
 4000a60:	01000044 	movi	r4,1
 4000a64:	400037c0 	call	400037c <setLED>
 4000a68:	00000206 	br	4000a74 <keyboard_input+0x2a4>
				else
					clearLED(1);
 4000a6c:	01000044 	movi	r4,1
 4000a70:	40003c80 	call	40003c8 <clearLED>
				if (buf.button & 0x01)
 4000a74:	d0a7fe03 	ldbu	r2,-24584(gp)
 4000a78:	10803fcc 	andi	r2,r2,255
 4000a7c:	1080004c 	andi	r2,r2,1
 4000a80:	10000326 	beq	r2,zero,4000a90 <keyboard_input+0x2c0>
					setLED(0);
 4000a84:	0009883a 	mov	r4,zero
 4000a88:	400037c0 	call	400037c <setLED>
			clearLED(9);
		}
//		if(kbdbuf.keycode[0] != 0x00){
//			break;
//		}
		break;
 4000a8c:	00002706 	br	4000b2c <keyboard_input+0x35c>
				else
					clearLED(1);
				if (buf.button & 0x01)
					setLED(0);
				else
					clearLED(0);
 4000a90:	0009883a 	mov	r4,zero
 4000a94:	40003c80 	call	40003c8 <clearLED>
			clearLED(9);
		}
//		if(kbdbuf.keycode[0] != 0x00){
//			break;
//		}
		break;
 4000a98:	00002406 	br	4000b2c <keyboard_input+0x35c>
				if (buf.button & 0x01)
					setLED(0);
				else
					clearLED(0);
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 4000a9c:	40108a80 	call	40108a8 <GetUsbTaskState>
 4000aa0:	10803fcc 	andi	r2,r2,255
 4000aa4:	10803fd8 	cmpnei	r2,r2,255
 4000aa8:	10000b1e 	bne	r2,zero,4000ad8 <keyboard_input+0x308>
			if (!errorflag) {
 4000aac:	d0a7fb43 	ldbu	r2,-24595(gp)
 4000ab0:	10803fcc 	andi	r2,r2,255
 4000ab4:	10001d1e 	bne	r2,zero,4000b2c <keyboard_input+0x35c>
				errorflag = 1;
 4000ab8:	00800044 	movi	r2,1
 4000abc:	d0a7fb45 	stb	r2,-24595(gp)
				clearLED(9);
 4000ac0:	01000244 	movi	r4,9
 4000ac4:	40003c80 	call	40003c8 <clearLED>
				printf("USB Error State\n");
 4000ac8:	010100b4 	movhi	r4,1026
 4000acc:	2114a804 	addi	r4,r4,21152
 4000ad0:	40141b40 	call	40141b4 <puts>
			clearLED(9);
		}
//		if(kbdbuf.keycode[0] != 0x00){
//			break;
//		}
		break;
 4000ad4:	00001506 	br	4000b2c <keyboard_input+0x35c>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 4000ad8:	010100b4 	movhi	r4,1026
 4000adc:	2114ac04 	addi	r4,r4,21168
 4000ae0:	40140980 	call	4014098 <printf>
			printf("%x\n", GetUsbTaskState());
 4000ae4:	40108a80 	call	40108a8 <GetUsbTaskState>
 4000ae8:	10803fcc 	andi	r2,r2,255
 4000aec:	100b883a 	mov	r5,r2
 4000af0:	010100b4 	movhi	r4,1026
 4000af4:	2114a704 	addi	r4,r4,21148
 4000af8:	40140980 	call	4014098 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 4000afc:	d0a7fb03 	ldbu	r2,-24596(gp)
 4000b00:	10803fcc 	andi	r2,r2,255
 4000b04:	10000326 	beq	r2,zero,4000b14 <keyboard_input+0x344>
				runningdebugflag = 0;
 4000b08:	d027fb05 	stb	zero,-24596(gp)
				MAX3421E_init();
 4000b0c:	400f94c0 	call	400f94c <MAX3421E_init>
				USB_init();
 4000b10:	40100a00 	call	40100a0 <USB_init>
			}
			errorflag = 0;
 4000b14:	d027fb45 	stb	zero,-24595(gp)
			clearLED(9);
 4000b18:	01000244 	movi	r4,9
 4000b1c:	40003c80 	call	40003c8 <clearLED>
		}
//		if(kbdbuf.keycode[0] != 0x00){
//			break;
//		}
		break;
 4000b20:	00000206 	br	4000b2c <keyboard_input+0x35c>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
 4000b24:	0001883a 	nop
		}
//		if(kbdbuf.keycode[0] != 0x00){
//			break;
//		}
		break;
	}
 4000b28:	003f3106 	br	40007f0 <__alt_mem_onchip_memory2_0+0xfbffb630>
			clearLED(9);
		}
//		if(kbdbuf.keycode[0] != 0x00){
//			break;
//		}
		break;
 4000b2c:	0001883a 	nop
	}
	return kbdbuf.keycode[0];
 4000b30:	d0a7fc83 	ldbu	r2,-24590(gp)
}
 4000b34:	e037883a 	mov	sp,fp
 4000b38:	dfc00117 	ldw	ra,4(sp)
 4000b3c:	df000017 	ldw	fp,0(sp)
 4000b40:	dec00204 	addi	sp,sp,8
 4000b44:	f800283a 	ret

04000b48 <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
 4000b48:	defffa04 	addi	sp,sp,-24
 4000b4c:	dfc00515 	stw	ra,20(sp)
 4000b50:	df000415 	stw	fp,16(sp)
 4000b54:	dc400315 	stw	r17,12(sp)
 4000b58:	dc000215 	stw	r16,8(sp)
 4000b5c:	df000404 	addi	fp,sp,16
	textVGAColorClr();
 4000b60:	4000cfc0 	call	4000cfc <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
 4000b64:	00800044 	movi	r2,1
 4000b68:	d8800015 	stw	r2,0(sp)
 4000b6c:	000f883a 	mov	r7,zero
 4000b70:	000d883a 	mov	r6,zero
 4000b74:	000b883a 	mov	r5,zero
 4000b78:	010100b4 	movhi	r4,1026
 4000b7c:	2114b104 	addi	r4,r4,21188
 4000b80:	4000d4c0 	call	4000d4c <textVGADrawColorText>

	for (int i = 0; i < 100; i ++)
 4000b84:	e03ffd15 	stw	zero,-12(fp)
 4000b88:	00005106 	br	4000cd0 <paletteTest+0x188>
	{
		usleep (20000);
 4000b8c:	01138804 	movi	r4,20000
 4000b90:	40230600 	call	4023060 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
 4000b94:	40141e00 	call	40141e0 <rand>
 4000b98:	1007883a 	mov	r3,r2
 4000b9c:	00a00034 	movhi	r2,32768
 4000ba0:	108003c4 	addi	r2,r2,15
 4000ba4:	1884703a 	and	r2,r3,r2
 4000ba8:	1000040e 	bge	r2,zero,4000bbc <paletteTest+0x74>
 4000bac:	10bfffc4 	addi	r2,r2,-1
 4000bb0:	00fffc04 	movi	r3,-16
 4000bb4:	10c4b03a 	or	r2,r2,r3
 4000bb8:	10800044 	addi	r2,r2,1
 4000bbc:	14003fcc 	andi	r16,r2,255
 4000bc0:	40141e00 	call	40141e0 <rand>
 4000bc4:	1007883a 	mov	r3,r2
 4000bc8:	00a00034 	movhi	r2,32768
 4000bcc:	108003c4 	addi	r2,r2,15
 4000bd0:	1884703a 	and	r2,r3,r2
 4000bd4:	1000040e 	bge	r2,zero,4000be8 <paletteTest+0xa0>
 4000bd8:	10bfffc4 	addi	r2,r2,-1
 4000bdc:	00fffc04 	movi	r3,-16
 4000be0:	10c4b03a 	or	r2,r2,r3
 4000be4:	10800044 	addi	r2,r2,1
 4000be8:	14403fcc 	andi	r17,r2,255
 4000bec:	40141e00 	call	40141e0 <rand>
 4000bf0:	1007883a 	mov	r3,r2
 4000bf4:	00a00034 	movhi	r2,32768
 4000bf8:	108003c4 	addi	r2,r2,15
 4000bfc:	1884703a 	and	r2,r3,r2
 4000c00:	1000040e 	bge	r2,zero,4000c14 <paletteTest+0xcc>
 4000c04:	10bfffc4 	addi	r2,r2,-1
 4000c08:	00fffc04 	movi	r3,-16
 4000c0c:	10c4b03a 	or	r2,r2,r3
 4000c10:	10800044 	addi	r2,r2,1
 4000c14:	10803fcc 	andi	r2,r2,255
 4000c18:	100f883a 	mov	r7,r2
 4000c1c:	880d883a 	mov	r6,r17
 4000c20:	800b883a 	mov	r5,r16
 4000c24:	0009883a 	mov	r4,zero
 4000c28:	4000e5c0 	call	4000e5c <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
 4000c2c:	40141e00 	call	40141e0 <rand>
 4000c30:	1007883a 	mov	r3,r2
 4000c34:	00a00034 	movhi	r2,32768
 4000c38:	108003c4 	addi	r2,r2,15
 4000c3c:	1884703a 	and	r2,r3,r2
 4000c40:	1000040e 	bge	r2,zero,4000c54 <paletteTest+0x10c>
 4000c44:	10bfffc4 	addi	r2,r2,-1
 4000c48:	00fffc04 	movi	r3,-16
 4000c4c:	10c4b03a 	or	r2,r2,r3
 4000c50:	10800044 	addi	r2,r2,1
 4000c54:	14003fcc 	andi	r16,r2,255
 4000c58:	40141e00 	call	40141e0 <rand>
 4000c5c:	1007883a 	mov	r3,r2
 4000c60:	00a00034 	movhi	r2,32768
 4000c64:	108003c4 	addi	r2,r2,15
 4000c68:	1884703a 	and	r2,r3,r2
 4000c6c:	1000040e 	bge	r2,zero,4000c80 <paletteTest+0x138>
 4000c70:	10bfffc4 	addi	r2,r2,-1
 4000c74:	00fffc04 	movi	r3,-16
 4000c78:	10c4b03a 	or	r2,r2,r3
 4000c7c:	10800044 	addi	r2,r2,1
 4000c80:	14403fcc 	andi	r17,r2,255
 4000c84:	40141e00 	call	40141e0 <rand>
 4000c88:	1007883a 	mov	r3,r2
 4000c8c:	00a00034 	movhi	r2,32768
 4000c90:	108003c4 	addi	r2,r2,15
 4000c94:	1884703a 	and	r2,r3,r2
 4000c98:	1000040e 	bge	r2,zero,4000cac <paletteTest+0x164>
 4000c9c:	10bfffc4 	addi	r2,r2,-1
 4000ca0:	00fffc04 	movi	r3,-16
 4000ca4:	10c4b03a 	or	r2,r2,r3
 4000ca8:	10800044 	addi	r2,r2,1
 4000cac:	10803fcc 	andi	r2,r2,255
 4000cb0:	100f883a 	mov	r7,r2
 4000cb4:	880d883a 	mov	r6,r17
 4000cb8:	800b883a 	mov	r5,r16
 4000cbc:	01000044 	movi	r4,1
 4000cc0:	4000e5c0 	call	4000e5c <setColorPalette>
void paletteTest()
{
	textVGAColorClr();
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);

	for (int i = 0; i < 100; i ++)
 4000cc4:	e0bffd17 	ldw	r2,-12(fp)
 4000cc8:	10800044 	addi	r2,r2,1
 4000ccc:	e0bffd15 	stw	r2,-12(fp)
 4000cd0:	e0bffd17 	ldw	r2,-12(fp)
 4000cd4:	10801910 	cmplti	r2,r2,100
 4000cd8:	103fac1e 	bne	r2,zero,4000b8c <__alt_mem_onchip_memory2_0+0xfbffb9cc>
		usleep (20000);
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
	}

}
 4000cdc:	0001883a 	nop
 4000ce0:	e6fffe04 	addi	sp,fp,-8
 4000ce4:	dfc00317 	ldw	ra,12(sp)
 4000ce8:	df000217 	ldw	fp,8(sp)
 4000cec:	dc400117 	ldw	r17,4(sp)
 4000cf0:	dc000017 	ldw	r16,0(sp)
 4000cf4:	dec00404 	addi	sp,sp,16
 4000cf8:	f800283a 	ret

04000cfc <textVGAColorClr>:
int timer;
int highScore;


void textVGAColorClr()
{
 4000cfc:	defffe04 	addi	sp,sp,-8
 4000d00:	df000115 	stw	fp,4(sp)
 4000d04:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 4000d08:	e03fff15 	stw	zero,-4(fp)
 4000d0c:	00000706 	br	4000d2c <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 4000d10:	d0e00317 	ldw	r3,-32756(gp)
 4000d14:	e0bfff17 	ldw	r2,-4(fp)
 4000d18:	1885883a 	add	r2,r3,r2
 4000d1c:	10000005 	stb	zero,0(r2)
int highScore;


void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 4000d20:	e0bfff17 	ldw	r2,-4(fp)
 4000d24:	10800044 	addi	r2,r2,1
 4000d28:	e0bfff15 	stw	r2,-4(fp)
 4000d2c:	e0bfff17 	ldw	r2,-4(fp)
 4000d30:	1084b010 	cmplti	r2,r2,4800
 4000d34:	103ff61e 	bne	r2,zero,4000d10 <__alt_mem_onchip_memory2_0+0xfbffbb50>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 4000d38:	0001883a 	nop
 4000d3c:	e037883a 	mov	sp,fp
 4000d40:	df000017 	ldw	fp,0(sp)
 4000d44:	dec00104 	addi	sp,sp,4
 4000d48:	f800283a 	ret

04000d4c <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 4000d4c:	defff704 	addi	sp,sp,-36
 4000d50:	dfc00815 	stw	ra,32(sp)
 4000d54:	df000715 	stw	fp,28(sp)
 4000d58:	dc000615 	stw	r16,24(sp)
 4000d5c:	df000704 	addi	fp,sp,28
 4000d60:	e13ffa15 	stw	r4,-24(fp)
 4000d64:	e17ffb15 	stw	r5,-20(fp)
 4000d68:	e1bffc15 	stw	r6,-16(fp)
 4000d6c:	3807883a 	mov	r3,r7
 4000d70:	e0800217 	ldw	r2,8(fp)
 4000d74:	e0fffd05 	stb	r3,-12(fp)
 4000d78:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 4000d7c:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 4000d80:	00002706 	br	4000e20 <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 4000d84:	d4200317 	ldw	r16,-32756(gp)
 4000d88:	01401404 	movi	r5,80
 4000d8c:	e13ffc17 	ldw	r4,-16(fp)
 4000d90:	40118340 	call	4011834 <__mulsi3>
 4000d94:	1007883a 	mov	r3,r2
 4000d98:	e0bffb17 	ldw	r2,-20(fp)
 4000d9c:	1887883a 	add	r3,r3,r2
 4000da0:	e0bff917 	ldw	r2,-28(fp)
 4000da4:	1885883a 	add	r2,r3,r2
 4000da8:	1085883a 	add	r2,r2,r2
 4000dac:	1009883a 	mov	r4,r2
 4000db0:	e0bffe03 	ldbu	r2,-8(fp)
 4000db4:	1004913a 	slli	r2,r2,4
 4000db8:	1007883a 	mov	r3,r2
 4000dbc:	e0bffd03 	ldbu	r2,-12(fp)
 4000dc0:	1884b03a 	or	r2,r3,r2
 4000dc4:	1007883a 	mov	r3,r2
 4000dc8:	8105883a 	add	r2,r16,r4
 4000dcc:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 4000dd0:	d4200317 	ldw	r16,-32756(gp)
 4000dd4:	01401404 	movi	r5,80
 4000dd8:	e13ffc17 	ldw	r4,-16(fp)
 4000ddc:	40118340 	call	4011834 <__mulsi3>
 4000de0:	1007883a 	mov	r3,r2
 4000de4:	e0bffb17 	ldw	r2,-20(fp)
 4000de8:	1887883a 	add	r3,r3,r2
 4000dec:	e0bff917 	ldw	r2,-28(fp)
 4000df0:	1885883a 	add	r2,r3,r2
 4000df4:	1085883a 	add	r2,r2,r2
 4000df8:	10800044 	addi	r2,r2,1
 4000dfc:	e0fff917 	ldw	r3,-28(fp)
 4000e00:	e13ffa17 	ldw	r4,-24(fp)
 4000e04:	20c7883a 	add	r3,r4,r3
 4000e08:	18c00003 	ldbu	r3,0(r3)
 4000e0c:	8085883a 	add	r2,r16,r2
 4000e10:	10c00005 	stb	r3,0(r2)
		i++;
 4000e14:	e0bff917 	ldw	r2,-28(fp)
 4000e18:	10800044 	addi	r2,r2,1
 4000e1c:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 4000e20:	e0bff917 	ldw	r2,-28(fp)
 4000e24:	e0fffa17 	ldw	r3,-24(fp)
 4000e28:	1885883a 	add	r2,r3,r2
 4000e2c:	10800003 	ldbu	r2,0(r2)
 4000e30:	10803fcc 	andi	r2,r2,255
 4000e34:	1080201c 	xori	r2,r2,128
 4000e38:	10bfe004 	addi	r2,r2,-128
 4000e3c:	103fd11e 	bne	r2,zero,4000d84 <__alt_mem_onchip_memory2_0+0xfbffbbc4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
 4000e40:	0001883a 	nop
 4000e44:	e6ffff04 	addi	sp,fp,-4
 4000e48:	dfc00217 	ldw	ra,8(sp)
 4000e4c:	df000117 	ldw	fp,4(sp)
 4000e50:	dc000017 	ldw	r16,0(sp)
 4000e54:	dec00304 	addi	sp,sp,12
 4000e58:	f800283a 	ret

04000e5c <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 4000e5c:	defff904 	addi	sp,sp,-28
 4000e60:	df000615 	stw	fp,24(sp)
 4000e64:	df000604 	addi	fp,sp,24
 4000e68:	2011883a 	mov	r8,r4
 4000e6c:	2809883a 	mov	r4,r5
 4000e70:	3007883a 	mov	r3,r6
 4000e74:	3805883a 	mov	r2,r7
 4000e78:	e23ffc05 	stb	r8,-16(fp)
 4000e7c:	e13ffd05 	stb	r4,-12(fp)
 4000e80:	e0fffe05 	stb	r3,-8(fp)
 4000e84:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	int colorRow = color/2;
 4000e88:	e0bffc03 	ldbu	r2,-16(fp)
 4000e8c:	1004d07a 	srli	r2,r2,1
 4000e90:	10803fcc 	andi	r2,r2,255
 4000e94:	e0bffa15 	stw	r2,-24(fp)
	int colorCol = color%2;
 4000e98:	e0bffc03 	ldbu	r2,-16(fp)
 4000e9c:	1080004c 	andi	r2,r2,1
 4000ea0:	e0bffb15 	stw	r2,-20(fp)
	if(colorCol != 0){
 4000ea4:	e0bffb17 	ldw	r2,-20(fp)
 4000ea8:	10002926 	beq	r2,zero,4000f50 <setColorPalette+0xf4>
		vga_ctrl -> COLOR[colorRow] &= ~(0xFFF << 13);
 4000eac:	d1200317 	ldw	r4,-32756(gp)
 4000eb0:	d0e00317 	ldw	r3,-32756(gp)
 4000eb4:	e0bffa17 	ldw	r2,-24(fp)
 4000eb8:	10820004 	addi	r2,r2,2048
 4000ebc:	1085883a 	add	r2,r2,r2
 4000ec0:	1085883a 	add	r2,r2,r2
 4000ec4:	1885883a 	add	r2,r3,r2
 4000ec8:	10c00017 	ldw	r3,0(r2)
 4000ecc:	00bf8034 	movhi	r2,65024
 4000ed0:	1087ffc4 	addi	r2,r2,8191
 4000ed4:	1886703a 	and	r3,r3,r2
 4000ed8:	e0bffa17 	ldw	r2,-24(fp)
 4000edc:	10820004 	addi	r2,r2,2048
 4000ee0:	1085883a 	add	r2,r2,r2
 4000ee4:	1085883a 	add	r2,r2,r2
 4000ee8:	2085883a 	add	r2,r4,r2
 4000eec:	10c00015 	stw	r3,0(r2)
		vga_ctrl -> COLOR[colorRow] |= (blue << 13 | green << 17 | red << 21);
 4000ef0:	d1200317 	ldw	r4,-32756(gp)
 4000ef4:	d0e00317 	ldw	r3,-32756(gp)
 4000ef8:	e0bffa17 	ldw	r2,-24(fp)
 4000efc:	10820004 	addi	r2,r2,2048
 4000f00:	1085883a 	add	r2,r2,r2
 4000f04:	1085883a 	add	r2,r2,r2
 4000f08:	1885883a 	add	r2,r3,r2
 4000f0c:	10800017 	ldw	r2,0(r2)
 4000f10:	e0ffff03 	ldbu	r3,-4(fp)
 4000f14:	180a937a 	slli	r5,r3,13
 4000f18:	e0fffe03 	ldbu	r3,-8(fp)
 4000f1c:	1806947a 	slli	r3,r3,17
 4000f20:	28cab03a 	or	r5,r5,r3
 4000f24:	e0fffd03 	ldbu	r3,-12(fp)
 4000f28:	1806957a 	slli	r3,r3,21
 4000f2c:	28c6b03a 	or	r3,r5,r3
 4000f30:	10c6b03a 	or	r3,r2,r3
 4000f34:	e0bffa17 	ldw	r2,-24(fp)
 4000f38:	10820004 	addi	r2,r2,2048
 4000f3c:	1085883a 	add	r2,r2,r2
 4000f40:	1085883a 	add	r2,r2,r2
 4000f44:	2085883a 	add	r2,r4,r2
 4000f48:	10c00015 	stw	r3,0(r2)
	}
	else{
		vga_ctrl -> COLOR[colorRow] &= ~(0xFFF << 1);
		vga_ctrl -> COLOR[colorRow] |= (blue << 1 | green << 5 | red << 9);
	}
}
 4000f4c:	00002806 	br	4000ff0 <setColorPalette+0x194>
	if(colorCol != 0){
		vga_ctrl -> COLOR[colorRow] &= ~(0xFFF << 13);
		vga_ctrl -> COLOR[colorRow] |= (blue << 13 | green << 17 | red << 21);
	}
	else{
		vga_ctrl -> COLOR[colorRow] &= ~(0xFFF << 1);
 4000f50:	d1200317 	ldw	r4,-32756(gp)
 4000f54:	d0e00317 	ldw	r3,-32756(gp)
 4000f58:	e0bffa17 	ldw	r2,-24(fp)
 4000f5c:	10820004 	addi	r2,r2,2048
 4000f60:	1085883a 	add	r2,r2,r2
 4000f64:	1085883a 	add	r2,r2,r2
 4000f68:	1885883a 	add	r2,r3,r2
 4000f6c:	10c00017 	ldw	r3,0(r2)
 4000f70:	00b80044 	movi	r2,-8191
 4000f74:	1886703a 	and	r3,r3,r2
 4000f78:	e0bffa17 	ldw	r2,-24(fp)
 4000f7c:	10820004 	addi	r2,r2,2048
 4000f80:	1085883a 	add	r2,r2,r2
 4000f84:	1085883a 	add	r2,r2,r2
 4000f88:	2085883a 	add	r2,r4,r2
 4000f8c:	10c00015 	stw	r3,0(r2)
		vga_ctrl -> COLOR[colorRow] |= (blue << 1 | green << 5 | red << 9);
 4000f90:	d1200317 	ldw	r4,-32756(gp)
 4000f94:	d0e00317 	ldw	r3,-32756(gp)
 4000f98:	e0bffa17 	ldw	r2,-24(fp)
 4000f9c:	10820004 	addi	r2,r2,2048
 4000fa0:	1085883a 	add	r2,r2,r2
 4000fa4:	1085883a 	add	r2,r2,r2
 4000fa8:	1885883a 	add	r2,r3,r2
 4000fac:	10c00017 	ldw	r3,0(r2)
 4000fb0:	e0bfff03 	ldbu	r2,-4(fp)
 4000fb4:	1085883a 	add	r2,r2,r2
 4000fb8:	100b883a 	mov	r5,r2
 4000fbc:	e0bffe03 	ldbu	r2,-8(fp)
 4000fc0:	1004917a 	slli	r2,r2,5
 4000fc4:	288ab03a 	or	r5,r5,r2
 4000fc8:	e0bffd03 	ldbu	r2,-12(fp)
 4000fcc:	1004927a 	slli	r2,r2,9
 4000fd0:	2884b03a 	or	r2,r5,r2
 4000fd4:	1886b03a 	or	r3,r3,r2
 4000fd8:	e0bffa17 	ldw	r2,-24(fp)
 4000fdc:	10820004 	addi	r2,r2,2048
 4000fe0:	1085883a 	add	r2,r2,r2
 4000fe4:	1085883a 	add	r2,r2,r2
 4000fe8:	2085883a 	add	r2,r4,r2
 4000fec:	10c00015 	stw	r3,0(r2)
	}
}
 4000ff0:	0001883a 	nop
 4000ff4:	e037883a 	mov	sp,fp
 4000ff8:	df000017 	ldw	fp,0(sp)
 4000ffc:	dec00104 	addi	sp,sp,4
 4001000:	f800283a 	ret

04001004 <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{
 4001004:	deffe004 	addi	sp,sp,-128
 4001008:	dfc01f15 	stw	ra,124(sp)
 400100c:	df001e15 	stw	fp,120(sp)
 4001010:	dcc01d15 	stw	r19,116(sp)
 4001014:	dc801c15 	stw	r18,112(sp)
 4001018:	dc401b15 	stw	r17,108(sp)
 400101c:	dc001a15 	stw	r16,104(sp)
 4001020:	df001e04 	addi	fp,sp,120
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 4001024:	4000cfc0 	call	4000cfc <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 4001028:	e03fe515 	stw	zero,-108(fp)
 400102c:	00002806 	br	40010d0 <textVGAColorScreenSaver+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 4001030:	e0bfe517 	ldw	r2,-108(fp)
 4001034:	14403fcc 	andi	r17,r2,255
 4001038:	040100b4 	movhi	r16,1026
 400103c:	8416c104 	addi	r16,r16,23300
 4001040:	e0bfe517 	ldw	r2,-108(fp)
 4001044:	014005c4 	movi	r5,23
 4001048:	1009883a 	mov	r4,r2
 400104c:	40118340 	call	4011834 <__mulsi3>
 4001050:	8085883a 	add	r2,r16,r2
 4001054:	10800504 	addi	r2,r2,20
 4001058:	10800003 	ldbu	r2,0(r2)
 400105c:	14803fcc 	andi	r18,r2,255
 4001060:	040100b4 	movhi	r16,1026
 4001064:	8416c104 	addi	r16,r16,23300
 4001068:	e0bfe517 	ldw	r2,-108(fp)
 400106c:	014005c4 	movi	r5,23
 4001070:	1009883a 	mov	r4,r2
 4001074:	40118340 	call	4011834 <__mulsi3>
 4001078:	8085883a 	add	r2,r16,r2
 400107c:	10800544 	addi	r2,r2,21
 4001080:	10800003 	ldbu	r2,0(r2)
 4001084:	14c03fcc 	andi	r19,r2,255
 4001088:	040100b4 	movhi	r16,1026
 400108c:	8416c104 	addi	r16,r16,23300
 4001090:	e0bfe517 	ldw	r2,-108(fp)
 4001094:	014005c4 	movi	r5,23
 4001098:	1009883a 	mov	r4,r2
 400109c:	40118340 	call	4011834 <__mulsi3>
 40010a0:	8085883a 	add	r2,r16,r2
 40010a4:	10800584 	addi	r2,r2,22
 40010a8:	10800003 	ldbu	r2,0(r2)
 40010ac:	10803fcc 	andi	r2,r2,255
 40010b0:	100f883a 	mov	r7,r2
 40010b4:	980d883a 	mov	r6,r19
 40010b8:	900b883a 	mov	r5,r18
 40010bc:	8809883a 	mov	r4,r17
 40010c0:	4000e5c0 	call	4000e5c <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 40010c4:	e0bfe517 	ldw	r2,-108(fp)
 40010c8:	10800044 	addi	r2,r2,1
 40010cc:	e0bfe515 	stw	r2,-108(fp)
 40010d0:	e0bfe517 	ldw	r2,-108(fp)
 40010d4:	10800410 	cmplti	r2,r2,16
 40010d8:	103fd51e 	bne	r2,zero,4001030 <__alt_mem_onchip_memory2_0+0xfbffbe70>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	while (1)
	{
		fg = rand() % 16;
 40010dc:	40141e00 	call	40141e0 <rand>
 40010e0:	1007883a 	mov	r3,r2
 40010e4:	00a00034 	movhi	r2,32768
 40010e8:	108003c4 	addi	r2,r2,15
 40010ec:	1884703a 	and	r2,r3,r2
 40010f0:	1000040e 	bge	r2,zero,4001104 <textVGAColorScreenSaver+0x100>
 40010f4:	10bfffc4 	addi	r2,r2,-1
 40010f8:	00fffc04 	movi	r3,-16
 40010fc:	10c4b03a 	or	r2,r2,r3
 4001100:	10800044 	addi	r2,r2,1
 4001104:	e0bfe315 	stw	r2,-116(fp)
		bg = rand() % 16;
 4001108:	40141e00 	call	40141e0 <rand>
 400110c:	1007883a 	mov	r3,r2
 4001110:	00a00034 	movhi	r2,32768
 4001114:	108003c4 	addi	r2,r2,15
 4001118:	1884703a 	and	r2,r3,r2
 400111c:	1000040e 	bge	r2,zero,4001130 <textVGAColorScreenSaver+0x12c>
 4001120:	10bfffc4 	addi	r2,r2,-1
 4001124:	00fffc04 	movi	r3,-16
 4001128:	10c4b03a 	or	r2,r2,r3
 400112c:	10800044 	addi	r2,r2,1
 4001130:	e0bfe415 	stw	r2,-112(fp)
		while (fg == bg)
 4001134:	00001606 	br	4001190 <textVGAColorScreenSaver+0x18c>
		{
			fg = rand() % 16;
 4001138:	40141e00 	call	40141e0 <rand>
 400113c:	1007883a 	mov	r3,r2
 4001140:	00a00034 	movhi	r2,32768
 4001144:	108003c4 	addi	r2,r2,15
 4001148:	1884703a 	and	r2,r3,r2
 400114c:	1000040e 	bge	r2,zero,4001160 <textVGAColorScreenSaver+0x15c>
 4001150:	10bfffc4 	addi	r2,r2,-1
 4001154:	00fffc04 	movi	r3,-16
 4001158:	10c4b03a 	or	r2,r2,r3
 400115c:	10800044 	addi	r2,r2,1
 4001160:	e0bfe315 	stw	r2,-116(fp)
			bg = rand() % 16;
 4001164:	40141e00 	call	40141e0 <rand>
 4001168:	1007883a 	mov	r3,r2
 400116c:	00a00034 	movhi	r2,32768
 4001170:	108003c4 	addi	r2,r2,15
 4001174:	1884703a 	and	r2,r3,r2
 4001178:	1000040e 	bge	r2,zero,400118c <textVGAColorScreenSaver+0x188>
 400117c:	10bfffc4 	addi	r2,r2,-1
 4001180:	00fffc04 	movi	r3,-16
 4001184:	10c4b03a 	or	r2,r2,r3
 4001188:	10800044 	addi	r2,r2,1
 400118c:	e0bfe415 	stw	r2,-112(fp)
	}
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 4001190:	e0ffe317 	ldw	r3,-116(fp)
 4001194:	e0bfe417 	ldw	r2,-112(fp)
 4001198:	18bfe726 	beq	r3,r2,4001138 <__alt_mem_onchip_memory2_0+0xfbffbf78>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 400119c:	014005c4 	movi	r5,23
 40011a0:	e13fe317 	ldw	r4,-116(fp)
 40011a4:	40118340 	call	4011834 <__mulsi3>
 40011a8:	1007883a 	mov	r3,r2
 40011ac:	008100b4 	movhi	r2,1026
 40011b0:	1096c104 	addi	r2,r2,23300
 40011b4:	18a1883a 	add	r16,r3,r2
 40011b8:	014005c4 	movi	r5,23
 40011bc:	e13fe417 	ldw	r4,-112(fp)
 40011c0:	40118340 	call	4011834 <__mulsi3>
 40011c4:	1007883a 	mov	r3,r2
 40011c8:	008100b4 	movhi	r2,1026
 40011cc:	1096c104 	addi	r2,r2,23300
 40011d0:	1887883a 	add	r3,r3,r2
 40011d4:	e0bfe804 	addi	r2,fp,-96
 40011d8:	180f883a 	mov	r7,r3
 40011dc:	800d883a 	mov	r6,r16
 40011e0:	014100b4 	movhi	r5,1026
 40011e4:	2954bd04 	addi	r5,r5,21236
 40011e8:	1009883a 	mov	r4,r2
 40011ec:	401429c0 	call	401429c <sprintf>
		x = rand() % (80-strlen(color_string));
 40011f0:	40141e00 	call	40141e0 <rand>
 40011f4:	1021883a 	mov	r16,r2
 40011f8:	e0bfe804 	addi	r2,fp,-96
 40011fc:	1009883a 	mov	r4,r2
 4001200:	40143080 	call	4014308 <strlen>
 4001204:	1007883a 	mov	r3,r2
 4001208:	00801404 	movi	r2,80
 400120c:	10c5c83a 	sub	r2,r2,r3
 4001210:	100b883a 	mov	r5,r2
 4001214:	8009883a 	mov	r4,r16
 4001218:	40117dc0 	call	40117dc <__umodsi3>
 400121c:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 30;
 4001220:	40141e00 	call	40141e0 <rand>
 4001224:	01400784 	movi	r5,30
 4001228:	1009883a 	mov	r4,r2
 400122c:	40117040 	call	4011704 <__modsi3>
 4001230:	e0bfe715 	stw	r2,-100(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
 4001234:	e0bfe417 	ldw	r2,-112(fp)
 4001238:	11003fcc 	andi	r4,r2,255
 400123c:	e0bfe317 	ldw	r2,-116(fp)
 4001240:	10803fcc 	andi	r2,r2,255
 4001244:	e0ffe804 	addi	r3,fp,-96
 4001248:	d8800015 	stw	r2,0(sp)
 400124c:	200f883a 	mov	r7,r4
 4001250:	e1bfe717 	ldw	r6,-100(fp)
 4001254:	e17fe617 	ldw	r5,-104(fp)
 4001258:	1809883a 	mov	r4,r3
 400125c:	4000d4c0 	call	4000d4c <textVGADrawColorText>
		usleep (100000);
 4001260:	010000b4 	movhi	r4,2
 4001264:	2121a804 	addi	r4,r4,-31072
 4001268:	40230600 	call	4023060 <usleep>
	}
 400126c:	003f9b06 	br	40010dc <__alt_mem_onchip_memory2_0+0xfbffbf1c>

04001270 <create_background>:
}

void create_background(){
 4001270:	defffb04 	addi	sp,sp,-20
 4001274:	dfc00415 	stw	ra,16(sp)
 4001278:	df000315 	stw	fp,12(sp)
 400127c:	df000304 	addi	fp,sp,12
	int col = 0;
 4001280:	e03ffe15 	stw	zero,-8(fp)
	int row = 0;
 4001284:	e03fff15 	stw	zero,-4(fp)
	for(int i = 0; i < 2400; i++){
 4001288:	e03ffd15 	stw	zero,-12(fp)
 400128c:	0000d606 	br	40015e8 <create_background+0x378>
		col = i % 80;
 4001290:	e0bffd17 	ldw	r2,-12(fp)
 4001294:	01401404 	movi	r5,80
 4001298:	1009883a 	mov	r4,r2
 400129c:	40117040 	call	4011704 <__modsi3>
 40012a0:	e0bffe15 	stw	r2,-8(fp)
		row = i / 80;
 40012a4:	e0bffd17 	ldw	r2,-12(fp)
 40012a8:	01401404 	movi	r5,80
 40012ac:	1009883a 	mov	r4,r2
 40012b0:	40116800 	call	4011680 <__divsi3>
 40012b4:	e0bfff15 	stw	r2,-4(fp)
		if(col == 20){
 40012b8:	e0bffe17 	ldw	r2,-8(fp)
 40012bc:	10800518 	cmpnei	r2,r2,20
 40012c0:	1000111e 	bne	r2,zero,4001308 <create_background+0x98>
//			vga_ctrl -> VRAM[i * 2] = 0x0F2F; //top right
			vga_ctrl->VRAM[i * 2] = 0xDF;
 40012c4:	d0e00317 	ldw	r3,-32756(gp)
 40012c8:	e0bffd17 	ldw	r2,-12(fp)
 40012cc:	1085883a 	add	r2,r2,r2
 40012d0:	1885883a 	add	r2,r3,r2
 40012d4:	00fff7c4 	movi	r3,-33
 40012d8:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = ']';
 40012dc:	d0e00317 	ldw	r3,-32756(gp)
 40012e0:	e0bffd17 	ldw	r2,-12(fp)
 40012e4:	1085883a 	add	r2,r2,r2
 40012e8:	10800044 	addi	r2,r2,1
 40012ec:	1885883a 	add	r2,r3,r2
 40012f0:	00c01744 	movi	r3,93
 40012f4:	10c00005 	stb	r3,0(r2)
			printf("top right");
 40012f8:	010100b4 	movhi	r4,1026
 40012fc:	2114c604 	addi	r4,r4,21272
 4001300:	40140980 	call	4014098 <printf>
 4001304:	0000b506 	br	40015dc <create_background+0x36c>
		}
		else if(col == 19){
 4001308:	e0bffe17 	ldw	r2,-8(fp)
 400130c:	108004d8 	cmpnei	r2,r2,19
 4001310:	1000111e 	bne	r2,zero,4001358 <create_background+0xe8>
//			vga_ctrl -> VRAM[i * 2] = 0x012F; //top right
			vga_ctrl->VRAM[i * 2] = 0xDF;
 4001314:	d0e00317 	ldw	r3,-32756(gp)
 4001318:	e0bffd17 	ldw	r2,-12(fp)
 400131c:	1085883a 	add	r2,r2,r2
 4001320:	1885883a 	add	r2,r3,r2
 4001324:	00fff7c4 	movi	r3,-33
 4001328:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = '[';
 400132c:	d0e00317 	ldw	r3,-32756(gp)
 4001330:	e0bffd17 	ldw	r2,-12(fp)
 4001334:	1085883a 	add	r2,r2,r2
 4001338:	10800044 	addi	r2,r2,1
 400133c:	1885883a 	add	r2,r3,r2
 4001340:	00c016c4 	movi	r3,91
 4001344:	10c00005 	stb	r3,0(r2)
			printf("top right");
 4001348:	010100b4 	movhi	r4,1026
 400134c:	2114c604 	addi	r4,r4,21272
 4001350:	40140980 	call	4014098 <printf>
 4001354:	0000a106 	br	40015dc <create_background+0x36c>
		}
		else if(col == 59){
 4001358:	e0bffe17 	ldw	r2,-8(fp)
 400135c:	10800ed8 	cmpnei	r2,r2,59
 4001360:	1000111e 	bne	r2,zero,40013a8 <create_background+0x138>
//			vga_ctrl -> VRAM[i * 2] = 0x007F; //top right
			vga_ctrl->VRAM[i * 2] = 0xDF;
 4001364:	d0e00317 	ldw	r3,-32756(gp)
 4001368:	e0bffd17 	ldw	r2,-12(fp)
 400136c:	1085883a 	add	r2,r2,r2
 4001370:	1885883a 	add	r2,r3,r2
 4001374:	00fff7c4 	movi	r3,-33
 4001378:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = '[';
 400137c:	d0e00317 	ldw	r3,-32756(gp)
 4001380:	e0bffd17 	ldw	r2,-12(fp)
 4001384:	1085883a 	add	r2,r2,r2
 4001388:	10800044 	addi	r2,r2,1
 400138c:	1885883a 	add	r2,r3,r2
 4001390:	00c016c4 	movi	r3,91
 4001394:	10c00005 	stb	r3,0(r2)
			printf("top right");
 4001398:	010100b4 	movhi	r4,1026
 400139c:	2114c604 	addi	r4,r4,21272
 40013a0:	40140980 	call	4014098 <printf>
 40013a4:	00008d06 	br	40015dc <create_background+0x36c>
		}
		else if(col == 60){
 40013a8:	e0bffe17 	ldw	r2,-8(fp)
 40013ac:	10800f18 	cmpnei	r2,r2,60
 40013b0:	1000111e 	bne	r2,zero,40013f8 <create_background+0x188>
//			vga_ctrl -> VRAM[i * 2] = 0x017F; //top right
			vga_ctrl->VRAM[i * 2] = 0xDF;
 40013b4:	d0e00317 	ldw	r3,-32756(gp)
 40013b8:	e0bffd17 	ldw	r2,-12(fp)
 40013bc:	1085883a 	add	r2,r2,r2
 40013c0:	1885883a 	add	r2,r3,r2
 40013c4:	00fff7c4 	movi	r3,-33
 40013c8:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = ']';
 40013cc:	d0e00317 	ldw	r3,-32756(gp)
 40013d0:	e0bffd17 	ldw	r2,-12(fp)
 40013d4:	1085883a 	add	r2,r2,r2
 40013d8:	10800044 	addi	r2,r2,1
 40013dc:	1885883a 	add	r2,r3,r2
 40013e0:	00c01744 	movi	r3,93
 40013e4:	10c00005 	stb	r3,0(r2)
			printf("top right");
 40013e8:	010100b4 	movhi	r4,1026
 40013ec:	2114c604 	addi	r4,r4,21272
 40013f0:	40140980 	call	4014098 <printf>
 40013f4:	00007906 	br	40015dc <create_background+0x36c>
		}
		else if(row == 0 && (col > 20 && col < 59) && col % 2 == 0){
 40013f8:	e0bfff17 	ldw	r2,-4(fp)
 40013fc:	10001a1e 	bne	r2,zero,4001468 <create_background+0x1f8>
 4001400:	e0bffe17 	ldw	r2,-8(fp)
 4001404:	10800550 	cmplti	r2,r2,21
 4001408:	1000171e 	bne	r2,zero,4001468 <create_background+0x1f8>
 400140c:	e0bffe17 	ldw	r2,-8(fp)
 4001410:	10800ec8 	cmpgei	r2,r2,59
 4001414:	1000141e 	bne	r2,zero,4001468 <create_background+0x1f8>
 4001418:	e0bffe17 	ldw	r2,-8(fp)
 400141c:	1080004c 	andi	r2,r2,1
 4001420:	1000111e 	bne	r2,zero,4001468 <create_background+0x1f8>
//			vga_ctrl -> VRAM[i * 2] = 0x007F; //top right
			vga_ctrl->VRAM[i * 2] = 0xDF;
 4001424:	d0e00317 	ldw	r3,-32756(gp)
 4001428:	e0bffd17 	ldw	r2,-12(fp)
 400142c:	1085883a 	add	r2,r2,r2
 4001430:	1885883a 	add	r2,r3,r2
 4001434:	00fff7c4 	movi	r3,-33
 4001438:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = ']';
 400143c:	d0e00317 	ldw	r3,-32756(gp)
 4001440:	e0bffd17 	ldw	r2,-12(fp)
 4001444:	1085883a 	add	r2,r2,r2
 4001448:	10800044 	addi	r2,r2,1
 400144c:	1885883a 	add	r2,r3,r2
 4001450:	00c01744 	movi	r3,93
 4001454:	10c00005 	stb	r3,0(r2)
			printf("top right");
 4001458:	010100b4 	movhi	r4,1026
 400145c:	2114c604 	addi	r4,r4,21272
 4001460:	40140980 	call	4014098 <printf>
 4001464:	00005d06 	br	40015dc <create_background+0x36c>
		}
		else if(row == 0 && (col > 20 && col < 59) && col % 2 == 1){
 4001468:	e0bfff17 	ldw	r2,-4(fp)
 400146c:	1000221e 	bne	r2,zero,40014f8 <create_background+0x288>
 4001470:	e0bffe17 	ldw	r2,-8(fp)
 4001474:	10800550 	cmplti	r2,r2,21
 4001478:	10001f1e 	bne	r2,zero,40014f8 <create_background+0x288>
 400147c:	e0bffe17 	ldw	r2,-8(fp)
 4001480:	10800ec8 	cmpgei	r2,r2,59
 4001484:	10001c1e 	bne	r2,zero,40014f8 <create_background+0x288>
 4001488:	e0fffe17 	ldw	r3,-8(fp)
 400148c:	00a00034 	movhi	r2,32768
 4001490:	10800044 	addi	r2,r2,1
 4001494:	1884703a 	and	r2,r3,r2
 4001498:	1000040e 	bge	r2,zero,40014ac <create_background+0x23c>
 400149c:	10bfffc4 	addi	r2,r2,-1
 40014a0:	00ffff84 	movi	r3,-2
 40014a4:	10c4b03a 	or	r2,r2,r3
 40014a8:	10800044 	addi	r2,r2,1
 40014ac:	10800058 	cmpnei	r2,r2,1
 40014b0:	1000111e 	bne	r2,zero,40014f8 <create_background+0x288>
//			vga_ctrl -> VRAM[i * 2] = 0x007F; //top right
			vga_ctrl->VRAM[i * 2] = 0xDF;
 40014b4:	d0e00317 	ldw	r3,-32756(gp)
 40014b8:	e0bffd17 	ldw	r2,-12(fp)
 40014bc:	1085883a 	add	r2,r2,r2
 40014c0:	1885883a 	add	r2,r3,r2
 40014c4:	00fff7c4 	movi	r3,-33
 40014c8:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = '[';
 40014cc:	d0e00317 	ldw	r3,-32756(gp)
 40014d0:	e0bffd17 	ldw	r2,-12(fp)
 40014d4:	1085883a 	add	r2,r2,r2
 40014d8:	10800044 	addi	r2,r2,1
 40014dc:	1885883a 	add	r2,r3,r2
 40014e0:	00c016c4 	movi	r3,91
 40014e4:	10c00005 	stb	r3,0(r2)
			printf("top right");
 40014e8:	010100b4 	movhi	r4,1026
 40014ec:	2114c604 	addi	r4,r4,21272
 40014f0:	40140980 	call	4014098 <printf>
 40014f4:	00003906 	br	40015dc <create_background+0x36c>
		}
		else if (col > 20 && col < 59 && row > 0 && row < 30){
 40014f8:	e0bffe17 	ldw	r2,-8(fp)
 40014fc:	10800550 	cmplti	r2,r2,21
 4001500:	1000311e 	bne	r2,zero,40015c8 <create_background+0x358>
 4001504:	e0bffe17 	ldw	r2,-8(fp)
 4001508:	10800ec8 	cmpgei	r2,r2,59
 400150c:	10002e1e 	bne	r2,zero,40015c8 <create_background+0x358>
 4001510:	e0bfff17 	ldw	r2,-4(fp)
 4001514:	00802c0e 	bge	zero,r2,40015c8 <create_background+0x358>
 4001518:	e0bfff17 	ldw	r2,-4(fp)
 400151c:	10800788 	cmpgei	r2,r2,30
 4001520:	1000291e 	bne	r2,zero,40015c8 <create_background+0x358>
			if(col % 2 == 0){
 4001524:	e0bffe17 	ldw	r2,-8(fp)
 4001528:	1080004c 	andi	r2,r2,1
 400152c:	10000d1e 	bne	r2,zero,4001564 <create_background+0x2f4>
				vga_ctrl->VRAM[i * 2] = 0x10;
 4001530:	d0e00317 	ldw	r3,-32756(gp)
 4001534:	e0bffd17 	ldw	r2,-12(fp)
 4001538:	1085883a 	add	r2,r2,r2
 400153c:	1885883a 	add	r2,r3,r2
 4001540:	00c00404 	movi	r3,16
 4001544:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[i * 2 + 1] = ']';
 4001548:	d0e00317 	ldw	r3,-32756(gp)
 400154c:	e0bffd17 	ldw	r2,-12(fp)
 4001550:	1085883a 	add	r2,r2,r2
 4001554:	10800044 	addi	r2,r2,1
 4001558:	1885883a 	add	r2,r3,r2
 400155c:	00c01744 	movi	r3,93
 4001560:	10c00005 	stb	r3,0(r2)
			}
			if(col % 2 == 1){
 4001564:	e0fffe17 	ldw	r3,-8(fp)
 4001568:	00a00034 	movhi	r2,32768
 400156c:	10800044 	addi	r2,r2,1
 4001570:	1884703a 	and	r2,r3,r2
 4001574:	1000040e 	bge	r2,zero,4001588 <create_background+0x318>
 4001578:	10bfffc4 	addi	r2,r2,-1
 400157c:	00ffff84 	movi	r3,-2
 4001580:	10c4b03a 	or	r2,r2,r3
 4001584:	10800044 	addi	r2,r2,1
 4001588:	10800058 	cmpnei	r2,r2,1
 400158c:	1000131e 	bne	r2,zero,40015dc <create_background+0x36c>
				vga_ctrl->VRAM[i * 2] = 0x10;
 4001590:	d0e00317 	ldw	r3,-32756(gp)
 4001594:	e0bffd17 	ldw	r2,-12(fp)
 4001598:	1085883a 	add	r2,r2,r2
 400159c:	1885883a 	add	r2,r3,r2
 40015a0:	00c00404 	movi	r3,16
 40015a4:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[i * 2 + 1] = '[';
 40015a8:	d0e00317 	ldw	r3,-32756(gp)
 40015ac:	e0bffd17 	ldw	r2,-12(fp)
 40015b0:	1085883a 	add	r2,r2,r2
 40015b4:	10800044 	addi	r2,r2,1
 40015b8:	1885883a 	add	r2,r3,r2
 40015bc:	00c016c4 	movi	r3,91
 40015c0:	10c00005 	stb	r3,0(r2)
		else if (col > 20 && col < 59 && row > 0 && row < 30){
			if(col % 2 == 0){
				vga_ctrl->VRAM[i * 2] = 0x10;
				vga_ctrl->VRAM[i * 2 + 1] = ']';
			}
			if(col % 2 == 1){
 40015c4:	00000506 	br	40015dc <create_background+0x36c>
				vga_ctrl->VRAM[i * 2] = 0x10;
				vga_ctrl->VRAM[i * 2 + 1] = '[';
			}
		}
		else{
			vga_ctrl->VRAM[i * 2] = 0x00;
 40015c8:	d0e00317 	ldw	r3,-32756(gp)
 40015cc:	e0bffd17 	ldw	r2,-12(fp)
 40015d0:	1085883a 	add	r2,r2,r2
 40015d4:	1885883a 	add	r2,r3,r2
 40015d8:	10000005 	stb	zero,0(r2)
}

void create_background(){
	int col = 0;
	int row = 0;
	for(int i = 0; i < 2400; i++){
 40015dc:	e0bffd17 	ldw	r2,-12(fp)
 40015e0:	10800044 	addi	r2,r2,1
 40015e4:	e0bffd15 	stw	r2,-12(fp)
 40015e8:	e0bffd17 	ldw	r2,-12(fp)
 40015ec:	10825810 	cmplti	r2,r2,2400
 40015f0:	103f271e 	bne	r2,zero,4001290 <__alt_mem_onchip_memory2_0+0xfbffc0d0>
//		count2++;
//		count3++;
//		count4++;
	}

}
 40015f4:	0001883a 	nop
 40015f8:	e037883a 	mov	sp,fp
 40015fc:	dfc00117 	ldw	ra,4(sp)
 4001600:	df000017 	ldw	fp,0(sp)
 4001604:	dec00204 	addi	sp,sp,8
 4001608:	f800283a 	ret

0400160c <dropSquare>:

void dropSquare() {
 400160c:	deffed04 	addi	sp,sp,-76
 4001610:	dfc01215 	stw	ra,72(sp)
 4001614:	df001115 	stw	fp,68(sp)
 4001618:	dc401015 	stw	r17,64(sp)
 400161c:	dc000f15 	stw	r16,60(sp)
 4001620:	df001104 	addi	fp,sp,68
	BYTE keycode;
    int count = 0;
 4001624:	e03fef15 	stw	zero,-68(fp)
    int randomStart = rand()%36+21;
 4001628:	40141e00 	call	40141e0 <rand>
 400162c:	01400904 	movi	r5,36
 4001630:	1009883a 	mov	r4,r2
 4001634:	40117040 	call	4011704 <__modsi3>
 4001638:	10800544 	addi	r2,r2,21
 400163c:	e0bff015 	stw	r2,-64(fp)
    if(randomStart % 2 == 0){
 4001640:	e0bff017 	ldw	r2,-64(fp)
 4001644:	1080004c 	andi	r2,r2,1
 4001648:	10000a1e 	bne	r2,zero,4001674 <dropSquare+0x68>
    	if(randomStart == 56){
 400164c:	e0bff017 	ldw	r2,-64(fp)
 4001650:	10800e18 	cmpnei	r2,r2,56
 4001654:	1000041e 	bne	r2,zero,4001668 <dropSquare+0x5c>
    		randomStart--;
 4001658:	e0bff017 	ldw	r2,-64(fp)
 400165c:	10bfffc4 	addi	r2,r2,-1
 4001660:	e0bff015 	stw	r2,-64(fp)
 4001664:	00000306 	br	4001674 <dropSquare+0x68>
    	}else{
    		randomStart++;
 4001668:	e0bff017 	ldw	r2,-64(fp)
 400166c:	10800044 	addi	r2,r2,1
 4001670:	e0bff015 	stw	r2,-64(fp)
    	}
    }
    int time = timer;
 4001674:	d0a80117 	ldw	r2,-24572(gp)
 4001678:	e0bff115 	stw	r2,-60(fp)
    int randomEnd = randomStart + 4;
 400167c:	e0bff017 	ldw	r2,-64(fp)
 4001680:	10800104 	addi	r2,r2,4
 4001684:	e0bff215 	stw	r2,-56(fp)
//    int oldStart = randomStart;
//    int oldEnd = randomEnd;
    checkEndGame(randomStart, randomEnd, 2);
 4001688:	01800084 	movi	r6,2
 400168c:	e17ff217 	ldw	r5,-56(fp)
 4001690:	e13ff017 	ldw	r4,-64(fp)
 4001694:	400dfd80 	call	400dfd8 <checkEndGame>
    for (int i = 2; i < 30; i++) {
 4001698:	00800084 	movi	r2,2
 400169c:	e0bff315 	stw	r2,-52(fp)
 40016a0:	00019606 	br	4001cfc <dropSquare+0x6f0>
        if (count == 0) {
 40016a4:	e0bfef17 	ldw	r2,-68(fp)
 40016a8:	1000311e 	bne	r2,zero,4001770 <dropSquare+0x164>
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;

        	for (int rowToAdd = 0; rowToAdd < 2; rowToAdd++) {
 40016ac:	e03ff415 	stw	zero,-48(fp)
 40016b0:	00002b06 	br	4001760 <dropSquare+0x154>
				for (int j = randomStart; j < randomEnd; j++) {
 40016b4:	e0bff017 	ldw	r2,-64(fp)
 40016b8:	e0bff515 	stw	r2,-44(fp)
 40016bc:	00002206 	br	4001748 <dropSquare+0x13c>
					vga_ctrl->VRAM[((i - rowToAdd) * 80 + j) * 2] = 0xDE;
 40016c0:	d4200317 	ldw	r16,-32756(gp)
 40016c4:	e0fff317 	ldw	r3,-52(fp)
 40016c8:	e0bff417 	ldw	r2,-48(fp)
 40016cc:	1885c83a 	sub	r2,r3,r2
 40016d0:	01401404 	movi	r5,80
 40016d4:	1009883a 	mov	r4,r2
 40016d8:	40118340 	call	4011834 <__mulsi3>
 40016dc:	1007883a 	mov	r3,r2
 40016e0:	e0bff517 	ldw	r2,-44(fp)
 40016e4:	1885883a 	add	r2,r3,r2
 40016e8:	1085883a 	add	r2,r2,r2
 40016ec:	8085883a 	add	r2,r16,r2
 40016f0:	00fff784 	movi	r3,-34
 40016f4:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - rowToAdd) * 80 + j) * 2 + 1] = check_col(j);
 40016f8:	d4600317 	ldw	r17,-32756(gp)
 40016fc:	e0fff317 	ldw	r3,-52(fp)
 4001700:	e0bff417 	ldw	r2,-48(fp)
 4001704:	1885c83a 	sub	r2,r3,r2
 4001708:	01401404 	movi	r5,80
 400170c:	1009883a 	mov	r4,r2
 4001710:	40118340 	call	4011834 <__mulsi3>
 4001714:	1007883a 	mov	r3,r2
 4001718:	e0bff517 	ldw	r2,-44(fp)
 400171c:	1885883a 	add	r2,r3,r2
 4001720:	1085883a 	add	r2,r2,r2
 4001724:	14000044 	addi	r16,r2,1
 4001728:	e13ff517 	ldw	r4,-44(fp)
 400172c:	400d8600 	call	400d860 <check_col>
 4001730:	1007883a 	mov	r3,r2
 4001734:	8c05883a 	add	r2,r17,r16
 4001738:	10c00005 	stb	r3,0(r2)
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;

        	for (int rowToAdd = 0; rowToAdd < 2; rowToAdd++) {
				for (int j = randomStart; j < randomEnd; j++) {
 400173c:	e0bff517 	ldw	r2,-44(fp)
 4001740:	10800044 	addi	r2,r2,1
 4001744:	e0bff515 	stw	r2,-44(fp)
 4001748:	e0fff517 	ldw	r3,-44(fp)
 400174c:	e0bff217 	ldw	r2,-56(fp)
 4001750:	18bfdb16 	blt	r3,r2,40016c0 <__alt_mem_onchip_memory2_0+0xfbffc500>
        if (count == 0) {
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;

        	for (int rowToAdd = 0; rowToAdd < 2; rowToAdd++) {
 4001754:	e0bff417 	ldw	r2,-48(fp)
 4001758:	10800044 	addi	r2,r2,1
 400175c:	e0bff415 	stw	r2,-48(fp)
 4001760:	e0bff417 	ldw	r2,-48(fp)
 4001764:	10800090 	cmplti	r2,r2,2
 4001768:	103fd21e 	bne	r2,zero,40016b4 <__alt_mem_onchip_memory2_0+0xfbffc4f4>
 400176c:	00015a06 	br	4001cd8 <dropSquare+0x6cc>
				}
        	}


        } else {
        	for(int j = randomStart; j < randomEnd; j++){
 4001770:	e0bff017 	ldw	r2,-64(fp)
 4001774:	e0bff615 	stw	r2,-40(fp)
 4001778:	00005806 	br	40018dc <dropSquare+0x2d0>
        		if(grid[i][j] == 1){
 400177c:	040100f4 	movhi	r16,1027
 4001780:	84262204 	addi	r16,r16,-26488
 4001784:	e0bff317 	ldw	r2,-52(fp)
 4001788:	01400984 	movi	r5,38
 400178c:	1009883a 	mov	r4,r2
 4001790:	40118340 	call	4011834 <__mulsi3>
 4001794:	1007883a 	mov	r3,r2
 4001798:	e0bff617 	ldw	r2,-40(fp)
 400179c:	1885883a 	add	r2,r3,r2
 40017a0:	1085883a 	add	r2,r2,r2
 40017a4:	1085883a 	add	r2,r2,r2
 40017a8:	8085883a 	add	r2,r16,r2
 40017ac:	10800017 	ldw	r2,0(r2)
 40017b0:	10800058 	cmpnei	r2,r2,1
 40017b4:	1000461e 	bne	r2,zero,40018d0 <dropSquare+0x2c4>
        			for(int k = randomStart; k < randomEnd; k++){
 40017b8:	e0bff017 	ldw	r2,-64(fp)
 40017bc:	e0bff715 	stw	r2,-36(fp)
 40017c0:	00003f06 	br	40018c0 <dropSquare+0x2b4>
        				grid[i-1][k] = 1;
 40017c4:	e0bff317 	ldw	r2,-52(fp)
 40017c8:	10bfffc4 	addi	r2,r2,-1
 40017cc:	040100f4 	movhi	r16,1027
 40017d0:	84262204 	addi	r16,r16,-26488
 40017d4:	01400984 	movi	r5,38
 40017d8:	1009883a 	mov	r4,r2
 40017dc:	40118340 	call	4011834 <__mulsi3>
 40017e0:	1007883a 	mov	r3,r2
 40017e4:	e0bff717 	ldw	r2,-36(fp)
 40017e8:	1885883a 	add	r2,r3,r2
 40017ec:	1085883a 	add	r2,r2,r2
 40017f0:	1085883a 	add	r2,r2,r2
 40017f4:	8085883a 	add	r2,r16,r2
 40017f8:	00c00044 	movi	r3,1
 40017fc:	10c00015 	stw	r3,0(r2)
        				grid[i-2][k] = 1;
 4001800:	e0bff317 	ldw	r2,-52(fp)
 4001804:	10bfff84 	addi	r2,r2,-2
 4001808:	040100f4 	movhi	r16,1027
 400180c:	84262204 	addi	r16,r16,-26488
 4001810:	01400984 	movi	r5,38
 4001814:	1009883a 	mov	r4,r2
 4001818:	40118340 	call	4011834 <__mulsi3>
 400181c:	1007883a 	mov	r3,r2
 4001820:	e0bff717 	ldw	r2,-36(fp)
 4001824:	1885883a 	add	r2,r3,r2
 4001828:	1085883a 	add	r2,r2,r2
 400182c:	1085883a 	add	r2,r2,r2
 4001830:	8085883a 	add	r2,r16,r2
 4001834:	00c00044 	movi	r3,1
 4001838:	10c00015 	stw	r3,0(r2)
        				rowCount[i-1]++;
 400183c:	e0bff317 	ldw	r2,-52(fp)
 4001840:	10bfffc4 	addi	r2,r2,-1
 4001844:	00c100f4 	movhi	r3,1027
 4001848:	18e60404 	addi	r3,r3,-26608
 400184c:	1089883a 	add	r4,r2,r2
 4001850:	2109883a 	add	r4,r4,r4
 4001854:	1907883a 	add	r3,r3,r4
 4001858:	18c00017 	ldw	r3,0(r3)
 400185c:	19000044 	addi	r4,r3,1
 4001860:	00c100f4 	movhi	r3,1027
 4001864:	18e60404 	addi	r3,r3,-26608
 4001868:	1085883a 	add	r2,r2,r2
 400186c:	1085883a 	add	r2,r2,r2
 4001870:	1885883a 	add	r2,r3,r2
 4001874:	11000015 	stw	r4,0(r2)
        				rowCount[i-2]++;
 4001878:	e0bff317 	ldw	r2,-52(fp)
 400187c:	10bfff84 	addi	r2,r2,-2
 4001880:	00c100f4 	movhi	r3,1027
 4001884:	18e60404 	addi	r3,r3,-26608
 4001888:	1089883a 	add	r4,r2,r2
 400188c:	2109883a 	add	r4,r4,r4
 4001890:	1907883a 	add	r3,r3,r4
 4001894:	18c00017 	ldw	r3,0(r3)
 4001898:	19000044 	addi	r4,r3,1
 400189c:	00c100f4 	movhi	r3,1027
 40018a0:	18e60404 	addi	r3,r3,-26608
 40018a4:	1085883a 	add	r2,r2,r2
 40018a8:	1085883a 	add	r2,r2,r2
 40018ac:	1885883a 	add	r2,r3,r2
 40018b0:	11000015 	stw	r4,0(r2)


        } else {
        	for(int j = randomStart; j < randomEnd; j++){
        		if(grid[i][j] == 1){
        			for(int k = randomStart; k < randomEnd; k++){
 40018b4:	e0bff717 	ldw	r2,-36(fp)
 40018b8:	10800044 	addi	r2,r2,1
 40018bc:	e0bff715 	stw	r2,-36(fp)
 40018c0:	e0fff717 	ldw	r3,-36(fp)
 40018c4:	e0bff217 	ldw	r2,-56(fp)
 40018c8:	18bfbe16 	blt	r3,r2,40017c4 <__alt_mem_onchip_memory2_0+0xfbffc604>
        				grid[i-1][k] = 1;
        				grid[i-2][k] = 1;
        				rowCount[i-1]++;
        				rowCount[i-2]++;
        			}
        			return;
 40018cc:	00013706 	br	4001dac <dropSquare+0x7a0>
				}
        	}


        } else {
        	for(int j = randomStart; j < randomEnd; j++){
 40018d0:	e0bff617 	ldw	r2,-40(fp)
 40018d4:	10800044 	addi	r2,r2,1
 40018d8:	e0bff615 	stw	r2,-40(fp)
 40018dc:	e0fff617 	ldw	r3,-40(fp)
 40018e0:	e0bff217 	ldw	r2,-56(fp)
 40018e4:	18bfa516 	blt	r3,r2,400177c <__alt_mem_onchip_memory2_0+0xfbffc5bc>
////        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x00;
//            		vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x10;
//            		vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
//
//        	}
        	i--;
 40018e8:	e0bff317 	ldw	r2,-52(fp)
 40018ec:	10bfffc4 	addi	r2,r2,-1
 40018f0:	e0bff315 	stw	r2,-52(fp)
        	for (int j = randomStart; j < randomEnd; j++) {
 40018f4:	e0bff017 	ldw	r2,-64(fp)
 40018f8:	e0bff815 	stw	r2,-32(fp)
 40018fc:	00002006 	br	4001980 <dropSquare+0x374>
//        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x00;
					vga_ctrl->VRAM[((i-1) * 80 + j) * 2] = 0x10;
 4001900:	d4200317 	ldw	r16,-32756(gp)
 4001904:	e0bff317 	ldw	r2,-52(fp)
 4001908:	10bfffc4 	addi	r2,r2,-1
 400190c:	01401404 	movi	r5,80
 4001910:	1009883a 	mov	r4,r2
 4001914:	40118340 	call	4011834 <__mulsi3>
 4001918:	1007883a 	mov	r3,r2
 400191c:	e0bff817 	ldw	r2,-32(fp)
 4001920:	1885883a 	add	r2,r3,r2
 4001924:	1085883a 	add	r2,r2,r2
 4001928:	8085883a 	add	r2,r16,r2
 400192c:	00c00404 	movi	r3,16
 4001930:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i-1) * 80 + j) * 2 + 1] = check_col(j);
 4001934:	d4600317 	ldw	r17,-32756(gp)
 4001938:	e0bff317 	ldw	r2,-52(fp)
 400193c:	10bfffc4 	addi	r2,r2,-1
 4001940:	01401404 	movi	r5,80
 4001944:	1009883a 	mov	r4,r2
 4001948:	40118340 	call	4011834 <__mulsi3>
 400194c:	1007883a 	mov	r3,r2
 4001950:	e0bff817 	ldw	r2,-32(fp)
 4001954:	1885883a 	add	r2,r3,r2
 4001958:	1085883a 	add	r2,r2,r2
 400195c:	14000044 	addi	r16,r2,1
 4001960:	e13ff817 	ldw	r4,-32(fp)
 4001964:	400d8600 	call	400d860 <check_col>
 4001968:	1007883a 	mov	r3,r2
 400196c:	8c05883a 	add	r2,r17,r16
 4001970:	10c00005 	stb	r3,0(r2)
//            		vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x10;
//            		vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
//
//        	}
        	i--;
        	for (int j = randomStart; j < randomEnd; j++) {
 4001974:	e0bff817 	ldw	r2,-32(fp)
 4001978:	10800044 	addi	r2,r2,1
 400197c:	e0bff815 	stw	r2,-32(fp)
 4001980:	e0fff817 	ldw	r3,-32(fp)
 4001984:	e0bff217 	ldw	r2,-56(fp)
 4001988:	18bfdd16 	blt	r3,r2,4001900 <__alt_mem_onchip_memory2_0+0xfbffc740>
//        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x00;
					vga_ctrl->VRAM[((i-1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i-1) * 80 + j) * 2 + 1] = check_col(j);

			}
        	for (int j = randomStart; j < randomEnd; j++) {
 400198c:	e0bff017 	ldw	r2,-64(fp)
 4001990:	e0bff915 	stw	r2,-28(fp)
 4001994:	00001c06 	br	4001a08 <dropSquare+0x3fc>
//        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x00;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
 4001998:	d4200317 	ldw	r16,-32756(gp)
 400199c:	01401404 	movi	r5,80
 40019a0:	e13ff317 	ldw	r4,-52(fp)
 40019a4:	40118340 	call	4011834 <__mulsi3>
 40019a8:	1007883a 	mov	r3,r2
 40019ac:	e0bff917 	ldw	r2,-28(fp)
 40019b0:	1885883a 	add	r2,r3,r2
 40019b4:	1085883a 	add	r2,r2,r2
 40019b8:	8085883a 	add	r2,r16,r2
 40019bc:	00c00404 	movi	r3,16
 40019c0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 40019c4:	d4600317 	ldw	r17,-32756(gp)
 40019c8:	01401404 	movi	r5,80
 40019cc:	e13ff317 	ldw	r4,-52(fp)
 40019d0:	40118340 	call	4011834 <__mulsi3>
 40019d4:	1007883a 	mov	r3,r2
 40019d8:	e0bff917 	ldw	r2,-28(fp)
 40019dc:	1885883a 	add	r2,r3,r2
 40019e0:	1085883a 	add	r2,r2,r2
 40019e4:	14000044 	addi	r16,r2,1
 40019e8:	e13ff917 	ldw	r4,-28(fp)
 40019ec:	400d8600 	call	400d860 <check_col>
 40019f0:	1007883a 	mov	r3,r2
 40019f4:	8c05883a 	add	r2,r17,r16
 40019f8:	10c00005 	stb	r3,0(r2)
//        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x00;
					vga_ctrl->VRAM[((i-1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i-1) * 80 + j) * 2 + 1] = check_col(j);

			}
        	for (int j = randomStart; j < randomEnd; j++) {
 40019fc:	e0bff917 	ldw	r2,-28(fp)
 4001a00:	10800044 	addi	r2,r2,1
 4001a04:	e0bff915 	stw	r2,-28(fp)
 4001a08:	e0fff917 	ldw	r3,-28(fp)
 4001a0c:	e0bff217 	ldw	r2,-56(fp)
 4001a10:	18bfe116 	blt	r3,r2,4001998 <__alt_mem_onchip_memory2_0+0xfbffc7d8>
//        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x00;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);

			}
        	i++;
 4001a14:	e0bff317 	ldw	r2,-52(fp)
 4001a18:	10800044 	addi	r2,r2,1
 4001a1c:	e0bff315 	stw	r2,-52(fp)
//				for (int j = oldStart; j < oldEnd; j++) {
//					vga_ctrl->VRAM[((i + rowToAdd) * 80 + j) * 2] = 0x10;
//					vga_ctrl->VRAM[((i + rowToAdd) * 80 + j) * 2 + 1] = check_col(j);
//				}
//			}
        	keycode = keyboard_input();
 4001a20:	40007d00 	call	40007d0 <keyboard_input>
 4001a24:	e0bffd05 	stb	r2,-12(fp)
//        	keycode = 0x00;
        	time = timer;
 4001a28:	d0a80117 	ldw	r2,-24572(gp)
 4001a2c:	e0bff115 	stw	r2,-60(fp)
        	if(keycode == 0x51){
 4001a30:	e0bffd03 	ldbu	r2,-12(fp)
 4001a34:	10801458 	cmpnei	r2,r2,81
 4001a38:	1000131e 	bne	r2,zero,4001a88 <dropSquare+0x47c>
        		time = timer / 1.5;
 4001a3c:	d0a80117 	ldw	r2,-24572(gp)
 4001a40:	1009883a 	mov	r4,r2
 4001a44:	4013f180 	call	4013f18 <__floatsidf>
 4001a48:	1011883a 	mov	r8,r2
 4001a4c:	1813883a 	mov	r9,r3
 4001a50:	000d883a 	mov	r6,zero
 4001a54:	01cffe34 	movhi	r7,16376
 4001a58:	4009883a 	mov	r4,r8
 4001a5c:	480b883a 	mov	r5,r9
 4001a60:	40121080 	call	4012108 <__divdf3>
 4001a64:	1009883a 	mov	r4,r2
 4001a68:	180b883a 	mov	r5,r3
 4001a6c:	2005883a 	mov	r2,r4
 4001a70:	2807883a 	mov	r3,r5
 4001a74:	1009883a 	mov	r4,r2
 4001a78:	180b883a 	mov	r5,r3
 4001a7c:	4013e980 	call	4013e98 <__fixdfsi>
 4001a80:	e0bff115 	stw	r2,-60(fp)
 4001a84:	00006406 	br	4001c18 <dropSquare+0x60c>
			}
			else if(keycode == 0x4F){
 4001a88:	e0bffd03 	ldbu	r2,-12(fp)
 4001a8c:	108013d8 	cmpnei	r2,r2,79
 4001a90:	10002d1e 	bne	r2,zero,4001b48 <dropSquare+0x53c>
//				i++;
				if(randomEnd != 59 && grid[i - 1][randomEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1){
 4001a94:	e0bff217 	ldw	r2,-56(fp)
 4001a98:	10800ee0 	cmpeqi	r2,r2,59
 4001a9c:	10005e1e 	bne	r2,zero,4001c18 <dropSquare+0x60c>
 4001aa0:	e0bff317 	ldw	r2,-52(fp)
 4001aa4:	10ffffc4 	addi	r3,r2,-1
 4001aa8:	e0bff217 	ldw	r2,-56(fp)
 4001aac:	14400044 	addi	r17,r2,1
 4001ab0:	040100f4 	movhi	r16,1027
 4001ab4:	84262204 	addi	r16,r16,-26488
 4001ab8:	01400984 	movi	r5,38
 4001abc:	1809883a 	mov	r4,r3
 4001ac0:	40118340 	call	4011834 <__mulsi3>
 4001ac4:	1445883a 	add	r2,r2,r17
 4001ac8:	1085883a 	add	r2,r2,r2
 4001acc:	1085883a 	add	r2,r2,r2
 4001ad0:	8085883a 	add	r2,r16,r2
 4001ad4:	10800017 	ldw	r2,0(r2)
 4001ad8:	10800060 	cmpeqi	r2,r2,1
 4001adc:	10004e1e 	bne	r2,zero,4001c18 <dropSquare+0x60c>
 4001ae0:	e0bff317 	ldw	r2,-52(fp)
 4001ae4:	10ffff84 	addi	r3,r2,-2
 4001ae8:	e0bff217 	ldw	r2,-56(fp)
 4001aec:	14400044 	addi	r17,r2,1
 4001af0:	040100f4 	movhi	r16,1027
 4001af4:	84262204 	addi	r16,r16,-26488
 4001af8:	01400984 	movi	r5,38
 4001afc:	1809883a 	mov	r4,r3
 4001b00:	40118340 	call	4011834 <__mulsi3>
 4001b04:	1445883a 	add	r2,r2,r17
 4001b08:	1085883a 	add	r2,r2,r2
 4001b0c:	1085883a 	add	r2,r2,r2
 4001b10:	8085883a 	add	r2,r16,r2
 4001b14:	10800017 	ldw	r2,0(r2)
 4001b18:	10800060 	cmpeqi	r2,r2,1
 4001b1c:	10003e1e 	bne	r2,zero,4001c18 <dropSquare+0x60c>
					randomStart += 2;
 4001b20:	e0bff017 	ldw	r2,-64(fp)
 4001b24:	10800084 	addi	r2,r2,2
 4001b28:	e0bff015 	stw	r2,-64(fp)
					randomEnd += 2;
 4001b2c:	e0bff217 	ldw	r2,-56(fp)
 4001b30:	10800084 	addi	r2,r2,2
 4001b34:	e0bff215 	stw	r2,-56(fp)
					i--;
 4001b38:	e0bff317 	ldw	r2,-52(fp)
 4001b3c:	10bfffc4 	addi	r2,r2,-1
 4001b40:	e0bff315 	stw	r2,-52(fp)
 4001b44:	00003406 	br	4001c18 <dropSquare+0x60c>
				}
			}
			else if(keycode == 0x50){
 4001b48:	e0bffd03 	ldbu	r2,-12(fp)
 4001b4c:	10801418 	cmpnei	r2,r2,80
 4001b50:	10002d1e 	bne	r2,zero,4001c08 <dropSquare+0x5fc>
//				i++;
				if(randomStart != 21 && grid[i - 1][randomStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1){
 4001b54:	e0bff017 	ldw	r2,-64(fp)
 4001b58:	10800560 	cmpeqi	r2,r2,21
 4001b5c:	10002e1e 	bne	r2,zero,4001c18 <dropSquare+0x60c>
 4001b60:	e0bff317 	ldw	r2,-52(fp)
 4001b64:	10ffffc4 	addi	r3,r2,-1
 4001b68:	e0bff017 	ldw	r2,-64(fp)
 4001b6c:	147fffc4 	addi	r17,r2,-1
 4001b70:	040100f4 	movhi	r16,1027
 4001b74:	84262204 	addi	r16,r16,-26488
 4001b78:	01400984 	movi	r5,38
 4001b7c:	1809883a 	mov	r4,r3
 4001b80:	40118340 	call	4011834 <__mulsi3>
 4001b84:	1445883a 	add	r2,r2,r17
 4001b88:	1085883a 	add	r2,r2,r2
 4001b8c:	1085883a 	add	r2,r2,r2
 4001b90:	8085883a 	add	r2,r16,r2
 4001b94:	10800017 	ldw	r2,0(r2)
 4001b98:	10800060 	cmpeqi	r2,r2,1
 4001b9c:	10001e1e 	bne	r2,zero,4001c18 <dropSquare+0x60c>
 4001ba0:	e0bff317 	ldw	r2,-52(fp)
 4001ba4:	10ffff84 	addi	r3,r2,-2
 4001ba8:	e0bff017 	ldw	r2,-64(fp)
 4001bac:	147fffc4 	addi	r17,r2,-1
 4001bb0:	040100f4 	movhi	r16,1027
 4001bb4:	84262204 	addi	r16,r16,-26488
 4001bb8:	01400984 	movi	r5,38
 4001bbc:	1809883a 	mov	r4,r3
 4001bc0:	40118340 	call	4011834 <__mulsi3>
 4001bc4:	1445883a 	add	r2,r2,r17
 4001bc8:	1085883a 	add	r2,r2,r2
 4001bcc:	1085883a 	add	r2,r2,r2
 4001bd0:	8085883a 	add	r2,r16,r2
 4001bd4:	10800017 	ldw	r2,0(r2)
 4001bd8:	10800060 	cmpeqi	r2,r2,1
 4001bdc:	10000e1e 	bne	r2,zero,4001c18 <dropSquare+0x60c>
					randomStart -= 2;
 4001be0:	e0bff017 	ldw	r2,-64(fp)
 4001be4:	10bfff84 	addi	r2,r2,-2
 4001be8:	e0bff015 	stw	r2,-64(fp)
					randomEnd -= 2;
 4001bec:	e0bff217 	ldw	r2,-56(fp)
 4001bf0:	10bfff84 	addi	r2,r2,-2
 4001bf4:	e0bff215 	stw	r2,-56(fp)
					i--;
 4001bf8:	e0bff317 	ldw	r2,-52(fp)
 4001bfc:	10bfffc4 	addi	r2,r2,-1
 4001c00:	e0bff315 	stw	r2,-52(fp)
 4001c04:	00000406 	br	4001c18 <dropSquare+0x60c>
				}
			}else if(keycode == 0x2C){
 4001c08:	e0bffd03 	ldbu	r2,-12(fp)
 4001c0c:	10800b18 	cmpnei	r2,r2,44
 4001c10:	1000011e 	bne	r2,zero,4001c18 <dropSquare+0x60c>
				time = 0;
 4001c14:	e03ff115 	stw	zero,-60(fp)
			}
//        	oldStart = randomStart;
//        	oldEnd = randomEnd;

        	for (int rowToAdd = 0; rowToAdd < 2; rowToAdd++) {
 4001c18:	e03ffa15 	stw	zero,-24(fp)
 4001c1c:	00002b06 	br	4001ccc <dropSquare+0x6c0>
				for (int j =randomStart; j < randomEnd; j++) {
 4001c20:	e0bff017 	ldw	r2,-64(fp)
 4001c24:	e0bffb15 	stw	r2,-20(fp)
 4001c28:	00002206 	br	4001cb4 <dropSquare+0x6a8>
//					vga_ctrl->VRAM[((i + rowToAdd) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - rowToAdd) * 80 + j) * 2] = 0xDE;
 4001c2c:	d4200317 	ldw	r16,-32756(gp)
 4001c30:	e0fff317 	ldw	r3,-52(fp)
 4001c34:	e0bffa17 	ldw	r2,-24(fp)
 4001c38:	1885c83a 	sub	r2,r3,r2
 4001c3c:	01401404 	movi	r5,80
 4001c40:	1009883a 	mov	r4,r2
 4001c44:	40118340 	call	4011834 <__mulsi3>
 4001c48:	1007883a 	mov	r3,r2
 4001c4c:	e0bffb17 	ldw	r2,-20(fp)
 4001c50:	1885883a 	add	r2,r3,r2
 4001c54:	1085883a 	add	r2,r2,r2
 4001c58:	8085883a 	add	r2,r16,r2
 4001c5c:	00fff784 	movi	r3,-34
 4001c60:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - rowToAdd) * 80 + j) * 2 + 1] = check_col(j);
 4001c64:	d4600317 	ldw	r17,-32756(gp)
 4001c68:	e0fff317 	ldw	r3,-52(fp)
 4001c6c:	e0bffa17 	ldw	r2,-24(fp)
 4001c70:	1885c83a 	sub	r2,r3,r2
 4001c74:	01401404 	movi	r5,80
 4001c78:	1009883a 	mov	r4,r2
 4001c7c:	40118340 	call	4011834 <__mulsi3>
 4001c80:	1007883a 	mov	r3,r2
 4001c84:	e0bffb17 	ldw	r2,-20(fp)
 4001c88:	1885883a 	add	r2,r3,r2
 4001c8c:	1085883a 	add	r2,r2,r2
 4001c90:	14000044 	addi	r16,r2,1
 4001c94:	e13ffb17 	ldw	r4,-20(fp)
 4001c98:	400d8600 	call	400d860 <check_col>
 4001c9c:	1007883a 	mov	r3,r2
 4001ca0:	8c05883a 	add	r2,r17,r16
 4001ca4:	10c00005 	stb	r3,0(r2)
			}
//        	oldStart = randomStart;
//        	oldEnd = randomEnd;

        	for (int rowToAdd = 0; rowToAdd < 2; rowToAdd++) {
				for (int j =randomStart; j < randomEnd; j++) {
 4001ca8:	e0bffb17 	ldw	r2,-20(fp)
 4001cac:	10800044 	addi	r2,r2,1
 4001cb0:	e0bffb15 	stw	r2,-20(fp)
 4001cb4:	e0fffb17 	ldw	r3,-20(fp)
 4001cb8:	e0bff217 	ldw	r2,-56(fp)
 4001cbc:	18bfdb16 	blt	r3,r2,4001c2c <__alt_mem_onchip_memory2_0+0xfbffca6c>
				time = 0;
			}
//        	oldStart = randomStart;
//        	oldEnd = randomEnd;

        	for (int rowToAdd = 0; rowToAdd < 2; rowToAdd++) {
 4001cc0:	e0bffa17 	ldw	r2,-24(fp)
 4001cc4:	10800044 	addi	r2,r2,1
 4001cc8:	e0bffa15 	stw	r2,-24(fp)
 4001ccc:	e0bffa17 	ldw	r2,-24(fp)
 4001cd0:	10800090 	cmplti	r2,r2,2
 4001cd4:	103fd21e 	bne	r2,zero,4001c20 <__alt_mem_onchip_memory2_0+0xfbffca60>
					vga_ctrl->VRAM[((i - rowToAdd) * 80 + j) * 2 + 1] = check_col(j);
				}
        	}

        }
        count++;
 4001cd8:	e0bfef17 	ldw	r2,-68(fp)
 4001cdc:	10800044 	addi	r2,r2,1
 4001ce0:	e0bfef15 	stw	r2,-68(fp)
        usleep (time);
 4001ce4:	e0bff117 	ldw	r2,-60(fp)
 4001ce8:	1009883a 	mov	r4,r2
 4001cec:	40230600 	call	4023060 <usleep>
    int time = timer;
    int randomEnd = randomStart + 4;
//    int oldStart = randomStart;
//    int oldEnd = randomEnd;
    checkEndGame(randomStart, randomEnd, 2);
    for (int i = 2; i < 30; i++) {
 4001cf0:	e0bff317 	ldw	r2,-52(fp)
 4001cf4:	10800044 	addi	r2,r2,1
 4001cf8:	e0bff315 	stw	r2,-52(fp)
 4001cfc:	e0bff317 	ldw	r2,-52(fp)
 4001d00:	10800790 	cmplti	r2,r2,30
 4001d04:	103e671e 	bne	r2,zero,40016a4 <__alt_mem_onchip_memory2_0+0xfbffc4e4>

        }
        count++;
        usleep (time);
    }
    for(int i = randomStart; i < randomEnd; i++){
 4001d08:	e0bff017 	ldw	r2,-64(fp)
 4001d0c:	e0bffc15 	stw	r2,-16(fp)
 4001d10:	00002306 	br	4001da0 <dropSquare+0x794>
    	grid[28][i] = 1;
 4001d14:	008100f4 	movhi	r2,1027
 4001d18:	10a62204 	addi	r2,r2,-26488
 4001d1c:	e0fffc17 	ldw	r3,-16(fp)
 4001d20:	18c10a04 	addi	r3,r3,1064
 4001d24:	18c7883a 	add	r3,r3,r3
 4001d28:	18c7883a 	add	r3,r3,r3
 4001d2c:	10c5883a 	add	r2,r2,r3
 4001d30:	00c00044 	movi	r3,1
 4001d34:	10c00015 	stw	r3,0(r2)
    	grid[29][i] = 1;
 4001d38:	008100f4 	movhi	r2,1027
 4001d3c:	10a62204 	addi	r2,r2,-26488
 4001d40:	e0fffc17 	ldw	r3,-16(fp)
 4001d44:	18c11384 	addi	r3,r3,1102
 4001d48:	18c7883a 	add	r3,r3,r3
 4001d4c:	18c7883a 	add	r3,r3,r3
 4001d50:	10c5883a 	add	r2,r2,r3
 4001d54:	00c00044 	movi	r3,1
 4001d58:	10c00015 	stw	r3,0(r2)
    	rowCount[29]++;
 4001d5c:	008100f4 	movhi	r2,1027
 4001d60:	10a60404 	addi	r2,r2,-26608
 4001d64:	10801d17 	ldw	r2,116(r2)
 4001d68:	10c00044 	addi	r3,r2,1
 4001d6c:	008100f4 	movhi	r2,1027
 4001d70:	10a60404 	addi	r2,r2,-26608
 4001d74:	10c01d15 	stw	r3,116(r2)
    	rowCount[28]++;
 4001d78:	008100f4 	movhi	r2,1027
 4001d7c:	10a60404 	addi	r2,r2,-26608
 4001d80:	10801c17 	ldw	r2,112(r2)
 4001d84:	10c00044 	addi	r3,r2,1
 4001d88:	008100f4 	movhi	r2,1027
 4001d8c:	10a60404 	addi	r2,r2,-26608
 4001d90:	10c01c15 	stw	r3,112(r2)

        }
        count++;
        usleep (time);
    }
    for(int i = randomStart; i < randomEnd; i++){
 4001d94:	e0bffc17 	ldw	r2,-16(fp)
 4001d98:	10800044 	addi	r2,r2,1
 4001d9c:	e0bffc15 	stw	r2,-16(fp)
 4001da0:	e0fffc17 	ldw	r3,-16(fp)
 4001da4:	e0bff217 	ldw	r2,-56(fp)
 4001da8:	18bfda16 	blt	r3,r2,4001d14 <__alt_mem_onchip_memory2_0+0xfbffcb54>
    	grid[29][i] = 1;
    	rowCount[29]++;
    	rowCount[28]++;
    }

}
 4001dac:	e6fffe04 	addi	sp,fp,-8
 4001db0:	dfc00317 	ldw	ra,12(sp)
 4001db4:	df000217 	ldw	fp,8(sp)
 4001db8:	dc400117 	ldw	r17,4(sp)
 4001dbc:	dc000017 	ldw	r16,0(sp)
 4001dc0:	dec00404 	addi	sp,sp,16
 4001dc4:	f800283a 	ret

04001dc8 <dropRectangle>:

void dropRectangle() {
 4001dc8:	deffe804 	addi	sp,sp,-96
 4001dcc:	dfc01715 	stw	ra,92(sp)
 4001dd0:	df001615 	stw	fp,88(sp)
 4001dd4:	dc401515 	stw	r17,84(sp)
 4001dd8:	dc001415 	stw	r16,80(sp)
 4001ddc:	df001604 	addi	fp,sp,88
    int count = 0;
 4001de0:	e03fea15 	stw	zero,-88(fp)
    BYTE keycode;
    int randomStart = rand()%30+21;
 4001de4:	40141e00 	call	40141e0 <rand>
 4001de8:	01400784 	movi	r5,30
 4001dec:	1009883a 	mov	r4,r2
 4001df0:	40117040 	call	4011704 <__modsi3>
 4001df4:	10800544 	addi	r2,r2,21
 4001df8:	e0bfeb15 	stw	r2,-84(fp)
    int time = timer;
 4001dfc:	d0a80117 	ldw	r2,-24572(gp)
 4001e00:	e0bfec15 	stw	r2,-80(fp)
    if(randomStart % 2 == 0){
 4001e04:	e0bfeb17 	ldw	r2,-84(fp)
 4001e08:	1080004c 	andi	r2,r2,1
 4001e0c:	10000a1e 	bne	r2,zero,4001e38 <dropRectangle+0x70>
    	if(randomStart == 50){
 4001e10:	e0bfeb17 	ldw	r2,-84(fp)
 4001e14:	10800c98 	cmpnei	r2,r2,50
 4001e18:	1000041e 	bne	r2,zero,4001e2c <dropRectangle+0x64>
    		randomStart--;
 4001e1c:	e0bfeb17 	ldw	r2,-84(fp)
 4001e20:	10bfffc4 	addi	r2,r2,-1
 4001e24:	e0bfeb15 	stw	r2,-84(fp)
 4001e28:	00000306 	br	4001e38 <dropRectangle+0x70>
    	}else{
    		randomStart++;
 4001e2c:	e0bfeb17 	ldw	r2,-84(fp)
 4001e30:	10800044 	addi	r2,r2,1
 4001e34:	e0bfeb15 	stw	r2,-84(fp)
    	}
    }

    int randomEnd = randomStart + 8;
 4001e38:	e0bfeb17 	ldw	r2,-84(fp)
 4001e3c:	10800204 	addi	r2,r2,8
 4001e40:	e0bfed15 	stw	r2,-76(fp)
    checkEndGame(randomStart, randomEnd, 1);
 4001e44:	01800044 	movi	r6,1
 4001e48:	e17fed17 	ldw	r5,-76(fp)
 4001e4c:	e13feb17 	ldw	r4,-84(fp)
 4001e50:	400dfd80 	call	400dfd8 <checkEndGame>
//    int startTwo, endTwo, startThree, endThree, startFour, endFour;
    int shapeLayout = 0; //0 = sideways, 1 = vertical
 4001e54:	e03fee15 	stw	zero,-72(fp)
    for (int i = 1; i < 30; i++) {
 4001e58:	00800044 	movi	r2,1
 4001e5c:	e0bfef15 	stw	r2,-68(fp)
 4001e60:	00031e06 	br	4002adc <dropRectangle+0xd14>
        if (count == 0) {
 4001e64:	e0bfea17 	ldw	r2,-88(fp)
 4001e68:	1000231e 	bne	r2,zero,4001ef8 <dropRectangle+0x130>
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;


			for (int j = randomStart; j < randomEnd; j++) {
 4001e6c:	e0bfeb17 	ldw	r2,-84(fp)
 4001e70:	e0bff015 	stw	r2,-64(fp)
 4001e74:	00001c06 	br	4001ee8 <dropRectangle+0x120>
				vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xB3;
 4001e78:	d4200317 	ldw	r16,-32756(gp)
 4001e7c:	01401404 	movi	r5,80
 4001e80:	e13fef17 	ldw	r4,-68(fp)
 4001e84:	40118340 	call	4011834 <__mulsi3>
 4001e88:	1007883a 	mov	r3,r2
 4001e8c:	e0bff017 	ldw	r2,-64(fp)
 4001e90:	1885883a 	add	r2,r3,r2
 4001e94:	1085883a 	add	r2,r2,r2
 4001e98:	8085883a 	add	r2,r16,r2
 4001e9c:	00ffecc4 	movi	r3,-77
 4001ea0:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 4001ea4:	d4600317 	ldw	r17,-32756(gp)
 4001ea8:	01401404 	movi	r5,80
 4001eac:	e13fef17 	ldw	r4,-68(fp)
 4001eb0:	40118340 	call	4011834 <__mulsi3>
 4001eb4:	1007883a 	mov	r3,r2
 4001eb8:	e0bff017 	ldw	r2,-64(fp)
 4001ebc:	1885883a 	add	r2,r3,r2
 4001ec0:	1085883a 	add	r2,r2,r2
 4001ec4:	14000044 	addi	r16,r2,1
 4001ec8:	e13ff017 	ldw	r4,-64(fp)
 4001ecc:	400d8600 	call	400d860 <check_col>
 4001ed0:	1007883a 	mov	r3,r2
 4001ed4:	8c05883a 	add	r2,r17,r16
 4001ed8:	10c00005 	stb	r3,0(r2)
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;


			for (int j = randomStart; j < randomEnd; j++) {
 4001edc:	e0bff017 	ldw	r2,-64(fp)
 4001ee0:	10800044 	addi	r2,r2,1
 4001ee4:	e0bff015 	stw	r2,-64(fp)
 4001ee8:	e0fff017 	ldw	r3,-64(fp)
 4001eec:	e0bfed17 	ldw	r2,-76(fp)
 4001ef0:	18bfe116 	blt	r3,r2,4001e78 <__alt_mem_onchip_memory2_0+0xfbffccb8>
 4001ef4:	0002f006 	br	4002ab8 <dropRectangle+0xcf0>



        } else {

        	if(shapeLayout == 0){
 4001ef8:	e0bfee17 	ldw	r2,-72(fp)
 4001efc:	1000411e 	bne	r2,zero,4002004 <dropRectangle+0x23c>
				for(int j = randomStart; j < randomEnd; j++){
 4001f00:	e0bfeb17 	ldw	r2,-84(fp)
 4001f04:	e0bff115 	stw	r2,-60(fp)
 4001f08:	00003a06 	br	4001ff4 <dropRectangle+0x22c>
					if(grid[i][j] == 1){
 4001f0c:	040100f4 	movhi	r16,1027
 4001f10:	84262204 	addi	r16,r16,-26488
 4001f14:	e0bfef17 	ldw	r2,-68(fp)
 4001f18:	01400984 	movi	r5,38
 4001f1c:	1009883a 	mov	r4,r2
 4001f20:	40118340 	call	4011834 <__mulsi3>
 4001f24:	1007883a 	mov	r3,r2
 4001f28:	e0bff117 	ldw	r2,-60(fp)
 4001f2c:	1885883a 	add	r2,r3,r2
 4001f30:	1085883a 	add	r2,r2,r2
 4001f34:	1085883a 	add	r2,r2,r2
 4001f38:	8085883a 	add	r2,r16,r2
 4001f3c:	10800017 	ldw	r2,0(r2)
 4001f40:	10800058 	cmpnei	r2,r2,1
 4001f44:	1000281e 	bne	r2,zero,4001fe8 <dropRectangle+0x220>
						for(int k = randomStart; k < randomEnd; k++){
 4001f48:	e0bfeb17 	ldw	r2,-84(fp)
 4001f4c:	e0bff215 	stw	r2,-56(fp)
 4001f50:	00002106 	br	4001fd8 <dropRectangle+0x210>
							grid[i-1][k] = 1;
 4001f54:	e0bfef17 	ldw	r2,-68(fp)
 4001f58:	10bfffc4 	addi	r2,r2,-1
 4001f5c:	040100f4 	movhi	r16,1027
 4001f60:	84262204 	addi	r16,r16,-26488
 4001f64:	01400984 	movi	r5,38
 4001f68:	1009883a 	mov	r4,r2
 4001f6c:	40118340 	call	4011834 <__mulsi3>
 4001f70:	1007883a 	mov	r3,r2
 4001f74:	e0bff217 	ldw	r2,-56(fp)
 4001f78:	1885883a 	add	r2,r3,r2
 4001f7c:	1085883a 	add	r2,r2,r2
 4001f80:	1085883a 	add	r2,r2,r2
 4001f84:	8085883a 	add	r2,r16,r2
 4001f88:	00c00044 	movi	r3,1
 4001f8c:	10c00015 	stw	r3,0(r2)
							rowCount[i-1]++;
 4001f90:	e0bfef17 	ldw	r2,-68(fp)
 4001f94:	10bfffc4 	addi	r2,r2,-1
 4001f98:	00c100f4 	movhi	r3,1027
 4001f9c:	18e60404 	addi	r3,r3,-26608
 4001fa0:	1089883a 	add	r4,r2,r2
 4001fa4:	2109883a 	add	r4,r4,r4
 4001fa8:	1907883a 	add	r3,r3,r4
 4001fac:	18c00017 	ldw	r3,0(r3)
 4001fb0:	19000044 	addi	r4,r3,1
 4001fb4:	00c100f4 	movhi	r3,1027
 4001fb8:	18e60404 	addi	r3,r3,-26608
 4001fbc:	1085883a 	add	r2,r2,r2
 4001fc0:	1085883a 	add	r2,r2,r2
 4001fc4:	1885883a 	add	r2,r3,r2
 4001fc8:	11000015 	stw	r4,0(r2)
        } else {

        	if(shapeLayout == 0){
				for(int j = randomStart; j < randomEnd; j++){
					if(grid[i][j] == 1){
						for(int k = randomStart; k < randomEnd; k++){
 4001fcc:	e0bff217 	ldw	r2,-56(fp)
 4001fd0:	10800044 	addi	r2,r2,1
 4001fd4:	e0bff215 	stw	r2,-56(fp)
 4001fd8:	e0fff217 	ldw	r3,-56(fp)
 4001fdc:	e0bfed17 	ldw	r2,-76(fp)
 4001fe0:	18bfdc16 	blt	r3,r2,4001f54 <__alt_mem_onchip_memory2_0+0xfbffcd94>
							grid[i-1][k] = 1;
							rowCount[i-1]++;
						}
						return;
 4001fe4:	00032806 	br	4002c88 <dropRectangle+0xec0>


        } else {

        	if(shapeLayout == 0){
				for(int j = randomStart; j < randomEnd; j++){
 4001fe8:	e0bff117 	ldw	r2,-60(fp)
 4001fec:	10800044 	addi	r2,r2,1
 4001ff0:	e0bff115 	stw	r2,-60(fp)
 4001ff4:	e0fff117 	ldw	r3,-60(fp)
 4001ff8:	e0bfed17 	ldw	r2,-76(fp)
 4001ffc:	18bfc316 	blt	r3,r2,4001f0c <__alt_mem_onchip_memory2_0+0xfbffcd4c>
 4002000:	00009d06 	br	4002278 <dropRectangle+0x4b0>
							rowCount[i-1]++;
						}
						return;
					}
				}
			}else if(shapeLayout == 1){
 4002004:	e0bfee17 	ldw	r2,-72(fp)
 4002008:	10800058 	cmpnei	r2,r2,1
 400200c:	10009a1e 	bne	r2,zero,4002278 <dropRectangle+0x4b0>
				for(int j = randomStart; j < randomEnd; j++){
 4002010:	e0bfeb17 	ldw	r2,-84(fp)
 4002014:	e0bff315 	stw	r2,-52(fp)
 4002018:	00009406 	br	400226c <dropRectangle+0x4a4>
					if(grid[i][j] == 1){
 400201c:	040100f4 	movhi	r16,1027
 4002020:	84262204 	addi	r16,r16,-26488
 4002024:	e0bfef17 	ldw	r2,-68(fp)
 4002028:	01400984 	movi	r5,38
 400202c:	1009883a 	mov	r4,r2
 4002030:	40118340 	call	4011834 <__mulsi3>
 4002034:	1007883a 	mov	r3,r2
 4002038:	e0bff317 	ldw	r2,-52(fp)
 400203c:	1885883a 	add	r2,r3,r2
 4002040:	1085883a 	add	r2,r2,r2
 4002044:	1085883a 	add	r2,r2,r2
 4002048:	8085883a 	add	r2,r16,r2
 400204c:	10800017 	ldw	r2,0(r2)
 4002050:	10800058 	cmpnei	r2,r2,1
 4002054:	1000821e 	bne	r2,zero,4002260 <dropRectangle+0x498>
						for(int k = randomStart; k < randomEnd; k++){
 4002058:	e0bfeb17 	ldw	r2,-84(fp)
 400205c:	e0bff415 	stw	r2,-48(fp)
 4002060:	00007b06 	br	4002250 <dropRectangle+0x488>
							grid[i-1][k] = 1;
 4002064:	e0bfef17 	ldw	r2,-68(fp)
 4002068:	10bfffc4 	addi	r2,r2,-1
 400206c:	040100f4 	movhi	r16,1027
 4002070:	84262204 	addi	r16,r16,-26488
 4002074:	01400984 	movi	r5,38
 4002078:	1009883a 	mov	r4,r2
 400207c:	40118340 	call	4011834 <__mulsi3>
 4002080:	1007883a 	mov	r3,r2
 4002084:	e0bff417 	ldw	r2,-48(fp)
 4002088:	1885883a 	add	r2,r3,r2
 400208c:	1085883a 	add	r2,r2,r2
 4002090:	1085883a 	add	r2,r2,r2
 4002094:	8085883a 	add	r2,r16,r2
 4002098:	00c00044 	movi	r3,1
 400209c:	10c00015 	stw	r3,0(r2)
							grid[i-2][k] = 1;
 40020a0:	e0bfef17 	ldw	r2,-68(fp)
 40020a4:	10bfff84 	addi	r2,r2,-2
 40020a8:	040100f4 	movhi	r16,1027
 40020ac:	84262204 	addi	r16,r16,-26488
 40020b0:	01400984 	movi	r5,38
 40020b4:	1009883a 	mov	r4,r2
 40020b8:	40118340 	call	4011834 <__mulsi3>
 40020bc:	1007883a 	mov	r3,r2
 40020c0:	e0bff417 	ldw	r2,-48(fp)
 40020c4:	1885883a 	add	r2,r3,r2
 40020c8:	1085883a 	add	r2,r2,r2
 40020cc:	1085883a 	add	r2,r2,r2
 40020d0:	8085883a 	add	r2,r16,r2
 40020d4:	00c00044 	movi	r3,1
 40020d8:	10c00015 	stw	r3,0(r2)
							grid[i-3][k] = 1;
 40020dc:	e0bfef17 	ldw	r2,-68(fp)
 40020e0:	10bfff44 	addi	r2,r2,-3
 40020e4:	040100f4 	movhi	r16,1027
 40020e8:	84262204 	addi	r16,r16,-26488
 40020ec:	01400984 	movi	r5,38
 40020f0:	1009883a 	mov	r4,r2
 40020f4:	40118340 	call	4011834 <__mulsi3>
 40020f8:	1007883a 	mov	r3,r2
 40020fc:	e0bff417 	ldw	r2,-48(fp)
 4002100:	1885883a 	add	r2,r3,r2
 4002104:	1085883a 	add	r2,r2,r2
 4002108:	1085883a 	add	r2,r2,r2
 400210c:	8085883a 	add	r2,r16,r2
 4002110:	00c00044 	movi	r3,1
 4002114:	10c00015 	stw	r3,0(r2)
							grid[i-4][k] = 1;
 4002118:	e0bfef17 	ldw	r2,-68(fp)
 400211c:	10bfff04 	addi	r2,r2,-4
 4002120:	040100f4 	movhi	r16,1027
 4002124:	84262204 	addi	r16,r16,-26488
 4002128:	01400984 	movi	r5,38
 400212c:	1009883a 	mov	r4,r2
 4002130:	40118340 	call	4011834 <__mulsi3>
 4002134:	1007883a 	mov	r3,r2
 4002138:	e0bff417 	ldw	r2,-48(fp)
 400213c:	1885883a 	add	r2,r3,r2
 4002140:	1085883a 	add	r2,r2,r2
 4002144:	1085883a 	add	r2,r2,r2
 4002148:	8085883a 	add	r2,r16,r2
 400214c:	00c00044 	movi	r3,1
 4002150:	10c00015 	stw	r3,0(r2)

							rowCount[i-1]++;
 4002154:	e0bfef17 	ldw	r2,-68(fp)
 4002158:	10bfffc4 	addi	r2,r2,-1
 400215c:	00c100f4 	movhi	r3,1027
 4002160:	18e60404 	addi	r3,r3,-26608
 4002164:	1089883a 	add	r4,r2,r2
 4002168:	2109883a 	add	r4,r4,r4
 400216c:	1907883a 	add	r3,r3,r4
 4002170:	18c00017 	ldw	r3,0(r3)
 4002174:	19000044 	addi	r4,r3,1
 4002178:	00c100f4 	movhi	r3,1027
 400217c:	18e60404 	addi	r3,r3,-26608
 4002180:	1085883a 	add	r2,r2,r2
 4002184:	1085883a 	add	r2,r2,r2
 4002188:	1885883a 	add	r2,r3,r2
 400218c:	11000015 	stw	r4,0(r2)
							rowCount[i-2]++;
 4002190:	e0bfef17 	ldw	r2,-68(fp)
 4002194:	10bfff84 	addi	r2,r2,-2
 4002198:	00c100f4 	movhi	r3,1027
 400219c:	18e60404 	addi	r3,r3,-26608
 40021a0:	1089883a 	add	r4,r2,r2
 40021a4:	2109883a 	add	r4,r4,r4
 40021a8:	1907883a 	add	r3,r3,r4
 40021ac:	18c00017 	ldw	r3,0(r3)
 40021b0:	19000044 	addi	r4,r3,1
 40021b4:	00c100f4 	movhi	r3,1027
 40021b8:	18e60404 	addi	r3,r3,-26608
 40021bc:	1085883a 	add	r2,r2,r2
 40021c0:	1085883a 	add	r2,r2,r2
 40021c4:	1885883a 	add	r2,r3,r2
 40021c8:	11000015 	stw	r4,0(r2)
							rowCount[i-3]++;
 40021cc:	e0bfef17 	ldw	r2,-68(fp)
 40021d0:	10bfff44 	addi	r2,r2,-3
 40021d4:	00c100f4 	movhi	r3,1027
 40021d8:	18e60404 	addi	r3,r3,-26608
 40021dc:	1089883a 	add	r4,r2,r2
 40021e0:	2109883a 	add	r4,r4,r4
 40021e4:	1907883a 	add	r3,r3,r4
 40021e8:	18c00017 	ldw	r3,0(r3)
 40021ec:	19000044 	addi	r4,r3,1
 40021f0:	00c100f4 	movhi	r3,1027
 40021f4:	18e60404 	addi	r3,r3,-26608
 40021f8:	1085883a 	add	r2,r2,r2
 40021fc:	1085883a 	add	r2,r2,r2
 4002200:	1885883a 	add	r2,r3,r2
 4002204:	11000015 	stw	r4,0(r2)
							rowCount[i-4]++;
 4002208:	e0bfef17 	ldw	r2,-68(fp)
 400220c:	10bfff04 	addi	r2,r2,-4
 4002210:	00c100f4 	movhi	r3,1027
 4002214:	18e60404 	addi	r3,r3,-26608
 4002218:	1089883a 	add	r4,r2,r2
 400221c:	2109883a 	add	r4,r4,r4
 4002220:	1907883a 	add	r3,r3,r4
 4002224:	18c00017 	ldw	r3,0(r3)
 4002228:	19000044 	addi	r4,r3,1
 400222c:	00c100f4 	movhi	r3,1027
 4002230:	18e60404 	addi	r3,r3,-26608
 4002234:	1085883a 	add	r2,r2,r2
 4002238:	1085883a 	add	r2,r2,r2
 400223c:	1885883a 	add	r2,r3,r2
 4002240:	11000015 	stw	r4,0(r2)
					}
				}
			}else if(shapeLayout == 1){
				for(int j = randomStart; j < randomEnd; j++){
					if(grid[i][j] == 1){
						for(int k = randomStart; k < randomEnd; k++){
 4002244:	e0bff417 	ldw	r2,-48(fp)
 4002248:	10800044 	addi	r2,r2,1
 400224c:	e0bff415 	stw	r2,-48(fp)
 4002250:	e0fff417 	ldw	r3,-48(fp)
 4002254:	e0bfed17 	ldw	r2,-76(fp)
 4002258:	18bf8216 	blt	r3,r2,4002064 <__alt_mem_onchip_memory2_0+0xfbffcea4>
							rowCount[i-1]++;
							rowCount[i-2]++;
							rowCount[i-3]++;
							rowCount[i-4]++;
						}
						return;
 400225c:	00028a06 	br	4002c88 <dropRectangle+0xec0>
						}
						return;
					}
				}
			}else if(shapeLayout == 1){
				for(int j = randomStart; j < randomEnd; j++){
 4002260:	e0bff317 	ldw	r2,-52(fp)
 4002264:	10800044 	addi	r2,r2,1
 4002268:	e0bff315 	stw	r2,-52(fp)
 400226c:	e0fff317 	ldw	r3,-52(fp)
 4002270:	e0bfed17 	ldw	r2,-76(fp)
 4002274:	18bf6916 	blt	r3,r2,400201c <__alt_mem_onchip_memory2_0+0xfbffce5c>
						return;
					}
				}
			}

        	if(shapeLayout){
 4002278:	e0bfee17 	ldw	r2,-72(fp)
 400227c:	10003326 	beq	r2,zero,400234c <dropRectangle+0x584>
				for(int row = 0; row < 4; row++){
 4002280:	e03ff515 	stw	zero,-44(fp)
 4002284:	00002d06 	br	400233c <dropRectangle+0x574>
					for (int j = randomStart; j < randomEnd; j++) {
 4002288:	e0bfeb17 	ldw	r2,-84(fp)
 400228c:	e0bff615 	stw	r2,-40(fp)
 4002290:	00002406 	br	4002324 <dropRectangle+0x55c>
		//				vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row - 1) * 80 + j) * 2] = 0x10;
 4002294:	d4200317 	ldw	r16,-32756(gp)
 4002298:	e0ffef17 	ldw	r3,-68(fp)
 400229c:	e0bff517 	ldw	r2,-44(fp)
 40022a0:	1885c83a 	sub	r2,r3,r2
 40022a4:	10bfffc4 	addi	r2,r2,-1
 40022a8:	01401404 	movi	r5,80
 40022ac:	1009883a 	mov	r4,r2
 40022b0:	40118340 	call	4011834 <__mulsi3>
 40022b4:	1007883a 	mov	r3,r2
 40022b8:	e0bff617 	ldw	r2,-40(fp)
 40022bc:	1885883a 	add	r2,r3,r2
 40022c0:	1085883a 	add	r2,r2,r2
 40022c4:	8085883a 	add	r2,r16,r2
 40022c8:	00c00404 	movi	r3,16
 40022cc:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row - 1) * 80 + j) * 2 + 1] = check_col(j);
 40022d0:	d4600317 	ldw	r17,-32756(gp)
 40022d4:	e0ffef17 	ldw	r3,-68(fp)
 40022d8:	e0bff517 	ldw	r2,-44(fp)
 40022dc:	1885c83a 	sub	r2,r3,r2
 40022e0:	10bfffc4 	addi	r2,r2,-1
 40022e4:	01401404 	movi	r5,80
 40022e8:	1009883a 	mov	r4,r2
 40022ec:	40118340 	call	4011834 <__mulsi3>
 40022f0:	1007883a 	mov	r3,r2
 40022f4:	e0bff617 	ldw	r2,-40(fp)
 40022f8:	1885883a 	add	r2,r3,r2
 40022fc:	1085883a 	add	r2,r2,r2
 4002300:	14000044 	addi	r16,r2,1
 4002304:	e13ff617 	ldw	r4,-40(fp)
 4002308:	400d8600 	call	400d860 <check_col>
 400230c:	1007883a 	mov	r3,r2
 4002310:	8c05883a 	add	r2,r17,r16
 4002314:	10c00005 	stb	r3,0(r2)
				}
			}

        	if(shapeLayout){
				for(int row = 0; row < 4; row++){
					for (int j = randomStart; j < randomEnd; j++) {
 4002318:	e0bff617 	ldw	r2,-40(fp)
 400231c:	10800044 	addi	r2,r2,1
 4002320:	e0bff615 	stw	r2,-40(fp)
 4002324:	e0fff617 	ldw	r3,-40(fp)
 4002328:	e0bfed17 	ldw	r2,-76(fp)
 400232c:	18bfd916 	blt	r3,r2,4002294 <__alt_mem_onchip_memory2_0+0xfbffd0d4>
					}
				}
			}

        	if(shapeLayout){
				for(int row = 0; row < 4; row++){
 4002330:	e0bff517 	ldw	r2,-44(fp)
 4002334:	10800044 	addi	r2,r2,1
 4002338:	e0bff515 	stw	r2,-44(fp)
 400233c:	e0bff517 	ldw	r2,-44(fp)
 4002340:	10800110 	cmplti	r2,r2,4
 4002344:	103fd01e 	bne	r2,zero,4002288 <__alt_mem_onchip_memory2_0+0xfbffd0c8>
 4002348:	00002606 	br	40023e4 <dropRectangle+0x61c>
						vga_ctrl->VRAM[((i - row - 1) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row - 1) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}else{
				for (int j = randomStart; j < randomEnd; j++) {
 400234c:	e0bfeb17 	ldw	r2,-84(fp)
 4002350:	e0bff715 	stw	r2,-36(fp)
 4002354:	00002006 	br	40023d8 <dropRectangle+0x610>
	//				vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 4002358:	d4200317 	ldw	r16,-32756(gp)
 400235c:	e0bfef17 	ldw	r2,-68(fp)
 4002360:	10bfffc4 	addi	r2,r2,-1
 4002364:	01401404 	movi	r5,80
 4002368:	1009883a 	mov	r4,r2
 400236c:	40118340 	call	4011834 <__mulsi3>
 4002370:	1007883a 	mov	r3,r2
 4002374:	e0bff717 	ldw	r2,-36(fp)
 4002378:	1885883a 	add	r2,r3,r2
 400237c:	1085883a 	add	r2,r2,r2
 4002380:	8085883a 	add	r2,r16,r2
 4002384:	00c00404 	movi	r3,16
 4002388:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400238c:	d4600317 	ldw	r17,-32756(gp)
 4002390:	e0bfef17 	ldw	r2,-68(fp)
 4002394:	10bfffc4 	addi	r2,r2,-1
 4002398:	01401404 	movi	r5,80
 400239c:	1009883a 	mov	r4,r2
 40023a0:	40118340 	call	4011834 <__mulsi3>
 40023a4:	1007883a 	mov	r3,r2
 40023a8:	e0bff717 	ldw	r2,-36(fp)
 40023ac:	1885883a 	add	r2,r3,r2
 40023b0:	1085883a 	add	r2,r2,r2
 40023b4:	14000044 	addi	r16,r2,1
 40023b8:	e13ff717 	ldw	r4,-36(fp)
 40023bc:	400d8600 	call	400d860 <check_col>
 40023c0:	1007883a 	mov	r3,r2
 40023c4:	8c05883a 	add	r2,r17,r16
 40023c8:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row - 1) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row - 1) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}else{
				for (int j = randomStart; j < randomEnd; j++) {
 40023cc:	e0bff717 	ldw	r2,-36(fp)
 40023d0:	10800044 	addi	r2,r2,1
 40023d4:	e0bff715 	stw	r2,-36(fp)
 40023d8:	e0fff717 	ldw	r3,-36(fp)
 40023dc:	e0bfed17 	ldw	r2,-76(fp)
 40023e0:	18bfdd16 	blt	r3,r2,4002358 <__alt_mem_onchip_memory2_0+0xfbffd198>
////        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x00;
//            		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
//            		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
//        	}

        	keycode = keyboard_input();
 40023e4:	40007d00 	call	40007d0 <keyboard_input>
 40023e8:	e0bffd05 	stb	r2,-12(fp)
        	time = timer;
 40023ec:	d0a80117 	ldw	r2,-24572(gp)
 40023f0:	e0bfec15 	stw	r2,-80(fp)
			if(keycode == 0x51){
 40023f4:	e0bffd03 	ldbu	r2,-12(fp)
 40023f8:	10801458 	cmpnei	r2,r2,81
 40023fc:	1000131e 	bne	r2,zero,400244c <dropRectangle+0x684>
				time = timer / 1.5;
 4002400:	d0a80117 	ldw	r2,-24572(gp)
 4002404:	1009883a 	mov	r4,r2
 4002408:	4013f180 	call	4013f18 <__floatsidf>
 400240c:	1011883a 	mov	r8,r2
 4002410:	1813883a 	mov	r9,r3
 4002414:	000d883a 	mov	r6,zero
 4002418:	01cffe34 	movhi	r7,16376
 400241c:	4009883a 	mov	r4,r8
 4002420:	480b883a 	mov	r5,r9
 4002424:	40121080 	call	4012108 <__divdf3>
 4002428:	1009883a 	mov	r4,r2
 400242c:	180b883a 	mov	r5,r3
 4002430:	2005883a 	mov	r2,r4
 4002434:	2807883a 	mov	r3,r5
 4002438:	1009883a 	mov	r4,r2
 400243c:	180b883a 	mov	r5,r3
 4002440:	4013e980 	call	4013e98 <__fixdfsi>
 4002444:	e0bfec15 	stw	r2,-80(fp)
 4002448:	00014606 	br	4002964 <dropRectangle+0xb9c>
			}
			else if(keycode == 0x4F){
 400244c:	e0bffd03 	ldbu	r2,-12(fp)
 4002450:	108013d8 	cmpnei	r2,r2,79
 4002454:	10006d1e 	bne	r2,zero,400260c <dropRectangle+0x844>
//							i--;
//						}
//					}
//				}
//				else
				if(randomEnd != 59){
 4002458:	e0bfed17 	ldw	r2,-76(fp)
 400245c:	10800ee0 	cmpeqi	r2,r2,59
 4002460:	1001401e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
//					randomStart += 2;
//					randomEnd += 2;
//					i--;
					if(shapeLayout == 1){
 4002464:	e0bfee17 	ldw	r2,-72(fp)
 4002468:	10800058 	cmpnei	r2,r2,1
 400246c:	10004d1e 	bne	r2,zero,40025a4 <dropRectangle+0x7dc>
						if(grid[i-1][randomEnd + 1] != 1  && grid[i-2][randomEnd + 1] != 1
 4002470:	e0bfef17 	ldw	r2,-68(fp)
 4002474:	10ffffc4 	addi	r3,r2,-1
 4002478:	e0bfed17 	ldw	r2,-76(fp)
 400247c:	14400044 	addi	r17,r2,1
 4002480:	040100f4 	movhi	r16,1027
 4002484:	84262204 	addi	r16,r16,-26488
 4002488:	01400984 	movi	r5,38
 400248c:	1809883a 	mov	r4,r3
 4002490:	40118340 	call	4011834 <__mulsi3>
 4002494:	1445883a 	add	r2,r2,r17
 4002498:	1085883a 	add	r2,r2,r2
 400249c:	1085883a 	add	r2,r2,r2
 40024a0:	8085883a 	add	r2,r16,r2
 40024a4:	10800017 	ldw	r2,0(r2)
 40024a8:	10800060 	cmpeqi	r2,r2,1
 40024ac:	10012d1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
 40024b0:	e0bfef17 	ldw	r2,-68(fp)
 40024b4:	10ffff84 	addi	r3,r2,-2
 40024b8:	e0bfed17 	ldw	r2,-76(fp)
 40024bc:	14400044 	addi	r17,r2,1
 40024c0:	040100f4 	movhi	r16,1027
 40024c4:	84262204 	addi	r16,r16,-26488
 40024c8:	01400984 	movi	r5,38
 40024cc:	1809883a 	mov	r4,r3
 40024d0:	40118340 	call	4011834 <__mulsi3>
 40024d4:	1445883a 	add	r2,r2,r17
 40024d8:	1085883a 	add	r2,r2,r2
 40024dc:	1085883a 	add	r2,r2,r2
 40024e0:	8085883a 	add	r2,r16,r2
 40024e4:	10800017 	ldw	r2,0(r2)
 40024e8:	10800060 	cmpeqi	r2,r2,1
 40024ec:	10011d1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
								&& grid[i-3][randomEnd + 1] != 1   && grid[i-4][randomEnd + 1] != 1   ){
 40024f0:	e0bfef17 	ldw	r2,-68(fp)
 40024f4:	10ffff44 	addi	r3,r2,-3
 40024f8:	e0bfed17 	ldw	r2,-76(fp)
 40024fc:	14400044 	addi	r17,r2,1
 4002500:	040100f4 	movhi	r16,1027
 4002504:	84262204 	addi	r16,r16,-26488
 4002508:	01400984 	movi	r5,38
 400250c:	1809883a 	mov	r4,r3
 4002510:	40118340 	call	4011834 <__mulsi3>
 4002514:	1445883a 	add	r2,r2,r17
 4002518:	1085883a 	add	r2,r2,r2
 400251c:	1085883a 	add	r2,r2,r2
 4002520:	8085883a 	add	r2,r16,r2
 4002524:	10800017 	ldw	r2,0(r2)
 4002528:	10800060 	cmpeqi	r2,r2,1
 400252c:	10010d1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
 4002530:	e0bfef17 	ldw	r2,-68(fp)
 4002534:	10ffff04 	addi	r3,r2,-4
 4002538:	e0bfed17 	ldw	r2,-76(fp)
 400253c:	14400044 	addi	r17,r2,1
 4002540:	040100f4 	movhi	r16,1027
 4002544:	84262204 	addi	r16,r16,-26488
 4002548:	01400984 	movi	r5,38
 400254c:	1809883a 	mov	r4,r3
 4002550:	40118340 	call	4011834 <__mulsi3>
 4002554:	1445883a 	add	r2,r2,r17
 4002558:	1085883a 	add	r2,r2,r2
 400255c:	1085883a 	add	r2,r2,r2
 4002560:	8085883a 	add	r2,r16,r2
 4002564:	10800017 	ldw	r2,0(r2)
 4002568:	10800060 	cmpeqi	r2,r2,1
 400256c:	1000fd1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
							if(randomEnd != 59){
 4002570:	e0bfed17 	ldw	r2,-76(fp)
 4002574:	10800ee0 	cmpeqi	r2,r2,59
 4002578:	1000fa1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
								randomStart += 2;
 400257c:	e0bfeb17 	ldw	r2,-84(fp)
 4002580:	10800084 	addi	r2,r2,2
 4002584:	e0bfeb15 	stw	r2,-84(fp)
								randomEnd += 2;
 4002588:	e0bfed17 	ldw	r2,-76(fp)
 400258c:	10800084 	addi	r2,r2,2
 4002590:	e0bfed15 	stw	r2,-76(fp)
								i--;
 4002594:	e0bfef17 	ldw	r2,-68(fp)
 4002598:	10bfffc4 	addi	r2,r2,-1
 400259c:	e0bfef15 	stw	r2,-68(fp)
 40025a0:	0000f006 	br	4002964 <dropRectangle+0xb9c>
							}
						}
					}else if(grid[i-1][randomEnd + 1] != 1){
 40025a4:	e0bfef17 	ldw	r2,-68(fp)
 40025a8:	10ffffc4 	addi	r3,r2,-1
 40025ac:	e0bfed17 	ldw	r2,-76(fp)
 40025b0:	14400044 	addi	r17,r2,1
 40025b4:	040100f4 	movhi	r16,1027
 40025b8:	84262204 	addi	r16,r16,-26488
 40025bc:	01400984 	movi	r5,38
 40025c0:	1809883a 	mov	r4,r3
 40025c4:	40118340 	call	4011834 <__mulsi3>
 40025c8:	1445883a 	add	r2,r2,r17
 40025cc:	1085883a 	add	r2,r2,r2
 40025d0:	1085883a 	add	r2,r2,r2
 40025d4:	8085883a 	add	r2,r16,r2
 40025d8:	10800017 	ldw	r2,0(r2)
 40025dc:	10800060 	cmpeqi	r2,r2,1
 40025e0:	1000e01e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
						randomStart += 2;
 40025e4:	e0bfeb17 	ldw	r2,-84(fp)
 40025e8:	10800084 	addi	r2,r2,2
 40025ec:	e0bfeb15 	stw	r2,-84(fp)
						randomEnd += 2;
 40025f0:	e0bfed17 	ldw	r2,-76(fp)
 40025f4:	10800084 	addi	r2,r2,2
 40025f8:	e0bfed15 	stw	r2,-76(fp)
						i--;
 40025fc:	e0bfef17 	ldw	r2,-68(fp)
 4002600:	10bfffc4 	addi	r2,r2,-1
 4002604:	e0bfef15 	stw	r2,-68(fp)
 4002608:	0000d606 	br	4002964 <dropRectangle+0xb9c>
					}
				}
			}else if(keycode == 0x50){
 400260c:	e0bffd03 	ldbu	r2,-12(fp)
 4002610:	10801418 	cmpnei	r2,r2,80
 4002614:	10006d1e 	bne	r2,zero,40027cc <dropRectangle+0xa04>
				if(randomStart != 21){
 4002618:	e0bfeb17 	ldw	r2,-84(fp)
 400261c:	10800560 	cmpeqi	r2,r2,21
 4002620:	1000d01e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
//					randomStart -= 2;
//					randomEnd -= 2;
//					i--;
					if(shapeLayout == 1){
 4002624:	e0bfee17 	ldw	r2,-72(fp)
 4002628:	10800058 	cmpnei	r2,r2,1
 400262c:	10004d1e 	bne	r2,zero,4002764 <dropRectangle+0x99c>
						if(grid[i-1][randomStart - 1] != 1  && grid[i-2][randomStart - 1] != 1
 4002630:	e0bfef17 	ldw	r2,-68(fp)
 4002634:	10ffffc4 	addi	r3,r2,-1
 4002638:	e0bfeb17 	ldw	r2,-84(fp)
 400263c:	147fffc4 	addi	r17,r2,-1
 4002640:	040100f4 	movhi	r16,1027
 4002644:	84262204 	addi	r16,r16,-26488
 4002648:	01400984 	movi	r5,38
 400264c:	1809883a 	mov	r4,r3
 4002650:	40118340 	call	4011834 <__mulsi3>
 4002654:	1445883a 	add	r2,r2,r17
 4002658:	1085883a 	add	r2,r2,r2
 400265c:	1085883a 	add	r2,r2,r2
 4002660:	8085883a 	add	r2,r16,r2
 4002664:	10800017 	ldw	r2,0(r2)
 4002668:	10800060 	cmpeqi	r2,r2,1
 400266c:	1000bd1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
 4002670:	e0bfef17 	ldw	r2,-68(fp)
 4002674:	10ffff84 	addi	r3,r2,-2
 4002678:	e0bfeb17 	ldw	r2,-84(fp)
 400267c:	147fffc4 	addi	r17,r2,-1
 4002680:	040100f4 	movhi	r16,1027
 4002684:	84262204 	addi	r16,r16,-26488
 4002688:	01400984 	movi	r5,38
 400268c:	1809883a 	mov	r4,r3
 4002690:	40118340 	call	4011834 <__mulsi3>
 4002694:	1445883a 	add	r2,r2,r17
 4002698:	1085883a 	add	r2,r2,r2
 400269c:	1085883a 	add	r2,r2,r2
 40026a0:	8085883a 	add	r2,r16,r2
 40026a4:	10800017 	ldw	r2,0(r2)
 40026a8:	10800060 	cmpeqi	r2,r2,1
 40026ac:	1000ad1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
								&& grid[i-3][randomStart - 1] != 1   && grid[i-4][randomStart - 1] != 1   ){
 40026b0:	e0bfef17 	ldw	r2,-68(fp)
 40026b4:	10ffff44 	addi	r3,r2,-3
 40026b8:	e0bfeb17 	ldw	r2,-84(fp)
 40026bc:	147fffc4 	addi	r17,r2,-1
 40026c0:	040100f4 	movhi	r16,1027
 40026c4:	84262204 	addi	r16,r16,-26488
 40026c8:	01400984 	movi	r5,38
 40026cc:	1809883a 	mov	r4,r3
 40026d0:	40118340 	call	4011834 <__mulsi3>
 40026d4:	1445883a 	add	r2,r2,r17
 40026d8:	1085883a 	add	r2,r2,r2
 40026dc:	1085883a 	add	r2,r2,r2
 40026e0:	8085883a 	add	r2,r16,r2
 40026e4:	10800017 	ldw	r2,0(r2)
 40026e8:	10800060 	cmpeqi	r2,r2,1
 40026ec:	10009d1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
 40026f0:	e0bfef17 	ldw	r2,-68(fp)
 40026f4:	10ffff04 	addi	r3,r2,-4
 40026f8:	e0bfeb17 	ldw	r2,-84(fp)
 40026fc:	147fffc4 	addi	r17,r2,-1
 4002700:	040100f4 	movhi	r16,1027
 4002704:	84262204 	addi	r16,r16,-26488
 4002708:	01400984 	movi	r5,38
 400270c:	1809883a 	mov	r4,r3
 4002710:	40118340 	call	4011834 <__mulsi3>
 4002714:	1445883a 	add	r2,r2,r17
 4002718:	1085883a 	add	r2,r2,r2
 400271c:	1085883a 	add	r2,r2,r2
 4002720:	8085883a 	add	r2,r16,r2
 4002724:	10800017 	ldw	r2,0(r2)
 4002728:	10800060 	cmpeqi	r2,r2,1
 400272c:	10008d1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
							if(randomEnd != 59){
 4002730:	e0bfed17 	ldw	r2,-76(fp)
 4002734:	10800ee0 	cmpeqi	r2,r2,59
 4002738:	10008a1e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
								randomStart -= 2;
 400273c:	e0bfeb17 	ldw	r2,-84(fp)
 4002740:	10bfff84 	addi	r2,r2,-2
 4002744:	e0bfeb15 	stw	r2,-84(fp)
								randomEnd -= 2;
 4002748:	e0bfed17 	ldw	r2,-76(fp)
 400274c:	10bfff84 	addi	r2,r2,-2
 4002750:	e0bfed15 	stw	r2,-76(fp)
								i--;
 4002754:	e0bfef17 	ldw	r2,-68(fp)
 4002758:	10bfffc4 	addi	r2,r2,-1
 400275c:	e0bfef15 	stw	r2,-68(fp)
 4002760:	00008006 	br	4002964 <dropRectangle+0xb9c>
							}
						}
					}else if(grid[i-1][randomStart - 1] != 1){
 4002764:	e0bfef17 	ldw	r2,-68(fp)
 4002768:	10ffffc4 	addi	r3,r2,-1
 400276c:	e0bfeb17 	ldw	r2,-84(fp)
 4002770:	147fffc4 	addi	r17,r2,-1
 4002774:	040100f4 	movhi	r16,1027
 4002778:	84262204 	addi	r16,r16,-26488
 400277c:	01400984 	movi	r5,38
 4002780:	1809883a 	mov	r4,r3
 4002784:	40118340 	call	4011834 <__mulsi3>
 4002788:	1445883a 	add	r2,r2,r17
 400278c:	1085883a 	add	r2,r2,r2
 4002790:	1085883a 	add	r2,r2,r2
 4002794:	8085883a 	add	r2,r16,r2
 4002798:	10800017 	ldw	r2,0(r2)
 400279c:	10800060 	cmpeqi	r2,r2,1
 40027a0:	1000701e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
						randomStart -= 2;
 40027a4:	e0bfeb17 	ldw	r2,-84(fp)
 40027a8:	10bfff84 	addi	r2,r2,-2
 40027ac:	e0bfeb15 	stw	r2,-84(fp)
						randomEnd -= 2;
 40027b0:	e0bfed17 	ldw	r2,-76(fp)
 40027b4:	10bfff84 	addi	r2,r2,-2
 40027b8:	e0bfed15 	stw	r2,-76(fp)
						i--;
 40027bc:	e0bfef17 	ldw	r2,-68(fp)
 40027c0:	10bfffc4 	addi	r2,r2,-1
 40027c4:	e0bfef15 	stw	r2,-68(fp)
 40027c8:	00006606 	br	4002964 <dropRectangle+0xb9c>
					}
				}
			}else if(keycode == 0x1D && i > 3 && i < 29 ){ // rotate left
 40027cc:	e0bffd03 	ldbu	r2,-12(fp)
 40027d0:	10800758 	cmpnei	r2,r2,29
 40027d4:	10002e1e 	bne	r2,zero,4002890 <dropRectangle+0xac8>
 40027d8:	e0bfef17 	ldw	r2,-68(fp)
 40027dc:	10800110 	cmplti	r2,r2,4
 40027e0:	10002b1e 	bne	r2,zero,4002890 <dropRectangle+0xac8>
 40027e4:	e0bfef17 	ldw	r2,-68(fp)
 40027e8:	10800748 	cmpgei	r2,r2,29
 40027ec:	1000281e 	bne	r2,zero,4002890 <dropRectangle+0xac8>
				i--;
 40027f0:	e0bfef17 	ldw	r2,-68(fp)
 40027f4:	10bfffc4 	addi	r2,r2,-1
 40027f8:	e0bfef15 	stw	r2,-68(fp)
				if(shapeLayout && randomEnd < 57 && randomStart > 23){
 40027fc:	e0bfee17 	ldw	r2,-72(fp)
 4002800:	10001126 	beq	r2,zero,4002848 <dropRectangle+0xa80>
 4002804:	e0bfed17 	ldw	r2,-76(fp)
 4002808:	10800e48 	cmpgei	r2,r2,57
 400280c:	10000e1e 	bne	r2,zero,4002848 <dropRectangle+0xa80>
 4002810:	e0bfeb17 	ldw	r2,-84(fp)
 4002814:	10800610 	cmplti	r2,r2,24
 4002818:	10000b1e 	bne	r2,zero,4002848 <dropRectangle+0xa80>
					shapeLayout = 0;
 400281c:	e03fee15 	stw	zero,-72(fp)
					randomStart -= 2;
 4002820:	e0bfeb17 	ldw	r2,-84(fp)
 4002824:	10bfff84 	addi	r2,r2,-2
 4002828:	e0bfeb15 	stw	r2,-84(fp)
					randomEnd += 4;
 400282c:	e0bfed17 	ldw	r2,-76(fp)
 4002830:	10800104 	addi	r2,r2,4
 4002834:	e0bfed15 	stw	r2,-76(fp)
					i--;
 4002838:	e0bfef17 	ldw	r2,-68(fp)
 400283c:	10bfffc4 	addi	r2,r2,-1
 4002840:	e0bfef15 	stw	r2,-68(fp)
						i--;
					}
				}
			}else if(keycode == 0x1D && i > 3 && i < 29 ){ // rotate left
				i--;
				if(shapeLayout && randomEnd < 57 && randomStart > 23){
 4002844:	00004706 	br	4002964 <dropRectangle+0xb9c>
					shapeLayout = 0;
					randomStart -= 2;
					randomEnd += 4;
					i--;
				}else if(shapeLayout == 0){
 4002848:	e0bfee17 	ldw	r2,-72(fp)
 400284c:	10000c1e 	bne	r2,zero,4002880 <dropRectangle+0xab8>
					shapeLayout = 1;
 4002850:	00800044 	movi	r2,1
 4002854:	e0bfee15 	stw	r2,-72(fp)
					randomStart += 2;
 4002858:	e0bfeb17 	ldw	r2,-84(fp)
 400285c:	10800084 	addi	r2,r2,2
 4002860:	e0bfeb15 	stw	r2,-84(fp)
					randomEnd -= 4;
 4002864:	e0bfed17 	ldw	r2,-76(fp)
 4002868:	10bfff04 	addi	r2,r2,-4
 400286c:	e0bfed15 	stw	r2,-76(fp)
					i++;
 4002870:	e0bfef17 	ldw	r2,-68(fp)
 4002874:	10800044 	addi	r2,r2,1
 4002878:	e0bfef15 	stw	r2,-68(fp)
						i--;
					}
				}
			}else if(keycode == 0x1D && i > 3 && i < 29 ){ // rotate left
				i--;
				if(shapeLayout && randomEnd < 57 && randomStart > 23){
 400287c:	00003906 	br	4002964 <dropRectangle+0xb9c>
					shapeLayout = 1;
					randomStart += 2;
					randomEnd -= 4;
					i++;
				}else{
					i++;
 4002880:	e0bfef17 	ldw	r2,-68(fp)
 4002884:	10800044 	addi	r2,r2,1
 4002888:	e0bfef15 	stw	r2,-68(fp)
						i--;
					}
				}
			}else if(keycode == 0x1D && i > 3 && i < 29 ){ // rotate left
				i--;
				if(shapeLayout && randomEnd < 57 && randomStart > 23){
 400288c:	00003506 	br	4002964 <dropRectangle+0xb9c>
					randomEnd -= 4;
					i++;
				}else{
					i++;
				}
			}else if(keycode == 0x1B && i > 2 && i < 29){ // rotate left
 4002890:	e0bffd03 	ldbu	r2,-12(fp)
 4002894:	108006d8 	cmpnei	r2,r2,27
 4002898:	10002e1e 	bne	r2,zero,4002954 <dropRectangle+0xb8c>
 400289c:	e0bfef17 	ldw	r2,-68(fp)
 40028a0:	108000d0 	cmplti	r2,r2,3
 40028a4:	10002b1e 	bne	r2,zero,4002954 <dropRectangle+0xb8c>
 40028a8:	e0bfef17 	ldw	r2,-68(fp)
 40028ac:	10800748 	cmpgei	r2,r2,29
 40028b0:	1000281e 	bne	r2,zero,4002954 <dropRectangle+0xb8c>
				i--;
 40028b4:	e0bfef17 	ldw	r2,-68(fp)
 40028b8:	10bfffc4 	addi	r2,r2,-1
 40028bc:	e0bfef15 	stw	r2,-68(fp)
				if(shapeLayout  && randomEnd < 57 && randomStart > 23){
 40028c0:	e0bfee17 	ldw	r2,-72(fp)
 40028c4:	10001126 	beq	r2,zero,400290c <dropRectangle+0xb44>
 40028c8:	e0bfed17 	ldw	r2,-76(fp)
 40028cc:	10800e48 	cmpgei	r2,r2,57
 40028d0:	10000e1e 	bne	r2,zero,400290c <dropRectangle+0xb44>
 40028d4:	e0bfeb17 	ldw	r2,-84(fp)
 40028d8:	10800610 	cmplti	r2,r2,24
 40028dc:	10000b1e 	bne	r2,zero,400290c <dropRectangle+0xb44>
					shapeLayout = 0;
 40028e0:	e03fee15 	stw	zero,-72(fp)
					randomStart -= 2;
 40028e4:	e0bfeb17 	ldw	r2,-84(fp)
 40028e8:	10bfff84 	addi	r2,r2,-2
 40028ec:	e0bfeb15 	stw	r2,-84(fp)
					randomEnd += 4;
 40028f0:	e0bfed17 	ldw	r2,-76(fp)
 40028f4:	10800104 	addi	r2,r2,4
 40028f8:	e0bfed15 	stw	r2,-76(fp)
					i--;
 40028fc:	e0bfef17 	ldw	r2,-68(fp)
 4002900:	10bfffc4 	addi	r2,r2,-1
 4002904:	e0bfef15 	stw	r2,-68(fp)
				}else{
					i++;
				}
			}else if(keycode == 0x1B && i > 2 && i < 29){ // rotate left
				i--;
				if(shapeLayout  && randomEnd < 57 && randomStart > 23){
 4002908:	00001606 	br	4002964 <dropRectangle+0xb9c>
					shapeLayout = 0;
					randomStart -= 2;
					randomEnd += 4;
					i--;
				}else if(shapeLayout == 0){
 400290c:	e0bfee17 	ldw	r2,-72(fp)
 4002910:	10000c1e 	bne	r2,zero,4002944 <dropRectangle+0xb7c>
					shapeLayout = 1;
 4002914:	00800044 	movi	r2,1
 4002918:	e0bfee15 	stw	r2,-72(fp)
					randomStart += 2;
 400291c:	e0bfeb17 	ldw	r2,-84(fp)
 4002920:	10800084 	addi	r2,r2,2
 4002924:	e0bfeb15 	stw	r2,-84(fp)
					randomEnd -= 4;
 4002928:	e0bfed17 	ldw	r2,-76(fp)
 400292c:	10bfff04 	addi	r2,r2,-4
 4002930:	e0bfed15 	stw	r2,-76(fp)
					i++;
 4002934:	e0bfef17 	ldw	r2,-68(fp)
 4002938:	10800044 	addi	r2,r2,1
 400293c:	e0bfef15 	stw	r2,-68(fp)
				}else{
					i++;
				}
			}else if(keycode == 0x1B && i > 2 && i < 29){ // rotate left
				i--;
				if(shapeLayout  && randomEnd < 57 && randomStart > 23){
 4002940:	00000806 	br	4002964 <dropRectangle+0xb9c>
					shapeLayout = 1;
					randomStart += 2;
					randomEnd -= 4;
					i++;
				}else{
					i++;
 4002944:	e0bfef17 	ldw	r2,-68(fp)
 4002948:	10800044 	addi	r2,r2,1
 400294c:	e0bfef15 	stw	r2,-68(fp)
				}else{
					i++;
				}
			}else if(keycode == 0x1B && i > 2 && i < 29){ // rotate left
				i--;
				if(shapeLayout  && randomEnd < 57 && randomStart > 23){
 4002950:	00000406 	br	4002964 <dropRectangle+0xb9c>
					randomEnd -= 4;
					i++;
				}else{
					i++;
				}
			}else if(keycode == 0x2C){
 4002954:	e0bffd03 	ldbu	r2,-12(fp)
 4002958:	10800b18 	cmpnei	r2,r2,44
 400295c:	1000011e 	bne	r2,zero,4002964 <dropRectangle+0xb9c>
				time = 0;
 4002960:	e03fec15 	stw	zero,-80(fp)
			}


			if(shapeLayout){
 4002964:	e0bfee17 	ldw	r2,-72(fp)
 4002968:	10003126 	beq	r2,zero,4002a30 <dropRectangle+0xc68>
				for(int row = 0; row < 4; row++){
 400296c:	e03ff815 	stw	zero,-32(fp)
 4002970:	00002b06 	br	4002a20 <dropRectangle+0xc58>
					for (int j = randomStart; j < randomEnd; j++) {
 4002974:	e0bfeb17 	ldw	r2,-84(fp)
 4002978:	e0bff915 	stw	r2,-28(fp)
 400297c:	00002206 	br	4002a08 <dropRectangle+0xc40>
		//				vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xB3;
 4002980:	d4200317 	ldw	r16,-32756(gp)
 4002984:	e0ffef17 	ldw	r3,-68(fp)
 4002988:	e0bff817 	ldw	r2,-32(fp)
 400298c:	1885c83a 	sub	r2,r3,r2
 4002990:	01401404 	movi	r5,80
 4002994:	1009883a 	mov	r4,r2
 4002998:	40118340 	call	4011834 <__mulsi3>
 400299c:	1007883a 	mov	r3,r2
 40029a0:	e0bff917 	ldw	r2,-28(fp)
 40029a4:	1885883a 	add	r2,r3,r2
 40029a8:	1085883a 	add	r2,r2,r2
 40029ac:	8085883a 	add	r2,r16,r2
 40029b0:	00ffecc4 	movi	r3,-77
 40029b4:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 40029b8:	d4600317 	ldw	r17,-32756(gp)
 40029bc:	e0ffef17 	ldw	r3,-68(fp)
 40029c0:	e0bff817 	ldw	r2,-32(fp)
 40029c4:	1885c83a 	sub	r2,r3,r2
 40029c8:	01401404 	movi	r5,80
 40029cc:	1009883a 	mov	r4,r2
 40029d0:	40118340 	call	4011834 <__mulsi3>
 40029d4:	1007883a 	mov	r3,r2
 40029d8:	e0bff917 	ldw	r2,-28(fp)
 40029dc:	1885883a 	add	r2,r3,r2
 40029e0:	1085883a 	add	r2,r2,r2
 40029e4:	14000044 	addi	r16,r2,1
 40029e8:	e13ff917 	ldw	r4,-28(fp)
 40029ec:	400d8600 	call	400d860 <check_col>
 40029f0:	1007883a 	mov	r3,r2
 40029f4:	8c05883a 	add	r2,r17,r16
 40029f8:	10c00005 	stb	r3,0(r2)
			}


			if(shapeLayout){
				for(int row = 0; row < 4; row++){
					for (int j = randomStart; j < randomEnd; j++) {
 40029fc:	e0bff917 	ldw	r2,-28(fp)
 4002a00:	10800044 	addi	r2,r2,1
 4002a04:	e0bff915 	stw	r2,-28(fp)
 4002a08:	e0fff917 	ldw	r3,-28(fp)
 4002a0c:	e0bfed17 	ldw	r2,-76(fp)
 4002a10:	18bfdb16 	blt	r3,r2,4002980 <__alt_mem_onchip_memory2_0+0xfbffd7c0>
				time = 0;
			}


			if(shapeLayout){
				for(int row = 0; row < 4; row++){
 4002a14:	e0bff817 	ldw	r2,-32(fp)
 4002a18:	10800044 	addi	r2,r2,1
 4002a1c:	e0bff815 	stw	r2,-32(fp)
 4002a20:	e0bff817 	ldw	r2,-32(fp)
 4002a24:	10800110 	cmplti	r2,r2,4
 4002a28:	103fd21e 	bne	r2,zero,4002974 <__alt_mem_onchip_memory2_0+0xfbffd7b4>
 4002a2c:	00002206 	br	4002ab8 <dropRectangle+0xcf0>
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xB3;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}else{
				for (int j = randomStart; j < randomEnd; j++) {
 4002a30:	e0bfeb17 	ldw	r2,-84(fp)
 4002a34:	e0bffa15 	stw	r2,-24(fp)
 4002a38:	00001c06 	br	4002aac <dropRectangle+0xce4>
	//				vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xB3;
 4002a3c:	d4200317 	ldw	r16,-32756(gp)
 4002a40:	01401404 	movi	r5,80
 4002a44:	e13fef17 	ldw	r4,-68(fp)
 4002a48:	40118340 	call	4011834 <__mulsi3>
 4002a4c:	1007883a 	mov	r3,r2
 4002a50:	e0bffa17 	ldw	r2,-24(fp)
 4002a54:	1885883a 	add	r2,r3,r2
 4002a58:	1085883a 	add	r2,r2,r2
 4002a5c:	8085883a 	add	r2,r16,r2
 4002a60:	00ffecc4 	movi	r3,-77
 4002a64:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 4002a68:	d4600317 	ldw	r17,-32756(gp)
 4002a6c:	01401404 	movi	r5,80
 4002a70:	e13fef17 	ldw	r4,-68(fp)
 4002a74:	40118340 	call	4011834 <__mulsi3>
 4002a78:	1007883a 	mov	r3,r2
 4002a7c:	e0bffa17 	ldw	r2,-24(fp)
 4002a80:	1885883a 	add	r2,r3,r2
 4002a84:	1085883a 	add	r2,r2,r2
 4002a88:	14000044 	addi	r16,r2,1
 4002a8c:	e13ffa17 	ldw	r4,-24(fp)
 4002a90:	400d8600 	call	400d860 <check_col>
 4002a94:	1007883a 	mov	r3,r2
 4002a98:	8c05883a 	add	r2,r17,r16
 4002a9c:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xB3;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}else{
				for (int j = randomStart; j < randomEnd; j++) {
 4002aa0:	e0bffa17 	ldw	r2,-24(fp)
 4002aa4:	10800044 	addi	r2,r2,1
 4002aa8:	e0bffa15 	stw	r2,-24(fp)
 4002aac:	e0fffa17 	ldw	r3,-24(fp)
 4002ab0:	e0bfed17 	ldw	r2,-76(fp)
 4002ab4:	18bfe116 	blt	r3,r2,4002a3c <__alt_mem_onchip_memory2_0+0xfbffd87c>
//				vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
//			}


        }
        count++;
 4002ab8:	e0bfea17 	ldw	r2,-88(fp)
 4002abc:	10800044 	addi	r2,r2,1
 4002ac0:	e0bfea15 	stw	r2,-88(fp)
        usleep (time);
 4002ac4:	e0bfec17 	ldw	r2,-80(fp)
 4002ac8:	1009883a 	mov	r4,r2
 4002acc:	40230600 	call	4023060 <usleep>

    int randomEnd = randomStart + 8;
    checkEndGame(randomStart, randomEnd, 1);
//    int startTwo, endTwo, startThree, endThree, startFour, endFour;
    int shapeLayout = 0; //0 = sideways, 1 = vertical
    for (int i = 1; i < 30; i++) {
 4002ad0:	e0bfef17 	ldw	r2,-68(fp)
 4002ad4:	10800044 	addi	r2,r2,1
 4002ad8:	e0bfef15 	stw	r2,-68(fp)
 4002adc:	e0bfef17 	ldw	r2,-68(fp)
 4002ae0:	10800790 	cmplti	r2,r2,30
 4002ae4:	103cdf1e 	bne	r2,zero,4001e64 <__alt_mem_onchip_memory2_0+0xfbffcca4>

        }
        count++;
        usleep (time);
    }
    if(shapeLayout == 0){
 4002ae8:	e0bfee17 	ldw	r2,-72(fp)
 4002aec:	10001a1e 	bne	r2,zero,4002b58 <dropRectangle+0xd90>
    	for(int i = randomStart; i < randomEnd; i++){
 4002af0:	e0bfeb17 	ldw	r2,-84(fp)
 4002af4:	e0bffb15 	stw	r2,-20(fp)
 4002af8:	00001306 	br	4002b48 <dropRectangle+0xd80>
    		grid[29][i] = 1;
 4002afc:	008100f4 	movhi	r2,1027
 4002b00:	10a62204 	addi	r2,r2,-26488
 4002b04:	e0fffb17 	ldw	r3,-20(fp)
 4002b08:	18c11384 	addi	r3,r3,1102
 4002b0c:	18c7883a 	add	r3,r3,r3
 4002b10:	18c7883a 	add	r3,r3,r3
 4002b14:	10c5883a 	add	r2,r2,r3
 4002b18:	00c00044 	movi	r3,1
 4002b1c:	10c00015 	stw	r3,0(r2)
    		rowCount[29]++;
 4002b20:	008100f4 	movhi	r2,1027
 4002b24:	10a60404 	addi	r2,r2,-26608
 4002b28:	10801d17 	ldw	r2,116(r2)
 4002b2c:	10c00044 	addi	r3,r2,1
 4002b30:	008100f4 	movhi	r2,1027
 4002b34:	10a60404 	addi	r2,r2,-26608
 4002b38:	10c01d15 	stw	r3,116(r2)
        }
        count++;
        usleep (time);
    }
    if(shapeLayout == 0){
    	for(int i = randomStart; i < randomEnd; i++){
 4002b3c:	e0bffb17 	ldw	r2,-20(fp)
 4002b40:	10800044 	addi	r2,r2,1
 4002b44:	e0bffb15 	stw	r2,-20(fp)
 4002b48:	e0fffb17 	ldw	r3,-20(fp)
 4002b4c:	e0bfed17 	ldw	r2,-76(fp)
 4002b50:	18bfea16 	blt	r3,r2,4002afc <__alt_mem_onchip_memory2_0+0xfbffd93c>
 4002b54:	00004c06 	br	4002c88 <dropRectangle+0xec0>
    		grid[29][i] = 1;
    		rowCount[29]++;
    	}
    }else if(shapeLayout == 1){
 4002b58:	e0bfee17 	ldw	r2,-72(fp)
 4002b5c:	10800058 	cmpnei	r2,r2,1
 4002b60:	1000491e 	bne	r2,zero,4002c88 <dropRectangle+0xec0>
    	for(int i = randomStart; i < randomEnd; i++){
 4002b64:	e0bfeb17 	ldw	r2,-84(fp)
 4002b68:	e0bffc15 	stw	r2,-16(fp)
 4002b6c:	00004306 	br	4002c7c <dropRectangle+0xeb4>
    		grid[28][i] = 1;
 4002b70:	008100f4 	movhi	r2,1027
 4002b74:	10a62204 	addi	r2,r2,-26488
 4002b78:	e0fffc17 	ldw	r3,-16(fp)
 4002b7c:	18c10a04 	addi	r3,r3,1064
 4002b80:	18c7883a 	add	r3,r3,r3
 4002b84:	18c7883a 	add	r3,r3,r3
 4002b88:	10c5883a 	add	r2,r2,r3
 4002b8c:	00c00044 	movi	r3,1
 4002b90:	10c00015 	stw	r3,0(r2)
    		grid[27][i] = 1;
 4002b94:	008100f4 	movhi	r2,1027
 4002b98:	10a62204 	addi	r2,r2,-26488
 4002b9c:	e0fffc17 	ldw	r3,-16(fp)
 4002ba0:	18c10084 	addi	r3,r3,1026
 4002ba4:	18c7883a 	add	r3,r3,r3
 4002ba8:	18c7883a 	add	r3,r3,r3
 4002bac:	10c5883a 	add	r2,r2,r3
 4002bb0:	00c00044 	movi	r3,1
 4002bb4:	10c00015 	stw	r3,0(r2)
    		grid[26][i] = 1;
 4002bb8:	008100f4 	movhi	r2,1027
 4002bbc:	10a62204 	addi	r2,r2,-26488
 4002bc0:	e0fffc17 	ldw	r3,-16(fp)
 4002bc4:	18c0f704 	addi	r3,r3,988
 4002bc8:	18c7883a 	add	r3,r3,r3
 4002bcc:	18c7883a 	add	r3,r3,r3
 4002bd0:	10c5883a 	add	r2,r2,r3
 4002bd4:	00c00044 	movi	r3,1
 4002bd8:	10c00015 	stw	r3,0(r2)
    		grid[29][i] = 1;
 4002bdc:	008100f4 	movhi	r2,1027
 4002be0:	10a62204 	addi	r2,r2,-26488
 4002be4:	e0fffc17 	ldw	r3,-16(fp)
 4002be8:	18c11384 	addi	r3,r3,1102
 4002bec:	18c7883a 	add	r3,r3,r3
 4002bf0:	18c7883a 	add	r3,r3,r3
 4002bf4:	10c5883a 	add	r2,r2,r3
 4002bf8:	00c00044 	movi	r3,1
 4002bfc:	10c00015 	stw	r3,0(r2)

    		rowCount[29]++;
 4002c00:	008100f4 	movhi	r2,1027
 4002c04:	10a60404 	addi	r2,r2,-26608
 4002c08:	10801d17 	ldw	r2,116(r2)
 4002c0c:	10c00044 	addi	r3,r2,1
 4002c10:	008100f4 	movhi	r2,1027
 4002c14:	10a60404 	addi	r2,r2,-26608
 4002c18:	10c01d15 	stw	r3,116(r2)
    		rowCount[28]++;
 4002c1c:	008100f4 	movhi	r2,1027
 4002c20:	10a60404 	addi	r2,r2,-26608
 4002c24:	10801c17 	ldw	r2,112(r2)
 4002c28:	10c00044 	addi	r3,r2,1
 4002c2c:	008100f4 	movhi	r2,1027
 4002c30:	10a60404 	addi	r2,r2,-26608
 4002c34:	10c01c15 	stw	r3,112(r2)
    		rowCount[27]++;
 4002c38:	008100f4 	movhi	r2,1027
 4002c3c:	10a60404 	addi	r2,r2,-26608
 4002c40:	10801b17 	ldw	r2,108(r2)
 4002c44:	10c00044 	addi	r3,r2,1
 4002c48:	008100f4 	movhi	r2,1027
 4002c4c:	10a60404 	addi	r2,r2,-26608
 4002c50:	10c01b15 	stw	r3,108(r2)
    		rowCount[26]++;
 4002c54:	008100f4 	movhi	r2,1027
 4002c58:	10a60404 	addi	r2,r2,-26608
 4002c5c:	10801a17 	ldw	r2,104(r2)
 4002c60:	10c00044 	addi	r3,r2,1
 4002c64:	008100f4 	movhi	r2,1027
 4002c68:	10a60404 	addi	r2,r2,-26608
 4002c6c:	10c01a15 	stw	r3,104(r2)
    	for(int i = randomStart; i < randomEnd; i++){
    		grid[29][i] = 1;
    		rowCount[29]++;
    	}
    }else if(shapeLayout == 1){
    	for(int i = randomStart; i < randomEnd; i++){
 4002c70:	e0bffc17 	ldw	r2,-16(fp)
 4002c74:	10800044 	addi	r2,r2,1
 4002c78:	e0bffc15 	stw	r2,-16(fp)
 4002c7c:	e0fffc17 	ldw	r3,-16(fp)
 4002c80:	e0bfed17 	ldw	r2,-76(fp)
 4002c84:	18bfba16 	blt	r3,r2,4002b70 <__alt_mem_onchip_memory2_0+0xfbffd9b0>
    		rowCount[27]++;
    		rowCount[26]++;
    	}
    }

}
 4002c88:	e6fffe04 	addi	sp,fp,-8
 4002c8c:	dfc00317 	ldw	ra,12(sp)
 4002c90:	df000217 	ldw	fp,8(sp)
 4002c94:	dc400117 	ldw	r17,4(sp)
 4002c98:	dc000017 	ldw	r16,0(sp)
 4002c9c:	dec00404 	addi	sp,sp,16
 4002ca0:	f800283a 	ret

04002ca4 <dropJBlock>:

void dropJBlock() {
 4002ca4:	deffbe04 	addi	sp,sp,-264
 4002ca8:	dfc04115 	stw	ra,260(sp)
 4002cac:	df004015 	stw	fp,256(sp)
 4002cb0:	dc403f15 	stw	r17,252(sp)
 4002cb4:	dc003e15 	stw	r16,248(sp)
 4002cb8:	df004004 	addi	fp,sp,256
    int count = 0;
 4002cbc:	e03fc015 	stw	zero,-256(fp)
    BYTE keycode;
    int randomStart = rand()%32+21;
 4002cc0:	40141e00 	call	40141e0 <rand>
 4002cc4:	1007883a 	mov	r3,r2
 4002cc8:	00a00034 	movhi	r2,32768
 4002ccc:	108007c4 	addi	r2,r2,31
 4002cd0:	1884703a 	and	r2,r3,r2
 4002cd4:	1000040e 	bge	r2,zero,4002ce8 <dropJBlock+0x44>
 4002cd8:	10bfffc4 	addi	r2,r2,-1
 4002cdc:	00fff804 	movi	r3,-32
 4002ce0:	10c4b03a 	or	r2,r2,r3
 4002ce4:	10800044 	addi	r2,r2,1
 4002ce8:	10800544 	addi	r2,r2,21
 4002cec:	e0bfc115 	stw	r2,-252(fp)
    if(randomStart % 2 == 0){
 4002cf0:	e0bfc117 	ldw	r2,-252(fp)
 4002cf4:	1080004c 	andi	r2,r2,1
 4002cf8:	10000a1e 	bne	r2,zero,4002d24 <dropJBlock+0x80>
    	if(randomStart == 52){
 4002cfc:	e0bfc117 	ldw	r2,-252(fp)
 4002d00:	10800d18 	cmpnei	r2,r2,52
 4002d04:	1000041e 	bne	r2,zero,4002d18 <dropJBlock+0x74>
    		randomStart--;
 4002d08:	e0bfc117 	ldw	r2,-252(fp)
 4002d0c:	10bfffc4 	addi	r2,r2,-1
 4002d10:	e0bfc115 	stw	r2,-252(fp)
 4002d14:	00000306 	br	4002d24 <dropJBlock+0x80>
    	}else{
    		randomStart++;
 4002d18:	e0bfc117 	ldw	r2,-252(fp)
 4002d1c:	10800044 	addi	r2,r2,1
 4002d20:	e0bfc115 	stw	r2,-252(fp)
    	}
    }
    int randomFirstEnd = randomStart + 2;
 4002d24:	e0bfc117 	ldw	r2,-252(fp)
 4002d28:	10800084 	addi	r2,r2,2
 4002d2c:	e0bfc215 	stw	r2,-248(fp)
    int randomEnd = randomStart + 6;
 4002d30:	e0bfc117 	ldw	r2,-252(fp)
 4002d34:	10800184 	addi	r2,r2,6
 4002d38:	e0bfc315 	stw	r2,-244(fp)
    int time = timer;
 4002d3c:	d0a80117 	ldw	r2,-24572(gp)
 4002d40:	e0bfc415 	stw	r2,-240(fp)
    int secondWall = 0;
 4002d44:	e03fc515 	stw	zero,-236(fp)
    int shapeLayout = 0; //0 == default, 1 == one left rotate, 2 == 2 rotate, 3 == 3 rotate
 4002d48:	e03fc615 	stw	zero,-232(fp)
    checkEndGame(randomStart, randomEnd, 2);
 4002d4c:	01800084 	movi	r6,2
 4002d50:	e17fc317 	ldw	r5,-244(fp)
 4002d54:	e13fc117 	ldw	r4,-252(fp)
 4002d58:	400dfd80 	call	400dfd8 <checkEndGame>
    for (int i = 2; i < 30; i++) {
 4002d5c:	00800084 	movi	r2,2
 4002d60:	e0bfc715 	stw	r2,-228(fp)
 4002d64:	0008dd06 	br	40050dc <dropJBlock+0x2438>
        if (count == 0) {
 4002d68:	e0bfc017 	ldw	r2,-256(fp)
 4002d6c:	1000491e 	bne	r2,zero,4002e94 <dropJBlock+0x1f0>
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;


        	for (int j = randomStart; j < randomFirstEnd; j++) {
 4002d70:	e0bfc117 	ldw	r2,-252(fp)
 4002d74:	e0bfc815 	stw	r2,-224(fp)
 4002d78:	00002006 	br	4002dfc <dropJBlock+0x158>
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x56;
 4002d7c:	d4200317 	ldw	r16,-32756(gp)
 4002d80:	e0bfc717 	ldw	r2,-228(fp)
 4002d84:	10bfffc4 	addi	r2,r2,-1
 4002d88:	01401404 	movi	r5,80
 4002d8c:	1009883a 	mov	r4,r2
 4002d90:	40118340 	call	4011834 <__mulsi3>
 4002d94:	1007883a 	mov	r3,r2
 4002d98:	e0bfc817 	ldw	r2,-224(fp)
 4002d9c:	1885883a 	add	r2,r3,r2
 4002da0:	1085883a 	add	r2,r2,r2
 4002da4:	8085883a 	add	r2,r16,r2
 4002da8:	00c01584 	movi	r3,86
 4002dac:	10c00005 	stb	r3,0(r2)
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 4002db0:	d4600317 	ldw	r17,-32756(gp)
 4002db4:	e0bfc717 	ldw	r2,-228(fp)
 4002db8:	10bfffc4 	addi	r2,r2,-1
 4002dbc:	01401404 	movi	r5,80
 4002dc0:	1009883a 	mov	r4,r2
 4002dc4:	40118340 	call	4011834 <__mulsi3>
 4002dc8:	1007883a 	mov	r3,r2
 4002dcc:	e0bfc817 	ldw	r2,-224(fp)
 4002dd0:	1885883a 	add	r2,r3,r2
 4002dd4:	1085883a 	add	r2,r2,r2
 4002dd8:	14000044 	addi	r16,r2,1
 4002ddc:	e13fc817 	ldw	r4,-224(fp)
 4002de0:	400d8600 	call	400d860 <check_col>
 4002de4:	1007883a 	mov	r3,r2
 4002de8:	8c05883a 	add	r2,r17,r16
 4002dec:	10c00005 	stb	r3,0(r2)
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;


        	for (int j = randomStart; j < randomFirstEnd; j++) {
 4002df0:	e0bfc817 	ldw	r2,-224(fp)
 4002df4:	10800044 	addi	r2,r2,1
 4002df8:	e0bfc815 	stw	r2,-224(fp)
 4002dfc:	e0ffc817 	ldw	r3,-224(fp)
 4002e00:	e0bfc217 	ldw	r2,-248(fp)
 4002e04:	18bfdd16 	blt	r3,r2,4002d7c <__alt_mem_onchip_memory2_0+0xfbffdbbc>
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x56;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
        	}

        	for (int j = randomStart; j < randomEnd; j++) {
 4002e08:	e0bfc117 	ldw	r2,-252(fp)
 4002e0c:	e0bfc915 	stw	r2,-220(fp)
 4002e10:	00001c06 	br	4002e84 <dropJBlock+0x1e0>
				vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
 4002e14:	d4200317 	ldw	r16,-32756(gp)
 4002e18:	01401404 	movi	r5,80
 4002e1c:	e13fc717 	ldw	r4,-228(fp)
 4002e20:	40118340 	call	4011834 <__mulsi3>
 4002e24:	1007883a 	mov	r3,r2
 4002e28:	e0bfc917 	ldw	r2,-220(fp)
 4002e2c:	1885883a 	add	r2,r3,r2
 4002e30:	1085883a 	add	r2,r2,r2
 4002e34:	8085883a 	add	r2,r16,r2
 4002e38:	00c01584 	movi	r3,86
 4002e3c:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
 4002e40:	d4600317 	ldw	r17,-32756(gp)
 4002e44:	01401404 	movi	r5,80
 4002e48:	e13fc717 	ldw	r4,-228(fp)
 4002e4c:	40118340 	call	4011834 <__mulsi3>
 4002e50:	1007883a 	mov	r3,r2
 4002e54:	e0bfc917 	ldw	r2,-220(fp)
 4002e58:	1885883a 	add	r2,r3,r2
 4002e5c:	1085883a 	add	r2,r2,r2
 4002e60:	14000044 	addi	r16,r2,1
 4002e64:	e13fc917 	ldw	r4,-220(fp)
 4002e68:	400d8600 	call	400d860 <check_col>
 4002e6c:	1007883a 	mov	r3,r2
 4002e70:	8c05883a 	add	r2,r17,r16
 4002e74:	10c00005 	stb	r3,0(r2)
        	for (int j = randomStart; j < randomFirstEnd; j++) {
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x56;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
        	}

        	for (int j = randomStart; j < randomEnd; j++) {
 4002e78:	e0bfc917 	ldw	r2,-220(fp)
 4002e7c:	10800044 	addi	r2,r2,1
 4002e80:	e0bfc915 	stw	r2,-220(fp)
 4002e84:	e0ffc917 	ldw	r3,-220(fp)
 4002e88:	e0bfc317 	ldw	r2,-244(fp)
 4002e8c:	18bfe116 	blt	r3,r2,4002e14 <__alt_mem_onchip_memory2_0+0xfbffdc54>
 4002e90:	00088906 	br	40050b8 <dropJBlock+0x2414>
			}



        } else {
        	if(shapeLayout == 0){
 4002e94:	e0bfc617 	ldw	r2,-232(fp)
 4002e98:	1000681e 	bne	r2,zero,400303c <dropJBlock+0x398>
				for (int j = randomStart; j < randomEnd; j++) {
 4002e9c:	e0bfc117 	ldw	r2,-252(fp)
 4002ea0:	e0bfca15 	stw	r2,-216(fp)
 4002ea4:	00006106 	br	400302c <dropJBlock+0x388>
					if(grid[i][j] == 1){
 4002ea8:	040100f4 	movhi	r16,1027
 4002eac:	84262204 	addi	r16,r16,-26488
 4002eb0:	e0bfc717 	ldw	r2,-228(fp)
 4002eb4:	01400984 	movi	r5,38
 4002eb8:	1009883a 	mov	r4,r2
 4002ebc:	40118340 	call	4011834 <__mulsi3>
 4002ec0:	1007883a 	mov	r3,r2
 4002ec4:	e0bfca17 	ldw	r2,-216(fp)
 4002ec8:	1885883a 	add	r2,r3,r2
 4002ecc:	1085883a 	add	r2,r2,r2
 4002ed0:	1085883a 	add	r2,r2,r2
 4002ed4:	8085883a 	add	r2,r16,r2
 4002ed8:	10800017 	ldw	r2,0(r2)
 4002edc:	10800058 	cmpnei	r2,r2,1
 4002ee0:	10004f1e 	bne	r2,zero,4003020 <dropJBlock+0x37c>
						for (int j = randomStart; j < randomFirstEnd; j++) {
 4002ee4:	e0bfc117 	ldw	r2,-252(fp)
 4002ee8:	e0bfcb15 	stw	r2,-212(fp)
 4002eec:	00002106 	br	4002f74 <dropJBlock+0x2d0>
							grid[i - 2][j] = 1;
 4002ef0:	e0bfc717 	ldw	r2,-228(fp)
 4002ef4:	10bfff84 	addi	r2,r2,-2
 4002ef8:	040100f4 	movhi	r16,1027
 4002efc:	84262204 	addi	r16,r16,-26488
 4002f00:	01400984 	movi	r5,38
 4002f04:	1009883a 	mov	r4,r2
 4002f08:	40118340 	call	4011834 <__mulsi3>
 4002f0c:	1007883a 	mov	r3,r2
 4002f10:	e0bfcb17 	ldw	r2,-212(fp)
 4002f14:	1885883a 	add	r2,r3,r2
 4002f18:	1085883a 	add	r2,r2,r2
 4002f1c:	1085883a 	add	r2,r2,r2
 4002f20:	8085883a 	add	r2,r16,r2
 4002f24:	00c00044 	movi	r3,1
 4002f28:	10c00015 	stw	r3,0(r2)
							rowCount[i-2]++;
 4002f2c:	e0bfc717 	ldw	r2,-228(fp)
 4002f30:	10bfff84 	addi	r2,r2,-2
 4002f34:	00c100f4 	movhi	r3,1027
 4002f38:	18e60404 	addi	r3,r3,-26608
 4002f3c:	1089883a 	add	r4,r2,r2
 4002f40:	2109883a 	add	r4,r4,r4
 4002f44:	1907883a 	add	r3,r3,r4
 4002f48:	18c00017 	ldw	r3,0(r3)
 4002f4c:	19000044 	addi	r4,r3,1
 4002f50:	00c100f4 	movhi	r3,1027
 4002f54:	18e60404 	addi	r3,r3,-26608
 4002f58:	1085883a 	add	r2,r2,r2
 4002f5c:	1085883a 	add	r2,r2,r2
 4002f60:	1885883a 	add	r2,r3,r2
 4002f64:	11000015 	stw	r4,0(r2)

        } else {
        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
					if(grid[i][j] == 1){
						for (int j = randomStart; j < randomFirstEnd; j++) {
 4002f68:	e0bfcb17 	ldw	r2,-212(fp)
 4002f6c:	10800044 	addi	r2,r2,1
 4002f70:	e0bfcb15 	stw	r2,-212(fp)
 4002f74:	e0ffcb17 	ldw	r3,-212(fp)
 4002f78:	e0bfc217 	ldw	r2,-248(fp)
 4002f7c:	18bfdc16 	blt	r3,r2,4002ef0 <__alt_mem_onchip_memory2_0+0xfbffdd30>
							grid[i - 2][j] = 1;
							rowCount[i-2]++;
						}
						for (int j = randomStart; j < randomEnd; j++) {
 4002f80:	e0bfc117 	ldw	r2,-252(fp)
 4002f84:	e0bfcc15 	stw	r2,-208(fp)
 4002f88:	00002106 	br	4003010 <dropJBlock+0x36c>
							grid[i -1][j] = 1;
 4002f8c:	e0bfc717 	ldw	r2,-228(fp)
 4002f90:	10bfffc4 	addi	r2,r2,-1
 4002f94:	040100f4 	movhi	r16,1027
 4002f98:	84262204 	addi	r16,r16,-26488
 4002f9c:	01400984 	movi	r5,38
 4002fa0:	1009883a 	mov	r4,r2
 4002fa4:	40118340 	call	4011834 <__mulsi3>
 4002fa8:	1007883a 	mov	r3,r2
 4002fac:	e0bfcc17 	ldw	r2,-208(fp)
 4002fb0:	1885883a 	add	r2,r3,r2
 4002fb4:	1085883a 	add	r2,r2,r2
 4002fb8:	1085883a 	add	r2,r2,r2
 4002fbc:	8085883a 	add	r2,r16,r2
 4002fc0:	00c00044 	movi	r3,1
 4002fc4:	10c00015 	stw	r3,0(r2)
							rowCount[i-1]++;
 4002fc8:	e0bfc717 	ldw	r2,-228(fp)
 4002fcc:	10bfffc4 	addi	r2,r2,-1
 4002fd0:	00c100f4 	movhi	r3,1027
 4002fd4:	18e60404 	addi	r3,r3,-26608
 4002fd8:	1089883a 	add	r4,r2,r2
 4002fdc:	2109883a 	add	r4,r4,r4
 4002fe0:	1907883a 	add	r3,r3,r4
 4002fe4:	18c00017 	ldw	r3,0(r3)
 4002fe8:	19000044 	addi	r4,r3,1
 4002fec:	00c100f4 	movhi	r3,1027
 4002ff0:	18e60404 	addi	r3,r3,-26608
 4002ff4:	1085883a 	add	r2,r2,r2
 4002ff8:	1085883a 	add	r2,r2,r2
 4002ffc:	1885883a 	add	r2,r3,r2
 4003000:	11000015 	stw	r4,0(r2)
					if(grid[i][j] == 1){
						for (int j = randomStart; j < randomFirstEnd; j++) {
							grid[i - 2][j] = 1;
							rowCount[i-2]++;
						}
						for (int j = randomStart; j < randomEnd; j++) {
 4003004:	e0bfcc17 	ldw	r2,-208(fp)
 4003008:	10800044 	addi	r2,r2,1
 400300c:	e0bfcc15 	stw	r2,-208(fp)
 4003010:	e0ffcc17 	ldw	r3,-208(fp)
 4003014:	e0bfc317 	ldw	r2,-244(fp)
 4003018:	18bfdc16 	blt	r3,r2,4002f8c <__alt_mem_onchip_memory2_0+0xfbffddcc>
							grid[i -1][j] = 1;
							rowCount[i-1]++;
						}
						return;
 400301c:	00093906 	br	4005504 <dropJBlock+0x2860>



        } else {
        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
 4003020:	e0bfca17 	ldw	r2,-216(fp)
 4003024:	10800044 	addi	r2,r2,1
 4003028:	e0bfca15 	stw	r2,-216(fp)
 400302c:	e0ffca17 	ldw	r3,-216(fp)
 4003030:	e0bfc317 	ldw	r2,-244(fp)
 4003034:	18bf9c16 	blt	r3,r2,4002ea8 <__alt_mem_onchip_memory2_0+0xfbffdce8>
 4003038:	00023506 	br	4003910 <dropJBlock+0xc6c>
							rowCount[i-1]++;
						}
						return;
					}
				}
			}else if(shapeLayout == 1){
 400303c:	e0bfc617 	ldw	r2,-232(fp)
 4003040:	10800058 	cmpnei	r2,r2,1
 4003044:	1000751e 	bne	r2,zero,400321c <dropJBlock+0x578>
				for (int j = randomStart; j < randomEnd; j++){
 4003048:	e0bfc117 	ldw	r2,-252(fp)
 400304c:	e0bfcd15 	stw	r2,-204(fp)
 4003050:	00006e06 	br	400320c <dropJBlock+0x568>
					if(grid[i][j] == 1){
 4003054:	040100f4 	movhi	r16,1027
 4003058:	84262204 	addi	r16,r16,-26488
 400305c:	e0bfc717 	ldw	r2,-228(fp)
 4003060:	01400984 	movi	r5,38
 4003064:	1009883a 	mov	r4,r2
 4003068:	40118340 	call	4011834 <__mulsi3>
 400306c:	1007883a 	mov	r3,r2
 4003070:	e0bfcd17 	ldw	r2,-204(fp)
 4003074:	1885883a 	add	r2,r3,r2
 4003078:	1085883a 	add	r2,r2,r2
 400307c:	1085883a 	add	r2,r2,r2
 4003080:	8085883a 	add	r2,r16,r2
 4003084:	10800017 	ldw	r2,0(r2)
 4003088:	10800058 	cmpnei	r2,r2,1
 400308c:	10005c1e 	bne	r2,zero,4003200 <dropJBlock+0x55c>
						for (int j = randomStart; j < randomEnd; j++) {
 4003090:	e0bfc117 	ldw	r2,-252(fp)
 4003094:	e0bfce15 	stw	r2,-200(fp)
 4003098:	00002106 	br	4003120 <dropJBlock+0x47c>
							grid[i- 1][j] = 1;
 400309c:	e0bfc717 	ldw	r2,-228(fp)
 40030a0:	10bfffc4 	addi	r2,r2,-1
 40030a4:	040100f4 	movhi	r16,1027
 40030a8:	84262204 	addi	r16,r16,-26488
 40030ac:	01400984 	movi	r5,38
 40030b0:	1009883a 	mov	r4,r2
 40030b4:	40118340 	call	4011834 <__mulsi3>
 40030b8:	1007883a 	mov	r3,r2
 40030bc:	e0bfce17 	ldw	r2,-200(fp)
 40030c0:	1885883a 	add	r2,r3,r2
 40030c4:	1085883a 	add	r2,r2,r2
 40030c8:	1085883a 	add	r2,r2,r2
 40030cc:	8085883a 	add	r2,r16,r2
 40030d0:	00c00044 	movi	r3,1
 40030d4:	10c00015 	stw	r3,0(r2)
							rowCount[i-1]++;
 40030d8:	e0bfc717 	ldw	r2,-228(fp)
 40030dc:	10bfffc4 	addi	r2,r2,-1
 40030e0:	00c100f4 	movhi	r3,1027
 40030e4:	18e60404 	addi	r3,r3,-26608
 40030e8:	1089883a 	add	r4,r2,r2
 40030ec:	2109883a 	add	r4,r4,r4
 40030f0:	1907883a 	add	r3,r3,r4
 40030f4:	18c00017 	ldw	r3,0(r3)
 40030f8:	19000044 	addi	r4,r3,1
 40030fc:	00c100f4 	movhi	r3,1027
 4003100:	18e60404 	addi	r3,r3,-26608
 4003104:	1085883a 	add	r2,r2,r2
 4003108:	1085883a 	add	r2,r2,r2
 400310c:	1885883a 	add	r2,r3,r2
 4003110:	11000015 	stw	r4,0(r2)
					}
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomEnd; j++){
					if(grid[i][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
 4003114:	e0bfce17 	ldw	r2,-200(fp)
 4003118:	10800044 	addi	r2,r2,1
 400311c:	e0bfce15 	stw	r2,-200(fp)
 4003120:	e0ffce17 	ldw	r3,-200(fp)
 4003124:	e0bfc317 	ldw	r2,-244(fp)
 4003128:	18bfdc16 	blt	r3,r2,400309c <__alt_mem_onchip_memory2_0+0xfbffdedc>
							grid[i- 1][j] = 1;
							rowCount[i-1]++;
						}
						for(int row = 1; row < 3; row++){
 400312c:	00800044 	movi	r2,1
 4003130:	e0bfcf15 	stw	r2,-196(fp)
 4003134:	00002e06 	br	40031f0 <dropJBlock+0x54c>
							for (int j = secondWall; j < randomEnd; j++) {
 4003138:	e0bfc517 	ldw	r2,-236(fp)
 400313c:	e0bfd015 	stw	r2,-192(fp)
 4003140:	00002506 	br	40031d8 <dropJBlock+0x534>
								grid[i - 1 - row][j] = 1;
 4003144:	e0bfc717 	ldw	r2,-228(fp)
 4003148:	10ffffc4 	addi	r3,r2,-1
 400314c:	e0bfcf17 	ldw	r2,-196(fp)
 4003150:	1885c83a 	sub	r2,r3,r2
 4003154:	040100f4 	movhi	r16,1027
 4003158:	84262204 	addi	r16,r16,-26488
 400315c:	01400984 	movi	r5,38
 4003160:	1009883a 	mov	r4,r2
 4003164:	40118340 	call	4011834 <__mulsi3>
 4003168:	1007883a 	mov	r3,r2
 400316c:	e0bfd017 	ldw	r2,-192(fp)
 4003170:	1885883a 	add	r2,r3,r2
 4003174:	1085883a 	add	r2,r2,r2
 4003178:	1085883a 	add	r2,r2,r2
 400317c:	8085883a 	add	r2,r16,r2
 4003180:	00c00044 	movi	r3,1
 4003184:	10c00015 	stw	r3,0(r2)
								rowCount[i-1-row]++;
 4003188:	e0bfc717 	ldw	r2,-228(fp)
 400318c:	10ffffc4 	addi	r3,r2,-1
 4003190:	e0bfcf17 	ldw	r2,-196(fp)
 4003194:	1885c83a 	sub	r2,r3,r2
 4003198:	00c100f4 	movhi	r3,1027
 400319c:	18e60404 	addi	r3,r3,-26608
 40031a0:	1089883a 	add	r4,r2,r2
 40031a4:	2109883a 	add	r4,r4,r4
 40031a8:	1907883a 	add	r3,r3,r4
 40031ac:	18c00017 	ldw	r3,0(r3)
 40031b0:	19000044 	addi	r4,r3,1
 40031b4:	00c100f4 	movhi	r3,1027
 40031b8:	18e60404 	addi	r3,r3,-26608
 40031bc:	1085883a 	add	r2,r2,r2
 40031c0:	1085883a 	add	r2,r2,r2
 40031c4:	1885883a 	add	r2,r3,r2
 40031c8:	11000015 	stw	r4,0(r2)
						for (int j = randomStart; j < randomEnd; j++) {
							grid[i- 1][j] = 1;
							rowCount[i-1]++;
						}
						for(int row = 1; row < 3; row++){
							for (int j = secondWall; j < randomEnd; j++) {
 40031cc:	e0bfd017 	ldw	r2,-192(fp)
 40031d0:	10800044 	addi	r2,r2,1
 40031d4:	e0bfd015 	stw	r2,-192(fp)
 40031d8:	e0ffd017 	ldw	r3,-192(fp)
 40031dc:	e0bfc317 	ldw	r2,-244(fp)
 40031e0:	18bfd816 	blt	r3,r2,4003144 <__alt_mem_onchip_memory2_0+0xfbffdf84>
					if(grid[i][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
							grid[i- 1][j] = 1;
							rowCount[i-1]++;
						}
						for(int row = 1; row < 3; row++){
 40031e4:	e0bfcf17 	ldw	r2,-196(fp)
 40031e8:	10800044 	addi	r2,r2,1
 40031ec:	e0bfcf15 	stw	r2,-196(fp)
 40031f0:	e0bfcf17 	ldw	r2,-196(fp)
 40031f4:	108000d0 	cmplti	r2,r2,3
 40031f8:	103fcf1e 	bne	r2,zero,4003138 <__alt_mem_onchip_memory2_0+0xfbffdf78>
							for (int j = secondWall; j < randomEnd; j++) {
								grid[i - 1 - row][j] = 1;
								rowCount[i-1-row]++;
							}
						}
						return;
 40031fc:	0008c106 	br	4005504 <dropJBlock+0x2860>
						}
						return;
					}
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomEnd; j++){
 4003200:	e0bfcd17 	ldw	r2,-204(fp)
 4003204:	10800044 	addi	r2,r2,1
 4003208:	e0bfcd15 	stw	r2,-204(fp)
 400320c:	e0ffcd17 	ldw	r3,-204(fp)
 4003210:	e0bfc317 	ldw	r2,-244(fp)
 4003214:	18bf8f16 	blt	r3,r2,4003054 <__alt_mem_onchip_memory2_0+0xfbffde94>
 4003218:	0001bd06 	br	4003910 <dropJBlock+0xc6c>
							}
						}
						return;
					}
			}
			}else if(shapeLayout == 2){
 400321c:	e0bfc617 	ldw	r2,-232(fp)
 4003220:	10800098 	cmpnei	r2,r2,2
 4003224:	1000d01e 	bne	r2,zero,4003568 <dropJBlock+0x8c4>
				for (int j = secondWall; j < randomEnd; j++){
 4003228:	e0bfc517 	ldw	r2,-236(fp)
 400322c:	e0bfd115 	stw	r2,-188(fp)
 4003230:	00006106 	br	40033b8 <dropJBlock+0x714>
					if(grid[i][j] == 1){
 4003234:	040100f4 	movhi	r16,1027
 4003238:	84262204 	addi	r16,r16,-26488
 400323c:	e0bfc717 	ldw	r2,-228(fp)
 4003240:	01400984 	movi	r5,38
 4003244:	1009883a 	mov	r4,r2
 4003248:	40118340 	call	4011834 <__mulsi3>
 400324c:	1007883a 	mov	r3,r2
 4003250:	e0bfd117 	ldw	r2,-188(fp)
 4003254:	1885883a 	add	r2,r3,r2
 4003258:	1085883a 	add	r2,r2,r2
 400325c:	1085883a 	add	r2,r2,r2
 4003260:	8085883a 	add	r2,r16,r2
 4003264:	10800017 	ldw	r2,0(r2)
 4003268:	10800058 	cmpnei	r2,r2,1
 400326c:	10004f1e 	bne	r2,zero,40033ac <dropJBlock+0x708>
						for (int j = randomStart; j < randomEnd; j++) {
 4003270:	e0bfc117 	ldw	r2,-252(fp)
 4003274:	e0bfd215 	stw	r2,-184(fp)
 4003278:	00002106 	br	4003300 <dropJBlock+0x65c>
							grid[i - 2][j] = 1;
 400327c:	e0bfc717 	ldw	r2,-228(fp)
 4003280:	10bfff84 	addi	r2,r2,-2
 4003284:	040100f4 	movhi	r16,1027
 4003288:	84262204 	addi	r16,r16,-26488
 400328c:	01400984 	movi	r5,38
 4003290:	1009883a 	mov	r4,r2
 4003294:	40118340 	call	4011834 <__mulsi3>
 4003298:	1007883a 	mov	r3,r2
 400329c:	e0bfd217 	ldw	r2,-184(fp)
 40032a0:	1885883a 	add	r2,r3,r2
 40032a4:	1085883a 	add	r2,r2,r2
 40032a8:	1085883a 	add	r2,r2,r2
 40032ac:	8085883a 	add	r2,r16,r2
 40032b0:	00c00044 	movi	r3,1
 40032b4:	10c00015 	stw	r3,0(r2)
							rowCount[i-2]++;
 40032b8:	e0bfc717 	ldw	r2,-228(fp)
 40032bc:	10bfff84 	addi	r2,r2,-2
 40032c0:	00c100f4 	movhi	r3,1027
 40032c4:	18e60404 	addi	r3,r3,-26608
 40032c8:	1089883a 	add	r4,r2,r2
 40032cc:	2109883a 	add	r4,r4,r4
 40032d0:	1907883a 	add	r3,r3,r4
 40032d4:	18c00017 	ldw	r3,0(r3)
 40032d8:	19000044 	addi	r4,r3,1
 40032dc:	00c100f4 	movhi	r3,1027
 40032e0:	18e60404 	addi	r3,r3,-26608
 40032e4:	1085883a 	add	r2,r2,r2
 40032e8:	1085883a 	add	r2,r2,r2
 40032ec:	1885883a 	add	r2,r3,r2
 40032f0:	11000015 	stw	r4,0(r2)
					}
			}
			}else if(shapeLayout == 2){
				for (int j = secondWall; j < randomEnd; j++){
					if(grid[i][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
 40032f4:	e0bfd217 	ldw	r2,-184(fp)
 40032f8:	10800044 	addi	r2,r2,1
 40032fc:	e0bfd215 	stw	r2,-184(fp)
 4003300:	e0ffd217 	ldw	r3,-184(fp)
 4003304:	e0bfc317 	ldw	r2,-244(fp)
 4003308:	18bfdc16 	blt	r3,r2,400327c <__alt_mem_onchip_memory2_0+0xfbffe0bc>
							grid[i - 2][j] = 1;
							rowCount[i-2]++;
						}
						for (int j = secondWall; j < randomEnd; j++) {
 400330c:	e0bfc517 	ldw	r2,-236(fp)
 4003310:	e0bfd315 	stw	r2,-180(fp)
 4003314:	00002106 	br	400339c <dropJBlock+0x6f8>
							grid[i-1][j] = 1;
 4003318:	e0bfc717 	ldw	r2,-228(fp)
 400331c:	10bfffc4 	addi	r2,r2,-1
 4003320:	040100f4 	movhi	r16,1027
 4003324:	84262204 	addi	r16,r16,-26488
 4003328:	01400984 	movi	r5,38
 400332c:	1009883a 	mov	r4,r2
 4003330:	40118340 	call	4011834 <__mulsi3>
 4003334:	1007883a 	mov	r3,r2
 4003338:	e0bfd317 	ldw	r2,-180(fp)
 400333c:	1885883a 	add	r2,r3,r2
 4003340:	1085883a 	add	r2,r2,r2
 4003344:	1085883a 	add	r2,r2,r2
 4003348:	8085883a 	add	r2,r16,r2
 400334c:	00c00044 	movi	r3,1
 4003350:	10c00015 	stw	r3,0(r2)
							rowCount[i-1]++;
 4003354:	e0bfc717 	ldw	r2,-228(fp)
 4003358:	10bfffc4 	addi	r2,r2,-1
 400335c:	00c100f4 	movhi	r3,1027
 4003360:	18e60404 	addi	r3,r3,-26608
 4003364:	1089883a 	add	r4,r2,r2
 4003368:	2109883a 	add	r4,r4,r4
 400336c:	1907883a 	add	r3,r3,r4
 4003370:	18c00017 	ldw	r3,0(r3)
 4003374:	19000044 	addi	r4,r3,1
 4003378:	00c100f4 	movhi	r3,1027
 400337c:	18e60404 	addi	r3,r3,-26608
 4003380:	1085883a 	add	r2,r2,r2
 4003384:	1085883a 	add	r2,r2,r2
 4003388:	1885883a 	add	r2,r3,r2
 400338c:	11000015 	stw	r4,0(r2)
					if(grid[i][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
							grid[i - 2][j] = 1;
							rowCount[i-2]++;
						}
						for (int j = secondWall; j < randomEnd; j++) {
 4003390:	e0bfd317 	ldw	r2,-180(fp)
 4003394:	10800044 	addi	r2,r2,1
 4003398:	e0bfd315 	stw	r2,-180(fp)
 400339c:	e0ffd317 	ldw	r3,-180(fp)
 40033a0:	e0bfc317 	ldw	r2,-244(fp)
 40033a4:	18bfdc16 	blt	r3,r2,4003318 <__alt_mem_onchip_memory2_0+0xfbffe158>
							grid[i-1][j] = 1;
							rowCount[i-1]++;
						}
						return;
 40033a8:	00085606 	br	4005504 <dropJBlock+0x2860>
						}
						return;
					}
			}
			}else if(shapeLayout == 2){
				for (int j = secondWall; j < randomEnd; j++){
 40033ac:	e0bfd117 	ldw	r2,-188(fp)
 40033b0:	10800044 	addi	r2,r2,1
 40033b4:	e0bfd115 	stw	r2,-188(fp)
 40033b8:	e0ffd117 	ldw	r3,-188(fp)
 40033bc:	e0bfc317 	ldw	r2,-244(fp)
 40033c0:	18bf9c16 	blt	r3,r2,4003234 <__alt_mem_onchip_memory2_0+0xfbffe074>
							rowCount[i-1]++;
						}
						return;
					}
				}
				for(int j = randomStart; j < secondWall; j++){
 40033c4:	e0bfc117 	ldw	r2,-252(fp)
 40033c8:	e0bfd415 	stw	r2,-176(fp)
 40033cc:	00006206 	br	4003558 <dropJBlock+0x8b4>
					if(grid[i - 1][j] == 1){
 40033d0:	e0bfc717 	ldw	r2,-228(fp)
 40033d4:	10bfffc4 	addi	r2,r2,-1
 40033d8:	040100f4 	movhi	r16,1027
 40033dc:	84262204 	addi	r16,r16,-26488
 40033e0:	01400984 	movi	r5,38
 40033e4:	1009883a 	mov	r4,r2
 40033e8:	40118340 	call	4011834 <__mulsi3>
 40033ec:	1007883a 	mov	r3,r2
 40033f0:	e0bfd417 	ldw	r2,-176(fp)
 40033f4:	1885883a 	add	r2,r3,r2
 40033f8:	1085883a 	add	r2,r2,r2
 40033fc:	1085883a 	add	r2,r2,r2
 4003400:	8085883a 	add	r2,r16,r2
 4003404:	10800017 	ldw	r2,0(r2)
 4003408:	10800058 	cmpnei	r2,r2,1
 400340c:	10004f1e 	bne	r2,zero,400354c <dropJBlock+0x8a8>
						for (int j = randomStart; j < randomEnd; j++) {
 4003410:	e0bfc117 	ldw	r2,-252(fp)
 4003414:	e0bfd515 	stw	r2,-172(fp)
 4003418:	00002106 	br	40034a0 <dropJBlock+0x7fc>
							grid[i - 2][j] = 1;
 400341c:	e0bfc717 	ldw	r2,-228(fp)
 4003420:	10bfff84 	addi	r2,r2,-2
 4003424:	040100f4 	movhi	r16,1027
 4003428:	84262204 	addi	r16,r16,-26488
 400342c:	01400984 	movi	r5,38
 4003430:	1009883a 	mov	r4,r2
 4003434:	40118340 	call	4011834 <__mulsi3>
 4003438:	1007883a 	mov	r3,r2
 400343c:	e0bfd517 	ldw	r2,-172(fp)
 4003440:	1885883a 	add	r2,r3,r2
 4003444:	1085883a 	add	r2,r2,r2
 4003448:	1085883a 	add	r2,r2,r2
 400344c:	8085883a 	add	r2,r16,r2
 4003450:	00c00044 	movi	r3,1
 4003454:	10c00015 	stw	r3,0(r2)
							rowCount[i - 2]++;
 4003458:	e0bfc717 	ldw	r2,-228(fp)
 400345c:	10bfff84 	addi	r2,r2,-2
 4003460:	00c100f4 	movhi	r3,1027
 4003464:	18e60404 	addi	r3,r3,-26608
 4003468:	1089883a 	add	r4,r2,r2
 400346c:	2109883a 	add	r4,r4,r4
 4003470:	1907883a 	add	r3,r3,r4
 4003474:	18c00017 	ldw	r3,0(r3)
 4003478:	19000044 	addi	r4,r3,1
 400347c:	00c100f4 	movhi	r3,1027
 4003480:	18e60404 	addi	r3,r3,-26608
 4003484:	1085883a 	add	r2,r2,r2
 4003488:	1085883a 	add	r2,r2,r2
 400348c:	1885883a 	add	r2,r3,r2
 4003490:	11000015 	stw	r4,0(r2)
						return;
					}
				}
				for(int j = randomStart; j < secondWall; j++){
					if(grid[i - 1][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
 4003494:	e0bfd517 	ldw	r2,-172(fp)
 4003498:	10800044 	addi	r2,r2,1
 400349c:	e0bfd515 	stw	r2,-172(fp)
 40034a0:	e0ffd517 	ldw	r3,-172(fp)
 40034a4:	e0bfc317 	ldw	r2,-244(fp)
 40034a8:	18bfdc16 	blt	r3,r2,400341c <__alt_mem_onchip_memory2_0+0xfbffe25c>
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}
						for (int j = secondWall; j < randomEnd; j++) {
 40034ac:	e0bfc517 	ldw	r2,-236(fp)
 40034b0:	e0bfd615 	stw	r2,-168(fp)
 40034b4:	00002106 	br	400353c <dropJBlock+0x898>
							grid[i-1][j] = 1;
 40034b8:	e0bfc717 	ldw	r2,-228(fp)
 40034bc:	10bfffc4 	addi	r2,r2,-1
 40034c0:	040100f4 	movhi	r16,1027
 40034c4:	84262204 	addi	r16,r16,-26488
 40034c8:	01400984 	movi	r5,38
 40034cc:	1009883a 	mov	r4,r2
 40034d0:	40118340 	call	4011834 <__mulsi3>
 40034d4:	1007883a 	mov	r3,r2
 40034d8:	e0bfd617 	ldw	r2,-168(fp)
 40034dc:	1885883a 	add	r2,r3,r2
 40034e0:	1085883a 	add	r2,r2,r2
 40034e4:	1085883a 	add	r2,r2,r2
 40034e8:	8085883a 	add	r2,r16,r2
 40034ec:	00c00044 	movi	r3,1
 40034f0:	10c00015 	stw	r3,0(r2)
							rowCount[i - 1]++;
 40034f4:	e0bfc717 	ldw	r2,-228(fp)
 40034f8:	10bfffc4 	addi	r2,r2,-1
 40034fc:	00c100f4 	movhi	r3,1027
 4003500:	18e60404 	addi	r3,r3,-26608
 4003504:	1089883a 	add	r4,r2,r2
 4003508:	2109883a 	add	r4,r4,r4
 400350c:	1907883a 	add	r3,r3,r4
 4003510:	18c00017 	ldw	r3,0(r3)
 4003514:	19000044 	addi	r4,r3,1
 4003518:	00c100f4 	movhi	r3,1027
 400351c:	18e60404 	addi	r3,r3,-26608
 4003520:	1085883a 	add	r2,r2,r2
 4003524:	1085883a 	add	r2,r2,r2
 4003528:	1885883a 	add	r2,r3,r2
 400352c:	11000015 	stw	r4,0(r2)
					if(grid[i - 1][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}
						for (int j = secondWall; j < randomEnd; j++) {
 4003530:	e0bfd617 	ldw	r2,-168(fp)
 4003534:	10800044 	addi	r2,r2,1
 4003538:	e0bfd615 	stw	r2,-168(fp)
 400353c:	e0ffd617 	ldw	r3,-168(fp)
 4003540:	e0bfc317 	ldw	r2,-244(fp)
 4003544:	18bfdc16 	blt	r3,r2,40034b8 <__alt_mem_onchip_memory2_0+0xfbffe2f8>
							grid[i-1][j] = 1;
							rowCount[i - 1]++;
						}
						return;
 4003548:	0007ee06 	br	4005504 <dropJBlock+0x2860>
							rowCount[i-1]++;
						}
						return;
					}
				}
				for(int j = randomStart; j < secondWall; j++){
 400354c:	e0bfd417 	ldw	r2,-176(fp)
 4003550:	10800044 	addi	r2,r2,1
 4003554:	e0bfd415 	stw	r2,-176(fp)
 4003558:	e0ffd417 	ldw	r3,-176(fp)
 400355c:	e0bfc517 	ldw	r2,-236(fp)
 4003560:	18bf9b16 	blt	r3,r2,40033d0 <__alt_mem_onchip_memory2_0+0xfbffe210>
 4003564:	0000ea06 	br	4003910 <dropJBlock+0xc6c>
						}
						return;
					}
				}

			}else if(shapeLayout == 3){
 4003568:	e0bfc617 	ldw	r2,-232(fp)
 400356c:	108000d8 	cmpnei	r2,r2,3
 4003570:	1000e71e 	bne	r2,zero,4003910 <dropJBlock+0xc6c>
				for (int j = randomStart; j < randomFirstEnd; j++){
 4003574:	e0bfc117 	ldw	r2,-252(fp)
 4003578:	e0bfd715 	stw	r2,-164(fp)
 400357c:	00006d06 	br	4003734 <dropJBlock+0xa90>
					if(grid[i][j] == 1){
 4003580:	040100f4 	movhi	r16,1027
 4003584:	84262204 	addi	r16,r16,-26488
 4003588:	e0bfc717 	ldw	r2,-228(fp)
 400358c:	01400984 	movi	r5,38
 4003590:	1009883a 	mov	r4,r2
 4003594:	40118340 	call	4011834 <__mulsi3>
 4003598:	1007883a 	mov	r3,r2
 400359c:	e0bfd717 	ldw	r2,-164(fp)
 40035a0:	1885883a 	add	r2,r3,r2
 40035a4:	1085883a 	add	r2,r2,r2
 40035a8:	1085883a 	add	r2,r2,r2
 40035ac:	8085883a 	add	r2,r16,r2
 40035b0:	10800017 	ldw	r2,0(r2)
 40035b4:	10800058 	cmpnei	r2,r2,1
 40035b8:	10005b1e 	bne	r2,zero,4003728 <dropJBlock+0xa84>
						for (int j = randomStart; j < randomEnd; j++) {
 40035bc:	e0bfc117 	ldw	r2,-252(fp)
 40035c0:	e0bfd815 	stw	r2,-160(fp)
 40035c4:	00002106 	br	400364c <dropJBlock+0x9a8>
							grid[i - 3][j] = 1;
 40035c8:	e0bfc717 	ldw	r2,-228(fp)
 40035cc:	10bfff44 	addi	r2,r2,-3
 40035d0:	040100f4 	movhi	r16,1027
 40035d4:	84262204 	addi	r16,r16,-26488
 40035d8:	01400984 	movi	r5,38
 40035dc:	1009883a 	mov	r4,r2
 40035e0:	40118340 	call	4011834 <__mulsi3>
 40035e4:	1007883a 	mov	r3,r2
 40035e8:	e0bfd817 	ldw	r2,-160(fp)
 40035ec:	1885883a 	add	r2,r3,r2
 40035f0:	1085883a 	add	r2,r2,r2
 40035f4:	1085883a 	add	r2,r2,r2
 40035f8:	8085883a 	add	r2,r16,r2
 40035fc:	00c00044 	movi	r3,1
 4003600:	10c00015 	stw	r3,0(r2)
							rowCount[i - 3]++;
 4003604:	e0bfc717 	ldw	r2,-228(fp)
 4003608:	10bfff44 	addi	r2,r2,-3
 400360c:	00c100f4 	movhi	r3,1027
 4003610:	18e60404 	addi	r3,r3,-26608
 4003614:	1089883a 	add	r4,r2,r2
 4003618:	2109883a 	add	r4,r4,r4
 400361c:	1907883a 	add	r3,r3,r4
 4003620:	18c00017 	ldw	r3,0(r3)
 4003624:	19000044 	addi	r4,r3,1
 4003628:	00c100f4 	movhi	r3,1027
 400362c:	18e60404 	addi	r3,r3,-26608
 4003630:	1085883a 	add	r2,r2,r2
 4003634:	1085883a 	add	r2,r2,r2
 4003638:	1885883a 	add	r2,r3,r2
 400363c:	11000015 	stw	r4,0(r2)
				}

			}else if(shapeLayout == 3){
				for (int j = randomStart; j < randomFirstEnd; j++){
					if(grid[i][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
 4003640:	e0bfd817 	ldw	r2,-160(fp)
 4003644:	10800044 	addi	r2,r2,1
 4003648:	e0bfd815 	stw	r2,-160(fp)
 400364c:	e0ffd817 	ldw	r3,-160(fp)
 4003650:	e0bfc317 	ldw	r2,-244(fp)
 4003654:	18bfdc16 	blt	r3,r2,40035c8 <__alt_mem_onchip_memory2_0+0xfbffe408>
							grid[i - 3][j] = 1;
							rowCount[i - 3]++;
						}
						for(int row = 0; row < 2; row++){
 4003658:	e03fd915 	stw	zero,-156(fp)
 400365c:	00002e06 	br	4003718 <dropJBlock+0xa74>
							for (int j = randomStart; j < randomFirstEnd; j++) {
 4003660:	e0bfc117 	ldw	r2,-252(fp)
 4003664:	e0bfda15 	stw	r2,-152(fp)
 4003668:	00002506 	br	4003700 <dropJBlock+0xa5c>
								grid[i - row - 1][j] = 1;
 400366c:	e0ffc717 	ldw	r3,-228(fp)
 4003670:	e0bfd917 	ldw	r2,-156(fp)
 4003674:	1885c83a 	sub	r2,r3,r2
 4003678:	10bfffc4 	addi	r2,r2,-1
 400367c:	040100f4 	movhi	r16,1027
 4003680:	84262204 	addi	r16,r16,-26488
 4003684:	01400984 	movi	r5,38
 4003688:	1009883a 	mov	r4,r2
 400368c:	40118340 	call	4011834 <__mulsi3>
 4003690:	1007883a 	mov	r3,r2
 4003694:	e0bfda17 	ldw	r2,-152(fp)
 4003698:	1885883a 	add	r2,r3,r2
 400369c:	1085883a 	add	r2,r2,r2
 40036a0:	1085883a 	add	r2,r2,r2
 40036a4:	8085883a 	add	r2,r16,r2
 40036a8:	00c00044 	movi	r3,1
 40036ac:	10c00015 	stw	r3,0(r2)
								rowCount[i - row - 1]++;
 40036b0:	e0ffc717 	ldw	r3,-228(fp)
 40036b4:	e0bfd917 	ldw	r2,-156(fp)
 40036b8:	1885c83a 	sub	r2,r3,r2
 40036bc:	10bfffc4 	addi	r2,r2,-1
 40036c0:	00c100f4 	movhi	r3,1027
 40036c4:	18e60404 	addi	r3,r3,-26608
 40036c8:	1089883a 	add	r4,r2,r2
 40036cc:	2109883a 	add	r4,r4,r4
 40036d0:	1907883a 	add	r3,r3,r4
 40036d4:	18c00017 	ldw	r3,0(r3)
 40036d8:	19000044 	addi	r4,r3,1
 40036dc:	00c100f4 	movhi	r3,1027
 40036e0:	18e60404 	addi	r3,r3,-26608
 40036e4:	1085883a 	add	r2,r2,r2
 40036e8:	1085883a 	add	r2,r2,r2
 40036ec:	1885883a 	add	r2,r3,r2
 40036f0:	11000015 	stw	r4,0(r2)
						for (int j = randomStart; j < randomEnd; j++) {
							grid[i - 3][j] = 1;
							rowCount[i - 3]++;
						}
						for(int row = 0; row < 2; row++){
							for (int j = randomStart; j < randomFirstEnd; j++) {
 40036f4:	e0bfda17 	ldw	r2,-152(fp)
 40036f8:	10800044 	addi	r2,r2,1
 40036fc:	e0bfda15 	stw	r2,-152(fp)
 4003700:	e0ffda17 	ldw	r3,-152(fp)
 4003704:	e0bfc217 	ldw	r2,-248(fp)
 4003708:	18bfd816 	blt	r3,r2,400366c <__alt_mem_onchip_memory2_0+0xfbffe4ac>
					if(grid[i][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
							grid[i - 3][j] = 1;
							rowCount[i - 3]++;
						}
						for(int row = 0; row < 2; row++){
 400370c:	e0bfd917 	ldw	r2,-156(fp)
 4003710:	10800044 	addi	r2,r2,1
 4003714:	e0bfd915 	stw	r2,-156(fp)
 4003718:	e0bfd917 	ldw	r2,-156(fp)
 400371c:	10800090 	cmplti	r2,r2,2
 4003720:	103fcf1e 	bne	r2,zero,4003660 <__alt_mem_onchip_memory2_0+0xfbffe4a0>
							for (int j = randomStart; j < randomFirstEnd; j++) {
								grid[i - row - 1][j] = 1;
								rowCount[i - row - 1]++;
							}
						}
						return;
 4003724:	00077706 	br	4005504 <dropJBlock+0x2860>
						return;
					}
				}

			}else if(shapeLayout == 3){
				for (int j = randomStart; j < randomFirstEnd; j++){
 4003728:	e0bfd717 	ldw	r2,-164(fp)
 400372c:	10800044 	addi	r2,r2,1
 4003730:	e0bfd715 	stw	r2,-164(fp)
 4003734:	e0ffd717 	ldw	r3,-164(fp)
 4003738:	e0bfc217 	ldw	r2,-248(fp)
 400373c:	18bf9016 	blt	r3,r2,4003580 <__alt_mem_onchip_memory2_0+0xfbffe3c0>
							}
						}
						return;
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++){
 4003740:	e0bfc217 	ldw	r2,-248(fp)
 4003744:	e0bfdb15 	stw	r2,-148(fp)
 4003748:	00006e06 	br	4003904 <dropJBlock+0xc60>
					if(grid[i - 2][j] == 1){
 400374c:	e0bfc717 	ldw	r2,-228(fp)
 4003750:	10bfff84 	addi	r2,r2,-2
 4003754:	040100f4 	movhi	r16,1027
 4003758:	84262204 	addi	r16,r16,-26488
 400375c:	01400984 	movi	r5,38
 4003760:	1009883a 	mov	r4,r2
 4003764:	40118340 	call	4011834 <__mulsi3>
 4003768:	1007883a 	mov	r3,r2
 400376c:	e0bfdb17 	ldw	r2,-148(fp)
 4003770:	1885883a 	add	r2,r3,r2
 4003774:	1085883a 	add	r2,r2,r2
 4003778:	1085883a 	add	r2,r2,r2
 400377c:	8085883a 	add	r2,r16,r2
 4003780:	10800017 	ldw	r2,0(r2)
 4003784:	10800058 	cmpnei	r2,r2,1
 4003788:	10005b1e 	bne	r2,zero,40038f8 <dropJBlock+0xc54>
						for (int j = randomStart; j < randomEnd; j++) {
 400378c:	e0bfc117 	ldw	r2,-252(fp)
 4003790:	e0bfdc15 	stw	r2,-144(fp)
 4003794:	00002106 	br	400381c <dropJBlock+0xb78>
							grid[i - 3][j] = 1;
 4003798:	e0bfc717 	ldw	r2,-228(fp)
 400379c:	10bfff44 	addi	r2,r2,-3
 40037a0:	040100f4 	movhi	r16,1027
 40037a4:	84262204 	addi	r16,r16,-26488
 40037a8:	01400984 	movi	r5,38
 40037ac:	1009883a 	mov	r4,r2
 40037b0:	40118340 	call	4011834 <__mulsi3>
 40037b4:	1007883a 	mov	r3,r2
 40037b8:	e0bfdc17 	ldw	r2,-144(fp)
 40037bc:	1885883a 	add	r2,r3,r2
 40037c0:	1085883a 	add	r2,r2,r2
 40037c4:	1085883a 	add	r2,r2,r2
 40037c8:	8085883a 	add	r2,r16,r2
 40037cc:	00c00044 	movi	r3,1
 40037d0:	10c00015 	stw	r3,0(r2)
							rowCount[i - 3]++;
 40037d4:	e0bfc717 	ldw	r2,-228(fp)
 40037d8:	10bfff44 	addi	r2,r2,-3
 40037dc:	00c100f4 	movhi	r3,1027
 40037e0:	18e60404 	addi	r3,r3,-26608
 40037e4:	1089883a 	add	r4,r2,r2
 40037e8:	2109883a 	add	r4,r4,r4
 40037ec:	1907883a 	add	r3,r3,r4
 40037f0:	18c00017 	ldw	r3,0(r3)
 40037f4:	19000044 	addi	r4,r3,1
 40037f8:	00c100f4 	movhi	r3,1027
 40037fc:	18e60404 	addi	r3,r3,-26608
 4003800:	1085883a 	add	r2,r2,r2
 4003804:	1085883a 	add	r2,r2,r2
 4003808:	1885883a 	add	r2,r3,r2
 400380c:	11000015 	stw	r4,0(r2)
						return;
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++){
					if(grid[i - 2][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
 4003810:	e0bfdc17 	ldw	r2,-144(fp)
 4003814:	10800044 	addi	r2,r2,1
 4003818:	e0bfdc15 	stw	r2,-144(fp)
 400381c:	e0ffdc17 	ldw	r3,-144(fp)
 4003820:	e0bfc317 	ldw	r2,-244(fp)
 4003824:	18bfdc16 	blt	r3,r2,4003798 <__alt_mem_onchip_memory2_0+0xfbffe5d8>
							grid[i - 3][j] = 1;
							rowCount[i - 3]++;
						}
						for(int row = 0; row < 2; row++){
 4003828:	e03fdd15 	stw	zero,-140(fp)
 400382c:	00002e06 	br	40038e8 <dropJBlock+0xc44>
							for (int j = randomStart; j < randomFirstEnd; j++) {
 4003830:	e0bfc117 	ldw	r2,-252(fp)
 4003834:	e0bfde15 	stw	r2,-136(fp)
 4003838:	00002506 	br	40038d0 <dropJBlock+0xc2c>
								grid[i - row - 1][j] = 1;
 400383c:	e0ffc717 	ldw	r3,-228(fp)
 4003840:	e0bfdd17 	ldw	r2,-140(fp)
 4003844:	1885c83a 	sub	r2,r3,r2
 4003848:	10bfffc4 	addi	r2,r2,-1
 400384c:	040100f4 	movhi	r16,1027
 4003850:	84262204 	addi	r16,r16,-26488
 4003854:	01400984 	movi	r5,38
 4003858:	1009883a 	mov	r4,r2
 400385c:	40118340 	call	4011834 <__mulsi3>
 4003860:	1007883a 	mov	r3,r2
 4003864:	e0bfde17 	ldw	r2,-136(fp)
 4003868:	1885883a 	add	r2,r3,r2
 400386c:	1085883a 	add	r2,r2,r2
 4003870:	1085883a 	add	r2,r2,r2
 4003874:	8085883a 	add	r2,r16,r2
 4003878:	00c00044 	movi	r3,1
 400387c:	10c00015 	stw	r3,0(r2)
								rowCount[i - row - 1]++;
 4003880:	e0ffc717 	ldw	r3,-228(fp)
 4003884:	e0bfdd17 	ldw	r2,-140(fp)
 4003888:	1885c83a 	sub	r2,r3,r2
 400388c:	10bfffc4 	addi	r2,r2,-1
 4003890:	00c100f4 	movhi	r3,1027
 4003894:	18e60404 	addi	r3,r3,-26608
 4003898:	1089883a 	add	r4,r2,r2
 400389c:	2109883a 	add	r4,r4,r4
 40038a0:	1907883a 	add	r3,r3,r4
 40038a4:	18c00017 	ldw	r3,0(r3)
 40038a8:	19000044 	addi	r4,r3,1
 40038ac:	00c100f4 	movhi	r3,1027
 40038b0:	18e60404 	addi	r3,r3,-26608
 40038b4:	1085883a 	add	r2,r2,r2
 40038b8:	1085883a 	add	r2,r2,r2
 40038bc:	1885883a 	add	r2,r3,r2
 40038c0:	11000015 	stw	r4,0(r2)
						for (int j = randomStart; j < randomEnd; j++) {
							grid[i - 3][j] = 1;
							rowCount[i - 3]++;
						}
						for(int row = 0; row < 2; row++){
							for (int j = randomStart; j < randomFirstEnd; j++) {
 40038c4:	e0bfde17 	ldw	r2,-136(fp)
 40038c8:	10800044 	addi	r2,r2,1
 40038cc:	e0bfde15 	stw	r2,-136(fp)
 40038d0:	e0ffde17 	ldw	r3,-136(fp)
 40038d4:	e0bfc217 	ldw	r2,-248(fp)
 40038d8:	18bfd816 	blt	r3,r2,400383c <__alt_mem_onchip_memory2_0+0xfbffe67c>
					if(grid[i - 2][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
							grid[i - 3][j] = 1;
							rowCount[i - 3]++;
						}
						for(int row = 0; row < 2; row++){
 40038dc:	e0bfdd17 	ldw	r2,-140(fp)
 40038e0:	10800044 	addi	r2,r2,1
 40038e4:	e0bfdd15 	stw	r2,-140(fp)
 40038e8:	e0bfdd17 	ldw	r2,-140(fp)
 40038ec:	10800090 	cmplti	r2,r2,2
 40038f0:	103fcf1e 	bne	r2,zero,4003830 <__alt_mem_onchip_memory2_0+0xfbffe670>
								rowCount[i - row - 1]++;
							}
						}


						return;
 40038f4:	00070306 	br	4005504 <dropJBlock+0x2860>
							}
						}
						return;
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++){
 40038f8:	e0bfdb17 	ldw	r2,-148(fp)
 40038fc:	10800044 	addi	r2,r2,1
 4003900:	e0bfdb15 	stw	r2,-148(fp)
 4003904:	e0ffdb17 	ldw	r3,-148(fp)
 4003908:	e0bfc317 	ldw	r2,-244(fp)
 400390c:	18bf8f16 	blt	r3,r2,400374c <__alt_mem_onchip_memory2_0+0xfbffe58c>
					}
				}

			}
//
        	i--;
 4003910:	e0bfc717 	ldw	r2,-228(fp)
 4003914:	10bfffc4 	addi	r2,r2,-1
 4003918:	e0bfc715 	stw	r2,-228(fp)
        	if(shapeLayout == 0){
 400391c:	e0bfc617 	ldw	r2,-232(fp)
 4003920:	1000491e 	bne	r2,zero,4003a48 <dropJBlock+0xda4>
				for (int j = randomStart; j < randomFirstEnd; j++) {
 4003924:	e0bfc117 	ldw	r2,-252(fp)
 4003928:	e0bfdf15 	stw	r2,-132(fp)
 400392c:	00002006 	br	40039b0 <dropJBlock+0xd0c>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 4003930:	d4200317 	ldw	r16,-32756(gp)
 4003934:	e0bfc717 	ldw	r2,-228(fp)
 4003938:	10bfffc4 	addi	r2,r2,-1
 400393c:	01401404 	movi	r5,80
 4003940:	1009883a 	mov	r4,r2
 4003944:	40118340 	call	4011834 <__mulsi3>
 4003948:	1007883a 	mov	r3,r2
 400394c:	e0bfdf17 	ldw	r2,-132(fp)
 4003950:	1885883a 	add	r2,r3,r2
 4003954:	1085883a 	add	r2,r2,r2
 4003958:	8085883a 	add	r2,r16,r2
 400395c:	00c00404 	movi	r3,16
 4003960:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 4003964:	d4600317 	ldw	r17,-32756(gp)
 4003968:	e0bfc717 	ldw	r2,-228(fp)
 400396c:	10bfffc4 	addi	r2,r2,-1
 4003970:	01401404 	movi	r5,80
 4003974:	1009883a 	mov	r4,r2
 4003978:	40118340 	call	4011834 <__mulsi3>
 400397c:	1007883a 	mov	r3,r2
 4003980:	e0bfdf17 	ldw	r2,-132(fp)
 4003984:	1885883a 	add	r2,r3,r2
 4003988:	1085883a 	add	r2,r2,r2
 400398c:	14000044 	addi	r16,r2,1
 4003990:	e13fdf17 	ldw	r4,-132(fp)
 4003994:	400d8600 	call	400d860 <check_col>
 4003998:	1007883a 	mov	r3,r2
 400399c:	8c05883a 	add	r2,r17,r16
 40039a0:	10c00005 	stb	r3,0(r2)

			}
//
        	i--;
        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomFirstEnd; j++) {
 40039a4:	e0bfdf17 	ldw	r2,-132(fp)
 40039a8:	10800044 	addi	r2,r2,1
 40039ac:	e0bfdf15 	stw	r2,-132(fp)
 40039b0:	e0ffdf17 	ldw	r3,-132(fp)
 40039b4:	e0bfc217 	ldw	r2,-248(fp)
 40039b8:	18bfdd16 	blt	r3,r2,4003930 <__alt_mem_onchip_memory2_0+0xfbffe770>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 40039bc:	e0bfc117 	ldw	r2,-252(fp)
 40039c0:	e0bfe015 	stw	r2,-128(fp)
 40039c4:	00001c06 	br	4003a38 <dropJBlock+0xd94>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
 40039c8:	d4200317 	ldw	r16,-32756(gp)
 40039cc:	01401404 	movi	r5,80
 40039d0:	e13fc717 	ldw	r4,-228(fp)
 40039d4:	40118340 	call	4011834 <__mulsi3>
 40039d8:	1007883a 	mov	r3,r2
 40039dc:	e0bfe017 	ldw	r2,-128(fp)
 40039e0:	1885883a 	add	r2,r3,r2
 40039e4:	1085883a 	add	r2,r2,r2
 40039e8:	8085883a 	add	r2,r16,r2
 40039ec:	00c00404 	movi	r3,16
 40039f0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
 40039f4:	d4600317 	ldw	r17,-32756(gp)
 40039f8:	01401404 	movi	r5,80
 40039fc:	e13fc717 	ldw	r4,-228(fp)
 4003a00:	40118340 	call	4011834 <__mulsi3>
 4003a04:	1007883a 	mov	r3,r2
 4003a08:	e0bfe017 	ldw	r2,-128(fp)
 4003a0c:	1885883a 	add	r2,r3,r2
 4003a10:	1085883a 	add	r2,r2,r2
 4003a14:	14000044 	addi	r16,r2,1
 4003a18:	e13fe017 	ldw	r4,-128(fp)
 4003a1c:	400d8600 	call	400d860 <check_col>
 4003a20:	1007883a 	mov	r3,r2
 4003a24:	8c05883a 	add	r2,r17,r16
 4003a28:	10c00005 	stb	r3,0(r2)
        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomFirstEnd; j++) {
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4003a2c:	e0bfe017 	ldw	r2,-128(fp)
 4003a30:	10800044 	addi	r2,r2,1
 4003a34:	e0bfe015 	stw	r2,-128(fp)
 4003a38:	e0ffe017 	ldw	r3,-128(fp)
 4003a3c:	e0bfc317 	ldw	r2,-244(fp)
 4003a40:	18bfe116 	blt	r3,r2,40039c8 <__alt_mem_onchip_memory2_0+0xfbffe808>
 4003a44:	0000fc06 	br	4003e38 <dropJBlock+0x1194>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
 4003a48:	e0bfc617 	ldw	r2,-232(fp)
 4003a4c:	10800058 	cmpnei	r2,r2,1
 4003a50:	1000541e 	bne	r2,zero,4003ba4 <dropJBlock+0xf00>
				for (int j = randomStart; j < randomEnd; j++) {
 4003a54:	e0bfc117 	ldw	r2,-252(fp)
 4003a58:	e0bfe115 	stw	r2,-124(fp)
 4003a5c:	00001c06 	br	4003ad0 <dropJBlock+0xe2c>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
 4003a60:	d4200317 	ldw	r16,-32756(gp)
 4003a64:	01401404 	movi	r5,80
 4003a68:	e13fc717 	ldw	r4,-228(fp)
 4003a6c:	40118340 	call	4011834 <__mulsi3>
 4003a70:	1007883a 	mov	r3,r2
 4003a74:	e0bfe117 	ldw	r2,-124(fp)
 4003a78:	1885883a 	add	r2,r3,r2
 4003a7c:	1085883a 	add	r2,r2,r2
 4003a80:	8085883a 	add	r2,r16,r2
 4003a84:	00c00404 	movi	r3,16
 4003a88:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
 4003a8c:	d4600317 	ldw	r17,-32756(gp)
 4003a90:	01401404 	movi	r5,80
 4003a94:	e13fc717 	ldw	r4,-228(fp)
 4003a98:	40118340 	call	4011834 <__mulsi3>
 4003a9c:	1007883a 	mov	r3,r2
 4003aa0:	e0bfe117 	ldw	r2,-124(fp)
 4003aa4:	1885883a 	add	r2,r3,r2
 4003aa8:	1085883a 	add	r2,r2,r2
 4003aac:	14000044 	addi	r16,r2,1
 4003ab0:	e13fe117 	ldw	r4,-124(fp)
 4003ab4:	400d8600 	call	400d860 <check_col>
 4003ab8:	1007883a 	mov	r3,r2
 4003abc:	8c05883a 	add	r2,r17,r16
 4003ac0:	10c00005 	stb	r3,0(r2)
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomEnd; j++) {
 4003ac4:	e0bfe117 	ldw	r2,-124(fp)
 4003ac8:	10800044 	addi	r2,r2,1
 4003acc:	e0bfe115 	stw	r2,-124(fp)
 4003ad0:	e0ffe117 	ldw	r3,-124(fp)
 4003ad4:	e0bfc317 	ldw	r2,-244(fp)
 4003ad8:	18bfe116 	blt	r3,r2,4003a60 <__alt_mem_onchip_memory2_0+0xfbffe8a0>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 1; row < 3; row++){
 4003adc:	00800044 	movi	r2,1
 4003ae0:	e0bfe215 	stw	r2,-120(fp)
 4003ae4:	00002b06 	br	4003b94 <dropJBlock+0xef0>
					for (int j = secondWall; j < randomEnd; j++) {
 4003ae8:	e0bfc517 	ldw	r2,-236(fp)
 4003aec:	e0bfe315 	stw	r2,-116(fp)
 4003af0:	00002206 	br	4003b7c <dropJBlock+0xed8>
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
 4003af4:	d4200317 	ldw	r16,-32756(gp)
 4003af8:	e0ffc717 	ldw	r3,-228(fp)
 4003afc:	e0bfe217 	ldw	r2,-120(fp)
 4003b00:	1885c83a 	sub	r2,r3,r2
 4003b04:	01401404 	movi	r5,80
 4003b08:	1009883a 	mov	r4,r2
 4003b0c:	40118340 	call	4011834 <__mulsi3>
 4003b10:	1007883a 	mov	r3,r2
 4003b14:	e0bfe317 	ldw	r2,-116(fp)
 4003b18:	1885883a 	add	r2,r3,r2
 4003b1c:	1085883a 	add	r2,r2,r2
 4003b20:	8085883a 	add	r2,r16,r2
 4003b24:	00c00404 	movi	r3,16
 4003b28:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 4003b2c:	d4600317 	ldw	r17,-32756(gp)
 4003b30:	e0ffc717 	ldw	r3,-228(fp)
 4003b34:	e0bfe217 	ldw	r2,-120(fp)
 4003b38:	1885c83a 	sub	r2,r3,r2
 4003b3c:	01401404 	movi	r5,80
 4003b40:	1009883a 	mov	r4,r2
 4003b44:	40118340 	call	4011834 <__mulsi3>
 4003b48:	1007883a 	mov	r3,r2
 4003b4c:	e0bfe317 	ldw	r2,-116(fp)
 4003b50:	1885883a 	add	r2,r3,r2
 4003b54:	1085883a 	add	r2,r2,r2
 4003b58:	14000044 	addi	r16,r2,1
 4003b5c:	e13fe317 	ldw	r4,-116(fp)
 4003b60:	400d8600 	call	400d860 <check_col>
 4003b64:	1007883a 	mov	r3,r2
 4003b68:	8c05883a 	add	r2,r17,r16
 4003b6c:	10c00005 	stb	r3,0(r2)
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 1; row < 3; row++){
					for (int j = secondWall; j < randomEnd; j++) {
 4003b70:	e0bfe317 	ldw	r2,-116(fp)
 4003b74:	10800044 	addi	r2,r2,1
 4003b78:	e0bfe315 	stw	r2,-116(fp)
 4003b7c:	e0ffe317 	ldw	r3,-116(fp)
 4003b80:	e0bfc317 	ldw	r2,-244(fp)
 4003b84:	18bfdb16 	blt	r3,r2,4003af4 <__alt_mem_onchip_memory2_0+0xfbffe934>
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 1; row < 3; row++){
 4003b88:	e0bfe217 	ldw	r2,-120(fp)
 4003b8c:	10800044 	addi	r2,r2,1
 4003b90:	e0bfe215 	stw	r2,-120(fp)
 4003b94:	e0bfe217 	ldw	r2,-120(fp)
 4003b98:	108000d0 	cmplti	r2,r2,3
 4003b9c:	103fd21e 	bne	r2,zero,4003ae8 <__alt_mem_onchip_memory2_0+0xfbffe928>
 4003ba0:	0000a506 	br	4003e38 <dropJBlock+0x1194>
					for (int j = secondWall; j < randomEnd; j++) {
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}else if(shapeLayout == 2){
 4003ba4:	e0bfc617 	ldw	r2,-232(fp)
 4003ba8:	10800098 	cmpnei	r2,r2,2
 4003bac:	1000491e 	bne	r2,zero,4003cd4 <dropJBlock+0x1030>
				for (int j = randomStart; j < randomEnd; j++) {
 4003bb0:	e0bfc117 	ldw	r2,-252(fp)
 4003bb4:	e0bfe415 	stw	r2,-112(fp)
 4003bb8:	00002006 	br	4003c3c <dropJBlock+0xf98>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 4003bbc:	d4200317 	ldw	r16,-32756(gp)
 4003bc0:	e0bfc717 	ldw	r2,-228(fp)
 4003bc4:	10bfffc4 	addi	r2,r2,-1
 4003bc8:	01401404 	movi	r5,80
 4003bcc:	1009883a 	mov	r4,r2
 4003bd0:	40118340 	call	4011834 <__mulsi3>
 4003bd4:	1007883a 	mov	r3,r2
 4003bd8:	e0bfe417 	ldw	r2,-112(fp)
 4003bdc:	1885883a 	add	r2,r3,r2
 4003be0:	1085883a 	add	r2,r2,r2
 4003be4:	8085883a 	add	r2,r16,r2
 4003be8:	00c00404 	movi	r3,16
 4003bec:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 4003bf0:	d4600317 	ldw	r17,-32756(gp)
 4003bf4:	e0bfc717 	ldw	r2,-228(fp)
 4003bf8:	10bfffc4 	addi	r2,r2,-1
 4003bfc:	01401404 	movi	r5,80
 4003c00:	1009883a 	mov	r4,r2
 4003c04:	40118340 	call	4011834 <__mulsi3>
 4003c08:	1007883a 	mov	r3,r2
 4003c0c:	e0bfe417 	ldw	r2,-112(fp)
 4003c10:	1885883a 	add	r2,r3,r2
 4003c14:	1085883a 	add	r2,r2,r2
 4003c18:	14000044 	addi	r16,r2,1
 4003c1c:	e13fe417 	ldw	r4,-112(fp)
 4003c20:	400d8600 	call	400d860 <check_col>
 4003c24:	1007883a 	mov	r3,r2
 4003c28:	8c05883a 	add	r2,r17,r16
 4003c2c:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}else if(shapeLayout == 2){
				for (int j = randomStart; j < randomEnd; j++) {
 4003c30:	e0bfe417 	ldw	r2,-112(fp)
 4003c34:	10800044 	addi	r2,r2,1
 4003c38:	e0bfe415 	stw	r2,-112(fp)
 4003c3c:	e0ffe417 	ldw	r3,-112(fp)
 4003c40:	e0bfc317 	ldw	r2,-244(fp)
 4003c44:	18bfdd16 	blt	r3,r2,4003bbc <__alt_mem_onchip_memory2_0+0xfbffe9fc>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = secondWall; j < randomEnd; j++) {
 4003c48:	e0bfc517 	ldw	r2,-236(fp)
 4003c4c:	e0bfe515 	stw	r2,-108(fp)
 4003c50:	00001c06 	br	4003cc4 <dropJBlock+0x1020>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
 4003c54:	d4200317 	ldw	r16,-32756(gp)
 4003c58:	01401404 	movi	r5,80
 4003c5c:	e13fc717 	ldw	r4,-228(fp)
 4003c60:	40118340 	call	4011834 <__mulsi3>
 4003c64:	1007883a 	mov	r3,r2
 4003c68:	e0bfe517 	ldw	r2,-108(fp)
 4003c6c:	1885883a 	add	r2,r3,r2
 4003c70:	1085883a 	add	r2,r2,r2
 4003c74:	8085883a 	add	r2,r16,r2
 4003c78:	00c00404 	movi	r3,16
 4003c7c:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
 4003c80:	d4600317 	ldw	r17,-32756(gp)
 4003c84:	01401404 	movi	r5,80
 4003c88:	e13fc717 	ldw	r4,-228(fp)
 4003c8c:	40118340 	call	4011834 <__mulsi3>
 4003c90:	1007883a 	mov	r3,r2
 4003c94:	e0bfe517 	ldw	r2,-108(fp)
 4003c98:	1885883a 	add	r2,r3,r2
 4003c9c:	1085883a 	add	r2,r2,r2
 4003ca0:	14000044 	addi	r16,r2,1
 4003ca4:	e13fe517 	ldw	r4,-108(fp)
 4003ca8:	400d8600 	call	400d860 <check_col>
 4003cac:	1007883a 	mov	r3,r2
 4003cb0:	8c05883a 	add	r2,r17,r16
 4003cb4:	10c00005 	stb	r3,0(r2)
			}else if(shapeLayout == 2){
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = secondWall; j < randomEnd; j++) {
 4003cb8:	e0bfe517 	ldw	r2,-108(fp)
 4003cbc:	10800044 	addi	r2,r2,1
 4003cc0:	e0bfe515 	stw	r2,-108(fp)
 4003cc4:	e0ffe517 	ldw	r3,-108(fp)
 4003cc8:	e0bfc317 	ldw	r2,-244(fp)
 4003ccc:	18bfe116 	blt	r3,r2,4003c54 <__alt_mem_onchip_memory2_0+0xfbffea94>
 4003cd0:	00005906 	br	4003e38 <dropJBlock+0x1194>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}

			}else if(shapeLayout == 3){
 4003cd4:	e0bfc617 	ldw	r2,-232(fp)
 4003cd8:	108000d8 	cmpnei	r2,r2,3
 4003cdc:	1000561e 	bne	r2,zero,4003e38 <dropJBlock+0x1194>
				for (int j = randomStart; j < randomEnd; j++) {
 4003ce0:	e0bfc117 	ldw	r2,-252(fp)
 4003ce4:	e0bfe615 	stw	r2,-104(fp)
 4003ce8:	00002006 	br	4003d6c <dropJBlock+0x10c8>
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x10;
 4003cec:	d4200317 	ldw	r16,-32756(gp)
 4003cf0:	e0bfc717 	ldw	r2,-228(fp)
 4003cf4:	10bfff84 	addi	r2,r2,-2
 4003cf8:	01401404 	movi	r5,80
 4003cfc:	1009883a 	mov	r4,r2
 4003d00:	40118340 	call	4011834 <__mulsi3>
 4003d04:	1007883a 	mov	r3,r2
 4003d08:	e0bfe617 	ldw	r2,-104(fp)
 4003d0c:	1885883a 	add	r2,r3,r2
 4003d10:	1085883a 	add	r2,r2,r2
 4003d14:	8085883a 	add	r2,r16,r2
 4003d18:	00c00404 	movi	r3,16
 4003d1c:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
 4003d20:	d4600317 	ldw	r17,-32756(gp)
 4003d24:	e0bfc717 	ldw	r2,-228(fp)
 4003d28:	10bfff84 	addi	r2,r2,-2
 4003d2c:	01401404 	movi	r5,80
 4003d30:	1009883a 	mov	r4,r2
 4003d34:	40118340 	call	4011834 <__mulsi3>
 4003d38:	1007883a 	mov	r3,r2
 4003d3c:	e0bfe617 	ldw	r2,-104(fp)
 4003d40:	1885883a 	add	r2,r3,r2
 4003d44:	1085883a 	add	r2,r2,r2
 4003d48:	14000044 	addi	r16,r2,1
 4003d4c:	e13fe617 	ldw	r4,-104(fp)
 4003d50:	400d8600 	call	400d860 <check_col>
 4003d54:	1007883a 	mov	r3,r2
 4003d58:	8c05883a 	add	r2,r17,r16
 4003d5c:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}

			}else if(shapeLayout == 3){
				for (int j = randomStart; j < randomEnd; j++) {
 4003d60:	e0bfe617 	ldw	r2,-104(fp)
 4003d64:	10800044 	addi	r2,r2,1
 4003d68:	e0bfe615 	stw	r2,-104(fp)
 4003d6c:	e0ffe617 	ldw	r3,-104(fp)
 4003d70:	e0bfc317 	ldw	r2,-244(fp)
 4003d74:	18bfdd16 	blt	r3,r2,4003cec <__alt_mem_onchip_memory2_0+0xfbffeb2c>
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 0; row < 2; row++){
 4003d78:	e03fe715 	stw	zero,-100(fp)
 4003d7c:	00002b06 	br	4003e2c <dropJBlock+0x1188>
					for (int j = randomStart; j < randomFirstEnd; j++) {
 4003d80:	e0bfc117 	ldw	r2,-252(fp)
 4003d84:	e0bfe815 	stw	r2,-96(fp)
 4003d88:	00002206 	br	4003e14 <dropJBlock+0x1170>
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
 4003d8c:	d4200317 	ldw	r16,-32756(gp)
 4003d90:	e0ffc717 	ldw	r3,-228(fp)
 4003d94:	e0bfe717 	ldw	r2,-100(fp)
 4003d98:	1885c83a 	sub	r2,r3,r2
 4003d9c:	01401404 	movi	r5,80
 4003da0:	1009883a 	mov	r4,r2
 4003da4:	40118340 	call	4011834 <__mulsi3>
 4003da8:	1007883a 	mov	r3,r2
 4003dac:	e0bfe817 	ldw	r2,-96(fp)
 4003db0:	1885883a 	add	r2,r3,r2
 4003db4:	1085883a 	add	r2,r2,r2
 4003db8:	8085883a 	add	r2,r16,r2
 4003dbc:	00c00404 	movi	r3,16
 4003dc0:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 4003dc4:	d4600317 	ldw	r17,-32756(gp)
 4003dc8:	e0ffc717 	ldw	r3,-228(fp)
 4003dcc:	e0bfe717 	ldw	r2,-100(fp)
 4003dd0:	1885c83a 	sub	r2,r3,r2
 4003dd4:	01401404 	movi	r5,80
 4003dd8:	1009883a 	mov	r4,r2
 4003ddc:	40118340 	call	4011834 <__mulsi3>
 4003de0:	1007883a 	mov	r3,r2
 4003de4:	e0bfe817 	ldw	r2,-96(fp)
 4003de8:	1885883a 	add	r2,r3,r2
 4003dec:	1085883a 	add	r2,r2,r2
 4003df0:	14000044 	addi	r16,r2,1
 4003df4:	e13fe817 	ldw	r4,-96(fp)
 4003df8:	400d8600 	call	400d860 <check_col>
 4003dfc:	1007883a 	mov	r3,r2
 4003e00:	8c05883a 	add	r2,r17,r16
 4003e04:	10c00005 	stb	r3,0(r2)
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 0; row < 2; row++){
					for (int j = randomStart; j < randomFirstEnd; j++) {
 4003e08:	e0bfe817 	ldw	r2,-96(fp)
 4003e0c:	10800044 	addi	r2,r2,1
 4003e10:	e0bfe815 	stw	r2,-96(fp)
 4003e14:	e0ffe817 	ldw	r3,-96(fp)
 4003e18:	e0bfc217 	ldw	r2,-248(fp)
 4003e1c:	18bfdb16 	blt	r3,r2,4003d8c <__alt_mem_onchip_memory2_0+0xfbffebcc>
			}else if(shapeLayout == 3){
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 0; row < 2; row++){
 4003e20:	e0bfe717 	ldw	r2,-100(fp)
 4003e24:	10800044 	addi	r2,r2,1
 4003e28:	e0bfe715 	stw	r2,-100(fp)
 4003e2c:	e0bfe717 	ldw	r2,-100(fp)
 4003e30:	10800090 	cmplti	r2,r2,2
 4003e34:	103fd21e 	bne	r2,zero,4003d80 <__alt_mem_onchip_memory2_0+0xfbffebc0>
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}
        	i++;
 4003e38:	e0bfc717 	ldw	r2,-228(fp)
 4003e3c:	10800044 	addi	r2,r2,1
 4003e40:	e0bfc715 	stw	r2,-228(fp)



        	keycode = keyboard_input();
 4003e44:	40007d00 	call	40007d0 <keyboard_input>
 4003e48:	e0bffd05 	stb	r2,-12(fp)
        	time = timer;
 4003e4c:	d0a80117 	ldw	r2,-24572(gp)
 4003e50:	e0bfc415 	stw	r2,-240(fp)
			if(keycode == 0x51){
 4003e54:	e0bffd03 	ldbu	r2,-12(fp)
 4003e58:	10801458 	cmpnei	r2,r2,81
 4003e5c:	1000121e 	bne	r2,zero,4003ea8 <dropJBlock+0x1204>
				time = time / 1.5;
 4003e60:	e13fc417 	ldw	r4,-240(fp)
 4003e64:	4013f180 	call	4013f18 <__floatsidf>
 4003e68:	1011883a 	mov	r8,r2
 4003e6c:	1813883a 	mov	r9,r3
 4003e70:	000d883a 	mov	r6,zero
 4003e74:	01cffe34 	movhi	r7,16376
 4003e78:	4009883a 	mov	r4,r8
 4003e7c:	480b883a 	mov	r5,r9
 4003e80:	40121080 	call	4012108 <__divdf3>
 4003e84:	1009883a 	mov	r4,r2
 4003e88:	180b883a 	mov	r5,r3
 4003e8c:	2005883a 	mov	r2,r4
 4003e90:	2807883a 	mov	r3,r5
 4003e94:	1009883a 	mov	r4,r2
 4003e98:	180b883a 	mov	r5,r3
 4003e9c:	4013e980 	call	4013e98 <__fixdfsi>
 4003ea0:	e0bfc415 	stw	r2,-240(fp)
 4003ea4:	00033d06 	br	4004b9c <dropJBlock+0x1ef8>
			}
			else if(keycode == 0x4F){ //left
 4003ea8:	e0bffd03 	ldbu	r2,-12(fp)
 4003eac:	108013d8 	cmpnei	r2,r2,79
 4003eb0:	1000ee1e 	bne	r2,zero,400426c <dropJBlock+0x15c8>
				if(randomEnd != 59){
 4003eb4:	e0bfc317 	ldw	r2,-244(fp)
 4003eb8:	10800ee0 	cmpeqi	r2,r2,59
 4003ebc:	1003371e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
					if(shapeLayout == 0 && grid[i - 1][randomEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1){
 4003ec0:	e0bfc617 	ldw	r2,-232(fp)
 4003ec4:	1000301e 	bne	r2,zero,4003f88 <dropJBlock+0x12e4>
 4003ec8:	e0bfc717 	ldw	r2,-228(fp)
 4003ecc:	10ffffc4 	addi	r3,r2,-1
 4003ed0:	e0bfc317 	ldw	r2,-244(fp)
 4003ed4:	14400044 	addi	r17,r2,1
 4003ed8:	040100f4 	movhi	r16,1027
 4003edc:	84262204 	addi	r16,r16,-26488
 4003ee0:	01400984 	movi	r5,38
 4003ee4:	1809883a 	mov	r4,r3
 4003ee8:	40118340 	call	4011834 <__mulsi3>
 4003eec:	1445883a 	add	r2,r2,r17
 4003ef0:	1085883a 	add	r2,r2,r2
 4003ef4:	1085883a 	add	r2,r2,r2
 4003ef8:	8085883a 	add	r2,r16,r2
 4003efc:	10800017 	ldw	r2,0(r2)
 4003f00:	10800060 	cmpeqi	r2,r2,1
 4003f04:	1000201e 	bne	r2,zero,4003f88 <dropJBlock+0x12e4>
 4003f08:	e0bfc717 	ldw	r2,-228(fp)
 4003f0c:	10ffff84 	addi	r3,r2,-2
 4003f10:	e0bfc317 	ldw	r2,-244(fp)
 4003f14:	14400044 	addi	r17,r2,1
 4003f18:	040100f4 	movhi	r16,1027
 4003f1c:	84262204 	addi	r16,r16,-26488
 4003f20:	01400984 	movi	r5,38
 4003f24:	1809883a 	mov	r4,r3
 4003f28:	40118340 	call	4011834 <__mulsi3>
 4003f2c:	1445883a 	add	r2,r2,r17
 4003f30:	1085883a 	add	r2,r2,r2
 4003f34:	1085883a 	add	r2,r2,r2
 4003f38:	8085883a 	add	r2,r16,r2
 4003f3c:	10800017 	ldw	r2,0(r2)
 4003f40:	10800060 	cmpeqi	r2,r2,1
 4003f44:	1000101e 	bne	r2,zero,4003f88 <dropJBlock+0x12e4>
						randomStart += 2;
 4003f48:	e0bfc117 	ldw	r2,-252(fp)
 4003f4c:	10800084 	addi	r2,r2,2
 4003f50:	e0bfc115 	stw	r2,-252(fp)
						randomEnd += 2;
 4003f54:	e0bfc317 	ldw	r2,-244(fp)
 4003f58:	10800084 	addi	r2,r2,2
 4003f5c:	e0bfc315 	stw	r2,-244(fp)
						randomFirstEnd += 2;
 4003f60:	e0bfc217 	ldw	r2,-248(fp)
 4003f64:	10800084 	addi	r2,r2,2
 4003f68:	e0bfc215 	stw	r2,-248(fp)
						secondWall += 2;
 4003f6c:	e0bfc517 	ldw	r2,-236(fp)
 4003f70:	10800084 	addi	r2,r2,2
 4003f74:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4003f78:	e0bfc717 	ldw	r2,-228(fp)
 4003f7c:	10bfffc4 	addi	r2,r2,-1
 4003f80:	e0bfc715 	stw	r2,-228(fp)
 4003f84:	00030506 	br	4004b9c <dropJBlock+0x1ef8>
					}else if(shapeLayout == 1
 4003f88:	e0bfc617 	ldw	r2,-232(fp)
 4003f8c:	10800058 	cmpnei	r2,r2,1
 4003f90:	1000401e 	bne	r2,zero,4004094 <dropJBlock+0x13f0>
							&& grid[i - 1][randomEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1 && grid[i - 3][randomEnd + 1] != 1){
 4003f94:	e0bfc717 	ldw	r2,-228(fp)
 4003f98:	10ffffc4 	addi	r3,r2,-1
 4003f9c:	e0bfc317 	ldw	r2,-244(fp)
 4003fa0:	14400044 	addi	r17,r2,1
 4003fa4:	040100f4 	movhi	r16,1027
 4003fa8:	84262204 	addi	r16,r16,-26488
 4003fac:	01400984 	movi	r5,38
 4003fb0:	1809883a 	mov	r4,r3
 4003fb4:	40118340 	call	4011834 <__mulsi3>
 4003fb8:	1445883a 	add	r2,r2,r17
 4003fbc:	1085883a 	add	r2,r2,r2
 4003fc0:	1085883a 	add	r2,r2,r2
 4003fc4:	8085883a 	add	r2,r16,r2
 4003fc8:	10800017 	ldw	r2,0(r2)
 4003fcc:	10800060 	cmpeqi	r2,r2,1
 4003fd0:	1000301e 	bne	r2,zero,4004094 <dropJBlock+0x13f0>
 4003fd4:	e0bfc717 	ldw	r2,-228(fp)
 4003fd8:	10ffff84 	addi	r3,r2,-2
 4003fdc:	e0bfc317 	ldw	r2,-244(fp)
 4003fe0:	14400044 	addi	r17,r2,1
 4003fe4:	040100f4 	movhi	r16,1027
 4003fe8:	84262204 	addi	r16,r16,-26488
 4003fec:	01400984 	movi	r5,38
 4003ff0:	1809883a 	mov	r4,r3
 4003ff4:	40118340 	call	4011834 <__mulsi3>
 4003ff8:	1445883a 	add	r2,r2,r17
 4003ffc:	1085883a 	add	r2,r2,r2
 4004000:	1085883a 	add	r2,r2,r2
 4004004:	8085883a 	add	r2,r16,r2
 4004008:	10800017 	ldw	r2,0(r2)
 400400c:	10800060 	cmpeqi	r2,r2,1
 4004010:	1000201e 	bne	r2,zero,4004094 <dropJBlock+0x13f0>
 4004014:	e0bfc717 	ldw	r2,-228(fp)
 4004018:	10ffff44 	addi	r3,r2,-3
 400401c:	e0bfc317 	ldw	r2,-244(fp)
 4004020:	14400044 	addi	r17,r2,1
 4004024:	040100f4 	movhi	r16,1027
 4004028:	84262204 	addi	r16,r16,-26488
 400402c:	01400984 	movi	r5,38
 4004030:	1809883a 	mov	r4,r3
 4004034:	40118340 	call	4011834 <__mulsi3>
 4004038:	1445883a 	add	r2,r2,r17
 400403c:	1085883a 	add	r2,r2,r2
 4004040:	1085883a 	add	r2,r2,r2
 4004044:	8085883a 	add	r2,r16,r2
 4004048:	10800017 	ldw	r2,0(r2)
 400404c:	10800060 	cmpeqi	r2,r2,1
 4004050:	1000101e 	bne	r2,zero,4004094 <dropJBlock+0x13f0>
						randomStart += 2;
 4004054:	e0bfc117 	ldw	r2,-252(fp)
 4004058:	10800084 	addi	r2,r2,2
 400405c:	e0bfc115 	stw	r2,-252(fp)
						randomEnd += 2;
 4004060:	e0bfc317 	ldw	r2,-244(fp)
 4004064:	10800084 	addi	r2,r2,2
 4004068:	e0bfc315 	stw	r2,-244(fp)
						randomFirstEnd += 2;
 400406c:	e0bfc217 	ldw	r2,-248(fp)
 4004070:	10800084 	addi	r2,r2,2
 4004074:	e0bfc215 	stw	r2,-248(fp)
						secondWall += 2;
 4004078:	e0bfc517 	ldw	r2,-236(fp)
 400407c:	10800084 	addi	r2,r2,2
 4004080:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4004084:	e0bfc717 	ldw	r2,-228(fp)
 4004088:	10bfffc4 	addi	r2,r2,-1
 400408c:	e0bfc715 	stw	r2,-228(fp)
 4004090:	0002c206 	br	4004b9c <dropJBlock+0x1ef8>
					}
					else if(shapeLayout == 2
 4004094:	e0bfc617 	ldw	r2,-232(fp)
 4004098:	10800098 	cmpnei	r2,r2,2
 400409c:	1000301e 	bne	r2,zero,4004160 <dropJBlock+0x14bc>
							&& grid[i - 2][randomEnd + 1] != 1 && grid[i - 1][randomEnd + 1] != 1){
 40040a0:	e0bfc717 	ldw	r2,-228(fp)
 40040a4:	10ffff84 	addi	r3,r2,-2
 40040a8:	e0bfc317 	ldw	r2,-244(fp)
 40040ac:	14400044 	addi	r17,r2,1
 40040b0:	040100f4 	movhi	r16,1027
 40040b4:	84262204 	addi	r16,r16,-26488
 40040b8:	01400984 	movi	r5,38
 40040bc:	1809883a 	mov	r4,r3
 40040c0:	40118340 	call	4011834 <__mulsi3>
 40040c4:	1445883a 	add	r2,r2,r17
 40040c8:	1085883a 	add	r2,r2,r2
 40040cc:	1085883a 	add	r2,r2,r2
 40040d0:	8085883a 	add	r2,r16,r2
 40040d4:	10800017 	ldw	r2,0(r2)
 40040d8:	10800060 	cmpeqi	r2,r2,1
 40040dc:	1000201e 	bne	r2,zero,4004160 <dropJBlock+0x14bc>
 40040e0:	e0bfc717 	ldw	r2,-228(fp)
 40040e4:	10ffffc4 	addi	r3,r2,-1
 40040e8:	e0bfc317 	ldw	r2,-244(fp)
 40040ec:	14400044 	addi	r17,r2,1
 40040f0:	040100f4 	movhi	r16,1027
 40040f4:	84262204 	addi	r16,r16,-26488
 40040f8:	01400984 	movi	r5,38
 40040fc:	1809883a 	mov	r4,r3
 4004100:	40118340 	call	4011834 <__mulsi3>
 4004104:	1445883a 	add	r2,r2,r17
 4004108:	1085883a 	add	r2,r2,r2
 400410c:	1085883a 	add	r2,r2,r2
 4004110:	8085883a 	add	r2,r16,r2
 4004114:	10800017 	ldw	r2,0(r2)
 4004118:	10800060 	cmpeqi	r2,r2,1
 400411c:	1000101e 	bne	r2,zero,4004160 <dropJBlock+0x14bc>
						randomStart += 2;
 4004120:	e0bfc117 	ldw	r2,-252(fp)
 4004124:	10800084 	addi	r2,r2,2
 4004128:	e0bfc115 	stw	r2,-252(fp)
						randomEnd += 2;
 400412c:	e0bfc317 	ldw	r2,-244(fp)
 4004130:	10800084 	addi	r2,r2,2
 4004134:	e0bfc315 	stw	r2,-244(fp)
						randomFirstEnd += 2;
 4004138:	e0bfc217 	ldw	r2,-248(fp)
 400413c:	10800084 	addi	r2,r2,2
 4004140:	e0bfc215 	stw	r2,-248(fp)
						secondWall += 2;
 4004144:	e0bfc517 	ldw	r2,-236(fp)
 4004148:	10800084 	addi	r2,r2,2
 400414c:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4004150:	e0bfc717 	ldw	r2,-228(fp)
 4004154:	10bfffc4 	addi	r2,r2,-1
 4004158:	e0bfc715 	stw	r2,-228(fp)
 400415c:	00028f06 	br	4004b9c <dropJBlock+0x1ef8>
					}
					else if(shapeLayout == 3
 4004160:	e0bfc617 	ldw	r2,-232(fp)
 4004164:	108000d8 	cmpnei	r2,r2,3
 4004168:	10028c1e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
							&& grid[i - 1][randomFirstEnd + 1] != 1 && grid[i - 2][randomFirstEnd + 1] != 1 && grid[i - 3][randomEnd + 1] != 1){
 400416c:	e0bfc717 	ldw	r2,-228(fp)
 4004170:	10ffffc4 	addi	r3,r2,-1
 4004174:	e0bfc217 	ldw	r2,-248(fp)
 4004178:	14400044 	addi	r17,r2,1
 400417c:	040100f4 	movhi	r16,1027
 4004180:	84262204 	addi	r16,r16,-26488
 4004184:	01400984 	movi	r5,38
 4004188:	1809883a 	mov	r4,r3
 400418c:	40118340 	call	4011834 <__mulsi3>
 4004190:	1445883a 	add	r2,r2,r17
 4004194:	1085883a 	add	r2,r2,r2
 4004198:	1085883a 	add	r2,r2,r2
 400419c:	8085883a 	add	r2,r16,r2
 40041a0:	10800017 	ldw	r2,0(r2)
 40041a4:	10800060 	cmpeqi	r2,r2,1
 40041a8:	10027c1e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
 40041ac:	e0bfc717 	ldw	r2,-228(fp)
 40041b0:	10ffff84 	addi	r3,r2,-2
 40041b4:	e0bfc217 	ldw	r2,-248(fp)
 40041b8:	14400044 	addi	r17,r2,1
 40041bc:	040100f4 	movhi	r16,1027
 40041c0:	84262204 	addi	r16,r16,-26488
 40041c4:	01400984 	movi	r5,38
 40041c8:	1809883a 	mov	r4,r3
 40041cc:	40118340 	call	4011834 <__mulsi3>
 40041d0:	1445883a 	add	r2,r2,r17
 40041d4:	1085883a 	add	r2,r2,r2
 40041d8:	1085883a 	add	r2,r2,r2
 40041dc:	8085883a 	add	r2,r16,r2
 40041e0:	10800017 	ldw	r2,0(r2)
 40041e4:	10800060 	cmpeqi	r2,r2,1
 40041e8:	10026c1e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
 40041ec:	e0bfc717 	ldw	r2,-228(fp)
 40041f0:	10ffff44 	addi	r3,r2,-3
 40041f4:	e0bfc317 	ldw	r2,-244(fp)
 40041f8:	14400044 	addi	r17,r2,1
 40041fc:	040100f4 	movhi	r16,1027
 4004200:	84262204 	addi	r16,r16,-26488
 4004204:	01400984 	movi	r5,38
 4004208:	1809883a 	mov	r4,r3
 400420c:	40118340 	call	4011834 <__mulsi3>
 4004210:	1445883a 	add	r2,r2,r17
 4004214:	1085883a 	add	r2,r2,r2
 4004218:	1085883a 	add	r2,r2,r2
 400421c:	8085883a 	add	r2,r16,r2
 4004220:	10800017 	ldw	r2,0(r2)
 4004224:	10800060 	cmpeqi	r2,r2,1
 4004228:	10025c1e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
						randomStart += 2;
 400422c:	e0bfc117 	ldw	r2,-252(fp)
 4004230:	10800084 	addi	r2,r2,2
 4004234:	e0bfc115 	stw	r2,-252(fp)
						randomEnd += 2;
 4004238:	e0bfc317 	ldw	r2,-244(fp)
 400423c:	10800084 	addi	r2,r2,2
 4004240:	e0bfc315 	stw	r2,-244(fp)
						randomFirstEnd += 2;
 4004244:	e0bfc217 	ldw	r2,-248(fp)
 4004248:	10800084 	addi	r2,r2,2
 400424c:	e0bfc215 	stw	r2,-248(fp)
						secondWall += 2;
 4004250:	e0bfc517 	ldw	r2,-236(fp)
 4004254:	10800084 	addi	r2,r2,2
 4004258:	e0bfc515 	stw	r2,-236(fp)
						i--;
 400425c:	e0bfc717 	ldw	r2,-228(fp)
 4004260:	10bfffc4 	addi	r2,r2,-1
 4004264:	e0bfc715 	stw	r2,-228(fp)
 4004268:	00024c06 	br	4004b9c <dropJBlock+0x1ef8>
					}
				}
			}
			else if(keycode == 0x50){ //right
 400426c:	e0bffd03 	ldbu	r2,-12(fp)
 4004270:	10801418 	cmpnei	r2,r2,80
 4004274:	1000ee1e 	bne	r2,zero,4004630 <dropJBlock+0x198c>
				if(randomStart != 21){
 4004278:	e0bfc117 	ldw	r2,-252(fp)
 400427c:	10800560 	cmpeqi	r2,r2,21
 4004280:	1002461e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
					if(shapeLayout == 0
 4004284:	e0bfc617 	ldw	r2,-232(fp)
 4004288:	1000301e 	bne	r2,zero,400434c <dropJBlock+0x16a8>
							 && grid[i - 1][randomStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1){
 400428c:	e0bfc717 	ldw	r2,-228(fp)
 4004290:	10ffffc4 	addi	r3,r2,-1
 4004294:	e0bfc117 	ldw	r2,-252(fp)
 4004298:	147fffc4 	addi	r17,r2,-1
 400429c:	040100f4 	movhi	r16,1027
 40042a0:	84262204 	addi	r16,r16,-26488
 40042a4:	01400984 	movi	r5,38
 40042a8:	1809883a 	mov	r4,r3
 40042ac:	40118340 	call	4011834 <__mulsi3>
 40042b0:	1445883a 	add	r2,r2,r17
 40042b4:	1085883a 	add	r2,r2,r2
 40042b8:	1085883a 	add	r2,r2,r2
 40042bc:	8085883a 	add	r2,r16,r2
 40042c0:	10800017 	ldw	r2,0(r2)
 40042c4:	10800060 	cmpeqi	r2,r2,1
 40042c8:	1000201e 	bne	r2,zero,400434c <dropJBlock+0x16a8>
 40042cc:	e0bfc717 	ldw	r2,-228(fp)
 40042d0:	10ffff84 	addi	r3,r2,-2
 40042d4:	e0bfc117 	ldw	r2,-252(fp)
 40042d8:	147fffc4 	addi	r17,r2,-1
 40042dc:	040100f4 	movhi	r16,1027
 40042e0:	84262204 	addi	r16,r16,-26488
 40042e4:	01400984 	movi	r5,38
 40042e8:	1809883a 	mov	r4,r3
 40042ec:	40118340 	call	4011834 <__mulsi3>
 40042f0:	1445883a 	add	r2,r2,r17
 40042f4:	1085883a 	add	r2,r2,r2
 40042f8:	1085883a 	add	r2,r2,r2
 40042fc:	8085883a 	add	r2,r16,r2
 4004300:	10800017 	ldw	r2,0(r2)
 4004304:	10800060 	cmpeqi	r2,r2,1
 4004308:	1000101e 	bne	r2,zero,400434c <dropJBlock+0x16a8>
						randomStart -= 2;
 400430c:	e0bfc117 	ldw	r2,-252(fp)
 4004310:	10bfff84 	addi	r2,r2,-2
 4004314:	e0bfc115 	stw	r2,-252(fp)
						randomEnd -= 2;
 4004318:	e0bfc317 	ldw	r2,-244(fp)
 400431c:	10bfff84 	addi	r2,r2,-2
 4004320:	e0bfc315 	stw	r2,-244(fp)
						randomFirstEnd -= 2;
 4004324:	e0bfc217 	ldw	r2,-248(fp)
 4004328:	10bfff84 	addi	r2,r2,-2
 400432c:	e0bfc215 	stw	r2,-248(fp)
						secondWall -= 2;
 4004330:	e0bfc517 	ldw	r2,-236(fp)
 4004334:	10bfff84 	addi	r2,r2,-2
 4004338:	e0bfc515 	stw	r2,-236(fp)
						i--;
 400433c:	e0bfc717 	ldw	r2,-228(fp)
 4004340:	10bfffc4 	addi	r2,r2,-1
 4004344:	e0bfc715 	stw	r2,-228(fp)
 4004348:	00021406 	br	4004b9c <dropJBlock+0x1ef8>
					}else if(shapeLayout == 1
 400434c:	e0bfc617 	ldw	r2,-232(fp)
 4004350:	10800058 	cmpnei	r2,r2,1
 4004354:	1000401e 	bne	r2,zero,4004458 <dropJBlock+0x17b4>
							&& grid[i - 1][randomStart - 1] != 1 && grid[i - 2][secondWall - 1] != 1 && grid[i - 3][secondWall - 1] != 1){
 4004358:	e0bfc717 	ldw	r2,-228(fp)
 400435c:	10ffffc4 	addi	r3,r2,-1
 4004360:	e0bfc117 	ldw	r2,-252(fp)
 4004364:	147fffc4 	addi	r17,r2,-1
 4004368:	040100f4 	movhi	r16,1027
 400436c:	84262204 	addi	r16,r16,-26488
 4004370:	01400984 	movi	r5,38
 4004374:	1809883a 	mov	r4,r3
 4004378:	40118340 	call	4011834 <__mulsi3>
 400437c:	1445883a 	add	r2,r2,r17
 4004380:	1085883a 	add	r2,r2,r2
 4004384:	1085883a 	add	r2,r2,r2
 4004388:	8085883a 	add	r2,r16,r2
 400438c:	10800017 	ldw	r2,0(r2)
 4004390:	10800060 	cmpeqi	r2,r2,1
 4004394:	1000301e 	bne	r2,zero,4004458 <dropJBlock+0x17b4>
 4004398:	e0bfc717 	ldw	r2,-228(fp)
 400439c:	10ffff84 	addi	r3,r2,-2
 40043a0:	e0bfc517 	ldw	r2,-236(fp)
 40043a4:	147fffc4 	addi	r17,r2,-1
 40043a8:	040100f4 	movhi	r16,1027
 40043ac:	84262204 	addi	r16,r16,-26488
 40043b0:	01400984 	movi	r5,38
 40043b4:	1809883a 	mov	r4,r3
 40043b8:	40118340 	call	4011834 <__mulsi3>
 40043bc:	1445883a 	add	r2,r2,r17
 40043c0:	1085883a 	add	r2,r2,r2
 40043c4:	1085883a 	add	r2,r2,r2
 40043c8:	8085883a 	add	r2,r16,r2
 40043cc:	10800017 	ldw	r2,0(r2)
 40043d0:	10800060 	cmpeqi	r2,r2,1
 40043d4:	1000201e 	bne	r2,zero,4004458 <dropJBlock+0x17b4>
 40043d8:	e0bfc717 	ldw	r2,-228(fp)
 40043dc:	10ffff44 	addi	r3,r2,-3
 40043e0:	e0bfc517 	ldw	r2,-236(fp)
 40043e4:	147fffc4 	addi	r17,r2,-1
 40043e8:	040100f4 	movhi	r16,1027
 40043ec:	84262204 	addi	r16,r16,-26488
 40043f0:	01400984 	movi	r5,38
 40043f4:	1809883a 	mov	r4,r3
 40043f8:	40118340 	call	4011834 <__mulsi3>
 40043fc:	1445883a 	add	r2,r2,r17
 4004400:	1085883a 	add	r2,r2,r2
 4004404:	1085883a 	add	r2,r2,r2
 4004408:	8085883a 	add	r2,r16,r2
 400440c:	10800017 	ldw	r2,0(r2)
 4004410:	10800060 	cmpeqi	r2,r2,1
 4004414:	1000101e 	bne	r2,zero,4004458 <dropJBlock+0x17b4>
						randomStart -= 2;
 4004418:	e0bfc117 	ldw	r2,-252(fp)
 400441c:	10bfff84 	addi	r2,r2,-2
 4004420:	e0bfc115 	stw	r2,-252(fp)
						randomEnd -= 2;
 4004424:	e0bfc317 	ldw	r2,-244(fp)
 4004428:	10bfff84 	addi	r2,r2,-2
 400442c:	e0bfc315 	stw	r2,-244(fp)
						randomFirstEnd -= 2;
 4004430:	e0bfc217 	ldw	r2,-248(fp)
 4004434:	10bfff84 	addi	r2,r2,-2
 4004438:	e0bfc215 	stw	r2,-248(fp)
						secondWall -= 2;
 400443c:	e0bfc517 	ldw	r2,-236(fp)
 4004440:	10bfff84 	addi	r2,r2,-2
 4004444:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4004448:	e0bfc717 	ldw	r2,-228(fp)
 400444c:	10bfffc4 	addi	r2,r2,-1
 4004450:	e0bfc715 	stw	r2,-228(fp)
 4004454:	0001d106 	br	4004b9c <dropJBlock+0x1ef8>
					}
					else if(shapeLayout == 2
 4004458:	e0bfc617 	ldw	r2,-232(fp)
 400445c:	10800098 	cmpnei	r2,r2,2
 4004460:	1000301e 	bne	r2,zero,4004524 <dropJBlock+0x1880>
							&& grid[i - 2][randomStart - 1] != 1 && grid[i - 1][secondWall - 1] != 1){
 4004464:	e0bfc717 	ldw	r2,-228(fp)
 4004468:	10ffff84 	addi	r3,r2,-2
 400446c:	e0bfc117 	ldw	r2,-252(fp)
 4004470:	147fffc4 	addi	r17,r2,-1
 4004474:	040100f4 	movhi	r16,1027
 4004478:	84262204 	addi	r16,r16,-26488
 400447c:	01400984 	movi	r5,38
 4004480:	1809883a 	mov	r4,r3
 4004484:	40118340 	call	4011834 <__mulsi3>
 4004488:	1445883a 	add	r2,r2,r17
 400448c:	1085883a 	add	r2,r2,r2
 4004490:	1085883a 	add	r2,r2,r2
 4004494:	8085883a 	add	r2,r16,r2
 4004498:	10800017 	ldw	r2,0(r2)
 400449c:	10800060 	cmpeqi	r2,r2,1
 40044a0:	1000201e 	bne	r2,zero,4004524 <dropJBlock+0x1880>
 40044a4:	e0bfc717 	ldw	r2,-228(fp)
 40044a8:	10ffffc4 	addi	r3,r2,-1
 40044ac:	e0bfc517 	ldw	r2,-236(fp)
 40044b0:	147fffc4 	addi	r17,r2,-1
 40044b4:	040100f4 	movhi	r16,1027
 40044b8:	84262204 	addi	r16,r16,-26488
 40044bc:	01400984 	movi	r5,38
 40044c0:	1809883a 	mov	r4,r3
 40044c4:	40118340 	call	4011834 <__mulsi3>
 40044c8:	1445883a 	add	r2,r2,r17
 40044cc:	1085883a 	add	r2,r2,r2
 40044d0:	1085883a 	add	r2,r2,r2
 40044d4:	8085883a 	add	r2,r16,r2
 40044d8:	10800017 	ldw	r2,0(r2)
 40044dc:	10800060 	cmpeqi	r2,r2,1
 40044e0:	1000101e 	bne	r2,zero,4004524 <dropJBlock+0x1880>
						randomStart -= 2;
 40044e4:	e0bfc117 	ldw	r2,-252(fp)
 40044e8:	10bfff84 	addi	r2,r2,-2
 40044ec:	e0bfc115 	stw	r2,-252(fp)
						randomEnd -= 2;
 40044f0:	e0bfc317 	ldw	r2,-244(fp)
 40044f4:	10bfff84 	addi	r2,r2,-2
 40044f8:	e0bfc315 	stw	r2,-244(fp)
						randomFirstEnd -= 2;
 40044fc:	e0bfc217 	ldw	r2,-248(fp)
 4004500:	10bfff84 	addi	r2,r2,-2
 4004504:	e0bfc215 	stw	r2,-248(fp)
						secondWall -= 2;
 4004508:	e0bfc517 	ldw	r2,-236(fp)
 400450c:	10bfff84 	addi	r2,r2,-2
 4004510:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4004514:	e0bfc717 	ldw	r2,-228(fp)
 4004518:	10bfffc4 	addi	r2,r2,-1
 400451c:	e0bfc715 	stw	r2,-228(fp)
 4004520:	00019e06 	br	4004b9c <dropJBlock+0x1ef8>
					}
					else if(shapeLayout == 3
 4004524:	e0bfc617 	ldw	r2,-232(fp)
 4004528:	108000d8 	cmpnei	r2,r2,3
 400452c:	10019b1e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
							&& grid[i - 1][randomStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1 && grid[i - 3][randomStart - 1] != 1){
 4004530:	e0bfc717 	ldw	r2,-228(fp)
 4004534:	10ffffc4 	addi	r3,r2,-1
 4004538:	e0bfc117 	ldw	r2,-252(fp)
 400453c:	147fffc4 	addi	r17,r2,-1
 4004540:	040100f4 	movhi	r16,1027
 4004544:	84262204 	addi	r16,r16,-26488
 4004548:	01400984 	movi	r5,38
 400454c:	1809883a 	mov	r4,r3
 4004550:	40118340 	call	4011834 <__mulsi3>
 4004554:	1445883a 	add	r2,r2,r17
 4004558:	1085883a 	add	r2,r2,r2
 400455c:	1085883a 	add	r2,r2,r2
 4004560:	8085883a 	add	r2,r16,r2
 4004564:	10800017 	ldw	r2,0(r2)
 4004568:	10800060 	cmpeqi	r2,r2,1
 400456c:	10018b1e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
 4004570:	e0bfc717 	ldw	r2,-228(fp)
 4004574:	10ffff84 	addi	r3,r2,-2
 4004578:	e0bfc117 	ldw	r2,-252(fp)
 400457c:	147fffc4 	addi	r17,r2,-1
 4004580:	040100f4 	movhi	r16,1027
 4004584:	84262204 	addi	r16,r16,-26488
 4004588:	01400984 	movi	r5,38
 400458c:	1809883a 	mov	r4,r3
 4004590:	40118340 	call	4011834 <__mulsi3>
 4004594:	1445883a 	add	r2,r2,r17
 4004598:	1085883a 	add	r2,r2,r2
 400459c:	1085883a 	add	r2,r2,r2
 40045a0:	8085883a 	add	r2,r16,r2
 40045a4:	10800017 	ldw	r2,0(r2)
 40045a8:	10800060 	cmpeqi	r2,r2,1
 40045ac:	10017b1e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
 40045b0:	e0bfc717 	ldw	r2,-228(fp)
 40045b4:	10ffff44 	addi	r3,r2,-3
 40045b8:	e0bfc117 	ldw	r2,-252(fp)
 40045bc:	147fffc4 	addi	r17,r2,-1
 40045c0:	040100f4 	movhi	r16,1027
 40045c4:	84262204 	addi	r16,r16,-26488
 40045c8:	01400984 	movi	r5,38
 40045cc:	1809883a 	mov	r4,r3
 40045d0:	40118340 	call	4011834 <__mulsi3>
 40045d4:	1445883a 	add	r2,r2,r17
 40045d8:	1085883a 	add	r2,r2,r2
 40045dc:	1085883a 	add	r2,r2,r2
 40045e0:	8085883a 	add	r2,r16,r2
 40045e4:	10800017 	ldw	r2,0(r2)
 40045e8:	10800060 	cmpeqi	r2,r2,1
 40045ec:	10016b1e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
						randomStart -= 2;
 40045f0:	e0bfc117 	ldw	r2,-252(fp)
 40045f4:	10bfff84 	addi	r2,r2,-2
 40045f8:	e0bfc115 	stw	r2,-252(fp)
						randomEnd -= 2;
 40045fc:	e0bfc317 	ldw	r2,-244(fp)
 4004600:	10bfff84 	addi	r2,r2,-2
 4004604:	e0bfc315 	stw	r2,-244(fp)
						randomFirstEnd -= 2;
 4004608:	e0bfc217 	ldw	r2,-248(fp)
 400460c:	10bfff84 	addi	r2,r2,-2
 4004610:	e0bfc215 	stw	r2,-248(fp)
						secondWall -= 2;
 4004614:	e0bfc517 	ldw	r2,-236(fp)
 4004618:	10bfff84 	addi	r2,r2,-2
 400461c:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4004620:	e0bfc717 	ldw	r2,-228(fp)
 4004624:	10bfffc4 	addi	r2,r2,-1
 4004628:	e0bfc715 	stw	r2,-228(fp)
 400462c:	00015b06 	br	4004b9c <dropJBlock+0x1ef8>
					}
				}

			}else if(keycode == 0x1D && i >= 3 && i < 29){ // rotate left
 4004630:	e0bffd03 	ldbu	r2,-12(fp)
 4004634:	10800758 	cmpnei	r2,r2,29
 4004638:	1000a01e 	bne	r2,zero,40048bc <dropJBlock+0x1c18>
 400463c:	e0bfc717 	ldw	r2,-228(fp)
 4004640:	108000d0 	cmplti	r2,r2,3
 4004644:	10009d1e 	bne	r2,zero,40048bc <dropJBlock+0x1c18>
 4004648:	e0bfc717 	ldw	r2,-228(fp)
 400464c:	10800748 	cmpgei	r2,r2,29
 4004650:	10009a1e 	bne	r2,zero,40048bc <dropJBlock+0x1c18>
				i--;
 4004654:	e0bfc717 	ldw	r2,-228(fp)
 4004658:	10bfffc4 	addi	r2,r2,-1
 400465c:	e0bfc715 	stw	r2,-228(fp)
				if(shapeLayout == 0 && i > 2){
 4004660:	e0bfc617 	ldw	r2,-232(fp)
 4004664:	10000f1e 	bne	r2,zero,40046a4 <dropJBlock+0x1a00>
 4004668:	e0bfc717 	ldw	r2,-228(fp)
 400466c:	108000d0 	cmplti	r2,r2,3
 4004670:	10000c1e 	bne	r2,zero,40046a4 <dropJBlock+0x1a00>
					shapeLayout = 1;
 4004674:	00800044 	movi	r2,1
 4004678:	e0bfc615 	stw	r2,-232(fp)
					secondWall = randomStart + 2;
 400467c:	e0bfc117 	ldw	r2,-252(fp)
 4004680:	10800084 	addi	r2,r2,2
 4004684:	e0bfc515 	stw	r2,-236(fp)
					randomEnd -= 2;
 4004688:	e0bfc317 	ldw	r2,-244(fp)
 400468c:	10bfff84 	addi	r2,r2,-2
 4004690:	e0bfc315 	stw	r2,-244(fp)
					i++;
 4004694:	e0bfc717 	ldw	r2,-228(fp)
 4004698:	10800044 	addi	r2,r2,1
 400469c:	e0bfc715 	stw	r2,-228(fp)
 40046a0:	00008506 	br	40048b8 <dropJBlock+0x1c14>
				}else if(shapeLayout == 1 && randomEnd <= 57 && randomStart >= 23
 40046a4:	e0bfc617 	ldw	r2,-232(fp)
 40046a8:	10800058 	cmpnei	r2,r2,1
 40046ac:	10002e1e 	bne	r2,zero,4004768 <dropJBlock+0x1ac4>
 40046b0:	e0bfc317 	ldw	r2,-244(fp)
 40046b4:	10800e88 	cmpgei	r2,r2,58
 40046b8:	10002b1e 	bne	r2,zero,4004768 <dropJBlock+0x1ac4>
 40046bc:	e0bfc117 	ldw	r2,-252(fp)
 40046c0:	108005d0 	cmplti	r2,r2,23
 40046c4:	1000281e 	bne	r2,zero,4004768 <dropJBlock+0x1ac4>
						&& grid[i - 1][randomEnd + 1] != 1 && grid[i][randomEnd + 1] != 1){
 40046c8:	e0bfc717 	ldw	r2,-228(fp)
 40046cc:	10ffffc4 	addi	r3,r2,-1
 40046d0:	e0bfc317 	ldw	r2,-244(fp)
 40046d4:	14400044 	addi	r17,r2,1
 40046d8:	040100f4 	movhi	r16,1027
 40046dc:	84262204 	addi	r16,r16,-26488
 40046e0:	01400984 	movi	r5,38
 40046e4:	1809883a 	mov	r4,r3
 40046e8:	40118340 	call	4011834 <__mulsi3>
 40046ec:	1445883a 	add	r2,r2,r17
 40046f0:	1085883a 	add	r2,r2,r2
 40046f4:	1085883a 	add	r2,r2,r2
 40046f8:	8085883a 	add	r2,r16,r2
 40046fc:	10800017 	ldw	r2,0(r2)
 4004700:	10800060 	cmpeqi	r2,r2,1
 4004704:	1000181e 	bne	r2,zero,4004768 <dropJBlock+0x1ac4>
 4004708:	e0bfc317 	ldw	r2,-244(fp)
 400470c:	14400044 	addi	r17,r2,1
 4004710:	040100f4 	movhi	r16,1027
 4004714:	84262204 	addi	r16,r16,-26488
 4004718:	e0bfc717 	ldw	r2,-228(fp)
 400471c:	01400984 	movi	r5,38
 4004720:	1009883a 	mov	r4,r2
 4004724:	40118340 	call	4011834 <__mulsi3>
 4004728:	1445883a 	add	r2,r2,r17
 400472c:	1085883a 	add	r2,r2,r2
 4004730:	1085883a 	add	r2,r2,r2
 4004734:	8085883a 	add	r2,r16,r2
 4004738:	10800017 	ldw	r2,0(r2)
 400473c:	10800060 	cmpeqi	r2,r2,1
 4004740:	1000091e 	bne	r2,zero,4004768 <dropJBlock+0x1ac4>
					shapeLayout = 2;
 4004744:	00800084 	movi	r2,2
 4004748:	e0bfc615 	stw	r2,-232(fp)
					secondWall += 2;
 400474c:	e0bfc517 	ldw	r2,-236(fp)
 4004750:	10800084 	addi	r2,r2,2
 4004754:	e0bfc515 	stw	r2,-236(fp)
					randomEnd += 2;
 4004758:	e0bfc317 	ldw	r2,-244(fp)
 400475c:	10800084 	addi	r2,r2,2
 4004760:	e0bfc315 	stw	r2,-244(fp)
 4004764:	00005406 	br	40048b8 <dropJBlock+0x1c14>
				}else if(shapeLayout == 2 && i < 29){
 4004768:	e0bfc617 	ldw	r2,-232(fp)
 400476c:	10800098 	cmpnei	r2,r2,2
 4004770:	10000b1e 	bne	r2,zero,40047a0 <dropJBlock+0x1afc>
 4004774:	e0bfc717 	ldw	r2,-228(fp)
 4004778:	10800748 	cmpgei	r2,r2,29
 400477c:	1000081e 	bne	r2,zero,40047a0 <dropJBlock+0x1afc>
					shapeLayout = 3;
 4004780:	008000c4 	movi	r2,3
 4004784:	e0bfc615 	stw	r2,-232(fp)
					randomStart += 2;
 4004788:	e0bfc117 	ldw	r2,-252(fp)
 400478c:	10800084 	addi	r2,r2,2
 4004790:	e0bfc115 	stw	r2,-252(fp)
					randomFirstEnd = secondWall;
 4004794:	e0bfc517 	ldw	r2,-236(fp)
 4004798:	e0bfc215 	stw	r2,-248(fp)
 400479c:	00004606 	br	40048b8 <dropJBlock+0x1c14>
				}else if(shapeLayout == 3  && randomEnd <= 57 && randomStart >= 23
 40047a0:	e0bfc617 	ldw	r2,-232(fp)
 40047a4:	108000d8 	cmpnei	r2,r2,3
 40047a8:	10003f1e 	bne	r2,zero,40048a8 <dropJBlock+0x1c04>
 40047ac:	e0bfc317 	ldw	r2,-244(fp)
 40047b0:	10800e88 	cmpgei	r2,r2,58
 40047b4:	10003c1e 	bne	r2,zero,40048a8 <dropJBlock+0x1c04>
 40047b8:	e0bfc117 	ldw	r2,-252(fp)
 40047bc:	108005d0 	cmplti	r2,r2,23
 40047c0:	1000391e 	bne	r2,zero,40048a8 <dropJBlock+0x1c04>
						&& grid[i][randomStart - 1] != 1 && grid[i - 1][randomStart - 1] != 1 && grid[i][randomFirstEnd + 1] != 1){
 40047c4:	e0bfc117 	ldw	r2,-252(fp)
 40047c8:	147fffc4 	addi	r17,r2,-1
 40047cc:	040100f4 	movhi	r16,1027
 40047d0:	84262204 	addi	r16,r16,-26488
 40047d4:	e0bfc717 	ldw	r2,-228(fp)
 40047d8:	01400984 	movi	r5,38
 40047dc:	1009883a 	mov	r4,r2
 40047e0:	40118340 	call	4011834 <__mulsi3>
 40047e4:	1445883a 	add	r2,r2,r17
 40047e8:	1085883a 	add	r2,r2,r2
 40047ec:	1085883a 	add	r2,r2,r2
 40047f0:	8085883a 	add	r2,r16,r2
 40047f4:	10800017 	ldw	r2,0(r2)
 40047f8:	10800060 	cmpeqi	r2,r2,1
 40047fc:	10002a1e 	bne	r2,zero,40048a8 <dropJBlock+0x1c04>
 4004800:	e0bfc717 	ldw	r2,-228(fp)
 4004804:	10ffffc4 	addi	r3,r2,-1
 4004808:	e0bfc117 	ldw	r2,-252(fp)
 400480c:	147fffc4 	addi	r17,r2,-1
 4004810:	040100f4 	movhi	r16,1027
 4004814:	84262204 	addi	r16,r16,-26488
 4004818:	01400984 	movi	r5,38
 400481c:	1809883a 	mov	r4,r3
 4004820:	40118340 	call	4011834 <__mulsi3>
 4004824:	1445883a 	add	r2,r2,r17
 4004828:	1085883a 	add	r2,r2,r2
 400482c:	1085883a 	add	r2,r2,r2
 4004830:	8085883a 	add	r2,r16,r2
 4004834:	10800017 	ldw	r2,0(r2)
 4004838:	10800060 	cmpeqi	r2,r2,1
 400483c:	10001a1e 	bne	r2,zero,40048a8 <dropJBlock+0x1c04>
 4004840:	e0bfc217 	ldw	r2,-248(fp)
 4004844:	14400044 	addi	r17,r2,1
 4004848:	040100f4 	movhi	r16,1027
 400484c:	84262204 	addi	r16,r16,-26488
 4004850:	e0bfc717 	ldw	r2,-228(fp)
 4004854:	01400984 	movi	r5,38
 4004858:	1009883a 	mov	r4,r2
 400485c:	40118340 	call	4011834 <__mulsi3>
 4004860:	1445883a 	add	r2,r2,r17
 4004864:	1085883a 	add	r2,r2,r2
 4004868:	1085883a 	add	r2,r2,r2
 400486c:	8085883a 	add	r2,r16,r2
 4004870:	10800017 	ldw	r2,0(r2)
 4004874:	10800060 	cmpeqi	r2,r2,1
 4004878:	10000b1e 	bne	r2,zero,40048a8 <dropJBlock+0x1c04>
					shapeLayout = 0;
 400487c:	e03fc615 	stw	zero,-232(fp)
					i--;
 4004880:	e0bfc717 	ldw	r2,-228(fp)
 4004884:	10bfffc4 	addi	r2,r2,-1
 4004888:	e0bfc715 	stw	r2,-228(fp)
					randomStart -= 2;
 400488c:	e0bfc117 	ldw	r2,-252(fp)
 4004890:	10bfff84 	addi	r2,r2,-2
 4004894:	e0bfc115 	stw	r2,-252(fp)
					randomFirstEnd -= 2;
 4004898:	e0bfc217 	ldw	r2,-248(fp)
 400489c:	10bfff84 	addi	r2,r2,-2
 40048a0:	e0bfc215 	stw	r2,-248(fp)
 40048a4:	00000406 	br	40048b8 <dropJBlock+0x1c14>
				}else{
					i++;
 40048a8:	e0bfc717 	ldw	r2,-228(fp)
 40048ac:	10800044 	addi	r2,r2,1
 40048b0:	e0bfc715 	stw	r2,-228(fp)
					}
				}

			}else if(keycode == 0x1D && i >= 3 && i < 29){ // rotate left
				i--;
				if(shapeLayout == 0 && i > 2){
 40048b4:	0000b906 	br	4004b9c <dropJBlock+0x1ef8>
 40048b8:	0000b806 	br	4004b9c <dropJBlock+0x1ef8>
					randomStart -= 2;
					randomFirstEnd -= 2;
				}else{
					i++;
				}
			}else if(keycode == 0x1B && i >= 3 && i < 29){ // rotate left
 40048bc:	e0bffd03 	ldbu	r2,-12(fp)
 40048c0:	108006d8 	cmpnei	r2,r2,27
 40048c4:	1000b11e 	bne	r2,zero,4004b8c <dropJBlock+0x1ee8>
 40048c8:	e0bfc717 	ldw	r2,-228(fp)
 40048cc:	108000d0 	cmplti	r2,r2,3
 40048d0:	1000ae1e 	bne	r2,zero,4004b8c <dropJBlock+0x1ee8>
 40048d4:	e0bfc717 	ldw	r2,-228(fp)
 40048d8:	10800748 	cmpgei	r2,r2,29
 40048dc:	1000ab1e 	bne	r2,zero,4004b8c <dropJBlock+0x1ee8>
				i--;
 40048e0:	e0bfc717 	ldw	r2,-228(fp)
 40048e4:	10bfffc4 	addi	r2,r2,-1
 40048e8:	e0bfc715 	stw	r2,-228(fp)
				if(shapeLayout == 0 && i > 2 && grid[i - 1][randomEnd] != 1){
 40048ec:	e0bfc617 	ldw	r2,-232(fp)
 40048f0:	10001f1e 	bne	r2,zero,4004970 <dropJBlock+0x1ccc>
 40048f4:	e0bfc717 	ldw	r2,-228(fp)
 40048f8:	108000d0 	cmplti	r2,r2,3
 40048fc:	10001c1e 	bne	r2,zero,4004970 <dropJBlock+0x1ccc>
 4004900:	e0bfc717 	ldw	r2,-228(fp)
 4004904:	10bfffc4 	addi	r2,r2,-1
 4004908:	040100f4 	movhi	r16,1027
 400490c:	84262204 	addi	r16,r16,-26488
 4004910:	01400984 	movi	r5,38
 4004914:	1009883a 	mov	r4,r2
 4004918:	40118340 	call	4011834 <__mulsi3>
 400491c:	1007883a 	mov	r3,r2
 4004920:	e0bfc317 	ldw	r2,-244(fp)
 4004924:	1885883a 	add	r2,r3,r2
 4004928:	1085883a 	add	r2,r2,r2
 400492c:	1085883a 	add	r2,r2,r2
 4004930:	8085883a 	add	r2,r16,r2
 4004934:	10800017 	ldw	r2,0(r2)
 4004938:	10800060 	cmpeqi	r2,r2,1
 400493c:	10000c1e 	bne	r2,zero,4004970 <dropJBlock+0x1ccc>
					shapeLayout = 3;
 4004940:	008000c4 	movi	r2,3
 4004944:	e0bfc615 	stw	r2,-232(fp)
					randomStart += 2;
 4004948:	e0bfc117 	ldw	r2,-252(fp)
 400494c:	10800084 	addi	r2,r2,2
 4004950:	e0bfc115 	stw	r2,-252(fp)
					randomFirstEnd += 2;
 4004954:	e0bfc217 	ldw	r2,-248(fp)
 4004958:	10800084 	addi	r2,r2,2
 400495c:	e0bfc215 	stw	r2,-248(fp)
					i++;
 4004960:	e0bfc717 	ldw	r2,-228(fp)
 4004964:	10800044 	addi	r2,r2,1
 4004968:	e0bfc715 	stw	r2,-228(fp)
 400496c:	00008606 	br	4004b88 <dropJBlock+0x1ee4>
				}else if(shapeLayout == 1 && randomEnd <= 57 && randomStart >= 23
 4004970:	e0bfc617 	ldw	r2,-232(fp)
 4004974:	10800058 	cmpnei	r2,r2,1
 4004978:	1000401e 	bne	r2,zero,4004a7c <dropJBlock+0x1dd8>
 400497c:	e0bfc317 	ldw	r2,-244(fp)
 4004980:	10800e88 	cmpgei	r2,r2,58
 4004984:	10003d1e 	bne	r2,zero,4004a7c <dropJBlock+0x1dd8>
 4004988:	e0bfc117 	ldw	r2,-252(fp)
 400498c:	108005d0 	cmplti	r2,r2,23
 4004990:	10003a1e 	bne	r2,zero,4004a7c <dropJBlock+0x1dd8>
						&& grid[i - 1][randomEnd + 1] != 1 && grid[i - 1][secondWall - 1] != 1 && grid[i - 2][secondWall - 1] != 1){
 4004994:	e0bfc717 	ldw	r2,-228(fp)
 4004998:	10ffffc4 	addi	r3,r2,-1
 400499c:	e0bfc317 	ldw	r2,-244(fp)
 40049a0:	14400044 	addi	r17,r2,1
 40049a4:	040100f4 	movhi	r16,1027
 40049a8:	84262204 	addi	r16,r16,-26488
 40049ac:	01400984 	movi	r5,38
 40049b0:	1809883a 	mov	r4,r3
 40049b4:	40118340 	call	4011834 <__mulsi3>
 40049b8:	1445883a 	add	r2,r2,r17
 40049bc:	1085883a 	add	r2,r2,r2
 40049c0:	1085883a 	add	r2,r2,r2
 40049c4:	8085883a 	add	r2,r16,r2
 40049c8:	10800017 	ldw	r2,0(r2)
 40049cc:	10800060 	cmpeqi	r2,r2,1
 40049d0:	10002a1e 	bne	r2,zero,4004a7c <dropJBlock+0x1dd8>
 40049d4:	e0bfc717 	ldw	r2,-228(fp)
 40049d8:	10ffffc4 	addi	r3,r2,-1
 40049dc:	e0bfc517 	ldw	r2,-236(fp)
 40049e0:	147fffc4 	addi	r17,r2,-1
 40049e4:	040100f4 	movhi	r16,1027
 40049e8:	84262204 	addi	r16,r16,-26488
 40049ec:	01400984 	movi	r5,38
 40049f0:	1809883a 	mov	r4,r3
 40049f4:	40118340 	call	4011834 <__mulsi3>
 40049f8:	1445883a 	add	r2,r2,r17
 40049fc:	1085883a 	add	r2,r2,r2
 4004a00:	1085883a 	add	r2,r2,r2
 4004a04:	8085883a 	add	r2,r16,r2
 4004a08:	10800017 	ldw	r2,0(r2)
 4004a0c:	10800060 	cmpeqi	r2,r2,1
 4004a10:	10001a1e 	bne	r2,zero,4004a7c <dropJBlock+0x1dd8>
 4004a14:	e0bfc717 	ldw	r2,-228(fp)
 4004a18:	10ffff84 	addi	r3,r2,-2
 4004a1c:	e0bfc517 	ldw	r2,-236(fp)
 4004a20:	147fffc4 	addi	r17,r2,-1
 4004a24:	040100f4 	movhi	r16,1027
 4004a28:	84262204 	addi	r16,r16,-26488
 4004a2c:	01400984 	movi	r5,38
 4004a30:	1809883a 	mov	r4,r3
 4004a34:	40118340 	call	4011834 <__mulsi3>
 4004a38:	1445883a 	add	r2,r2,r17
 4004a3c:	1085883a 	add	r2,r2,r2
 4004a40:	1085883a 	add	r2,r2,r2
 4004a44:	8085883a 	add	r2,r16,r2
 4004a48:	10800017 	ldw	r2,0(r2)
 4004a4c:	10800060 	cmpeqi	r2,r2,1
 4004a50:	10000a1e 	bne	r2,zero,4004a7c <dropJBlock+0x1dd8>
					shapeLayout = 0;
 4004a54:	e03fc615 	stw	zero,-232(fp)
					randomFirstEnd = secondWall;
 4004a58:	e0bfc517 	ldw	r2,-236(fp)
 4004a5c:	e0bfc215 	stw	r2,-248(fp)
					randomEnd += 2;
 4004a60:	e0bfc317 	ldw	r2,-244(fp)
 4004a64:	10800084 	addi	r2,r2,2
 4004a68:	e0bfc315 	stw	r2,-244(fp)
					i--;
 4004a6c:	e0bfc717 	ldw	r2,-228(fp)
 4004a70:	10bfffc4 	addi	r2,r2,-1
 4004a74:	e0bfc715 	stw	r2,-228(fp)
 4004a78:	00004306 	br	4004b88 <dropJBlock+0x1ee4>
				}else if(shapeLayout == 2 && i < 29){
 4004a7c:	e0bfc617 	ldw	r2,-232(fp)
 4004a80:	10800098 	cmpnei	r2,r2,2
 4004a84:	10000c1e 	bne	r2,zero,4004ab8 <dropJBlock+0x1e14>
 4004a88:	e0bfc717 	ldw	r2,-228(fp)
 4004a8c:	10800748 	cmpgei	r2,r2,29
 4004a90:	1000091e 	bne	r2,zero,4004ab8 <dropJBlock+0x1e14>
					shapeLayout = 1;
 4004a94:	00800044 	movi	r2,1
 4004a98:	e0bfc615 	stw	r2,-232(fp)
					secondWall -= 2;
 4004a9c:	e0bfc517 	ldw	r2,-236(fp)
 4004aa0:	10bfff84 	addi	r2,r2,-2
 4004aa4:	e0bfc515 	stw	r2,-236(fp)
					randomEnd -= 2;
 4004aa8:	e0bfc317 	ldw	r2,-244(fp)
 4004aac:	10bfff84 	addi	r2,r2,-2
 4004ab0:	e0bfc315 	stw	r2,-244(fp)
 4004ab4:	00003406 	br	4004b88 <dropJBlock+0x1ee4>
				}else if(shapeLayout == 3  && randomEnd <= 57 && randomStart >= 23
 4004ab8:	e0bfc617 	ldw	r2,-232(fp)
 4004abc:	108000d8 	cmpnei	r2,r2,3
 4004ac0:	10002d1e 	bne	r2,zero,4004b78 <dropJBlock+0x1ed4>
 4004ac4:	e0bfc317 	ldw	r2,-244(fp)
 4004ac8:	10800e88 	cmpgei	r2,r2,58
 4004acc:	10002a1e 	bne	r2,zero,4004b78 <dropJBlock+0x1ed4>
 4004ad0:	e0bfc117 	ldw	r2,-252(fp)
 4004ad4:	108005d0 	cmplti	r2,r2,23
 4004ad8:	1000271e 	bne	r2,zero,4004b78 <dropJBlock+0x1ed4>
						&& grid[i][randomFirstEnd + 1] != 1 && grid[i - 1][randomStart - 1] != 1){
 4004adc:	e0bfc217 	ldw	r2,-248(fp)
 4004ae0:	14400044 	addi	r17,r2,1
 4004ae4:	040100f4 	movhi	r16,1027
 4004ae8:	84262204 	addi	r16,r16,-26488
 4004aec:	e0bfc717 	ldw	r2,-228(fp)
 4004af0:	01400984 	movi	r5,38
 4004af4:	1009883a 	mov	r4,r2
 4004af8:	40118340 	call	4011834 <__mulsi3>
 4004afc:	1445883a 	add	r2,r2,r17
 4004b00:	1085883a 	add	r2,r2,r2
 4004b04:	1085883a 	add	r2,r2,r2
 4004b08:	8085883a 	add	r2,r16,r2
 4004b0c:	10800017 	ldw	r2,0(r2)
 4004b10:	10800060 	cmpeqi	r2,r2,1
 4004b14:	1000181e 	bne	r2,zero,4004b78 <dropJBlock+0x1ed4>
 4004b18:	e0bfc717 	ldw	r2,-228(fp)
 4004b1c:	10ffffc4 	addi	r3,r2,-1
 4004b20:	e0bfc117 	ldw	r2,-252(fp)
 4004b24:	147fffc4 	addi	r17,r2,-1
 4004b28:	040100f4 	movhi	r16,1027
 4004b2c:	84262204 	addi	r16,r16,-26488
 4004b30:	01400984 	movi	r5,38
 4004b34:	1809883a 	mov	r4,r3
 4004b38:	40118340 	call	4011834 <__mulsi3>
 4004b3c:	1445883a 	add	r2,r2,r17
 4004b40:	1085883a 	add	r2,r2,r2
 4004b44:	1085883a 	add	r2,r2,r2
 4004b48:	8085883a 	add	r2,r16,r2
 4004b4c:	10800017 	ldw	r2,0(r2)
 4004b50:	10800060 	cmpeqi	r2,r2,1
 4004b54:	1000081e 	bne	r2,zero,4004b78 <dropJBlock+0x1ed4>
					shapeLayout = 2;
 4004b58:	00800084 	movi	r2,2
 4004b5c:	e0bfc615 	stw	r2,-232(fp)
					randomStart -= 2;
 4004b60:	e0bfc117 	ldw	r2,-252(fp)
 4004b64:	10bfff84 	addi	r2,r2,-2
 4004b68:	e0bfc115 	stw	r2,-252(fp)
					secondWall = randomFirstEnd;
 4004b6c:	e0bfc217 	ldw	r2,-248(fp)
 4004b70:	e0bfc515 	stw	r2,-236(fp)
 4004b74:	00000406 	br	4004b88 <dropJBlock+0x1ee4>
				}else{
					i++;
 4004b78:	e0bfc717 	ldw	r2,-228(fp)
 4004b7c:	10800044 	addi	r2,r2,1
 4004b80:	e0bfc715 	stw	r2,-228(fp)
				}else{
					i++;
				}
			}else if(keycode == 0x1B && i >= 3 && i < 29){ // rotate left
				i--;
				if(shapeLayout == 0 && i > 2 && grid[i - 1][randomEnd] != 1){
 4004b84:	00000506 	br	4004b9c <dropJBlock+0x1ef8>
 4004b88:	00000406 	br	4004b9c <dropJBlock+0x1ef8>
					randomStart -= 2;
					secondWall = randomFirstEnd;
				}else{
					i++;
				}
			}else if(keycode == 0x2C){
 4004b8c:	e0bffd03 	ldbu	r2,-12(fp)
 4004b90:	10800b18 	cmpnei	r2,r2,44
 4004b94:	1000011e 	bne	r2,zero,4004b9c <dropJBlock+0x1ef8>
				time = 0;
 4004b98:	e03fc415 	stw	zero,-240(fp)
			}


			if(shapeLayout == 0){
 4004b9c:	e0bfc617 	ldw	r2,-232(fp)
 4004ba0:	1000491e 	bne	r2,zero,4004cc8 <dropJBlock+0x2024>
				for (int j = randomStart; j < randomFirstEnd; j++) {
 4004ba4:	e0bfc117 	ldw	r2,-252(fp)
 4004ba8:	e0bfe915 	stw	r2,-92(fp)
 4004bac:	00002006 	br	4004c30 <dropJBlock+0x1f8c>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x56;
 4004bb0:	d4200317 	ldw	r16,-32756(gp)
 4004bb4:	e0bfc717 	ldw	r2,-228(fp)
 4004bb8:	10bfffc4 	addi	r2,r2,-1
 4004bbc:	01401404 	movi	r5,80
 4004bc0:	1009883a 	mov	r4,r2
 4004bc4:	40118340 	call	4011834 <__mulsi3>
 4004bc8:	1007883a 	mov	r3,r2
 4004bcc:	e0bfe917 	ldw	r2,-92(fp)
 4004bd0:	1885883a 	add	r2,r3,r2
 4004bd4:	1085883a 	add	r2,r2,r2
 4004bd8:	8085883a 	add	r2,r16,r2
 4004bdc:	00c01584 	movi	r3,86
 4004be0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 4004be4:	d4600317 	ldw	r17,-32756(gp)
 4004be8:	e0bfc717 	ldw	r2,-228(fp)
 4004bec:	10bfffc4 	addi	r2,r2,-1
 4004bf0:	01401404 	movi	r5,80
 4004bf4:	1009883a 	mov	r4,r2
 4004bf8:	40118340 	call	4011834 <__mulsi3>
 4004bfc:	1007883a 	mov	r3,r2
 4004c00:	e0bfe917 	ldw	r2,-92(fp)
 4004c04:	1885883a 	add	r2,r3,r2
 4004c08:	1085883a 	add	r2,r2,r2
 4004c0c:	14000044 	addi	r16,r2,1
 4004c10:	e13fe917 	ldw	r4,-92(fp)
 4004c14:	400d8600 	call	400d860 <check_col>
 4004c18:	1007883a 	mov	r3,r2
 4004c1c:	8c05883a 	add	r2,r17,r16
 4004c20:	10c00005 	stb	r3,0(r2)
				time = 0;
			}


			if(shapeLayout == 0){
				for (int j = randomStart; j < randomFirstEnd; j++) {
 4004c24:	e0bfe917 	ldw	r2,-92(fp)
 4004c28:	10800044 	addi	r2,r2,1
 4004c2c:	e0bfe915 	stw	r2,-92(fp)
 4004c30:	e0ffe917 	ldw	r3,-92(fp)
 4004c34:	e0bfc217 	ldw	r2,-248(fp)
 4004c38:	18bfdd16 	blt	r3,r2,4004bb0 <__alt_mem_onchip_memory2_0+0xfbfff9f0>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4004c3c:	e0bfc117 	ldw	r2,-252(fp)
 4004c40:	e0bfea15 	stw	r2,-88(fp)
 4004c44:	00001c06 	br	4004cb8 <dropJBlock+0x2014>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
 4004c48:	d4200317 	ldw	r16,-32756(gp)
 4004c4c:	01401404 	movi	r5,80
 4004c50:	e13fc717 	ldw	r4,-228(fp)
 4004c54:	40118340 	call	4011834 <__mulsi3>
 4004c58:	1007883a 	mov	r3,r2
 4004c5c:	e0bfea17 	ldw	r2,-88(fp)
 4004c60:	1885883a 	add	r2,r3,r2
 4004c64:	1085883a 	add	r2,r2,r2
 4004c68:	8085883a 	add	r2,r16,r2
 4004c6c:	00c01584 	movi	r3,86
 4004c70:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
 4004c74:	d4600317 	ldw	r17,-32756(gp)
 4004c78:	01401404 	movi	r5,80
 4004c7c:	e13fc717 	ldw	r4,-228(fp)
 4004c80:	40118340 	call	4011834 <__mulsi3>
 4004c84:	1007883a 	mov	r3,r2
 4004c88:	e0bfea17 	ldw	r2,-88(fp)
 4004c8c:	1885883a 	add	r2,r3,r2
 4004c90:	1085883a 	add	r2,r2,r2
 4004c94:	14000044 	addi	r16,r2,1
 4004c98:	e13fea17 	ldw	r4,-88(fp)
 4004c9c:	400d8600 	call	400d860 <check_col>
 4004ca0:	1007883a 	mov	r3,r2
 4004ca4:	8c05883a 	add	r2,r17,r16
 4004ca8:	10c00005 	stb	r3,0(r2)
			if(shapeLayout == 0){
				for (int j = randomStart; j < randomFirstEnd; j++) {
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4004cac:	e0bfea17 	ldw	r2,-88(fp)
 4004cb0:	10800044 	addi	r2,r2,1
 4004cb4:	e0bfea15 	stw	r2,-88(fp)
 4004cb8:	e0ffea17 	ldw	r3,-88(fp)
 4004cbc:	e0bfc317 	ldw	r2,-244(fp)
 4004cc0:	18bfe116 	blt	r3,r2,4004c48 <__alt_mem_onchip_memory2_0+0xfbfffa88>
 4004cc4:	0000fc06 	br	40050b8 <dropJBlock+0x2414>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
 4004cc8:	e0bfc617 	ldw	r2,-232(fp)
 4004ccc:	10800058 	cmpnei	r2,r2,1
 4004cd0:	1000541e 	bne	r2,zero,4004e24 <dropJBlock+0x2180>
				for (int j = randomStart; j < randomEnd; j++) {
 4004cd4:	e0bfc117 	ldw	r2,-252(fp)
 4004cd8:	e0bfeb15 	stw	r2,-84(fp)
 4004cdc:	00001c06 	br	4004d50 <dropJBlock+0x20ac>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
 4004ce0:	d4200317 	ldw	r16,-32756(gp)
 4004ce4:	01401404 	movi	r5,80
 4004ce8:	e13fc717 	ldw	r4,-228(fp)
 4004cec:	40118340 	call	4011834 <__mulsi3>
 4004cf0:	1007883a 	mov	r3,r2
 4004cf4:	e0bfeb17 	ldw	r2,-84(fp)
 4004cf8:	1885883a 	add	r2,r3,r2
 4004cfc:	1085883a 	add	r2,r2,r2
 4004d00:	8085883a 	add	r2,r16,r2
 4004d04:	00c01584 	movi	r3,86
 4004d08:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
 4004d0c:	d4600317 	ldw	r17,-32756(gp)
 4004d10:	01401404 	movi	r5,80
 4004d14:	e13fc717 	ldw	r4,-228(fp)
 4004d18:	40118340 	call	4011834 <__mulsi3>
 4004d1c:	1007883a 	mov	r3,r2
 4004d20:	e0bfeb17 	ldw	r2,-84(fp)
 4004d24:	1885883a 	add	r2,r3,r2
 4004d28:	1085883a 	add	r2,r2,r2
 4004d2c:	14000044 	addi	r16,r2,1
 4004d30:	e13feb17 	ldw	r4,-84(fp)
 4004d34:	400d8600 	call	400d860 <check_col>
 4004d38:	1007883a 	mov	r3,r2
 4004d3c:	8c05883a 	add	r2,r17,r16
 4004d40:	10c00005 	stb	r3,0(r2)
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomEnd; j++) {
 4004d44:	e0bfeb17 	ldw	r2,-84(fp)
 4004d48:	10800044 	addi	r2,r2,1
 4004d4c:	e0bfeb15 	stw	r2,-84(fp)
 4004d50:	e0ffeb17 	ldw	r3,-84(fp)
 4004d54:	e0bfc317 	ldw	r2,-244(fp)
 4004d58:	18bfe116 	blt	r3,r2,4004ce0 <__alt_mem_onchip_memory2_0+0xfbfffb20>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 1; row < 3; row++){
 4004d5c:	00800044 	movi	r2,1
 4004d60:	e0bfec15 	stw	r2,-80(fp)
 4004d64:	00002b06 	br	4004e14 <dropJBlock+0x2170>
					for (int j = secondWall; j < randomEnd; j++) {
 4004d68:	e0bfc517 	ldw	r2,-236(fp)
 4004d6c:	e0bfed15 	stw	r2,-76(fp)
 4004d70:	00002206 	br	4004dfc <dropJBlock+0x2158>
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x56;
 4004d74:	d4200317 	ldw	r16,-32756(gp)
 4004d78:	e0ffc717 	ldw	r3,-228(fp)
 4004d7c:	e0bfec17 	ldw	r2,-80(fp)
 4004d80:	1885c83a 	sub	r2,r3,r2
 4004d84:	01401404 	movi	r5,80
 4004d88:	1009883a 	mov	r4,r2
 4004d8c:	40118340 	call	4011834 <__mulsi3>
 4004d90:	1007883a 	mov	r3,r2
 4004d94:	e0bfed17 	ldw	r2,-76(fp)
 4004d98:	1885883a 	add	r2,r3,r2
 4004d9c:	1085883a 	add	r2,r2,r2
 4004da0:	8085883a 	add	r2,r16,r2
 4004da4:	00c01584 	movi	r3,86
 4004da8:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 4004dac:	d4600317 	ldw	r17,-32756(gp)
 4004db0:	e0ffc717 	ldw	r3,-228(fp)
 4004db4:	e0bfec17 	ldw	r2,-80(fp)
 4004db8:	1885c83a 	sub	r2,r3,r2
 4004dbc:	01401404 	movi	r5,80
 4004dc0:	1009883a 	mov	r4,r2
 4004dc4:	40118340 	call	4011834 <__mulsi3>
 4004dc8:	1007883a 	mov	r3,r2
 4004dcc:	e0bfed17 	ldw	r2,-76(fp)
 4004dd0:	1885883a 	add	r2,r3,r2
 4004dd4:	1085883a 	add	r2,r2,r2
 4004dd8:	14000044 	addi	r16,r2,1
 4004ddc:	e13fed17 	ldw	r4,-76(fp)
 4004de0:	400d8600 	call	400d860 <check_col>
 4004de4:	1007883a 	mov	r3,r2
 4004de8:	8c05883a 	add	r2,r17,r16
 4004dec:	10c00005 	stb	r3,0(r2)
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 1; row < 3; row++){
					for (int j = secondWall; j < randomEnd; j++) {
 4004df0:	e0bfed17 	ldw	r2,-76(fp)
 4004df4:	10800044 	addi	r2,r2,1
 4004df8:	e0bfed15 	stw	r2,-76(fp)
 4004dfc:	e0ffed17 	ldw	r3,-76(fp)
 4004e00:	e0bfc317 	ldw	r2,-244(fp)
 4004e04:	18bfdb16 	blt	r3,r2,4004d74 <__alt_mem_onchip_memory2_0+0xfbfffbb4>
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 1; row < 3; row++){
 4004e08:	e0bfec17 	ldw	r2,-80(fp)
 4004e0c:	10800044 	addi	r2,r2,1
 4004e10:	e0bfec15 	stw	r2,-80(fp)
 4004e14:	e0bfec17 	ldw	r2,-80(fp)
 4004e18:	108000d0 	cmplti	r2,r2,3
 4004e1c:	103fd21e 	bne	r2,zero,4004d68 <__alt_mem_onchip_memory2_0+0xfbfffba8>
 4004e20:	0000a506 	br	40050b8 <dropJBlock+0x2414>
					for (int j = secondWall; j < randomEnd; j++) {
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x56;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}else if(shapeLayout == 2){
 4004e24:	e0bfc617 	ldw	r2,-232(fp)
 4004e28:	10800098 	cmpnei	r2,r2,2
 4004e2c:	1000491e 	bne	r2,zero,4004f54 <dropJBlock+0x22b0>
				for (int j = randomStart; j < randomEnd; j++) {
 4004e30:	e0bfc117 	ldw	r2,-252(fp)
 4004e34:	e0bfee15 	stw	r2,-72(fp)
 4004e38:	00002006 	br	4004ebc <dropJBlock+0x2218>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x56;
 4004e3c:	d4200317 	ldw	r16,-32756(gp)
 4004e40:	e0bfc717 	ldw	r2,-228(fp)
 4004e44:	10bfffc4 	addi	r2,r2,-1
 4004e48:	01401404 	movi	r5,80
 4004e4c:	1009883a 	mov	r4,r2
 4004e50:	40118340 	call	4011834 <__mulsi3>
 4004e54:	1007883a 	mov	r3,r2
 4004e58:	e0bfee17 	ldw	r2,-72(fp)
 4004e5c:	1885883a 	add	r2,r3,r2
 4004e60:	1085883a 	add	r2,r2,r2
 4004e64:	8085883a 	add	r2,r16,r2
 4004e68:	00c01584 	movi	r3,86
 4004e6c:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 4004e70:	d4600317 	ldw	r17,-32756(gp)
 4004e74:	e0bfc717 	ldw	r2,-228(fp)
 4004e78:	10bfffc4 	addi	r2,r2,-1
 4004e7c:	01401404 	movi	r5,80
 4004e80:	1009883a 	mov	r4,r2
 4004e84:	40118340 	call	4011834 <__mulsi3>
 4004e88:	1007883a 	mov	r3,r2
 4004e8c:	e0bfee17 	ldw	r2,-72(fp)
 4004e90:	1885883a 	add	r2,r3,r2
 4004e94:	1085883a 	add	r2,r2,r2
 4004e98:	14000044 	addi	r16,r2,1
 4004e9c:	e13fee17 	ldw	r4,-72(fp)
 4004ea0:	400d8600 	call	400d860 <check_col>
 4004ea4:	1007883a 	mov	r3,r2
 4004ea8:	8c05883a 	add	r2,r17,r16
 4004eac:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x56;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}else if(shapeLayout == 2){
				for (int j = randomStart; j < randomEnd; j++) {
 4004eb0:	e0bfee17 	ldw	r2,-72(fp)
 4004eb4:	10800044 	addi	r2,r2,1
 4004eb8:	e0bfee15 	stw	r2,-72(fp)
 4004ebc:	e0ffee17 	ldw	r3,-72(fp)
 4004ec0:	e0bfc317 	ldw	r2,-244(fp)
 4004ec4:	18bfdd16 	blt	r3,r2,4004e3c <__alt_mem_onchip_memory2_0+0xfbfffc7c>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = secondWall; j < randomEnd; j++) {
 4004ec8:	e0bfc517 	ldw	r2,-236(fp)
 4004ecc:	e0bfef15 	stw	r2,-68(fp)
 4004ed0:	00001c06 	br	4004f44 <dropJBlock+0x22a0>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
 4004ed4:	d4200317 	ldw	r16,-32756(gp)
 4004ed8:	01401404 	movi	r5,80
 4004edc:	e13fc717 	ldw	r4,-228(fp)
 4004ee0:	40118340 	call	4011834 <__mulsi3>
 4004ee4:	1007883a 	mov	r3,r2
 4004ee8:	e0bfef17 	ldw	r2,-68(fp)
 4004eec:	1885883a 	add	r2,r3,r2
 4004ef0:	1085883a 	add	r2,r2,r2
 4004ef4:	8085883a 	add	r2,r16,r2
 4004ef8:	00c01584 	movi	r3,86
 4004efc:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
 4004f00:	d4600317 	ldw	r17,-32756(gp)
 4004f04:	01401404 	movi	r5,80
 4004f08:	e13fc717 	ldw	r4,-228(fp)
 4004f0c:	40118340 	call	4011834 <__mulsi3>
 4004f10:	1007883a 	mov	r3,r2
 4004f14:	e0bfef17 	ldw	r2,-68(fp)
 4004f18:	1885883a 	add	r2,r3,r2
 4004f1c:	1085883a 	add	r2,r2,r2
 4004f20:	14000044 	addi	r16,r2,1
 4004f24:	e13fef17 	ldw	r4,-68(fp)
 4004f28:	400d8600 	call	400d860 <check_col>
 4004f2c:	1007883a 	mov	r3,r2
 4004f30:	8c05883a 	add	r2,r17,r16
 4004f34:	10c00005 	stb	r3,0(r2)
			}else if(shapeLayout == 2){
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = secondWall; j < randomEnd; j++) {
 4004f38:	e0bfef17 	ldw	r2,-68(fp)
 4004f3c:	10800044 	addi	r2,r2,1
 4004f40:	e0bfef15 	stw	r2,-68(fp)
 4004f44:	e0ffef17 	ldw	r3,-68(fp)
 4004f48:	e0bfc317 	ldw	r2,-244(fp)
 4004f4c:	18bfe116 	blt	r3,r2,4004ed4 <__alt_mem_onchip_memory2_0+0xfbfffd14>
 4004f50:	00005906 	br	40050b8 <dropJBlock+0x2414>
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}

			}else if(shapeLayout == 3){
 4004f54:	e0bfc617 	ldw	r2,-232(fp)
 4004f58:	108000d8 	cmpnei	r2,r2,3
 4004f5c:	1000561e 	bne	r2,zero,40050b8 <dropJBlock+0x2414>
				for (int j = randomStart; j < randomEnd; j++) {
 4004f60:	e0bfc117 	ldw	r2,-252(fp)
 4004f64:	e0bff015 	stw	r2,-64(fp)
 4004f68:	00002006 	br	4004fec <dropJBlock+0x2348>
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x56;
 4004f6c:	d4200317 	ldw	r16,-32756(gp)
 4004f70:	e0bfc717 	ldw	r2,-228(fp)
 4004f74:	10bfff84 	addi	r2,r2,-2
 4004f78:	01401404 	movi	r5,80
 4004f7c:	1009883a 	mov	r4,r2
 4004f80:	40118340 	call	4011834 <__mulsi3>
 4004f84:	1007883a 	mov	r3,r2
 4004f88:	e0bff017 	ldw	r2,-64(fp)
 4004f8c:	1885883a 	add	r2,r3,r2
 4004f90:	1085883a 	add	r2,r2,r2
 4004f94:	8085883a 	add	r2,r16,r2
 4004f98:	00c01584 	movi	r3,86
 4004f9c:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
 4004fa0:	d4600317 	ldw	r17,-32756(gp)
 4004fa4:	e0bfc717 	ldw	r2,-228(fp)
 4004fa8:	10bfff84 	addi	r2,r2,-2
 4004fac:	01401404 	movi	r5,80
 4004fb0:	1009883a 	mov	r4,r2
 4004fb4:	40118340 	call	4011834 <__mulsi3>
 4004fb8:	1007883a 	mov	r3,r2
 4004fbc:	e0bff017 	ldw	r2,-64(fp)
 4004fc0:	1885883a 	add	r2,r3,r2
 4004fc4:	1085883a 	add	r2,r2,r2
 4004fc8:	14000044 	addi	r16,r2,1
 4004fcc:	e13ff017 	ldw	r4,-64(fp)
 4004fd0:	400d8600 	call	400d860 <check_col>
 4004fd4:	1007883a 	mov	r3,r2
 4004fd8:	8c05883a 	add	r2,r17,r16
 4004fdc:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[(i * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
				}

			}else if(shapeLayout == 3){
				for (int j = randomStart; j < randomEnd; j++) {
 4004fe0:	e0bff017 	ldw	r2,-64(fp)
 4004fe4:	10800044 	addi	r2,r2,1
 4004fe8:	e0bff015 	stw	r2,-64(fp)
 4004fec:	e0fff017 	ldw	r3,-64(fp)
 4004ff0:	e0bfc317 	ldw	r2,-244(fp)
 4004ff4:	18bfdd16 	blt	r3,r2,4004f6c <__alt_mem_onchip_memory2_0+0xfbfffdac>
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 0; row < 2; row++){
 4004ff8:	e03ff115 	stw	zero,-60(fp)
 4004ffc:	00002b06 	br	40050ac <dropJBlock+0x2408>
					for (int j = randomStart; j < randomFirstEnd; j++) {
 4005000:	e0bfc117 	ldw	r2,-252(fp)
 4005004:	e0bff215 	stw	r2,-56(fp)
 4005008:	00002206 	br	4005094 <dropJBlock+0x23f0>
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x56;
 400500c:	d4200317 	ldw	r16,-32756(gp)
 4005010:	e0ffc717 	ldw	r3,-228(fp)
 4005014:	e0bff117 	ldw	r2,-60(fp)
 4005018:	1885c83a 	sub	r2,r3,r2
 400501c:	01401404 	movi	r5,80
 4005020:	1009883a 	mov	r4,r2
 4005024:	40118340 	call	4011834 <__mulsi3>
 4005028:	1007883a 	mov	r3,r2
 400502c:	e0bff217 	ldw	r2,-56(fp)
 4005030:	1885883a 	add	r2,r3,r2
 4005034:	1085883a 	add	r2,r2,r2
 4005038:	8085883a 	add	r2,r16,r2
 400503c:	00c01584 	movi	r3,86
 4005040:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 4005044:	d4600317 	ldw	r17,-32756(gp)
 4005048:	e0ffc717 	ldw	r3,-228(fp)
 400504c:	e0bff117 	ldw	r2,-60(fp)
 4005050:	1885c83a 	sub	r2,r3,r2
 4005054:	01401404 	movi	r5,80
 4005058:	1009883a 	mov	r4,r2
 400505c:	40118340 	call	4011834 <__mulsi3>
 4005060:	1007883a 	mov	r3,r2
 4005064:	e0bff217 	ldw	r2,-56(fp)
 4005068:	1885883a 	add	r2,r3,r2
 400506c:	1085883a 	add	r2,r2,r2
 4005070:	14000044 	addi	r16,r2,1
 4005074:	e13ff217 	ldw	r4,-56(fp)
 4005078:	400d8600 	call	400d860 <check_col>
 400507c:	1007883a 	mov	r3,r2
 4005080:	8c05883a 	add	r2,r17,r16
 4005084:	10c00005 	stb	r3,0(r2)
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 0; row < 2; row++){
					for (int j = randomStart; j < randomFirstEnd; j++) {
 4005088:	e0bff217 	ldw	r2,-56(fp)
 400508c:	10800044 	addi	r2,r2,1
 4005090:	e0bff215 	stw	r2,-56(fp)
 4005094:	e0fff217 	ldw	r3,-56(fp)
 4005098:	e0bfc217 	ldw	r2,-248(fp)
 400509c:	18bfdb16 	blt	r3,r2,400500c <__alt_mem_onchip_memory2_0+0xfbfffe4c>
			}else if(shapeLayout == 3){
				for (int j = randomStart; j < randomEnd; j++) {
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x56;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
				for(int row = 0; row < 2; row++){
 40050a0:	e0bff117 	ldw	r2,-60(fp)
 40050a4:	10800044 	addi	r2,r2,1
 40050a8:	e0bff115 	stw	r2,-60(fp)
 40050ac:	e0bff117 	ldw	r2,-60(fp)
 40050b0:	10800090 	cmplti	r2,r2,2
 40050b4:	103fd21e 	bne	r2,zero,4005000 <__alt_mem_onchip_memory2_0+0xfbfffe40>
			}



        }
        count++;
 40050b8:	e0bfc017 	ldw	r2,-256(fp)
 40050bc:	10800044 	addi	r2,r2,1
 40050c0:	e0bfc015 	stw	r2,-256(fp)
        usleep (time);
 40050c4:	e0bfc417 	ldw	r2,-240(fp)
 40050c8:	1009883a 	mov	r4,r2
 40050cc:	40230600 	call	4023060 <usleep>
    int randomEnd = randomStart + 6;
    int time = timer;
    int secondWall = 0;
    int shapeLayout = 0; //0 == default, 1 == one left rotate, 2 == 2 rotate, 3 == 3 rotate
    checkEndGame(randomStart, randomEnd, 2);
    for (int i = 2; i < 30; i++) {
 40050d0:	e0bfc717 	ldw	r2,-228(fp)
 40050d4:	10800044 	addi	r2,r2,1
 40050d8:	e0bfc715 	stw	r2,-228(fp)
 40050dc:	e0bfc717 	ldw	r2,-228(fp)
 40050e0:	10800790 	cmplti	r2,r2,30
 40050e4:	1037201e 	bne	r2,zero,4002d68 <__alt_mem_onchip_memory2_0+0xfbffdba8>

        }
        count++;
        usleep (time);
    }
    if(shapeLayout == 0){
 40050e8:	e0bfc617 	ldw	r2,-232(fp)
 40050ec:	1000331e 	bne	r2,zero,40051bc <dropJBlock+0x2518>
		for (int j = randomStart; j < randomFirstEnd; j++) {
 40050f0:	e0bfc117 	ldw	r2,-252(fp)
 40050f4:	e0bff315 	stw	r2,-52(fp)
 40050f8:	00001306 	br	4005148 <dropJBlock+0x24a4>
			grid[28][j] = 1;
 40050fc:	008100f4 	movhi	r2,1027
 4005100:	10a62204 	addi	r2,r2,-26488
 4005104:	e0fff317 	ldw	r3,-52(fp)
 4005108:	18c10a04 	addi	r3,r3,1064
 400510c:	18c7883a 	add	r3,r3,r3
 4005110:	18c7883a 	add	r3,r3,r3
 4005114:	10c5883a 	add	r2,r2,r3
 4005118:	00c00044 	movi	r3,1
 400511c:	10c00015 	stw	r3,0(r2)
			rowCount[28]++;
 4005120:	008100f4 	movhi	r2,1027
 4005124:	10a60404 	addi	r2,r2,-26608
 4005128:	10801c17 	ldw	r2,112(r2)
 400512c:	10c00044 	addi	r3,r2,1
 4005130:	008100f4 	movhi	r2,1027
 4005134:	10a60404 	addi	r2,r2,-26608
 4005138:	10c01c15 	stw	r3,112(r2)
        }
        count++;
        usleep (time);
    }
    if(shapeLayout == 0){
		for (int j = randomStart; j < randomFirstEnd; j++) {
 400513c:	e0bff317 	ldw	r2,-52(fp)
 4005140:	10800044 	addi	r2,r2,1
 4005144:	e0bff315 	stw	r2,-52(fp)
 4005148:	e0fff317 	ldw	r3,-52(fp)
 400514c:	e0bfc217 	ldw	r2,-248(fp)
 4005150:	18bfea16 	blt	r3,r2,40050fc <__alt_mem_onchip_memory2_0+0xfbffff3c>
			grid[28][j] = 1;
			rowCount[28]++;
		}
		for (int j = randomStart; j < randomEnd; j++) {
 4005154:	e0bfc117 	ldw	r2,-252(fp)
 4005158:	e0bff415 	stw	r2,-48(fp)
 400515c:	00001306 	br	40051ac <dropJBlock+0x2508>
			grid[29][j] = 1;
 4005160:	008100f4 	movhi	r2,1027
 4005164:	10a62204 	addi	r2,r2,-26488
 4005168:	e0fff417 	ldw	r3,-48(fp)
 400516c:	18c11384 	addi	r3,r3,1102
 4005170:	18c7883a 	add	r3,r3,r3
 4005174:	18c7883a 	add	r3,r3,r3
 4005178:	10c5883a 	add	r2,r2,r3
 400517c:	00c00044 	movi	r3,1
 4005180:	10c00015 	stw	r3,0(r2)
			rowCount[29]++;
 4005184:	008100f4 	movhi	r2,1027
 4005188:	10a60404 	addi	r2,r2,-26608
 400518c:	10801d17 	ldw	r2,116(r2)
 4005190:	10c00044 	addi	r3,r2,1
 4005194:	008100f4 	movhi	r2,1027
 4005198:	10a60404 	addi	r2,r2,-26608
 400519c:	10c01d15 	stw	r3,116(r2)
    if(shapeLayout == 0){
		for (int j = randomStart; j < randomFirstEnd; j++) {
			grid[28][j] = 1;
			rowCount[28]++;
		}
		for (int j = randomStart; j < randomEnd; j++) {
 40051a0:	e0bff417 	ldw	r2,-48(fp)
 40051a4:	10800044 	addi	r2,r2,1
 40051a8:	e0bff415 	stw	r2,-48(fp)
 40051ac:	e0fff417 	ldw	r3,-48(fp)
 40051b0:	e0bfc317 	ldw	r2,-244(fp)
 40051b4:	18bfea16 	blt	r3,r2,4005160 <__alt_mem_onchip_memory2_0+0xfbffffa0>
 40051b8:	0000d206 	br	4005504 <dropJBlock+0x2860>
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
 40051bc:	e0bfc617 	ldw	r2,-232(fp)
 40051c0:	10800058 	cmpnei	r2,r2,1
 40051c4:	10004c1e 	bne	r2,zero,40052f8 <dropJBlock+0x2654>
		for (int j = randomStart; j < randomEnd; j++) {
 40051c8:	e0bfc117 	ldw	r2,-252(fp)
 40051cc:	e0bff515 	stw	r2,-44(fp)
 40051d0:	00001306 	br	4005220 <dropJBlock+0x257c>
			grid[29][j] = 1;
 40051d4:	008100f4 	movhi	r2,1027
 40051d8:	10a62204 	addi	r2,r2,-26488
 40051dc:	e0fff517 	ldw	r3,-44(fp)
 40051e0:	18c11384 	addi	r3,r3,1102
 40051e4:	18c7883a 	add	r3,r3,r3
 40051e8:	18c7883a 	add	r3,r3,r3
 40051ec:	10c5883a 	add	r2,r2,r3
 40051f0:	00c00044 	movi	r3,1
 40051f4:	10c00015 	stw	r3,0(r2)
			rowCount[29]++;
 40051f8:	008100f4 	movhi	r2,1027
 40051fc:	10a60404 	addi	r2,r2,-26608
 4005200:	10801d17 	ldw	r2,116(r2)
 4005204:	10c00044 	addi	r3,r2,1
 4005208:	008100f4 	movhi	r2,1027
 400520c:	10a60404 	addi	r2,r2,-26608
 4005210:	10c01d15 	stw	r3,116(r2)
		for (int j = randomStart; j < randomEnd; j++) {
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
		for (int j = randomStart; j < randomEnd; j++) {
 4005214:	e0bff517 	ldw	r2,-44(fp)
 4005218:	10800044 	addi	r2,r2,1
 400521c:	e0bff515 	stw	r2,-44(fp)
 4005220:	e0fff517 	ldw	r3,-44(fp)
 4005224:	e0bfc317 	ldw	r2,-244(fp)
 4005228:	18bfea16 	blt	r3,r2,40051d4 <__alt_mem_onchip_memory2_0+0xfc000014>
			grid[29][j] = 1;
			rowCount[29]++;
		}
		for(int row = 1; row < 3; row++){
 400522c:	00800044 	movi	r2,1
 4005230:	e0bff615 	stw	r2,-40(fp)
 4005234:	00002c06 	br	40052e8 <dropJBlock+0x2644>
			for (int j = secondWall; j < randomEnd; j++) {
 4005238:	e0bfc517 	ldw	r2,-236(fp)
 400523c:	e0bff715 	stw	r2,-36(fp)
 4005240:	00002306 	br	40052d0 <dropJBlock+0x262c>
				grid[29 - row][j] = 1;
 4005244:	00c00744 	movi	r3,29
 4005248:	e0bff617 	ldw	r2,-40(fp)
 400524c:	1885c83a 	sub	r2,r3,r2
 4005250:	040100f4 	movhi	r16,1027
 4005254:	84262204 	addi	r16,r16,-26488
 4005258:	01400984 	movi	r5,38
 400525c:	1009883a 	mov	r4,r2
 4005260:	40118340 	call	4011834 <__mulsi3>
 4005264:	1007883a 	mov	r3,r2
 4005268:	e0bff717 	ldw	r2,-36(fp)
 400526c:	1885883a 	add	r2,r3,r2
 4005270:	1085883a 	add	r2,r2,r2
 4005274:	1085883a 	add	r2,r2,r2
 4005278:	8085883a 	add	r2,r16,r2
 400527c:	00c00044 	movi	r3,1
 4005280:	10c00015 	stw	r3,0(r2)
				rowCount[29 - row]++;
 4005284:	00c00744 	movi	r3,29
 4005288:	e0bff617 	ldw	r2,-40(fp)
 400528c:	1885c83a 	sub	r2,r3,r2
 4005290:	00c100f4 	movhi	r3,1027
 4005294:	18e60404 	addi	r3,r3,-26608
 4005298:	1089883a 	add	r4,r2,r2
 400529c:	2109883a 	add	r4,r4,r4
 40052a0:	1907883a 	add	r3,r3,r4
 40052a4:	18c00017 	ldw	r3,0(r3)
 40052a8:	19000044 	addi	r4,r3,1
 40052ac:	00c100f4 	movhi	r3,1027
 40052b0:	18e60404 	addi	r3,r3,-26608
 40052b4:	1085883a 	add	r2,r2,r2
 40052b8:	1085883a 	add	r2,r2,r2
 40052bc:	1885883a 	add	r2,r3,r2
 40052c0:	11000015 	stw	r4,0(r2)
		for (int j = randomStart; j < randomEnd; j++) {
			grid[29][j] = 1;
			rowCount[29]++;
		}
		for(int row = 1; row < 3; row++){
			for (int j = secondWall; j < randomEnd; j++) {
 40052c4:	e0bff717 	ldw	r2,-36(fp)
 40052c8:	10800044 	addi	r2,r2,1
 40052cc:	e0bff715 	stw	r2,-36(fp)
 40052d0:	e0fff717 	ldw	r3,-36(fp)
 40052d4:	e0bfc317 	ldw	r2,-244(fp)
 40052d8:	18bfda16 	blt	r3,r2,4005244 <__alt_mem_onchip_memory2_0+0xfc000084>
	}else if(shapeLayout == 1){
		for (int j = randomStart; j < randomEnd; j++) {
			grid[29][j] = 1;
			rowCount[29]++;
		}
		for(int row = 1; row < 3; row++){
 40052dc:	e0bff617 	ldw	r2,-40(fp)
 40052e0:	10800044 	addi	r2,r2,1
 40052e4:	e0bff615 	stw	r2,-40(fp)
 40052e8:	e0bff617 	ldw	r2,-40(fp)
 40052ec:	108000d0 	cmplti	r2,r2,3
 40052f0:	103fd11e 	bne	r2,zero,4005238 <__alt_mem_onchip_memory2_0+0xfc000078>
 40052f4:	00008306 	br	4005504 <dropJBlock+0x2860>
			for (int j = secondWall; j < randomEnd; j++) {
				grid[29 - row][j] = 1;
				rowCount[29 - row]++;
			}
		}
	}else if(shapeLayout == 2){
 40052f8:	e0bfc617 	ldw	r2,-232(fp)
 40052fc:	10800098 	cmpnei	r2,r2,2
 4005300:	1000331e 	bne	r2,zero,40053d0 <dropJBlock+0x272c>
		for (int j = randomStart; j < randomEnd; j++) {
 4005304:	e0bfc117 	ldw	r2,-252(fp)
 4005308:	e0bff815 	stw	r2,-32(fp)
 400530c:	00001306 	br	400535c <dropJBlock+0x26b8>
			grid[28][j] = 1;
 4005310:	008100f4 	movhi	r2,1027
 4005314:	10a62204 	addi	r2,r2,-26488
 4005318:	e0fff817 	ldw	r3,-32(fp)
 400531c:	18c10a04 	addi	r3,r3,1064
 4005320:	18c7883a 	add	r3,r3,r3
 4005324:	18c7883a 	add	r3,r3,r3
 4005328:	10c5883a 	add	r2,r2,r3
 400532c:	00c00044 	movi	r3,1
 4005330:	10c00015 	stw	r3,0(r2)
			rowCount[28]++;
 4005334:	008100f4 	movhi	r2,1027
 4005338:	10a60404 	addi	r2,r2,-26608
 400533c:	10801c17 	ldw	r2,112(r2)
 4005340:	10c00044 	addi	r3,r2,1
 4005344:	008100f4 	movhi	r2,1027
 4005348:	10a60404 	addi	r2,r2,-26608
 400534c:	10c01c15 	stw	r3,112(r2)
				grid[29 - row][j] = 1;
				rowCount[29 - row]++;
			}
		}
	}else if(shapeLayout == 2){
		for (int j = randomStart; j < randomEnd; j++) {
 4005350:	e0bff817 	ldw	r2,-32(fp)
 4005354:	10800044 	addi	r2,r2,1
 4005358:	e0bff815 	stw	r2,-32(fp)
 400535c:	e0fff817 	ldw	r3,-32(fp)
 4005360:	e0bfc317 	ldw	r2,-244(fp)
 4005364:	18bfea16 	blt	r3,r2,4005310 <__alt_mem_onchip_memory2_0+0xfc000150>
			grid[28][j] = 1;
			rowCount[28]++;
		}
		for (int j = secondWall; j < randomEnd; j++) {
 4005368:	e0bfc517 	ldw	r2,-236(fp)
 400536c:	e0bff915 	stw	r2,-28(fp)
 4005370:	00001306 	br	40053c0 <dropJBlock+0x271c>
			grid[29][j] = 1;
 4005374:	008100f4 	movhi	r2,1027
 4005378:	10a62204 	addi	r2,r2,-26488
 400537c:	e0fff917 	ldw	r3,-28(fp)
 4005380:	18c11384 	addi	r3,r3,1102
 4005384:	18c7883a 	add	r3,r3,r3
 4005388:	18c7883a 	add	r3,r3,r3
 400538c:	10c5883a 	add	r2,r2,r3
 4005390:	00c00044 	movi	r3,1
 4005394:	10c00015 	stw	r3,0(r2)
			rowCount[29]++;
 4005398:	008100f4 	movhi	r2,1027
 400539c:	10a60404 	addi	r2,r2,-26608
 40053a0:	10801d17 	ldw	r2,116(r2)
 40053a4:	10c00044 	addi	r3,r2,1
 40053a8:	008100f4 	movhi	r2,1027
 40053ac:	10a60404 	addi	r2,r2,-26608
 40053b0:	10c01d15 	stw	r3,116(r2)
	}else if(shapeLayout == 2){
		for (int j = randomStart; j < randomEnd; j++) {
			grid[28][j] = 1;
			rowCount[28]++;
		}
		for (int j = secondWall; j < randomEnd; j++) {
 40053b4:	e0bff917 	ldw	r2,-28(fp)
 40053b8:	10800044 	addi	r2,r2,1
 40053bc:	e0bff915 	stw	r2,-28(fp)
 40053c0:	e0fff917 	ldw	r3,-28(fp)
 40053c4:	e0bfc317 	ldw	r2,-244(fp)
 40053c8:	18bfea16 	blt	r3,r2,4005374 <__alt_mem_onchip_memory2_0+0xfc0001b4>
 40053cc:	00004d06 	br	4005504 <dropJBlock+0x2860>
			grid[29][j] = 1;
			rowCount[29]++;
		}

	}else if(shapeLayout == 3){
 40053d0:	e0bfc617 	ldw	r2,-232(fp)
 40053d4:	108000d8 	cmpnei	r2,r2,3
 40053d8:	10004a1e 	bne	r2,zero,4005504 <dropJBlock+0x2860>
		for (int j = randomStart; j < randomEnd; j++) {
 40053dc:	e0bfc117 	ldw	r2,-252(fp)
 40053e0:	e0bffa15 	stw	r2,-24(fp)
 40053e4:	00001306 	br	4005434 <dropJBlock+0x2790>
			grid[27][j] = 1;
 40053e8:	008100f4 	movhi	r2,1027
 40053ec:	10a62204 	addi	r2,r2,-26488
 40053f0:	e0fffa17 	ldw	r3,-24(fp)
 40053f4:	18c10084 	addi	r3,r3,1026
 40053f8:	18c7883a 	add	r3,r3,r3
 40053fc:	18c7883a 	add	r3,r3,r3
 4005400:	10c5883a 	add	r2,r2,r3
 4005404:	00c00044 	movi	r3,1
 4005408:	10c00015 	stw	r3,0(r2)
			rowCount[27]++;
 400540c:	008100f4 	movhi	r2,1027
 4005410:	10a60404 	addi	r2,r2,-26608
 4005414:	10801b17 	ldw	r2,108(r2)
 4005418:	10c00044 	addi	r3,r2,1
 400541c:	008100f4 	movhi	r2,1027
 4005420:	10a60404 	addi	r2,r2,-26608
 4005424:	10c01b15 	stw	r3,108(r2)
			grid[29][j] = 1;
			rowCount[29]++;
		}

	}else if(shapeLayout == 3){
		for (int j = randomStart; j < randomEnd; j++) {
 4005428:	e0bffa17 	ldw	r2,-24(fp)
 400542c:	10800044 	addi	r2,r2,1
 4005430:	e0bffa15 	stw	r2,-24(fp)
 4005434:	e0fffa17 	ldw	r3,-24(fp)
 4005438:	e0bfc317 	ldw	r2,-244(fp)
 400543c:	18bfea16 	blt	r3,r2,40053e8 <__alt_mem_onchip_memory2_0+0xfc000228>
			grid[27][j] = 1;
			rowCount[27]++;
		}
		for(int row = 0; row < 2; row++){
 4005440:	e03ffb15 	stw	zero,-20(fp)
 4005444:	00002c06 	br	40054f8 <dropJBlock+0x2854>
			for (int j = randomStart; j < randomFirstEnd; j++) {
 4005448:	e0bfc117 	ldw	r2,-252(fp)
 400544c:	e0bffc15 	stw	r2,-16(fp)
 4005450:	00002306 	br	40054e0 <dropJBlock+0x283c>
				grid[29 - row][j] = 1;
 4005454:	00c00744 	movi	r3,29
 4005458:	e0bffb17 	ldw	r2,-20(fp)
 400545c:	1885c83a 	sub	r2,r3,r2
 4005460:	040100f4 	movhi	r16,1027
 4005464:	84262204 	addi	r16,r16,-26488
 4005468:	01400984 	movi	r5,38
 400546c:	1009883a 	mov	r4,r2
 4005470:	40118340 	call	4011834 <__mulsi3>
 4005474:	1007883a 	mov	r3,r2
 4005478:	e0bffc17 	ldw	r2,-16(fp)
 400547c:	1885883a 	add	r2,r3,r2
 4005480:	1085883a 	add	r2,r2,r2
 4005484:	1085883a 	add	r2,r2,r2
 4005488:	8085883a 	add	r2,r16,r2
 400548c:	00c00044 	movi	r3,1
 4005490:	10c00015 	stw	r3,0(r2)
				rowCount[29 - row]++;
 4005494:	00c00744 	movi	r3,29
 4005498:	e0bffb17 	ldw	r2,-20(fp)
 400549c:	1885c83a 	sub	r2,r3,r2
 40054a0:	00c100f4 	movhi	r3,1027
 40054a4:	18e60404 	addi	r3,r3,-26608
 40054a8:	1089883a 	add	r4,r2,r2
 40054ac:	2109883a 	add	r4,r4,r4
 40054b0:	1907883a 	add	r3,r3,r4
 40054b4:	18c00017 	ldw	r3,0(r3)
 40054b8:	19000044 	addi	r4,r3,1
 40054bc:	00c100f4 	movhi	r3,1027
 40054c0:	18e60404 	addi	r3,r3,-26608
 40054c4:	1085883a 	add	r2,r2,r2
 40054c8:	1085883a 	add	r2,r2,r2
 40054cc:	1885883a 	add	r2,r3,r2
 40054d0:	11000015 	stw	r4,0(r2)
		for (int j = randomStart; j < randomEnd; j++) {
			grid[27][j] = 1;
			rowCount[27]++;
		}
		for(int row = 0; row < 2; row++){
			for (int j = randomStart; j < randomFirstEnd; j++) {
 40054d4:	e0bffc17 	ldw	r2,-16(fp)
 40054d8:	10800044 	addi	r2,r2,1
 40054dc:	e0bffc15 	stw	r2,-16(fp)
 40054e0:	e0fffc17 	ldw	r3,-16(fp)
 40054e4:	e0bfc217 	ldw	r2,-248(fp)
 40054e8:	18bfda16 	blt	r3,r2,4005454 <__alt_mem_onchip_memory2_0+0xfc000294>
	}else if(shapeLayout == 3){
		for (int j = randomStart; j < randomEnd; j++) {
			grid[27][j] = 1;
			rowCount[27]++;
		}
		for(int row = 0; row < 2; row++){
 40054ec:	e0bffb17 	ldw	r2,-20(fp)
 40054f0:	10800044 	addi	r2,r2,1
 40054f4:	e0bffb15 	stw	r2,-20(fp)
 40054f8:	e0bffb17 	ldw	r2,-20(fp)
 40054fc:	10800090 	cmplti	r2,r2,2
 4005500:	103fd11e 	bne	r2,zero,4005448 <__alt_mem_onchip_memory2_0+0xfc000288>
				grid[29 - row][j] = 1;
				rowCount[29 - row]++;
			}
		}
	}
}
 4005504:	e6fffe04 	addi	sp,fp,-8
 4005508:	dfc00317 	ldw	ra,12(sp)
 400550c:	df000217 	ldw	fp,8(sp)
 4005510:	dc400117 	ldw	r17,4(sp)
 4005514:	dc000017 	ldw	r16,0(sp)
 4005518:	dec00404 	addi	sp,sp,16
 400551c:	f800283a 	ret

04005520 <dropLBlock>:

void dropLBlock() {
 4005520:	deffbe04 	addi	sp,sp,-264
 4005524:	dfc04115 	stw	ra,260(sp)
 4005528:	df004015 	stw	fp,256(sp)
 400552c:	dc403f15 	stw	r17,252(sp)
 4005530:	dc003e15 	stw	r16,248(sp)
 4005534:	df004004 	addi	fp,sp,256
    int count = 0;
 4005538:	e03fc015 	stw	zero,-256(fp)
    BYTE keycode;
    int randomStart = rand()%30+21;
 400553c:	40141e00 	call	40141e0 <rand>
 4005540:	01400784 	movi	r5,30
 4005544:	1009883a 	mov	r4,r2
 4005548:	40117040 	call	4011704 <__modsi3>
 400554c:	10800544 	addi	r2,r2,21
 4005550:	e0bfc115 	stw	r2,-252(fp)
    if(randomStart % 2 == 0){
 4005554:	e0bfc117 	ldw	r2,-252(fp)
 4005558:	1080004c 	andi	r2,r2,1
 400555c:	10000a1e 	bne	r2,zero,4005588 <dropLBlock+0x68>
    	if(randomStart == 52){
 4005560:	e0bfc117 	ldw	r2,-252(fp)
 4005564:	10800d18 	cmpnei	r2,r2,52
 4005568:	1000041e 	bne	r2,zero,400557c <dropLBlock+0x5c>
    		randomStart--;
 400556c:	e0bfc117 	ldw	r2,-252(fp)
 4005570:	10bfffc4 	addi	r2,r2,-1
 4005574:	e0bfc115 	stw	r2,-252(fp)
 4005578:	00000306 	br	4005588 <dropLBlock+0x68>
    	}else{
    		randomStart++;
 400557c:	e0bfc117 	ldw	r2,-252(fp)
 4005580:	10800044 	addi	r2,r2,1
 4005584:	e0bfc115 	stw	r2,-252(fp)
    	}
    }
    int randomFirstStart = randomStart + 4;
 4005588:	e0bfc117 	ldw	r2,-252(fp)
 400558c:	10800104 	addi	r2,r2,4
 4005590:	e0bfc215 	stw	r2,-248(fp)
    int randomEnd = randomStart + 6;
 4005594:	e0bfc117 	ldw	r2,-252(fp)
 4005598:	10800184 	addi	r2,r2,6
 400559c:	e0bfc315 	stw	r2,-244(fp)
    int time = timer;
 40055a0:	d0a80117 	ldw	r2,-24572(gp)
 40055a4:	e0bfc415 	stw	r2,-240(fp)
    int secondEnd = 0;
 40055a8:	e03fc515 	stw	zero,-236(fp)
    int shapeLayout = 0; // 0 = default, 1 = 1 left,  2 = 2 left....
 40055ac:	e03fc615 	stw	zero,-232(fp)
    checkEndGame(randomStart, randomEnd, 2);
 40055b0:	01800084 	movi	r6,2
 40055b4:	e17fc317 	ldw	r5,-244(fp)
 40055b8:	e13fc117 	ldw	r4,-252(fp)
 40055bc:	400dfd80 	call	400dfd8 <checkEndGame>
    for (int i = 2; i < 30; i++) {
 40055c0:	00800084 	movi	r2,2
 40055c4:	e0bfc715 	stw	r2,-228(fp)
 40055c8:	00095206 	br	4007b14 <dropLBlock+0x25f4>
        if (count == 0) {
 40055cc:	e0bfc017 	ldw	r2,-256(fp)
 40055d0:	1000491e 	bne	r2,zero,40056f8 <dropLBlock+0x1d8>



        	for (int j = randomFirstStart; j < randomEnd; j++) {
 40055d4:	e0bfc217 	ldw	r2,-248(fp)
 40055d8:	e0bfc815 	stw	r2,-224(fp)
 40055dc:	00002006 	br	4005660 <dropLBlock+0x140>
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xC4;
 40055e0:	d4200317 	ldw	r16,-32756(gp)
 40055e4:	e0bfc717 	ldw	r2,-228(fp)
 40055e8:	10bfffc4 	addi	r2,r2,-1
 40055ec:	01401404 	movi	r5,80
 40055f0:	1009883a 	mov	r4,r2
 40055f4:	40118340 	call	4011834 <__mulsi3>
 40055f8:	1007883a 	mov	r3,r2
 40055fc:	e0bfc817 	ldw	r2,-224(fp)
 4005600:	1885883a 	add	r2,r3,r2
 4005604:	1085883a 	add	r2,r2,r2
 4005608:	8085883a 	add	r2,r16,r2
 400560c:	00fff104 	movi	r3,-60
 4005610:	10c00005 	stb	r3,0(r2)
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 4005614:	d4600317 	ldw	r17,-32756(gp)
 4005618:	e0bfc717 	ldw	r2,-228(fp)
 400561c:	10bfffc4 	addi	r2,r2,-1
 4005620:	01401404 	movi	r5,80
 4005624:	1009883a 	mov	r4,r2
 4005628:	40118340 	call	4011834 <__mulsi3>
 400562c:	1007883a 	mov	r3,r2
 4005630:	e0bfc817 	ldw	r2,-224(fp)
 4005634:	1885883a 	add	r2,r3,r2
 4005638:	1085883a 	add	r2,r2,r2
 400563c:	14000044 	addi	r16,r2,1
 4005640:	e13fc817 	ldw	r4,-224(fp)
 4005644:	400d8600 	call	400d860 <check_col>
 4005648:	1007883a 	mov	r3,r2
 400564c:	8c05883a 	add	r2,r17,r16
 4005650:	10c00005 	stb	r3,0(r2)
    for (int i = 2; i < 30; i++) {
        if (count == 0) {



        	for (int j = randomFirstStart; j < randomEnd; j++) {
 4005654:	e0bfc817 	ldw	r2,-224(fp)
 4005658:	10800044 	addi	r2,r2,1
 400565c:	e0bfc815 	stw	r2,-224(fp)
 4005660:	e0ffc817 	ldw	r3,-224(fp)
 4005664:	e0bfc317 	ldw	r2,-244(fp)
 4005668:	18bfdd16 	blt	r3,r2,40055e0 <__alt_mem_onchip_memory2_0+0xfc000420>
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xC4;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
        	}

        	for (int j = randomStart; j < randomEnd; j++) {
 400566c:	e0bfc117 	ldw	r2,-252(fp)
 4005670:	e0bfc915 	stw	r2,-220(fp)
 4005674:	00001c06 	br	40056e8 <dropLBlock+0x1c8>
				vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xC4;
 4005678:	d4200317 	ldw	r16,-32756(gp)
 400567c:	01401404 	movi	r5,80
 4005680:	e13fc717 	ldw	r4,-228(fp)
 4005684:	40118340 	call	4011834 <__mulsi3>
 4005688:	1007883a 	mov	r3,r2
 400568c:	e0bfc917 	ldw	r2,-220(fp)
 4005690:	1885883a 	add	r2,r3,r2
 4005694:	1085883a 	add	r2,r2,r2
 4005698:	8085883a 	add	r2,r16,r2
 400569c:	00fff104 	movi	r3,-60
 40056a0:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[(i * 80 + j) * 2 + 1] = check_col(j);
 40056a4:	d4600317 	ldw	r17,-32756(gp)
 40056a8:	01401404 	movi	r5,80
 40056ac:	e13fc717 	ldw	r4,-228(fp)
 40056b0:	40118340 	call	4011834 <__mulsi3>
 40056b4:	1007883a 	mov	r3,r2
 40056b8:	e0bfc917 	ldw	r2,-220(fp)
 40056bc:	1885883a 	add	r2,r3,r2
 40056c0:	1085883a 	add	r2,r2,r2
 40056c4:	14000044 	addi	r16,r2,1
 40056c8:	e13fc917 	ldw	r4,-220(fp)
 40056cc:	400d8600 	call	400d860 <check_col>
 40056d0:	1007883a 	mov	r3,r2
 40056d4:	8c05883a 	add	r2,r17,r16
 40056d8:	10c00005 	stb	r3,0(r2)
        	for (int j = randomFirstStart; j < randomEnd; j++) {
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xC4;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
        	}

        	for (int j = randomStart; j < randomEnd; j++) {
 40056dc:	e0bfc917 	ldw	r2,-220(fp)
 40056e0:	10800044 	addi	r2,r2,1
 40056e4:	e0bfc915 	stw	r2,-220(fp)
 40056e8:	e0ffc917 	ldw	r3,-220(fp)
 40056ec:	e0bfc317 	ldw	r2,-244(fp)
 40056f0:	18bfe116 	blt	r3,r2,4005678 <__alt_mem_onchip_memory2_0+0xfc0004b8>
 40056f4:	0008fe06 	br	4007af0 <dropLBlock+0x25d0>



        } else {

        	if(shapeLayout == 0){
 40056f8:	e0bfc617 	ldw	r2,-232(fp)
 40056fc:	1000681e 	bne	r2,zero,40058a0 <dropLBlock+0x380>
				for (int j = randomStart; j < randomEnd; j++) {
 4005700:	e0bfc117 	ldw	r2,-252(fp)
 4005704:	e0bfca15 	stw	r2,-216(fp)
 4005708:	00006106 	br	4005890 <dropLBlock+0x370>
			      if(grid[i][j] == 1){
 400570c:	040100f4 	movhi	r16,1027
 4005710:	84262204 	addi	r16,r16,-26488
 4005714:	e0bfc717 	ldw	r2,-228(fp)
 4005718:	01400984 	movi	r5,38
 400571c:	1009883a 	mov	r4,r2
 4005720:	40118340 	call	4011834 <__mulsi3>
 4005724:	1007883a 	mov	r3,r2
 4005728:	e0bfca17 	ldw	r2,-216(fp)
 400572c:	1885883a 	add	r2,r3,r2
 4005730:	1085883a 	add	r2,r2,r2
 4005734:	1085883a 	add	r2,r2,r2
 4005738:	8085883a 	add	r2,r16,r2
 400573c:	10800017 	ldw	r2,0(r2)
 4005740:	10800058 	cmpnei	r2,r2,1
 4005744:	10004f1e 	bne	r2,zero,4005884 <dropLBlock+0x364>
			    	  for (int j = randomFirstStart; j < randomEnd; j++) {
 4005748:	e0bfc217 	ldw	r2,-248(fp)
 400574c:	e0bfcb15 	stw	r2,-212(fp)
 4005750:	00002106 	br	40057d8 <dropLBlock+0x2b8>
			        		grid[i - 2][j] = 1;
 4005754:	e0bfc717 	ldw	r2,-228(fp)
 4005758:	10bfff84 	addi	r2,r2,-2
 400575c:	040100f4 	movhi	r16,1027
 4005760:	84262204 	addi	r16,r16,-26488
 4005764:	01400984 	movi	r5,38
 4005768:	1009883a 	mov	r4,r2
 400576c:	40118340 	call	4011834 <__mulsi3>
 4005770:	1007883a 	mov	r3,r2
 4005774:	e0bfcb17 	ldw	r2,-212(fp)
 4005778:	1885883a 	add	r2,r3,r2
 400577c:	1085883a 	add	r2,r2,r2
 4005780:	1085883a 	add	r2,r2,r2
 4005784:	8085883a 	add	r2,r16,r2
 4005788:	00c00044 	movi	r3,1
 400578c:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 2]++;
 4005790:	e0bfc717 	ldw	r2,-228(fp)
 4005794:	10bfff84 	addi	r2,r2,-2
 4005798:	00c100f4 	movhi	r3,1027
 400579c:	18e60404 	addi	r3,r3,-26608
 40057a0:	1089883a 	add	r4,r2,r2
 40057a4:	2109883a 	add	r4,r4,r4
 40057a8:	1907883a 	add	r3,r3,r4
 40057ac:	18c00017 	ldw	r3,0(r3)
 40057b0:	19000044 	addi	r4,r3,1
 40057b4:	00c100f4 	movhi	r3,1027
 40057b8:	18e60404 	addi	r3,r3,-26608
 40057bc:	1085883a 	add	r2,r2,r2
 40057c0:	1085883a 	add	r2,r2,r2
 40057c4:	1885883a 	add	r2,r3,r2
 40057c8:	11000015 	stw	r4,0(r2)
        } else {

        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
			      if(grid[i][j] == 1){
			    	  for (int j = randomFirstStart; j < randomEnd; j++) {
 40057cc:	e0bfcb17 	ldw	r2,-212(fp)
 40057d0:	10800044 	addi	r2,r2,1
 40057d4:	e0bfcb15 	stw	r2,-212(fp)
 40057d8:	e0ffcb17 	ldw	r3,-212(fp)
 40057dc:	e0bfc317 	ldw	r2,-244(fp)
 40057e0:	18bfdc16 	blt	r3,r2,4005754 <__alt_mem_onchip_memory2_0+0xfc000594>
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}
						for (int j = randomStart; j < randomEnd; j++) {
 40057e4:	e0bfc117 	ldw	r2,-252(fp)
 40057e8:	e0bfcc15 	stw	r2,-208(fp)
 40057ec:	00002106 	br	4005874 <dropLBlock+0x354>
			//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
							grid[i - 1][j] = 1;
 40057f0:	e0bfc717 	ldw	r2,-228(fp)
 40057f4:	10bfffc4 	addi	r2,r2,-1
 40057f8:	040100f4 	movhi	r16,1027
 40057fc:	84262204 	addi	r16,r16,-26488
 4005800:	01400984 	movi	r5,38
 4005804:	1009883a 	mov	r4,r2
 4005808:	40118340 	call	4011834 <__mulsi3>
 400580c:	1007883a 	mov	r3,r2
 4005810:	e0bfcc17 	ldw	r2,-208(fp)
 4005814:	1885883a 	add	r2,r3,r2
 4005818:	1085883a 	add	r2,r2,r2
 400581c:	1085883a 	add	r2,r2,r2
 4005820:	8085883a 	add	r2,r16,r2
 4005824:	00c00044 	movi	r3,1
 4005828:	10c00015 	stw	r3,0(r2)
							rowCount[i - 1]++;
 400582c:	e0bfc717 	ldw	r2,-228(fp)
 4005830:	10bfffc4 	addi	r2,r2,-1
 4005834:	00c100f4 	movhi	r3,1027
 4005838:	18e60404 	addi	r3,r3,-26608
 400583c:	1089883a 	add	r4,r2,r2
 4005840:	2109883a 	add	r4,r4,r4
 4005844:	1907883a 	add	r3,r3,r4
 4005848:	18c00017 	ldw	r3,0(r3)
 400584c:	19000044 	addi	r4,r3,1
 4005850:	00c100f4 	movhi	r3,1027
 4005854:	18e60404 	addi	r3,r3,-26608
 4005858:	1085883a 	add	r2,r2,r2
 400585c:	1085883a 	add	r2,r2,r2
 4005860:	1885883a 	add	r2,r3,r2
 4005864:	11000015 	stw	r4,0(r2)
			      if(grid[i][j] == 1){
			    	  for (int j = randomFirstStart; j < randomEnd; j++) {
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}
						for (int j = randomStart; j < randomEnd; j++) {
 4005868:	e0bfcc17 	ldw	r2,-208(fp)
 400586c:	10800044 	addi	r2,r2,1
 4005870:	e0bfcc15 	stw	r2,-208(fp)
 4005874:	e0ffcc17 	ldw	r3,-208(fp)
 4005878:	e0bfc317 	ldw	r2,-244(fp)
 400587c:	18bfdc16 	blt	r3,r2,40057f0 <__alt_mem_onchip_memory2_0+0xfc000630>
			//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
							grid[i - 1][j] = 1;
							rowCount[i - 1]++;
						}
						return;
 4005880:	0009ae06 	br	4007f3c <dropLBlock+0x2a1c>


        } else {

        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
 4005884:	e0bfca17 	ldw	r2,-216(fp)
 4005888:	10800044 	addi	r2,r2,1
 400588c:	e0bfca15 	stw	r2,-216(fp)
 4005890:	e0ffca17 	ldw	r3,-216(fp)
 4005894:	e0bfc317 	ldw	r2,-244(fp)
 4005898:	18bf9c16 	blt	r3,r2,400570c <__alt_mem_onchip_memory2_0+0xfc00054c>
 400589c:	00023406 	br	4006170 <dropLBlock+0xc50>
							rowCount[i - 1]++;
						}
						return;
			      }
				}
			}else if(shapeLayout == 1){
 40058a0:	e0bfc617 	ldw	r2,-232(fp)
 40058a4:	10800058 	cmpnei	r2,r2,1
 40058a8:	1000e81e 	bne	r2,zero,4005c4c <dropLBlock+0x72c>
				for (int j = randomStart; j < randomEnd; j++) {
 40058ac:	e0bfc117 	ldw	r2,-252(fp)
 40058b0:	e0bfcd15 	stw	r2,-204(fp)
 40058b4:	0000e106 	br	4005c3c <dropLBlock+0x71c>
			      if(grid[i - 2][j] == 1){
 40058b8:	e0bfc717 	ldw	r2,-228(fp)
 40058bc:	10bfff84 	addi	r2,r2,-2
 40058c0:	040100f4 	movhi	r16,1027
 40058c4:	84262204 	addi	r16,r16,-26488
 40058c8:	01400984 	movi	r5,38
 40058cc:	1009883a 	mov	r4,r2
 40058d0:	40118340 	call	4011834 <__mulsi3>
 40058d4:	1007883a 	mov	r3,r2
 40058d8:	e0bfcd17 	ldw	r2,-204(fp)
 40058dc:	1885883a 	add	r2,r3,r2
 40058e0:	1085883a 	add	r2,r2,r2
 40058e4:	1085883a 	add	r2,r2,r2
 40058e8:	8085883a 	add	r2,r16,r2
 40058ec:	10800017 	ldw	r2,0(r2)
 40058f0:	10800058 	cmpnei	r2,r2,1
 40058f4:	10005b1e 	bne	r2,zero,4005a64 <dropLBlock+0x544>
			    	  for(int row = 0; row < 2; row++){
 40058f8:	e03fce15 	stw	zero,-200(fp)
 40058fc:	00002e06 	br	40059b8 <dropLBlock+0x498>
							for (int j = randomFirstStart; j < randomEnd; j++) {
 4005900:	e0bfc217 	ldw	r2,-248(fp)
 4005904:	e0bfcf15 	stw	r2,-196(fp)
 4005908:	00002506 	br	40059a0 <dropLBlock+0x480>
				//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
								grid[i - 1 - row][j] = 1;
 400590c:	e0bfc717 	ldw	r2,-228(fp)
 4005910:	10ffffc4 	addi	r3,r2,-1
 4005914:	e0bfce17 	ldw	r2,-200(fp)
 4005918:	1885c83a 	sub	r2,r3,r2
 400591c:	040100f4 	movhi	r16,1027
 4005920:	84262204 	addi	r16,r16,-26488
 4005924:	01400984 	movi	r5,38
 4005928:	1009883a 	mov	r4,r2
 400592c:	40118340 	call	4011834 <__mulsi3>
 4005930:	1007883a 	mov	r3,r2
 4005934:	e0bfcf17 	ldw	r2,-196(fp)
 4005938:	1885883a 	add	r2,r3,r2
 400593c:	1085883a 	add	r2,r2,r2
 4005940:	1085883a 	add	r2,r2,r2
 4005944:	8085883a 	add	r2,r16,r2
 4005948:	00c00044 	movi	r3,1
 400594c:	10c00015 	stw	r3,0(r2)
								rowCount[i - 1 -row]++;
 4005950:	e0bfc717 	ldw	r2,-228(fp)
 4005954:	10ffffc4 	addi	r3,r2,-1
 4005958:	e0bfce17 	ldw	r2,-200(fp)
 400595c:	1885c83a 	sub	r2,r3,r2
 4005960:	00c100f4 	movhi	r3,1027
 4005964:	18e60404 	addi	r3,r3,-26608
 4005968:	1089883a 	add	r4,r2,r2
 400596c:	2109883a 	add	r4,r4,r4
 4005970:	1907883a 	add	r3,r3,r4
 4005974:	18c00017 	ldw	r3,0(r3)
 4005978:	19000044 	addi	r4,r3,1
 400597c:	00c100f4 	movhi	r3,1027
 4005980:	18e60404 	addi	r3,r3,-26608
 4005984:	1085883a 	add	r2,r2,r2
 4005988:	1085883a 	add	r2,r2,r2
 400598c:	1885883a 	add	r2,r3,r2
 4005990:	11000015 	stw	r4,0(r2)
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomEnd; j++) {
			      if(grid[i - 2][j] == 1){
			    	  for(int row = 0; row < 2; row++){
							for (int j = randomFirstStart; j < randomEnd; j++) {
 4005994:	e0bfcf17 	ldw	r2,-196(fp)
 4005998:	10800044 	addi	r2,r2,1
 400599c:	e0bfcf15 	stw	r2,-196(fp)
 40059a0:	e0ffcf17 	ldw	r3,-196(fp)
 40059a4:	e0bfc317 	ldw	r2,-244(fp)
 40059a8:	18bfd816 	blt	r3,r2,400590c <__alt_mem_onchip_memory2_0+0xfc00074c>
			      }
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomEnd; j++) {
			      if(grid[i - 2][j] == 1){
			    	  for(int row = 0; row < 2; row++){
 40059ac:	e0bfce17 	ldw	r2,-200(fp)
 40059b0:	10800044 	addi	r2,r2,1
 40059b4:	e0bfce15 	stw	r2,-200(fp)
 40059b8:	e0bfce17 	ldw	r2,-200(fp)
 40059bc:	10800090 	cmplti	r2,r2,2
 40059c0:	103fcf1e 	bne	r2,zero,4005900 <__alt_mem_onchip_memory2_0+0xfc000740>
				//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 -row]++;
							}
						}
						for (int j = randomStart; j < randomEnd; j++) {
 40059c4:	e0bfc117 	ldw	r2,-252(fp)
 40059c8:	e0bfd015 	stw	r2,-192(fp)
 40059cc:	00002106 	br	4005a54 <dropLBlock+0x534>
			//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
							grid[i - 3][j] = 1;
 40059d0:	e0bfc717 	ldw	r2,-228(fp)
 40059d4:	10bfff44 	addi	r2,r2,-3
 40059d8:	040100f4 	movhi	r16,1027
 40059dc:	84262204 	addi	r16,r16,-26488
 40059e0:	01400984 	movi	r5,38
 40059e4:	1009883a 	mov	r4,r2
 40059e8:	40118340 	call	4011834 <__mulsi3>
 40059ec:	1007883a 	mov	r3,r2
 40059f0:	e0bfd017 	ldw	r2,-192(fp)
 40059f4:	1885883a 	add	r2,r3,r2
 40059f8:	1085883a 	add	r2,r2,r2
 40059fc:	1085883a 	add	r2,r2,r2
 4005a00:	8085883a 	add	r2,r16,r2
 4005a04:	00c00044 	movi	r3,1
 4005a08:	10c00015 	stw	r3,0(r2)
							rowCount[i - 3]++;
 4005a0c:	e0bfc717 	ldw	r2,-228(fp)
 4005a10:	10bfff44 	addi	r2,r2,-3
 4005a14:	00c100f4 	movhi	r3,1027
 4005a18:	18e60404 	addi	r3,r3,-26608
 4005a1c:	1089883a 	add	r4,r2,r2
 4005a20:	2109883a 	add	r4,r4,r4
 4005a24:	1907883a 	add	r3,r3,r4
 4005a28:	18c00017 	ldw	r3,0(r3)
 4005a2c:	19000044 	addi	r4,r3,1
 4005a30:	00c100f4 	movhi	r3,1027
 4005a34:	18e60404 	addi	r3,r3,-26608
 4005a38:	1085883a 	add	r2,r2,r2
 4005a3c:	1085883a 	add	r2,r2,r2
 4005a40:	1885883a 	add	r2,r3,r2
 4005a44:	11000015 	stw	r4,0(r2)
				//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 -row]++;
							}
						}
						for (int j = randomStart; j < randomEnd; j++) {
 4005a48:	e0bfd017 	ldw	r2,-192(fp)
 4005a4c:	10800044 	addi	r2,r2,1
 4005a50:	e0bfd015 	stw	r2,-192(fp)
 4005a54:	e0ffd017 	ldw	r3,-192(fp)
 4005a58:	e0bfc317 	ldw	r2,-244(fp)
 4005a5c:	18bfdc16 	blt	r3,r2,40059d0 <__alt_mem_onchip_memory2_0+0xfc000810>
			//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
							grid[i - 3][j] = 1;
							rowCount[i - 3]++;
						}
						return;
 4005a60:	00093606 	br	4007f3c <dropLBlock+0x2a1c>
			      }
			      for (int j = randomFirstStart; j < randomEnd; j++) {
 4005a64:	e0bfc217 	ldw	r2,-248(fp)
 4005a68:	e0bfd115 	stw	r2,-188(fp)
 4005a6c:	00006d06 	br	4005c24 <dropLBlock+0x704>
				//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
			    	  if(grid[i][j] == 1){
 4005a70:	040100f4 	movhi	r16,1027
 4005a74:	84262204 	addi	r16,r16,-26488
 4005a78:	e0bfc717 	ldw	r2,-228(fp)
 4005a7c:	01400984 	movi	r5,38
 4005a80:	1009883a 	mov	r4,r2
 4005a84:	40118340 	call	4011834 <__mulsi3>
 4005a88:	1007883a 	mov	r3,r2
 4005a8c:	e0bfd117 	ldw	r2,-188(fp)
 4005a90:	1885883a 	add	r2,r3,r2
 4005a94:	1085883a 	add	r2,r2,r2
 4005a98:	1085883a 	add	r2,r2,r2
 4005a9c:	8085883a 	add	r2,r16,r2
 4005aa0:	10800017 	ldw	r2,0(r2)
 4005aa4:	10800058 	cmpnei	r2,r2,1
 4005aa8:	10005b1e 	bne	r2,zero,4005c18 <dropLBlock+0x6f8>
			    		  for(int row = 0; row < 2; row++){
 4005aac:	e03fd215 	stw	zero,-184(fp)
 4005ab0:	00002e06 	br	4005b6c <dropLBlock+0x64c>
								for (int j = randomFirstStart; j < randomEnd; j++) {
 4005ab4:	e0bfc217 	ldw	r2,-248(fp)
 4005ab8:	e0bfd315 	stw	r2,-180(fp)
 4005abc:	00002506 	br	4005b54 <dropLBlock+0x634>
					//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
									grid[i - 1 - row][j] = 1;
 4005ac0:	e0bfc717 	ldw	r2,-228(fp)
 4005ac4:	10ffffc4 	addi	r3,r2,-1
 4005ac8:	e0bfd217 	ldw	r2,-184(fp)
 4005acc:	1885c83a 	sub	r2,r3,r2
 4005ad0:	040100f4 	movhi	r16,1027
 4005ad4:	84262204 	addi	r16,r16,-26488
 4005ad8:	01400984 	movi	r5,38
 4005adc:	1009883a 	mov	r4,r2
 4005ae0:	40118340 	call	4011834 <__mulsi3>
 4005ae4:	1007883a 	mov	r3,r2
 4005ae8:	e0bfd317 	ldw	r2,-180(fp)
 4005aec:	1885883a 	add	r2,r3,r2
 4005af0:	1085883a 	add	r2,r2,r2
 4005af4:	1085883a 	add	r2,r2,r2
 4005af8:	8085883a 	add	r2,r16,r2
 4005afc:	00c00044 	movi	r3,1
 4005b00:	10c00015 	stw	r3,0(r2)
									rowCount[i - 1 - row]++;
 4005b04:	e0bfc717 	ldw	r2,-228(fp)
 4005b08:	10ffffc4 	addi	r3,r2,-1
 4005b0c:	e0bfd217 	ldw	r2,-184(fp)
 4005b10:	1885c83a 	sub	r2,r3,r2
 4005b14:	00c100f4 	movhi	r3,1027
 4005b18:	18e60404 	addi	r3,r3,-26608
 4005b1c:	1089883a 	add	r4,r2,r2
 4005b20:	2109883a 	add	r4,r4,r4
 4005b24:	1907883a 	add	r3,r3,r4
 4005b28:	18c00017 	ldw	r3,0(r3)
 4005b2c:	19000044 	addi	r4,r3,1
 4005b30:	00c100f4 	movhi	r3,1027
 4005b34:	18e60404 	addi	r3,r3,-26608
 4005b38:	1085883a 	add	r2,r2,r2
 4005b3c:	1085883a 	add	r2,r2,r2
 4005b40:	1885883a 	add	r2,r3,r2
 4005b44:	11000015 	stw	r4,0(r2)
			      }
			      for (int j = randomFirstStart; j < randomEnd; j++) {
				//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
			    	  if(grid[i][j] == 1){
			    		  for(int row = 0; row < 2; row++){
								for (int j = randomFirstStart; j < randomEnd; j++) {
 4005b48:	e0bfd317 	ldw	r2,-180(fp)
 4005b4c:	10800044 	addi	r2,r2,1
 4005b50:	e0bfd315 	stw	r2,-180(fp)
 4005b54:	e0ffd317 	ldw	r3,-180(fp)
 4005b58:	e0bfc317 	ldw	r2,-244(fp)
 4005b5c:	18bfd816 	blt	r3,r2,4005ac0 <__alt_mem_onchip_memory2_0+0xfc000900>
						return;
			      }
			      for (int j = randomFirstStart; j < randomEnd; j++) {
				//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
			    	  if(grid[i][j] == 1){
			    		  for(int row = 0; row < 2; row++){
 4005b60:	e0bfd217 	ldw	r2,-184(fp)
 4005b64:	10800044 	addi	r2,r2,1
 4005b68:	e0bfd215 	stw	r2,-184(fp)
 4005b6c:	e0bfd217 	ldw	r2,-184(fp)
 4005b70:	10800090 	cmplti	r2,r2,2
 4005b74:	103fcf1e 	bne	r2,zero,4005ab4 <__alt_mem_onchip_memory2_0+0xfc0008f4>
					//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
									grid[i - 1 - row][j] = 1;
									rowCount[i - 1 - row]++;
								}
							}
							for (int j = randomStart; j < randomEnd; j++) {
 4005b78:	e0bfc117 	ldw	r2,-252(fp)
 4005b7c:	e0bfd415 	stw	r2,-176(fp)
 4005b80:	00002106 	br	4005c08 <dropLBlock+0x6e8>
				//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
								grid[i - 3][j] = 1;
 4005b84:	e0bfc717 	ldw	r2,-228(fp)
 4005b88:	10bfff44 	addi	r2,r2,-3
 4005b8c:	040100f4 	movhi	r16,1027
 4005b90:	84262204 	addi	r16,r16,-26488
 4005b94:	01400984 	movi	r5,38
 4005b98:	1009883a 	mov	r4,r2
 4005b9c:	40118340 	call	4011834 <__mulsi3>
 4005ba0:	1007883a 	mov	r3,r2
 4005ba4:	e0bfd417 	ldw	r2,-176(fp)
 4005ba8:	1885883a 	add	r2,r3,r2
 4005bac:	1085883a 	add	r2,r2,r2
 4005bb0:	1085883a 	add	r2,r2,r2
 4005bb4:	8085883a 	add	r2,r16,r2
 4005bb8:	00c00044 	movi	r3,1
 4005bbc:	10c00015 	stw	r3,0(r2)
								rowCount[i - 3]++;
 4005bc0:	e0bfc717 	ldw	r2,-228(fp)
 4005bc4:	10bfff44 	addi	r2,r2,-3
 4005bc8:	00c100f4 	movhi	r3,1027
 4005bcc:	18e60404 	addi	r3,r3,-26608
 4005bd0:	1089883a 	add	r4,r2,r2
 4005bd4:	2109883a 	add	r4,r4,r4
 4005bd8:	1907883a 	add	r3,r3,r4
 4005bdc:	18c00017 	ldw	r3,0(r3)
 4005be0:	19000044 	addi	r4,r3,1
 4005be4:	00c100f4 	movhi	r3,1027
 4005be8:	18e60404 	addi	r3,r3,-26608
 4005bec:	1085883a 	add	r2,r2,r2
 4005bf0:	1085883a 	add	r2,r2,r2
 4005bf4:	1885883a 	add	r2,r3,r2
 4005bf8:	11000015 	stw	r4,0(r2)
					//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
									grid[i - 1 - row][j] = 1;
									rowCount[i - 1 - row]++;
								}
							}
							for (int j = randomStart; j < randomEnd; j++) {
 4005bfc:	e0bfd417 	ldw	r2,-176(fp)
 4005c00:	10800044 	addi	r2,r2,1
 4005c04:	e0bfd415 	stw	r2,-176(fp)
 4005c08:	e0ffd417 	ldw	r3,-176(fp)
 4005c0c:	e0bfc317 	ldw	r2,-244(fp)
 4005c10:	18bfdc16 	blt	r3,r2,4005b84 <__alt_mem_onchip_memory2_0+0xfc0009c4>
				//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
								grid[i - 3][j] = 1;
								rowCount[i - 3]++;
							}
							return;
 4005c14:	0008c906 	br	4007f3c <dropLBlock+0x2a1c>
							grid[i - 3][j] = 1;
							rowCount[i - 3]++;
						}
						return;
			      }
			      for (int j = randomFirstStart; j < randomEnd; j++) {
 4005c18:	e0bfd117 	ldw	r2,-188(fp)
 4005c1c:	10800044 	addi	r2,r2,1
 4005c20:	e0bfd115 	stw	r2,-188(fp)
 4005c24:	e0ffd117 	ldw	r3,-188(fp)
 4005c28:	e0bfc317 	ldw	r2,-244(fp)
 4005c2c:	18bf9016 	blt	r3,r2,4005a70 <__alt_mem_onchip_memory2_0+0xfc0008b0>
						}
						return;
			      }
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomEnd; j++) {
 4005c30:	e0bfcd17 	ldw	r2,-204(fp)
 4005c34:	10800044 	addi	r2,r2,1
 4005c38:	e0bfcd15 	stw	r2,-204(fp)
 4005c3c:	e0ffcd17 	ldw	r3,-204(fp)
 4005c40:	e0bfc317 	ldw	r2,-244(fp)
 4005c44:	18bf1c16 	blt	r3,r2,40058b8 <__alt_mem_onchip_memory2_0+0xfc0006f8>
 4005c48:	00014906 	br	4006170 <dropLBlock+0xc50>
							return;
			    	  }

			      }
				}
			}else if(shapeLayout == 2){
 4005c4c:	e0bfc617 	ldw	r2,-232(fp)
 4005c50:	10800098 	cmpnei	r2,r2,2
 4005c54:	1000d01e 	bne	r2,zero,4005f98 <dropLBlock+0xa78>
				for (int j = randomStart; j < randomEnd; j++) {	//potential bug
 4005c58:	e0bfc117 	ldw	r2,-252(fp)
 4005c5c:	e0bfd515 	stw	r2,-172(fp)
 4005c60:	00006206 	br	4005dec <dropLBlock+0x8cc>
			      if(grid[i - 1][j] == 1){
 4005c64:	e0bfc717 	ldw	r2,-228(fp)
 4005c68:	10bfffc4 	addi	r2,r2,-1
 4005c6c:	040100f4 	movhi	r16,1027
 4005c70:	84262204 	addi	r16,r16,-26488
 4005c74:	01400984 	movi	r5,38
 4005c78:	1009883a 	mov	r4,r2
 4005c7c:	40118340 	call	4011834 <__mulsi3>
 4005c80:	1007883a 	mov	r3,r2
 4005c84:	e0bfd517 	ldw	r2,-172(fp)
 4005c88:	1885883a 	add	r2,r3,r2
 4005c8c:	1085883a 	add	r2,r2,r2
 4005c90:	1085883a 	add	r2,r2,r2
 4005c94:	8085883a 	add	r2,r16,r2
 4005c98:	10800017 	ldw	r2,0(r2)
 4005c9c:	10800058 	cmpnei	r2,r2,1
 4005ca0:	10004f1e 	bne	r2,zero,4005de0 <dropLBlock+0x8c0>
			    	  for (int j = randomStart; j < randomEnd; j++) {
 4005ca4:	e0bfc117 	ldw	r2,-252(fp)
 4005ca8:	e0bfd615 	stw	r2,-168(fp)
 4005cac:	00002106 	br	4005d34 <dropLBlock+0x814>
			        		grid[i - 2][j] = 1;
 4005cb0:	e0bfc717 	ldw	r2,-228(fp)
 4005cb4:	10bfff84 	addi	r2,r2,-2
 4005cb8:	040100f4 	movhi	r16,1027
 4005cbc:	84262204 	addi	r16,r16,-26488
 4005cc0:	01400984 	movi	r5,38
 4005cc4:	1009883a 	mov	r4,r2
 4005cc8:	40118340 	call	4011834 <__mulsi3>
 4005ccc:	1007883a 	mov	r3,r2
 4005cd0:	e0bfd617 	ldw	r2,-168(fp)
 4005cd4:	1885883a 	add	r2,r3,r2
 4005cd8:	1085883a 	add	r2,r2,r2
 4005cdc:	1085883a 	add	r2,r2,r2
 4005ce0:	8085883a 	add	r2,r16,r2
 4005ce4:	00c00044 	movi	r3,1
 4005ce8:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 2]++;
 4005cec:	e0bfc717 	ldw	r2,-228(fp)
 4005cf0:	10bfff84 	addi	r2,r2,-2
 4005cf4:	00c100f4 	movhi	r3,1027
 4005cf8:	18e60404 	addi	r3,r3,-26608
 4005cfc:	1089883a 	add	r4,r2,r2
 4005d00:	2109883a 	add	r4,r4,r4
 4005d04:	1907883a 	add	r3,r3,r4
 4005d08:	18c00017 	ldw	r3,0(r3)
 4005d0c:	19000044 	addi	r4,r3,1
 4005d10:	00c100f4 	movhi	r3,1027
 4005d14:	18e60404 	addi	r3,r3,-26608
 4005d18:	1085883a 	add	r2,r2,r2
 4005d1c:	1085883a 	add	r2,r2,r2
 4005d20:	1885883a 	add	r2,r3,r2
 4005d24:	11000015 	stw	r4,0(r2)
			      }
				}
			}else if(shapeLayout == 2){
				for (int j = randomStart; j < randomEnd; j++) {	//potential bug
			      if(grid[i - 1][j] == 1){
			    	  for (int j = randomStart; j < randomEnd; j++) {
 4005d28:	e0bfd617 	ldw	r2,-168(fp)
 4005d2c:	10800044 	addi	r2,r2,1
 4005d30:	e0bfd615 	stw	r2,-168(fp)
 4005d34:	e0ffd617 	ldw	r3,-168(fp)
 4005d38:	e0bfc317 	ldw	r2,-244(fp)
 4005d3c:	18bfdc16 	blt	r3,r2,4005cb0 <__alt_mem_onchip_memory2_0+0xfc000af0>
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}
						for (int j = randomStart; j < secondEnd; j++) {
 4005d40:	e0bfc117 	ldw	r2,-252(fp)
 4005d44:	e0bfd715 	stw	r2,-164(fp)
 4005d48:	00002106 	br	4005dd0 <dropLBlock+0x8b0>
			        		grid[i - 1][j] = 1;
 4005d4c:	e0bfc717 	ldw	r2,-228(fp)
 4005d50:	10bfffc4 	addi	r2,r2,-1
 4005d54:	040100f4 	movhi	r16,1027
 4005d58:	84262204 	addi	r16,r16,-26488
 4005d5c:	01400984 	movi	r5,38
 4005d60:	1009883a 	mov	r4,r2
 4005d64:	40118340 	call	4011834 <__mulsi3>
 4005d68:	1007883a 	mov	r3,r2
 4005d6c:	e0bfd717 	ldw	r2,-164(fp)
 4005d70:	1885883a 	add	r2,r3,r2
 4005d74:	1085883a 	add	r2,r2,r2
 4005d78:	1085883a 	add	r2,r2,r2
 4005d7c:	8085883a 	add	r2,r16,r2
 4005d80:	00c00044 	movi	r3,1
 4005d84:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 1]++;
 4005d88:	e0bfc717 	ldw	r2,-228(fp)
 4005d8c:	10bfffc4 	addi	r2,r2,-1
 4005d90:	00c100f4 	movhi	r3,1027
 4005d94:	18e60404 	addi	r3,r3,-26608
 4005d98:	1089883a 	add	r4,r2,r2
 4005d9c:	2109883a 	add	r4,r4,r4
 4005da0:	1907883a 	add	r3,r3,r4
 4005da4:	18c00017 	ldw	r3,0(r3)
 4005da8:	19000044 	addi	r4,r3,1
 4005dac:	00c100f4 	movhi	r3,1027
 4005db0:	18e60404 	addi	r3,r3,-26608
 4005db4:	1085883a 	add	r2,r2,r2
 4005db8:	1085883a 	add	r2,r2,r2
 4005dbc:	1885883a 	add	r2,r3,r2
 4005dc0:	11000015 	stw	r4,0(r2)
			      if(grid[i - 1][j] == 1){
			    	  for (int j = randomStart; j < randomEnd; j++) {
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}
						for (int j = randomStart; j < secondEnd; j++) {
 4005dc4:	e0bfd717 	ldw	r2,-164(fp)
 4005dc8:	10800044 	addi	r2,r2,1
 4005dcc:	e0bfd715 	stw	r2,-164(fp)
 4005dd0:	e0ffd717 	ldw	r3,-164(fp)
 4005dd4:	e0bfc517 	ldw	r2,-236(fp)
 4005dd8:	18bfdc16 	blt	r3,r2,4005d4c <__alt_mem_onchip_memory2_0+0xfc000b8c>
			        		grid[i - 1][j] = 1;
			        		rowCount[i - 1]++;
						}
						return;
 4005ddc:	00085706 	br	4007f3c <dropLBlock+0x2a1c>
			    	  }

			      }
				}
			}else if(shapeLayout == 2){
				for (int j = randomStart; j < randomEnd; j++) {	//potential bug
 4005de0:	e0bfd517 	ldw	r2,-172(fp)
 4005de4:	10800044 	addi	r2,r2,1
 4005de8:	e0bfd515 	stw	r2,-172(fp)
 4005dec:	e0ffd517 	ldw	r3,-172(fp)
 4005df0:	e0bfc317 	ldw	r2,-244(fp)
 4005df4:	18bf9b16 	blt	r3,r2,4005c64 <__alt_mem_onchip_memory2_0+0xfc000aa4>
			        		rowCount[i - 1]++;
						}
						return;
			      }
				}
				for (int j = randomStart; j < secondEnd; j++) {
 4005df8:	e0bfc117 	ldw	r2,-252(fp)
 4005dfc:	e0bfd815 	stw	r2,-160(fp)
 4005e00:	00006106 	br	4005f88 <dropLBlock+0xa68>
			      if(grid[i][j] == 1){
 4005e04:	040100f4 	movhi	r16,1027
 4005e08:	84262204 	addi	r16,r16,-26488
 4005e0c:	e0bfc717 	ldw	r2,-228(fp)
 4005e10:	01400984 	movi	r5,38
 4005e14:	1009883a 	mov	r4,r2
 4005e18:	40118340 	call	4011834 <__mulsi3>
 4005e1c:	1007883a 	mov	r3,r2
 4005e20:	e0bfd817 	ldw	r2,-160(fp)
 4005e24:	1885883a 	add	r2,r3,r2
 4005e28:	1085883a 	add	r2,r2,r2
 4005e2c:	1085883a 	add	r2,r2,r2
 4005e30:	8085883a 	add	r2,r16,r2
 4005e34:	10800017 	ldw	r2,0(r2)
 4005e38:	10800058 	cmpnei	r2,r2,1
 4005e3c:	10004f1e 	bne	r2,zero,4005f7c <dropLBlock+0xa5c>
			    	  for (int j = randomStart; j < randomEnd; j++) {
 4005e40:	e0bfc117 	ldw	r2,-252(fp)
 4005e44:	e0bfd915 	stw	r2,-156(fp)
 4005e48:	00002106 	br	4005ed0 <dropLBlock+0x9b0>
							grid[i - 2][j] = 1;
 4005e4c:	e0bfc717 	ldw	r2,-228(fp)
 4005e50:	10bfff84 	addi	r2,r2,-2
 4005e54:	040100f4 	movhi	r16,1027
 4005e58:	84262204 	addi	r16,r16,-26488
 4005e5c:	01400984 	movi	r5,38
 4005e60:	1009883a 	mov	r4,r2
 4005e64:	40118340 	call	4011834 <__mulsi3>
 4005e68:	1007883a 	mov	r3,r2
 4005e6c:	e0bfd917 	ldw	r2,-156(fp)
 4005e70:	1885883a 	add	r2,r3,r2
 4005e74:	1085883a 	add	r2,r2,r2
 4005e78:	1085883a 	add	r2,r2,r2
 4005e7c:	8085883a 	add	r2,r16,r2
 4005e80:	00c00044 	movi	r3,1
 4005e84:	10c00015 	stw	r3,0(r2)
							rowCount[i - 2]++;
 4005e88:	e0bfc717 	ldw	r2,-228(fp)
 4005e8c:	10bfff84 	addi	r2,r2,-2
 4005e90:	00c100f4 	movhi	r3,1027
 4005e94:	18e60404 	addi	r3,r3,-26608
 4005e98:	1089883a 	add	r4,r2,r2
 4005e9c:	2109883a 	add	r4,r4,r4
 4005ea0:	1907883a 	add	r3,r3,r4
 4005ea4:	18c00017 	ldw	r3,0(r3)
 4005ea8:	19000044 	addi	r4,r3,1
 4005eac:	00c100f4 	movhi	r3,1027
 4005eb0:	18e60404 	addi	r3,r3,-26608
 4005eb4:	1085883a 	add	r2,r2,r2
 4005eb8:	1085883a 	add	r2,r2,r2
 4005ebc:	1885883a 	add	r2,r3,r2
 4005ec0:	11000015 	stw	r4,0(r2)
						return;
			      }
				}
				for (int j = randomStart; j < secondEnd; j++) {
			      if(grid[i][j] == 1){
			    	  for (int j = randomStart; j < randomEnd; j++) {
 4005ec4:	e0bfd917 	ldw	r2,-156(fp)
 4005ec8:	10800044 	addi	r2,r2,1
 4005ecc:	e0bfd915 	stw	r2,-156(fp)
 4005ed0:	e0ffd917 	ldw	r3,-156(fp)
 4005ed4:	e0bfc317 	ldw	r2,-244(fp)
 4005ed8:	18bfdc16 	blt	r3,r2,4005e4c <__alt_mem_onchip_memory2_0+0xfc000c8c>
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}
						for (int j = randomStart; j < secondEnd; j++) {
 4005edc:	e0bfc117 	ldw	r2,-252(fp)
 4005ee0:	e0bfda15 	stw	r2,-152(fp)
 4005ee4:	00002106 	br	4005f6c <dropLBlock+0xa4c>
							grid[i - 1][j] = 1;
 4005ee8:	e0bfc717 	ldw	r2,-228(fp)
 4005eec:	10bfffc4 	addi	r2,r2,-1
 4005ef0:	040100f4 	movhi	r16,1027
 4005ef4:	84262204 	addi	r16,r16,-26488
 4005ef8:	01400984 	movi	r5,38
 4005efc:	1009883a 	mov	r4,r2
 4005f00:	40118340 	call	4011834 <__mulsi3>
 4005f04:	1007883a 	mov	r3,r2
 4005f08:	e0bfda17 	ldw	r2,-152(fp)
 4005f0c:	1885883a 	add	r2,r3,r2
 4005f10:	1085883a 	add	r2,r2,r2
 4005f14:	1085883a 	add	r2,r2,r2
 4005f18:	8085883a 	add	r2,r16,r2
 4005f1c:	00c00044 	movi	r3,1
 4005f20:	10c00015 	stw	r3,0(r2)
							rowCount[i - 1]++;
 4005f24:	e0bfc717 	ldw	r2,-228(fp)
 4005f28:	10bfffc4 	addi	r2,r2,-1
 4005f2c:	00c100f4 	movhi	r3,1027
 4005f30:	18e60404 	addi	r3,r3,-26608
 4005f34:	1089883a 	add	r4,r2,r2
 4005f38:	2109883a 	add	r4,r4,r4
 4005f3c:	1907883a 	add	r3,r3,r4
 4005f40:	18c00017 	ldw	r3,0(r3)
 4005f44:	19000044 	addi	r4,r3,1
 4005f48:	00c100f4 	movhi	r3,1027
 4005f4c:	18e60404 	addi	r3,r3,-26608
 4005f50:	1085883a 	add	r2,r2,r2
 4005f54:	1085883a 	add	r2,r2,r2
 4005f58:	1885883a 	add	r2,r3,r2
 4005f5c:	11000015 	stw	r4,0(r2)
			      if(grid[i][j] == 1){
			    	  for (int j = randomStart; j < randomEnd; j++) {
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}
						for (int j = randomStart; j < secondEnd; j++) {
 4005f60:	e0bfda17 	ldw	r2,-152(fp)
 4005f64:	10800044 	addi	r2,r2,1
 4005f68:	e0bfda15 	stw	r2,-152(fp)
 4005f6c:	e0ffda17 	ldw	r3,-152(fp)
 4005f70:	e0bfc517 	ldw	r2,-236(fp)
 4005f74:	18bfdc16 	blt	r3,r2,4005ee8 <__alt_mem_onchip_memory2_0+0xfc000d28>
							grid[i - 1][j] = 1;
							rowCount[i - 1]++;
						}
						return;
 4005f78:	0007f006 	br	4007f3c <dropLBlock+0x2a1c>
			        		rowCount[i - 1]++;
						}
						return;
			      }
				}
				for (int j = randomStart; j < secondEnd; j++) {
 4005f7c:	e0bfd817 	ldw	r2,-160(fp)
 4005f80:	10800044 	addi	r2,r2,1
 4005f84:	e0bfd815 	stw	r2,-160(fp)
 4005f88:	e0ffd817 	ldw	r3,-160(fp)
 4005f8c:	e0bfc517 	ldw	r2,-236(fp)
 4005f90:	18bf9c16 	blt	r3,r2,4005e04 <__alt_mem_onchip_memory2_0+0xfc000c44>
 4005f94:	00007606 	br	4006170 <dropLBlock+0xc50>
							rowCount[i - 1]++;
						}
						return;
			      }
				}
			}else if(shapeLayout == 3){
 4005f98:	e0bfc617 	ldw	r2,-232(fp)
 4005f9c:	108000d8 	cmpnei	r2,r2,3
 4005fa0:	1000731e 	bne	r2,zero,4006170 <dropLBlock+0xc50>

				for (int j = randomStart; j < randomEnd; j++) {
 4005fa4:	e0bfc117 	ldw	r2,-252(fp)
 4005fa8:	e0bfdb15 	stw	r2,-148(fp)
 4005fac:	00006d06 	br	4006164 <dropLBlock+0xc44>
			      if(grid[i][j] == 1){
 4005fb0:	040100f4 	movhi	r16,1027
 4005fb4:	84262204 	addi	r16,r16,-26488
 4005fb8:	e0bfc717 	ldw	r2,-228(fp)
 4005fbc:	01400984 	movi	r5,38
 4005fc0:	1009883a 	mov	r4,r2
 4005fc4:	40118340 	call	4011834 <__mulsi3>
 4005fc8:	1007883a 	mov	r3,r2
 4005fcc:	e0bfdb17 	ldw	r2,-148(fp)
 4005fd0:	1885883a 	add	r2,r3,r2
 4005fd4:	1085883a 	add	r2,r2,r2
 4005fd8:	1085883a 	add	r2,r2,r2
 4005fdc:	8085883a 	add	r2,r16,r2
 4005fe0:	10800017 	ldw	r2,0(r2)
 4005fe4:	10800058 	cmpnei	r2,r2,1
 4005fe8:	10005b1e 	bne	r2,zero,4006158 <dropLBlock+0xc38>
			    	  for(int row = 1; row < 3; row++){
 4005fec:	00800044 	movi	r2,1
 4005ff0:	e0bfdc15 	stw	r2,-144(fp)
 4005ff4:	00002e06 	br	40060b0 <dropLBlock+0xb90>
							for (int j = randomStart; j < secondEnd; j++) {
 4005ff8:	e0bfc117 	ldw	r2,-252(fp)
 4005ffc:	e0bfdd15 	stw	r2,-140(fp)
 4006000:	00002506 	br	4006098 <dropLBlock+0xb78>
				        		grid[i - 1 - row][j] = 1;
 4006004:	e0bfc717 	ldw	r2,-228(fp)
 4006008:	10ffffc4 	addi	r3,r2,-1
 400600c:	e0bfdc17 	ldw	r2,-144(fp)
 4006010:	1885c83a 	sub	r2,r3,r2
 4006014:	040100f4 	movhi	r16,1027
 4006018:	84262204 	addi	r16,r16,-26488
 400601c:	01400984 	movi	r5,38
 4006020:	1009883a 	mov	r4,r2
 4006024:	40118340 	call	4011834 <__mulsi3>
 4006028:	1007883a 	mov	r3,r2
 400602c:	e0bfdd17 	ldw	r2,-140(fp)
 4006030:	1885883a 	add	r2,r3,r2
 4006034:	1085883a 	add	r2,r2,r2
 4006038:	1085883a 	add	r2,r2,r2
 400603c:	8085883a 	add	r2,r16,r2
 4006040:	00c00044 	movi	r3,1
 4006044:	10c00015 	stw	r3,0(r2)
				        		rowCount[i - 1 -row]++;
 4006048:	e0bfc717 	ldw	r2,-228(fp)
 400604c:	10ffffc4 	addi	r3,r2,-1
 4006050:	e0bfdc17 	ldw	r2,-144(fp)
 4006054:	1885c83a 	sub	r2,r3,r2
 4006058:	00c100f4 	movhi	r3,1027
 400605c:	18e60404 	addi	r3,r3,-26608
 4006060:	1089883a 	add	r4,r2,r2
 4006064:	2109883a 	add	r4,r4,r4
 4006068:	1907883a 	add	r3,r3,r4
 400606c:	18c00017 	ldw	r3,0(r3)
 4006070:	19000044 	addi	r4,r3,1
 4006074:	00c100f4 	movhi	r3,1027
 4006078:	18e60404 	addi	r3,r3,-26608
 400607c:	1085883a 	add	r2,r2,r2
 4006080:	1085883a 	add	r2,r2,r2
 4006084:	1885883a 	add	r2,r3,r2
 4006088:	11000015 	stw	r4,0(r2)
			}else if(shapeLayout == 3){

				for (int j = randomStart; j < randomEnd; j++) {
			      if(grid[i][j] == 1){
			    	  for(int row = 1; row < 3; row++){
							for (int j = randomStart; j < secondEnd; j++) {
 400608c:	e0bfdd17 	ldw	r2,-140(fp)
 4006090:	10800044 	addi	r2,r2,1
 4006094:	e0bfdd15 	stw	r2,-140(fp)
 4006098:	e0ffdd17 	ldw	r3,-140(fp)
 400609c:	e0bfc517 	ldw	r2,-236(fp)
 40060a0:	18bfd816 	blt	r3,r2,4006004 <__alt_mem_onchip_memory2_0+0xfc000e44>
				}
			}else if(shapeLayout == 3){

				for (int j = randomStart; j < randomEnd; j++) {
			      if(grid[i][j] == 1){
			    	  for(int row = 1; row < 3; row++){
 40060a4:	e0bfdc17 	ldw	r2,-144(fp)
 40060a8:	10800044 	addi	r2,r2,1
 40060ac:	e0bfdc15 	stw	r2,-144(fp)
 40060b0:	e0bfdc17 	ldw	r2,-144(fp)
 40060b4:	108000d0 	cmplti	r2,r2,3
 40060b8:	103fcf1e 	bne	r2,zero,4005ff8 <__alt_mem_onchip_memory2_0+0xfc000e38>
							for (int j = randomStart; j < secondEnd; j++) {
				        		grid[i - 1 - row][j] = 1;
				        		rowCount[i - 1 -row]++;
							}
						}
						for (int j = randomStart; j < randomEnd; j++) {
 40060bc:	e0bfc117 	ldw	r2,-252(fp)
 40060c0:	e0bfde15 	stw	r2,-136(fp)
 40060c4:	00002006 	br	4006148 <dropLBlock+0xc28>
			        		grid[i - 1][j] = 0;
 40060c8:	e0bfc717 	ldw	r2,-228(fp)
 40060cc:	10bfffc4 	addi	r2,r2,-1
 40060d0:	040100f4 	movhi	r16,1027
 40060d4:	84262204 	addi	r16,r16,-26488
 40060d8:	01400984 	movi	r5,38
 40060dc:	1009883a 	mov	r4,r2
 40060e0:	40118340 	call	4011834 <__mulsi3>
 40060e4:	1007883a 	mov	r3,r2
 40060e8:	e0bfde17 	ldw	r2,-136(fp)
 40060ec:	1885883a 	add	r2,r3,r2
 40060f0:	1085883a 	add	r2,r2,r2
 40060f4:	1085883a 	add	r2,r2,r2
 40060f8:	8085883a 	add	r2,r16,r2
 40060fc:	10000015 	stw	zero,0(r2)
			        		rowCount[i - 1]++;
 4006100:	e0bfc717 	ldw	r2,-228(fp)
 4006104:	10bfffc4 	addi	r2,r2,-1
 4006108:	00c100f4 	movhi	r3,1027
 400610c:	18e60404 	addi	r3,r3,-26608
 4006110:	1089883a 	add	r4,r2,r2
 4006114:	2109883a 	add	r4,r4,r4
 4006118:	1907883a 	add	r3,r3,r4
 400611c:	18c00017 	ldw	r3,0(r3)
 4006120:	19000044 	addi	r4,r3,1
 4006124:	00c100f4 	movhi	r3,1027
 4006128:	18e60404 	addi	r3,r3,-26608
 400612c:	1085883a 	add	r2,r2,r2
 4006130:	1085883a 	add	r2,r2,r2
 4006134:	1885883a 	add	r2,r3,r2
 4006138:	11000015 	stw	r4,0(r2)
							for (int j = randomStart; j < secondEnd; j++) {
				        		grid[i - 1 - row][j] = 1;
				        		rowCount[i - 1 -row]++;
							}
						}
						for (int j = randomStart; j < randomEnd; j++) {
 400613c:	e0bfde17 	ldw	r2,-136(fp)
 4006140:	10800044 	addi	r2,r2,1
 4006144:	e0bfde15 	stw	r2,-136(fp)
 4006148:	e0ffde17 	ldw	r3,-136(fp)
 400614c:	e0bfc317 	ldw	r2,-244(fp)
 4006150:	18bfdd16 	blt	r3,r2,40060c8 <__alt_mem_onchip_memory2_0+0xfc000f08>
			        		grid[i - 1][j] = 0;
			        		rowCount[i - 1]++;
						}
						return;
 4006154:	00077906 	br	4007f3c <dropLBlock+0x2a1c>
						return;
			      }
				}
			}else if(shapeLayout == 3){

				for (int j = randomStart; j < randomEnd; j++) {
 4006158:	e0bfdb17 	ldw	r2,-148(fp)
 400615c:	10800044 	addi	r2,r2,1
 4006160:	e0bfdb15 	stw	r2,-148(fp)
 4006164:	e0ffdb17 	ldw	r3,-148(fp)
 4006168:	e0bfc317 	ldw	r2,-244(fp)
 400616c:	18bf9016 	blt	r3,r2,4005fb0 <__alt_mem_onchip_memory2_0+0xfc000df0>
						return;
			      }
				}
			}

        	i--;
 4006170:	e0bfc717 	ldw	r2,-228(fp)
 4006174:	10bfffc4 	addi	r2,r2,-1
 4006178:	e0bfc715 	stw	r2,-228(fp)
        	if(shapeLayout == 0){
 400617c:	e0bfc617 	ldw	r2,-232(fp)
 4006180:	1000491e 	bne	r2,zero,40062a8 <dropLBlock+0xd88>
				for (int j = randomFirstStart; j < randomEnd; j++) {
 4006184:	e0bfc217 	ldw	r2,-248(fp)
 4006188:	e0bfdf15 	stw	r2,-132(fp)
 400618c:	00002006 	br	4006210 <dropLBlock+0xcf0>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 4006190:	d4200317 	ldw	r16,-32756(gp)
 4006194:	e0bfc717 	ldw	r2,-228(fp)
 4006198:	10bfffc4 	addi	r2,r2,-1
 400619c:	01401404 	movi	r5,80
 40061a0:	1009883a 	mov	r4,r2
 40061a4:	40118340 	call	4011834 <__mulsi3>
 40061a8:	1007883a 	mov	r3,r2
 40061ac:	e0bfdf17 	ldw	r2,-132(fp)
 40061b0:	1885883a 	add	r2,r3,r2
 40061b4:	1085883a 	add	r2,r2,r2
 40061b8:	8085883a 	add	r2,r16,r2
 40061bc:	00c00404 	movi	r3,16
 40061c0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 40061c4:	d4600317 	ldw	r17,-32756(gp)
 40061c8:	e0bfc717 	ldw	r2,-228(fp)
 40061cc:	10bfffc4 	addi	r2,r2,-1
 40061d0:	01401404 	movi	r5,80
 40061d4:	1009883a 	mov	r4,r2
 40061d8:	40118340 	call	4011834 <__mulsi3>
 40061dc:	1007883a 	mov	r3,r2
 40061e0:	e0bfdf17 	ldw	r2,-132(fp)
 40061e4:	1885883a 	add	r2,r3,r2
 40061e8:	1085883a 	add	r2,r2,r2
 40061ec:	14000044 	addi	r16,r2,1
 40061f0:	e13fdf17 	ldw	r4,-132(fp)
 40061f4:	400d8600 	call	400d860 <check_col>
 40061f8:	1007883a 	mov	r3,r2
 40061fc:	8c05883a 	add	r2,r17,r16
 4006200:	10c00005 	stb	r3,0(r2)
				}
			}

        	i--;
        	if(shapeLayout == 0){
				for (int j = randomFirstStart; j < randomEnd; j++) {
 4006204:	e0bfdf17 	ldw	r2,-132(fp)
 4006208:	10800044 	addi	r2,r2,1
 400620c:	e0bfdf15 	stw	r2,-132(fp)
 4006210:	e0ffdf17 	ldw	r3,-132(fp)
 4006214:	e0bfc317 	ldw	r2,-244(fp)
 4006218:	18bfdd16 	blt	r3,r2,4006190 <__alt_mem_onchip_memory2_0+0xfc000fd0>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 400621c:	e0bfc117 	ldw	r2,-252(fp)
 4006220:	e0bfe015 	stw	r2,-128(fp)
 4006224:	00001c06 	br	4006298 <dropLBlock+0xd78>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
 4006228:	d4200317 	ldw	r16,-32756(gp)
 400622c:	01401404 	movi	r5,80
 4006230:	e13fc717 	ldw	r4,-228(fp)
 4006234:	40118340 	call	4011834 <__mulsi3>
 4006238:	1007883a 	mov	r3,r2
 400623c:	e0bfe017 	ldw	r2,-128(fp)
 4006240:	1885883a 	add	r2,r3,r2
 4006244:	1085883a 	add	r2,r2,r2
 4006248:	8085883a 	add	r2,r16,r2
 400624c:	00c00404 	movi	r3,16
 4006250:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 4006254:	d4600317 	ldw	r17,-32756(gp)
 4006258:	01401404 	movi	r5,80
 400625c:	e13fc717 	ldw	r4,-228(fp)
 4006260:	40118340 	call	4011834 <__mulsi3>
 4006264:	1007883a 	mov	r3,r2
 4006268:	e0bfe017 	ldw	r2,-128(fp)
 400626c:	1885883a 	add	r2,r3,r2
 4006270:	1085883a 	add	r2,r2,r2
 4006274:	14000044 	addi	r16,r2,1
 4006278:	e13fe017 	ldw	r4,-128(fp)
 400627c:	400d8600 	call	400d860 <check_col>
 4006280:	1007883a 	mov	r3,r2
 4006284:	8c05883a 	add	r2,r17,r16
 4006288:	10c00005 	stb	r3,0(r2)
				for (int j = randomFirstStart; j < randomEnd; j++) {
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 400628c:	e0bfe017 	ldw	r2,-128(fp)
 4006290:	10800044 	addi	r2,r2,1
 4006294:	e0bfe015 	stw	r2,-128(fp)
 4006298:	e0ffe017 	ldw	r3,-128(fp)
 400629c:	e0bfc317 	ldw	r2,-244(fp)
 40062a0:	18bfe116 	blt	r3,r2,4006228 <__alt_mem_onchip_memory2_0+0xfc001068>
 40062a4:	0000fc06 	br	4006698 <dropLBlock+0x1178>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
 40062a8:	e0bfc617 	ldw	r2,-232(fp)
 40062ac:	10800058 	cmpnei	r2,r2,1
 40062b0:	1000571e 	bne	r2,zero,4006410 <dropLBlock+0xef0>
				for(int row = 0; row < 2; row++){
 40062b4:	e03fe115 	stw	zero,-124(fp)
 40062b8:	00002b06 	br	4006368 <dropLBlock+0xe48>
					for (int j = randomFirstStart; j < randomEnd; j++) {
 40062bc:	e0bfc217 	ldw	r2,-248(fp)
 40062c0:	e0bfe215 	stw	r2,-120(fp)
 40062c4:	00002206 	br	4006350 <dropLBlock+0xe30>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
 40062c8:	d4200317 	ldw	r16,-32756(gp)
 40062cc:	e0ffc717 	ldw	r3,-228(fp)
 40062d0:	e0bfe117 	ldw	r2,-124(fp)
 40062d4:	1885c83a 	sub	r2,r3,r2
 40062d8:	01401404 	movi	r5,80
 40062dc:	1009883a 	mov	r4,r2
 40062e0:	40118340 	call	4011834 <__mulsi3>
 40062e4:	1007883a 	mov	r3,r2
 40062e8:	e0bfe217 	ldw	r2,-120(fp)
 40062ec:	1885883a 	add	r2,r3,r2
 40062f0:	1085883a 	add	r2,r2,r2
 40062f4:	8085883a 	add	r2,r16,r2
 40062f8:	00c00404 	movi	r3,16
 40062fc:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 4006300:	d4600317 	ldw	r17,-32756(gp)
 4006304:	e0ffc717 	ldw	r3,-228(fp)
 4006308:	e0bfe117 	ldw	r2,-124(fp)
 400630c:	1885c83a 	sub	r2,r3,r2
 4006310:	01401404 	movi	r5,80
 4006314:	1009883a 	mov	r4,r2
 4006318:	40118340 	call	4011834 <__mulsi3>
 400631c:	1007883a 	mov	r3,r2
 4006320:	e0bfe217 	ldw	r2,-120(fp)
 4006324:	1885883a 	add	r2,r3,r2
 4006328:	1085883a 	add	r2,r2,r2
 400632c:	14000044 	addi	r16,r2,1
 4006330:	e13fe217 	ldw	r4,-120(fp)
 4006334:	400d8600 	call	400d860 <check_col>
 4006338:	1007883a 	mov	r3,r2
 400633c:	8c05883a 	add	r2,r17,r16
 4006340:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
					for (int j = randomFirstStart; j < randomEnd; j++) {
 4006344:	e0bfe217 	ldw	r2,-120(fp)
 4006348:	10800044 	addi	r2,r2,1
 400634c:	e0bfe215 	stw	r2,-120(fp)
 4006350:	e0ffe217 	ldw	r3,-120(fp)
 4006354:	e0bfc317 	ldw	r2,-244(fp)
 4006358:	18bfdb16 	blt	r3,r2,40062c8 <__alt_mem_onchip_memory2_0+0xfc001108>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
 400635c:	e0bfe117 	ldw	r2,-124(fp)
 4006360:	10800044 	addi	r2,r2,1
 4006364:	e0bfe115 	stw	r2,-124(fp)
 4006368:	e0bfe117 	ldw	r2,-124(fp)
 400636c:	10800090 	cmplti	r2,r2,2
 4006370:	103fd21e 	bne	r2,zero,40062bc <__alt_mem_onchip_memory2_0+0xfc0010fc>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4006374:	e0bfc117 	ldw	r2,-252(fp)
 4006378:	e0bfe315 	stw	r2,-116(fp)
 400637c:	00002006 	br	4006400 <dropLBlock+0xee0>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x10;
 4006380:	d4200317 	ldw	r16,-32756(gp)
 4006384:	e0bfc717 	ldw	r2,-228(fp)
 4006388:	10bfff84 	addi	r2,r2,-2
 400638c:	01401404 	movi	r5,80
 4006390:	1009883a 	mov	r4,r2
 4006394:	40118340 	call	4011834 <__mulsi3>
 4006398:	1007883a 	mov	r3,r2
 400639c:	e0bfe317 	ldw	r2,-116(fp)
 40063a0:	1885883a 	add	r2,r3,r2
 40063a4:	1085883a 	add	r2,r2,r2
 40063a8:	8085883a 	add	r2,r16,r2
 40063ac:	00c00404 	movi	r3,16
 40063b0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
 40063b4:	d4600317 	ldw	r17,-32756(gp)
 40063b8:	e0bfc717 	ldw	r2,-228(fp)
 40063bc:	10bfff84 	addi	r2,r2,-2
 40063c0:	01401404 	movi	r5,80
 40063c4:	1009883a 	mov	r4,r2
 40063c8:	40118340 	call	4011834 <__mulsi3>
 40063cc:	1007883a 	mov	r3,r2
 40063d0:	e0bfe317 	ldw	r2,-116(fp)
 40063d4:	1885883a 	add	r2,r3,r2
 40063d8:	1085883a 	add	r2,r2,r2
 40063dc:	14000044 	addi	r16,r2,1
 40063e0:	e13fe317 	ldw	r4,-116(fp)
 40063e4:	400d8600 	call	400d860 <check_col>
 40063e8:	1007883a 	mov	r3,r2
 40063ec:	8c05883a 	add	r2,r17,r16
 40063f0:	10c00005 	stb	r3,0(r2)
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomEnd; j++) {
 40063f4:	e0bfe317 	ldw	r2,-116(fp)
 40063f8:	10800044 	addi	r2,r2,1
 40063fc:	e0bfe315 	stw	r2,-116(fp)
 4006400:	e0ffe317 	ldw	r3,-116(fp)
 4006404:	e0bfc317 	ldw	r2,-244(fp)
 4006408:	18bfdd16 	blt	r3,r2,4006380 <__alt_mem_onchip_memory2_0+0xfc0011c0>
 400640c:	0000a206 	br	4006698 <dropLBlock+0x1178>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 2){
 4006410:	e0bfc617 	ldw	r2,-232(fp)
 4006414:	10800098 	cmpnei	r2,r2,2
 4006418:	1000491e 	bne	r2,zero,4006540 <dropLBlock+0x1020>
				for (int j = randomStart; j < randomEnd; j++) {
 400641c:	e0bfc117 	ldw	r2,-252(fp)
 4006420:	e0bfe415 	stw	r2,-112(fp)
 4006424:	00002006 	br	40064a8 <dropLBlock+0xf88>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 4006428:	d4200317 	ldw	r16,-32756(gp)
 400642c:	e0bfc717 	ldw	r2,-228(fp)
 4006430:	10bfffc4 	addi	r2,r2,-1
 4006434:	01401404 	movi	r5,80
 4006438:	1009883a 	mov	r4,r2
 400643c:	40118340 	call	4011834 <__mulsi3>
 4006440:	1007883a 	mov	r3,r2
 4006444:	e0bfe417 	ldw	r2,-112(fp)
 4006448:	1885883a 	add	r2,r3,r2
 400644c:	1085883a 	add	r2,r2,r2
 4006450:	8085883a 	add	r2,r16,r2
 4006454:	00c00404 	movi	r3,16
 4006458:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400645c:	d4600317 	ldw	r17,-32756(gp)
 4006460:	e0bfc717 	ldw	r2,-228(fp)
 4006464:	10bfffc4 	addi	r2,r2,-1
 4006468:	01401404 	movi	r5,80
 400646c:	1009883a 	mov	r4,r2
 4006470:	40118340 	call	4011834 <__mulsi3>
 4006474:	1007883a 	mov	r3,r2
 4006478:	e0bfe417 	ldw	r2,-112(fp)
 400647c:	1885883a 	add	r2,r3,r2
 4006480:	1085883a 	add	r2,r2,r2
 4006484:	14000044 	addi	r16,r2,1
 4006488:	e13fe417 	ldw	r4,-112(fp)
 400648c:	400d8600 	call	400d860 <check_col>
 4006490:	1007883a 	mov	r3,r2
 4006494:	8c05883a 	add	r2,r17,r16
 4006498:	10c00005 	stb	r3,0(r2)
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 2){
				for (int j = randomStart; j < randomEnd; j++) {
 400649c:	e0bfe417 	ldw	r2,-112(fp)
 40064a0:	10800044 	addi	r2,r2,1
 40064a4:	e0bfe415 	stw	r2,-112(fp)
 40064a8:	e0ffe417 	ldw	r3,-112(fp)
 40064ac:	e0bfc317 	ldw	r2,-244(fp)
 40064b0:	18bfdd16 	blt	r3,r2,4006428 <__alt_mem_onchip_memory2_0+0xfc001268>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < secondEnd; j++) {
 40064b4:	e0bfc117 	ldw	r2,-252(fp)
 40064b8:	e0bfe515 	stw	r2,-108(fp)
 40064bc:	00001c06 	br	4006530 <dropLBlock+0x1010>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
 40064c0:	d4200317 	ldw	r16,-32756(gp)
 40064c4:	01401404 	movi	r5,80
 40064c8:	e13fc717 	ldw	r4,-228(fp)
 40064cc:	40118340 	call	4011834 <__mulsi3>
 40064d0:	1007883a 	mov	r3,r2
 40064d4:	e0bfe517 	ldw	r2,-108(fp)
 40064d8:	1885883a 	add	r2,r3,r2
 40064dc:	1085883a 	add	r2,r2,r2
 40064e0:	8085883a 	add	r2,r16,r2
 40064e4:	00c00404 	movi	r3,16
 40064e8:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 40064ec:	d4600317 	ldw	r17,-32756(gp)
 40064f0:	01401404 	movi	r5,80
 40064f4:	e13fc717 	ldw	r4,-228(fp)
 40064f8:	40118340 	call	4011834 <__mulsi3>
 40064fc:	1007883a 	mov	r3,r2
 4006500:	e0bfe517 	ldw	r2,-108(fp)
 4006504:	1885883a 	add	r2,r3,r2
 4006508:	1085883a 	add	r2,r2,r2
 400650c:	14000044 	addi	r16,r2,1
 4006510:	e13fe517 	ldw	r4,-108(fp)
 4006514:	400d8600 	call	400d860 <check_col>
 4006518:	1007883a 	mov	r3,r2
 400651c:	8c05883a 	add	r2,r17,r16
 4006520:	10c00005 	stb	r3,0(r2)
				for (int j = randomStart; j < randomEnd; j++) {
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < secondEnd; j++) {
 4006524:	e0bfe517 	ldw	r2,-108(fp)
 4006528:	10800044 	addi	r2,r2,1
 400652c:	e0bfe515 	stw	r2,-108(fp)
 4006530:	e0ffe517 	ldw	r3,-108(fp)
 4006534:	e0bfc517 	ldw	r2,-236(fp)
 4006538:	18bfe116 	blt	r3,r2,40064c0 <__alt_mem_onchip_memory2_0+0xfc001300>
 400653c:	00005606 	br	4006698 <dropLBlock+0x1178>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 3){
 4006540:	e0bfc617 	ldw	r2,-232(fp)
 4006544:	108000d8 	cmpnei	r2,r2,3
 4006548:	1000531e 	bne	r2,zero,4006698 <dropLBlock+0x1178>
				for(int row = 1; row < 3; row++){
 400654c:	00800044 	movi	r2,1
 4006550:	e0bfe615 	stw	r2,-104(fp)
 4006554:	00002b06 	br	4006604 <dropLBlock+0x10e4>
					for (int j = randomStart; j < secondEnd; j++) {
 4006558:	e0bfc117 	ldw	r2,-252(fp)
 400655c:	e0bfe715 	stw	r2,-100(fp)
 4006560:	00002206 	br	40065ec <dropLBlock+0x10cc>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
 4006564:	d4200317 	ldw	r16,-32756(gp)
 4006568:	e0ffc717 	ldw	r3,-228(fp)
 400656c:	e0bfe617 	ldw	r2,-104(fp)
 4006570:	1885c83a 	sub	r2,r3,r2
 4006574:	01401404 	movi	r5,80
 4006578:	1009883a 	mov	r4,r2
 400657c:	40118340 	call	4011834 <__mulsi3>
 4006580:	1007883a 	mov	r3,r2
 4006584:	e0bfe717 	ldw	r2,-100(fp)
 4006588:	1885883a 	add	r2,r3,r2
 400658c:	1085883a 	add	r2,r2,r2
 4006590:	8085883a 	add	r2,r16,r2
 4006594:	00c00404 	movi	r3,16
 4006598:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 400659c:	d4600317 	ldw	r17,-32756(gp)
 40065a0:	e0ffc717 	ldw	r3,-228(fp)
 40065a4:	e0bfe617 	ldw	r2,-104(fp)
 40065a8:	1885c83a 	sub	r2,r3,r2
 40065ac:	01401404 	movi	r5,80
 40065b0:	1009883a 	mov	r4,r2
 40065b4:	40118340 	call	4011834 <__mulsi3>
 40065b8:	1007883a 	mov	r3,r2
 40065bc:	e0bfe717 	ldw	r2,-100(fp)
 40065c0:	1885883a 	add	r2,r3,r2
 40065c4:	1085883a 	add	r2,r2,r2
 40065c8:	14000044 	addi	r16,r2,1
 40065cc:	e13fe717 	ldw	r4,-100(fp)
 40065d0:	400d8600 	call	400d860 <check_col>
 40065d4:	1007883a 	mov	r3,r2
 40065d8:	8c05883a 	add	r2,r17,r16
 40065dc:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 3){
				for(int row = 1; row < 3; row++){
					for (int j = randomStart; j < secondEnd; j++) {
 40065e0:	e0bfe717 	ldw	r2,-100(fp)
 40065e4:	10800044 	addi	r2,r2,1
 40065e8:	e0bfe715 	stw	r2,-100(fp)
 40065ec:	e0ffe717 	ldw	r3,-100(fp)
 40065f0:	e0bfc517 	ldw	r2,-236(fp)
 40065f4:	18bfdb16 	blt	r3,r2,4006564 <__alt_mem_onchip_memory2_0+0xfc0013a4>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 3){
				for(int row = 1; row < 3; row++){
 40065f8:	e0bfe617 	ldw	r2,-104(fp)
 40065fc:	10800044 	addi	r2,r2,1
 4006600:	e0bfe615 	stw	r2,-104(fp)
 4006604:	e0bfe617 	ldw	r2,-104(fp)
 4006608:	108000d0 	cmplti	r2,r2,3
 400660c:	103fd21e 	bne	r2,zero,4006558 <__alt_mem_onchip_memory2_0+0xfc001398>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4006610:	e0bfc117 	ldw	r2,-252(fp)
 4006614:	e0bfe815 	stw	r2,-96(fp)
 4006618:	00001c06 	br	400668c <dropLBlock+0x116c>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
 400661c:	d4200317 	ldw	r16,-32756(gp)
 4006620:	01401404 	movi	r5,80
 4006624:	e13fc717 	ldw	r4,-228(fp)
 4006628:	40118340 	call	4011834 <__mulsi3>
 400662c:	1007883a 	mov	r3,r2
 4006630:	e0bfe817 	ldw	r2,-96(fp)
 4006634:	1885883a 	add	r2,r3,r2
 4006638:	1085883a 	add	r2,r2,r2
 400663c:	8085883a 	add	r2,r16,r2
 4006640:	00c00404 	movi	r3,16
 4006644:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 4006648:	d4600317 	ldw	r17,-32756(gp)
 400664c:	01401404 	movi	r5,80
 4006650:	e13fc717 	ldw	r4,-228(fp)
 4006654:	40118340 	call	4011834 <__mulsi3>
 4006658:	1007883a 	mov	r3,r2
 400665c:	e0bfe817 	ldw	r2,-96(fp)
 4006660:	1885883a 	add	r2,r3,r2
 4006664:	1085883a 	add	r2,r2,r2
 4006668:	14000044 	addi	r16,r2,1
 400666c:	e13fe817 	ldw	r4,-96(fp)
 4006670:	400d8600 	call	400d860 <check_col>
 4006674:	1007883a 	mov	r3,r2
 4006678:	8c05883a 	add	r2,r17,r16
 400667c:	10c00005 	stb	r3,0(r2)
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4006680:	e0bfe817 	ldw	r2,-96(fp)
 4006684:	10800044 	addi	r2,r2,1
 4006688:	e0bfe815 	stw	r2,-96(fp)
 400668c:	e0ffe817 	ldw	r3,-96(fp)
 4006690:	e0bfc317 	ldw	r2,-244(fp)
 4006694:	18bfe116 	blt	r3,r2,400661c <__alt_mem_onchip_memory2_0+0xfc00145c>
////        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x00;
//            		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
//            		vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
//
//        	}
        	i++;
 4006698:	e0bfc717 	ldw	r2,-228(fp)
 400669c:	10800044 	addi	r2,r2,1
 40066a0:	e0bfc715 	stw	r2,-228(fp)

        	keycode = keyboard_input();
 40066a4:	40007d00 	call	40007d0 <keyboard_input>
 40066a8:	e0bffd05 	stb	r2,-12(fp)
        	time = timer;
 40066ac:	d0a80117 	ldw	r2,-24572(gp)
 40066b0:	e0bfc415 	stw	r2,-240(fp)
			if(keycode == 0x51){
 40066b4:	e0bffd03 	ldbu	r2,-12(fp)
 40066b8:	10801458 	cmpnei	r2,r2,81
 40066bc:	1000131e 	bne	r2,zero,400670c <dropLBlock+0x11ec>
				time = timer / 1.5;
 40066c0:	d0a80117 	ldw	r2,-24572(gp)
 40066c4:	1009883a 	mov	r4,r2
 40066c8:	4013f180 	call	4013f18 <__floatsidf>
 40066cc:	1011883a 	mov	r8,r2
 40066d0:	1813883a 	mov	r9,r3
 40066d4:	000d883a 	mov	r6,zero
 40066d8:	01cffe34 	movhi	r7,16376
 40066dc:	4009883a 	mov	r4,r8
 40066e0:	480b883a 	mov	r5,r9
 40066e4:	40121080 	call	4012108 <__divdf3>
 40066e8:	1009883a 	mov	r4,r2
 40066ec:	180b883a 	mov	r5,r3
 40066f0:	2005883a 	mov	r2,r4
 40066f4:	2807883a 	mov	r3,r5
 40066f8:	1009883a 	mov	r4,r2
 40066fc:	180b883a 	mov	r5,r3
 4006700:	4013e980 	call	4013e98 <__fixdfsi>
 4006704:	e0bfc415 	stw	r2,-240(fp)
 4006708:	0003b206 	br	40075d4 <dropLBlock+0x20b4>
			}
			else if(keycode == 0x4F && grid[i-1][randomStart - 1] != 1){
 400670c:	e0bffd03 	ldbu	r2,-12(fp)
 4006710:	108013d8 	cmpnei	r2,r2,79
 4006714:	1000ff1e 	bne	r2,zero,4006b14 <dropLBlock+0x15f4>
 4006718:	e0bfc717 	ldw	r2,-228(fp)
 400671c:	10ffffc4 	addi	r3,r2,-1
 4006720:	e0bfc117 	ldw	r2,-252(fp)
 4006724:	147fffc4 	addi	r17,r2,-1
 4006728:	040100f4 	movhi	r16,1027
 400672c:	84262204 	addi	r16,r16,-26488
 4006730:	01400984 	movi	r5,38
 4006734:	1809883a 	mov	r4,r3
 4006738:	40118340 	call	4011834 <__mulsi3>
 400673c:	1445883a 	add	r2,r2,r17
 4006740:	1085883a 	add	r2,r2,r2
 4006744:	1085883a 	add	r2,r2,r2
 4006748:	8085883a 	add	r2,r16,r2
 400674c:	10800017 	ldw	r2,0(r2)
 4006750:	10800060 	cmpeqi	r2,r2,1
 4006754:	1000ef1e 	bne	r2,zero,4006b14 <dropLBlock+0x15f4>
				if(randomEnd != 59){
 4006758:	e0bfc317 	ldw	r2,-244(fp)
 400675c:	10800ee0 	cmpeqi	r2,r2,59
 4006760:	1003991e 	bne	r2,zero,40075c8 <dropLBlock+0x20a8>
					if(shapeLayout == 0
 4006764:	e0bfc617 	ldw	r2,-232(fp)
 4006768:	1000301e 	bne	r2,zero,400682c <dropLBlock+0x130c>
							&& grid[i - 1][randomEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1){
 400676c:	e0bfc717 	ldw	r2,-228(fp)
 4006770:	10ffffc4 	addi	r3,r2,-1
 4006774:	e0bfc317 	ldw	r2,-244(fp)
 4006778:	14400044 	addi	r17,r2,1
 400677c:	040100f4 	movhi	r16,1027
 4006780:	84262204 	addi	r16,r16,-26488
 4006784:	01400984 	movi	r5,38
 4006788:	1809883a 	mov	r4,r3
 400678c:	40118340 	call	4011834 <__mulsi3>
 4006790:	1445883a 	add	r2,r2,r17
 4006794:	1085883a 	add	r2,r2,r2
 4006798:	1085883a 	add	r2,r2,r2
 400679c:	8085883a 	add	r2,r16,r2
 40067a0:	10800017 	ldw	r2,0(r2)
 40067a4:	10800060 	cmpeqi	r2,r2,1
 40067a8:	1000201e 	bne	r2,zero,400682c <dropLBlock+0x130c>
 40067ac:	e0bfc717 	ldw	r2,-228(fp)
 40067b0:	10ffff84 	addi	r3,r2,-2
 40067b4:	e0bfc317 	ldw	r2,-244(fp)
 40067b8:	14400044 	addi	r17,r2,1
 40067bc:	040100f4 	movhi	r16,1027
 40067c0:	84262204 	addi	r16,r16,-26488
 40067c4:	01400984 	movi	r5,38
 40067c8:	1809883a 	mov	r4,r3
 40067cc:	40118340 	call	4011834 <__mulsi3>
 40067d0:	1445883a 	add	r2,r2,r17
 40067d4:	1085883a 	add	r2,r2,r2
 40067d8:	1085883a 	add	r2,r2,r2
 40067dc:	8085883a 	add	r2,r16,r2
 40067e0:	10800017 	ldw	r2,0(r2)
 40067e4:	10800060 	cmpeqi	r2,r2,1
 40067e8:	1000101e 	bne	r2,zero,400682c <dropLBlock+0x130c>
						randomStart += 2;
 40067ec:	e0bfc117 	ldw	r2,-252(fp)
 40067f0:	10800084 	addi	r2,r2,2
 40067f4:	e0bfc115 	stw	r2,-252(fp)
						randomEnd += 2;
 40067f8:	e0bfc317 	ldw	r2,-244(fp)
 40067fc:	10800084 	addi	r2,r2,2
 4006800:	e0bfc315 	stw	r2,-244(fp)
						randomFirstStart += 2;
 4006804:	e0bfc217 	ldw	r2,-248(fp)
 4006808:	10800084 	addi	r2,r2,2
 400680c:	e0bfc215 	stw	r2,-248(fp)
						secondEnd += 2;
 4006810:	e0bfc517 	ldw	r2,-236(fp)
 4006814:	10800084 	addi	r2,r2,2
 4006818:	e0bfc515 	stw	r2,-236(fp)
						i--;
 400681c:	e0bfc717 	ldw	r2,-228(fp)
 4006820:	10bfffc4 	addi	r2,r2,-1
 4006824:	e0bfc715 	stw	r2,-228(fp)
 4006828:	0000b906 	br	4006b10 <dropLBlock+0x15f0>
					}else if(shapeLayout == 1
 400682c:	e0bfc617 	ldw	r2,-232(fp)
 4006830:	10800058 	cmpnei	r2,r2,1
 4006834:	1000401e 	bne	r2,zero,4006938 <dropLBlock+0x1418>
							&& grid[i - 1][randomEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1 && grid[i - 3][randomEnd + 1] != 1){
 4006838:	e0bfc717 	ldw	r2,-228(fp)
 400683c:	10ffffc4 	addi	r3,r2,-1
 4006840:	e0bfc317 	ldw	r2,-244(fp)
 4006844:	14400044 	addi	r17,r2,1
 4006848:	040100f4 	movhi	r16,1027
 400684c:	84262204 	addi	r16,r16,-26488
 4006850:	01400984 	movi	r5,38
 4006854:	1809883a 	mov	r4,r3
 4006858:	40118340 	call	4011834 <__mulsi3>
 400685c:	1445883a 	add	r2,r2,r17
 4006860:	1085883a 	add	r2,r2,r2
 4006864:	1085883a 	add	r2,r2,r2
 4006868:	8085883a 	add	r2,r16,r2
 400686c:	10800017 	ldw	r2,0(r2)
 4006870:	10800060 	cmpeqi	r2,r2,1
 4006874:	1000301e 	bne	r2,zero,4006938 <dropLBlock+0x1418>
 4006878:	e0bfc717 	ldw	r2,-228(fp)
 400687c:	10ffff84 	addi	r3,r2,-2
 4006880:	e0bfc317 	ldw	r2,-244(fp)
 4006884:	14400044 	addi	r17,r2,1
 4006888:	040100f4 	movhi	r16,1027
 400688c:	84262204 	addi	r16,r16,-26488
 4006890:	01400984 	movi	r5,38
 4006894:	1809883a 	mov	r4,r3
 4006898:	40118340 	call	4011834 <__mulsi3>
 400689c:	1445883a 	add	r2,r2,r17
 40068a0:	1085883a 	add	r2,r2,r2
 40068a4:	1085883a 	add	r2,r2,r2
 40068a8:	8085883a 	add	r2,r16,r2
 40068ac:	10800017 	ldw	r2,0(r2)
 40068b0:	10800060 	cmpeqi	r2,r2,1
 40068b4:	1000201e 	bne	r2,zero,4006938 <dropLBlock+0x1418>
 40068b8:	e0bfc717 	ldw	r2,-228(fp)
 40068bc:	10ffff44 	addi	r3,r2,-3
 40068c0:	e0bfc317 	ldw	r2,-244(fp)
 40068c4:	14400044 	addi	r17,r2,1
 40068c8:	040100f4 	movhi	r16,1027
 40068cc:	84262204 	addi	r16,r16,-26488
 40068d0:	01400984 	movi	r5,38
 40068d4:	1809883a 	mov	r4,r3
 40068d8:	40118340 	call	4011834 <__mulsi3>
 40068dc:	1445883a 	add	r2,r2,r17
 40068e0:	1085883a 	add	r2,r2,r2
 40068e4:	1085883a 	add	r2,r2,r2
 40068e8:	8085883a 	add	r2,r16,r2
 40068ec:	10800017 	ldw	r2,0(r2)
 40068f0:	10800060 	cmpeqi	r2,r2,1
 40068f4:	1000101e 	bne	r2,zero,4006938 <dropLBlock+0x1418>
						randomStart += 2;
 40068f8:	e0bfc117 	ldw	r2,-252(fp)
 40068fc:	10800084 	addi	r2,r2,2
 4006900:	e0bfc115 	stw	r2,-252(fp)
						randomEnd += 2;
 4006904:	e0bfc317 	ldw	r2,-244(fp)
 4006908:	10800084 	addi	r2,r2,2
 400690c:	e0bfc315 	stw	r2,-244(fp)
						randomFirstStart += 2;
 4006910:	e0bfc217 	ldw	r2,-248(fp)
 4006914:	10800084 	addi	r2,r2,2
 4006918:	e0bfc215 	stw	r2,-248(fp)
						secondEnd += 2;
 400691c:	e0bfc517 	ldw	r2,-236(fp)
 4006920:	10800084 	addi	r2,r2,2
 4006924:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4006928:	e0bfc717 	ldw	r2,-228(fp)
 400692c:	10bfffc4 	addi	r2,r2,-1
 4006930:	e0bfc715 	stw	r2,-228(fp)
 4006934:	00007606 	br	4006b10 <dropLBlock+0x15f0>
					}else if(shapeLayout == 2
 4006938:	e0bfc617 	ldw	r2,-232(fp)
 400693c:	10800098 	cmpnei	r2,r2,2
 4006940:	1000301e 	bne	r2,zero,4006a04 <dropLBlock+0x14e4>
							&& grid[i - 1][secondEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1){
 4006944:	e0bfc717 	ldw	r2,-228(fp)
 4006948:	10ffffc4 	addi	r3,r2,-1
 400694c:	e0bfc517 	ldw	r2,-236(fp)
 4006950:	14400044 	addi	r17,r2,1
 4006954:	040100f4 	movhi	r16,1027
 4006958:	84262204 	addi	r16,r16,-26488
 400695c:	01400984 	movi	r5,38
 4006960:	1809883a 	mov	r4,r3
 4006964:	40118340 	call	4011834 <__mulsi3>
 4006968:	1445883a 	add	r2,r2,r17
 400696c:	1085883a 	add	r2,r2,r2
 4006970:	1085883a 	add	r2,r2,r2
 4006974:	8085883a 	add	r2,r16,r2
 4006978:	10800017 	ldw	r2,0(r2)
 400697c:	10800060 	cmpeqi	r2,r2,1
 4006980:	1000201e 	bne	r2,zero,4006a04 <dropLBlock+0x14e4>
 4006984:	e0bfc717 	ldw	r2,-228(fp)
 4006988:	10ffff84 	addi	r3,r2,-2
 400698c:	e0bfc317 	ldw	r2,-244(fp)
 4006990:	14400044 	addi	r17,r2,1
 4006994:	040100f4 	movhi	r16,1027
 4006998:	84262204 	addi	r16,r16,-26488
 400699c:	01400984 	movi	r5,38
 40069a0:	1809883a 	mov	r4,r3
 40069a4:	40118340 	call	4011834 <__mulsi3>
 40069a8:	1445883a 	add	r2,r2,r17
 40069ac:	1085883a 	add	r2,r2,r2
 40069b0:	1085883a 	add	r2,r2,r2
 40069b4:	8085883a 	add	r2,r16,r2
 40069b8:	10800017 	ldw	r2,0(r2)
 40069bc:	10800060 	cmpeqi	r2,r2,1
 40069c0:	1000101e 	bne	r2,zero,4006a04 <dropLBlock+0x14e4>
						randomStart += 2;
 40069c4:	e0bfc117 	ldw	r2,-252(fp)
 40069c8:	10800084 	addi	r2,r2,2
 40069cc:	e0bfc115 	stw	r2,-252(fp)
						randomEnd += 2;
 40069d0:	e0bfc317 	ldw	r2,-244(fp)
 40069d4:	10800084 	addi	r2,r2,2
 40069d8:	e0bfc315 	stw	r2,-244(fp)
						randomFirstStart += 2;
 40069dc:	e0bfc217 	ldw	r2,-248(fp)
 40069e0:	10800084 	addi	r2,r2,2
 40069e4:	e0bfc215 	stw	r2,-248(fp)
						secondEnd += 2;
 40069e8:	e0bfc517 	ldw	r2,-236(fp)
 40069ec:	10800084 	addi	r2,r2,2
 40069f0:	e0bfc515 	stw	r2,-236(fp)
						i--;
 40069f4:	e0bfc717 	ldw	r2,-228(fp)
 40069f8:	10bfffc4 	addi	r2,r2,-1
 40069fc:	e0bfc715 	stw	r2,-228(fp)
 4006a00:	00004306 	br	4006b10 <dropLBlock+0x15f0>
					}else if(shapeLayout == 3
 4006a04:	e0bfc617 	ldw	r2,-232(fp)
 4006a08:	108000d8 	cmpnei	r2,r2,3
 4006a0c:	1002ee1e 	bne	r2,zero,40075c8 <dropLBlock+0x20a8>
							&& grid[i - 1][randomEnd + 1] != 1 && grid[i - 2][secondEnd + 1] != 1 && grid[i - 3][secondEnd + 1] != 1){
 4006a10:	e0bfc717 	ldw	r2,-228(fp)
 4006a14:	10ffffc4 	addi	r3,r2,-1
 4006a18:	e0bfc317 	ldw	r2,-244(fp)
 4006a1c:	14400044 	addi	r17,r2,1
 4006a20:	040100f4 	movhi	r16,1027
 4006a24:	84262204 	addi	r16,r16,-26488
 4006a28:	01400984 	movi	r5,38
 4006a2c:	1809883a 	mov	r4,r3
 4006a30:	40118340 	call	4011834 <__mulsi3>
 4006a34:	1445883a 	add	r2,r2,r17
 4006a38:	1085883a 	add	r2,r2,r2
 4006a3c:	1085883a 	add	r2,r2,r2
 4006a40:	8085883a 	add	r2,r16,r2
 4006a44:	10800017 	ldw	r2,0(r2)
 4006a48:	10800060 	cmpeqi	r2,r2,1
 4006a4c:	1002de1e 	bne	r2,zero,40075c8 <dropLBlock+0x20a8>
 4006a50:	e0bfc717 	ldw	r2,-228(fp)
 4006a54:	10ffff84 	addi	r3,r2,-2
 4006a58:	e0bfc517 	ldw	r2,-236(fp)
 4006a5c:	14400044 	addi	r17,r2,1
 4006a60:	040100f4 	movhi	r16,1027
 4006a64:	84262204 	addi	r16,r16,-26488
 4006a68:	01400984 	movi	r5,38
 4006a6c:	1809883a 	mov	r4,r3
 4006a70:	40118340 	call	4011834 <__mulsi3>
 4006a74:	1445883a 	add	r2,r2,r17
 4006a78:	1085883a 	add	r2,r2,r2
 4006a7c:	1085883a 	add	r2,r2,r2
 4006a80:	8085883a 	add	r2,r16,r2
 4006a84:	10800017 	ldw	r2,0(r2)
 4006a88:	10800060 	cmpeqi	r2,r2,1
 4006a8c:	1002ce1e 	bne	r2,zero,40075c8 <dropLBlock+0x20a8>
 4006a90:	e0bfc717 	ldw	r2,-228(fp)
 4006a94:	10ffff44 	addi	r3,r2,-3
 4006a98:	e0bfc517 	ldw	r2,-236(fp)
 4006a9c:	14400044 	addi	r17,r2,1
 4006aa0:	040100f4 	movhi	r16,1027
 4006aa4:	84262204 	addi	r16,r16,-26488
 4006aa8:	01400984 	movi	r5,38
 4006aac:	1809883a 	mov	r4,r3
 4006ab0:	40118340 	call	4011834 <__mulsi3>
 4006ab4:	1445883a 	add	r2,r2,r17
 4006ab8:	1085883a 	add	r2,r2,r2
 4006abc:	1085883a 	add	r2,r2,r2
 4006ac0:	8085883a 	add	r2,r16,r2
 4006ac4:	10800017 	ldw	r2,0(r2)
 4006ac8:	10800060 	cmpeqi	r2,r2,1
 4006acc:	1002be1e 	bne	r2,zero,40075c8 <dropLBlock+0x20a8>
						randomStart += 2;
 4006ad0:	e0bfc117 	ldw	r2,-252(fp)
 4006ad4:	10800084 	addi	r2,r2,2
 4006ad8:	e0bfc115 	stw	r2,-252(fp)
						randomEnd += 2;
 4006adc:	e0bfc317 	ldw	r2,-244(fp)
 4006ae0:	10800084 	addi	r2,r2,2
 4006ae4:	e0bfc315 	stw	r2,-244(fp)
						randomFirstStart += 2;
 4006ae8:	e0bfc217 	ldw	r2,-248(fp)
 4006aec:	10800084 	addi	r2,r2,2
 4006af0:	e0bfc215 	stw	r2,-248(fp)
						secondEnd += 2;
 4006af4:	e0bfc517 	ldw	r2,-236(fp)
 4006af8:	10800084 	addi	r2,r2,2
 4006afc:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4006b00:	e0bfc717 	ldw	r2,-228(fp)
 4006b04:	10bfffc4 	addi	r2,r2,-1
 4006b08:	e0bfc715 	stw	r2,-228(fp)
        	time = timer;
			if(keycode == 0x51){
				time = timer / 1.5;
			}
			else if(keycode == 0x4F && grid[i-1][randomStart - 1] != 1){
				if(randomEnd != 59){
 4006b0c:	0002ae06 	br	40075c8 <dropLBlock+0x20a8>
 4006b10:	0002ad06 	br	40075c8 <dropLBlock+0x20a8>
						i--;
					}

				}
			}
			else if(keycode == 0x50 && grid[i-1][randomEnd + 1] != 1){
 4006b14:	e0bffd03 	ldbu	r2,-12(fp)
 4006b18:	10801418 	cmpnei	r2,r2,80
 4006b1c:	1000ff1e 	bne	r2,zero,4006f1c <dropLBlock+0x19fc>
 4006b20:	e0bfc717 	ldw	r2,-228(fp)
 4006b24:	10ffffc4 	addi	r3,r2,-1
 4006b28:	e0bfc317 	ldw	r2,-244(fp)
 4006b2c:	14400044 	addi	r17,r2,1
 4006b30:	040100f4 	movhi	r16,1027
 4006b34:	84262204 	addi	r16,r16,-26488
 4006b38:	01400984 	movi	r5,38
 4006b3c:	1809883a 	mov	r4,r3
 4006b40:	40118340 	call	4011834 <__mulsi3>
 4006b44:	1445883a 	add	r2,r2,r17
 4006b48:	1085883a 	add	r2,r2,r2
 4006b4c:	1085883a 	add	r2,r2,r2
 4006b50:	8085883a 	add	r2,r16,r2
 4006b54:	10800017 	ldw	r2,0(r2)
 4006b58:	10800060 	cmpeqi	r2,r2,1
 4006b5c:	1000ef1e 	bne	r2,zero,4006f1c <dropLBlock+0x19fc>
				if(randomStart != 21){
 4006b60:	e0bfc117 	ldw	r2,-252(fp)
 4006b64:	10800560 	cmpeqi	r2,r2,21
 4006b68:	1002991e 	bne	r2,zero,40075d0 <dropLBlock+0x20b0>
					if(shapeLayout == 0
 4006b6c:	e0bfc617 	ldw	r2,-232(fp)
 4006b70:	1000301e 	bne	r2,zero,4006c34 <dropLBlock+0x1714>
							&& grid[i - 1][randomStart - 1] != 1 && grid[i - 2][randomFirstStart - 1] != 1){
 4006b74:	e0bfc717 	ldw	r2,-228(fp)
 4006b78:	10ffffc4 	addi	r3,r2,-1
 4006b7c:	e0bfc117 	ldw	r2,-252(fp)
 4006b80:	147fffc4 	addi	r17,r2,-1
 4006b84:	040100f4 	movhi	r16,1027
 4006b88:	84262204 	addi	r16,r16,-26488
 4006b8c:	01400984 	movi	r5,38
 4006b90:	1809883a 	mov	r4,r3
 4006b94:	40118340 	call	4011834 <__mulsi3>
 4006b98:	1445883a 	add	r2,r2,r17
 4006b9c:	1085883a 	add	r2,r2,r2
 4006ba0:	1085883a 	add	r2,r2,r2
 4006ba4:	8085883a 	add	r2,r16,r2
 4006ba8:	10800017 	ldw	r2,0(r2)
 4006bac:	10800060 	cmpeqi	r2,r2,1
 4006bb0:	1000201e 	bne	r2,zero,4006c34 <dropLBlock+0x1714>
 4006bb4:	e0bfc717 	ldw	r2,-228(fp)
 4006bb8:	10ffff84 	addi	r3,r2,-2
 4006bbc:	e0bfc217 	ldw	r2,-248(fp)
 4006bc0:	147fffc4 	addi	r17,r2,-1
 4006bc4:	040100f4 	movhi	r16,1027
 4006bc8:	84262204 	addi	r16,r16,-26488
 4006bcc:	01400984 	movi	r5,38
 4006bd0:	1809883a 	mov	r4,r3
 4006bd4:	40118340 	call	4011834 <__mulsi3>
 4006bd8:	1445883a 	add	r2,r2,r17
 4006bdc:	1085883a 	add	r2,r2,r2
 4006be0:	1085883a 	add	r2,r2,r2
 4006be4:	8085883a 	add	r2,r16,r2
 4006be8:	10800017 	ldw	r2,0(r2)
 4006bec:	10800060 	cmpeqi	r2,r2,1
 4006bf0:	1000101e 	bne	r2,zero,4006c34 <dropLBlock+0x1714>
						randomStart -= 2;
 4006bf4:	e0bfc117 	ldw	r2,-252(fp)
 4006bf8:	10bfff84 	addi	r2,r2,-2
 4006bfc:	e0bfc115 	stw	r2,-252(fp)
						randomEnd -= 2;
 4006c00:	e0bfc317 	ldw	r2,-244(fp)
 4006c04:	10bfff84 	addi	r2,r2,-2
 4006c08:	e0bfc315 	stw	r2,-244(fp)
						randomFirstStart -= 2;
 4006c0c:	e0bfc217 	ldw	r2,-248(fp)
 4006c10:	10bfff84 	addi	r2,r2,-2
 4006c14:	e0bfc215 	stw	r2,-248(fp)
						secondEnd -= 2;
 4006c18:	e0bfc517 	ldw	r2,-236(fp)
 4006c1c:	10bfff84 	addi	r2,r2,-2
 4006c20:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4006c24:	e0bfc717 	ldw	r2,-228(fp)
 4006c28:	10bfffc4 	addi	r2,r2,-1
 4006c2c:	e0bfc715 	stw	r2,-228(fp)
 4006c30:	0000b906 	br	4006f18 <dropLBlock+0x19f8>
					}else if(shapeLayout == 1
 4006c34:	e0bfc617 	ldw	r2,-232(fp)
 4006c38:	10800058 	cmpnei	r2,r2,1
 4006c3c:	1000401e 	bne	r2,zero,4006d40 <dropLBlock+0x1820>
							&& grid[i - 1][randomFirstStart - 1] != 1 && grid[i - 2][randomFirstStart - 1] != 1 && grid[i - 3][randomStart - 1] != 1){
 4006c40:	e0bfc717 	ldw	r2,-228(fp)
 4006c44:	10ffffc4 	addi	r3,r2,-1
 4006c48:	e0bfc217 	ldw	r2,-248(fp)
 4006c4c:	147fffc4 	addi	r17,r2,-1
 4006c50:	040100f4 	movhi	r16,1027
 4006c54:	84262204 	addi	r16,r16,-26488
 4006c58:	01400984 	movi	r5,38
 4006c5c:	1809883a 	mov	r4,r3
 4006c60:	40118340 	call	4011834 <__mulsi3>
 4006c64:	1445883a 	add	r2,r2,r17
 4006c68:	1085883a 	add	r2,r2,r2
 4006c6c:	1085883a 	add	r2,r2,r2
 4006c70:	8085883a 	add	r2,r16,r2
 4006c74:	10800017 	ldw	r2,0(r2)
 4006c78:	10800060 	cmpeqi	r2,r2,1
 4006c7c:	1000301e 	bne	r2,zero,4006d40 <dropLBlock+0x1820>
 4006c80:	e0bfc717 	ldw	r2,-228(fp)
 4006c84:	10ffff84 	addi	r3,r2,-2
 4006c88:	e0bfc217 	ldw	r2,-248(fp)
 4006c8c:	147fffc4 	addi	r17,r2,-1
 4006c90:	040100f4 	movhi	r16,1027
 4006c94:	84262204 	addi	r16,r16,-26488
 4006c98:	01400984 	movi	r5,38
 4006c9c:	1809883a 	mov	r4,r3
 4006ca0:	40118340 	call	4011834 <__mulsi3>
 4006ca4:	1445883a 	add	r2,r2,r17
 4006ca8:	1085883a 	add	r2,r2,r2
 4006cac:	1085883a 	add	r2,r2,r2
 4006cb0:	8085883a 	add	r2,r16,r2
 4006cb4:	10800017 	ldw	r2,0(r2)
 4006cb8:	10800060 	cmpeqi	r2,r2,1
 4006cbc:	1000201e 	bne	r2,zero,4006d40 <dropLBlock+0x1820>
 4006cc0:	e0bfc717 	ldw	r2,-228(fp)
 4006cc4:	10ffff44 	addi	r3,r2,-3
 4006cc8:	e0bfc117 	ldw	r2,-252(fp)
 4006ccc:	147fffc4 	addi	r17,r2,-1
 4006cd0:	040100f4 	movhi	r16,1027
 4006cd4:	84262204 	addi	r16,r16,-26488
 4006cd8:	01400984 	movi	r5,38
 4006cdc:	1809883a 	mov	r4,r3
 4006ce0:	40118340 	call	4011834 <__mulsi3>
 4006ce4:	1445883a 	add	r2,r2,r17
 4006ce8:	1085883a 	add	r2,r2,r2
 4006cec:	1085883a 	add	r2,r2,r2
 4006cf0:	8085883a 	add	r2,r16,r2
 4006cf4:	10800017 	ldw	r2,0(r2)
 4006cf8:	10800060 	cmpeqi	r2,r2,1
 4006cfc:	1000101e 	bne	r2,zero,4006d40 <dropLBlock+0x1820>
						randomStart -= 2;
 4006d00:	e0bfc117 	ldw	r2,-252(fp)
 4006d04:	10bfff84 	addi	r2,r2,-2
 4006d08:	e0bfc115 	stw	r2,-252(fp)
						randomEnd -= 2;
 4006d0c:	e0bfc317 	ldw	r2,-244(fp)
 4006d10:	10bfff84 	addi	r2,r2,-2
 4006d14:	e0bfc315 	stw	r2,-244(fp)
						randomFirstStart -= 2;
 4006d18:	e0bfc217 	ldw	r2,-248(fp)
 4006d1c:	10bfff84 	addi	r2,r2,-2
 4006d20:	e0bfc215 	stw	r2,-248(fp)
						secondEnd -= 2;
 4006d24:	e0bfc517 	ldw	r2,-236(fp)
 4006d28:	10bfff84 	addi	r2,r2,-2
 4006d2c:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4006d30:	e0bfc717 	ldw	r2,-228(fp)
 4006d34:	10bfffc4 	addi	r2,r2,-1
 4006d38:	e0bfc715 	stw	r2,-228(fp)
 4006d3c:	00007606 	br	4006f18 <dropLBlock+0x19f8>
					}else if(shapeLayout == 2
 4006d40:	e0bfc617 	ldw	r2,-232(fp)
 4006d44:	10800098 	cmpnei	r2,r2,2
 4006d48:	1000301e 	bne	r2,zero,4006e0c <dropLBlock+0x18ec>
							&& grid[i - 1][randomStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1){
 4006d4c:	e0bfc717 	ldw	r2,-228(fp)
 4006d50:	10ffffc4 	addi	r3,r2,-1
 4006d54:	e0bfc117 	ldw	r2,-252(fp)
 4006d58:	147fffc4 	addi	r17,r2,-1
 4006d5c:	040100f4 	movhi	r16,1027
 4006d60:	84262204 	addi	r16,r16,-26488
 4006d64:	01400984 	movi	r5,38
 4006d68:	1809883a 	mov	r4,r3
 4006d6c:	40118340 	call	4011834 <__mulsi3>
 4006d70:	1445883a 	add	r2,r2,r17
 4006d74:	1085883a 	add	r2,r2,r2
 4006d78:	1085883a 	add	r2,r2,r2
 4006d7c:	8085883a 	add	r2,r16,r2
 4006d80:	10800017 	ldw	r2,0(r2)
 4006d84:	10800060 	cmpeqi	r2,r2,1
 4006d88:	1000201e 	bne	r2,zero,4006e0c <dropLBlock+0x18ec>
 4006d8c:	e0bfc717 	ldw	r2,-228(fp)
 4006d90:	10ffff84 	addi	r3,r2,-2
 4006d94:	e0bfc117 	ldw	r2,-252(fp)
 4006d98:	147fffc4 	addi	r17,r2,-1
 4006d9c:	040100f4 	movhi	r16,1027
 4006da0:	84262204 	addi	r16,r16,-26488
 4006da4:	01400984 	movi	r5,38
 4006da8:	1809883a 	mov	r4,r3
 4006dac:	40118340 	call	4011834 <__mulsi3>
 4006db0:	1445883a 	add	r2,r2,r17
 4006db4:	1085883a 	add	r2,r2,r2
 4006db8:	1085883a 	add	r2,r2,r2
 4006dbc:	8085883a 	add	r2,r16,r2
 4006dc0:	10800017 	ldw	r2,0(r2)
 4006dc4:	10800060 	cmpeqi	r2,r2,1
 4006dc8:	1000101e 	bne	r2,zero,4006e0c <dropLBlock+0x18ec>
						randomStart -= 2;
 4006dcc:	e0bfc117 	ldw	r2,-252(fp)
 4006dd0:	10bfff84 	addi	r2,r2,-2
 4006dd4:	e0bfc115 	stw	r2,-252(fp)
						randomEnd -= 2;
 4006dd8:	e0bfc317 	ldw	r2,-244(fp)
 4006ddc:	10bfff84 	addi	r2,r2,-2
 4006de0:	e0bfc315 	stw	r2,-244(fp)
						randomFirstStart -= 2;
 4006de4:	e0bfc217 	ldw	r2,-248(fp)
 4006de8:	10bfff84 	addi	r2,r2,-2
 4006dec:	e0bfc215 	stw	r2,-248(fp)
						secondEnd -= 2;
 4006df0:	e0bfc517 	ldw	r2,-236(fp)
 4006df4:	10bfff84 	addi	r2,r2,-2
 4006df8:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4006dfc:	e0bfc717 	ldw	r2,-228(fp)
 4006e00:	10bfffc4 	addi	r2,r2,-1
 4006e04:	e0bfc715 	stw	r2,-228(fp)
 4006e08:	00004306 	br	4006f18 <dropLBlock+0x19f8>
					}else if(shapeLayout == 3
 4006e0c:	e0bfc617 	ldw	r2,-232(fp)
 4006e10:	108000d8 	cmpnei	r2,r2,3
 4006e14:	1001ee1e 	bne	r2,zero,40075d0 <dropLBlock+0x20b0>
							&& grid[i - 1][randomStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1 && grid[i - 3][randomStart - 1] != 1){
 4006e18:	e0bfc717 	ldw	r2,-228(fp)
 4006e1c:	10ffffc4 	addi	r3,r2,-1
 4006e20:	e0bfc117 	ldw	r2,-252(fp)
 4006e24:	147fffc4 	addi	r17,r2,-1
 4006e28:	040100f4 	movhi	r16,1027
 4006e2c:	84262204 	addi	r16,r16,-26488
 4006e30:	01400984 	movi	r5,38
 4006e34:	1809883a 	mov	r4,r3
 4006e38:	40118340 	call	4011834 <__mulsi3>
 4006e3c:	1445883a 	add	r2,r2,r17
 4006e40:	1085883a 	add	r2,r2,r2
 4006e44:	1085883a 	add	r2,r2,r2
 4006e48:	8085883a 	add	r2,r16,r2
 4006e4c:	10800017 	ldw	r2,0(r2)
 4006e50:	10800060 	cmpeqi	r2,r2,1
 4006e54:	1001de1e 	bne	r2,zero,40075d0 <dropLBlock+0x20b0>
 4006e58:	e0bfc717 	ldw	r2,-228(fp)
 4006e5c:	10ffff84 	addi	r3,r2,-2
 4006e60:	e0bfc117 	ldw	r2,-252(fp)
 4006e64:	147fffc4 	addi	r17,r2,-1
 4006e68:	040100f4 	movhi	r16,1027
 4006e6c:	84262204 	addi	r16,r16,-26488
 4006e70:	01400984 	movi	r5,38
 4006e74:	1809883a 	mov	r4,r3
 4006e78:	40118340 	call	4011834 <__mulsi3>
 4006e7c:	1445883a 	add	r2,r2,r17
 4006e80:	1085883a 	add	r2,r2,r2
 4006e84:	1085883a 	add	r2,r2,r2
 4006e88:	8085883a 	add	r2,r16,r2
 4006e8c:	10800017 	ldw	r2,0(r2)
 4006e90:	10800060 	cmpeqi	r2,r2,1
 4006e94:	1001ce1e 	bne	r2,zero,40075d0 <dropLBlock+0x20b0>
 4006e98:	e0bfc717 	ldw	r2,-228(fp)
 4006e9c:	10ffff44 	addi	r3,r2,-3
 4006ea0:	e0bfc117 	ldw	r2,-252(fp)
 4006ea4:	147fffc4 	addi	r17,r2,-1
 4006ea8:	040100f4 	movhi	r16,1027
 4006eac:	84262204 	addi	r16,r16,-26488
 4006eb0:	01400984 	movi	r5,38
 4006eb4:	1809883a 	mov	r4,r3
 4006eb8:	40118340 	call	4011834 <__mulsi3>
 4006ebc:	1445883a 	add	r2,r2,r17
 4006ec0:	1085883a 	add	r2,r2,r2
 4006ec4:	1085883a 	add	r2,r2,r2
 4006ec8:	8085883a 	add	r2,r16,r2
 4006ecc:	10800017 	ldw	r2,0(r2)
 4006ed0:	10800060 	cmpeqi	r2,r2,1
 4006ed4:	1001be1e 	bne	r2,zero,40075d0 <dropLBlock+0x20b0>
						randomStart -= 2;
 4006ed8:	e0bfc117 	ldw	r2,-252(fp)
 4006edc:	10bfff84 	addi	r2,r2,-2
 4006ee0:	e0bfc115 	stw	r2,-252(fp)
						randomEnd -= 2;
 4006ee4:	e0bfc317 	ldw	r2,-244(fp)
 4006ee8:	10bfff84 	addi	r2,r2,-2
 4006eec:	e0bfc315 	stw	r2,-244(fp)
						randomFirstStart -= 2;
 4006ef0:	e0bfc217 	ldw	r2,-248(fp)
 4006ef4:	10bfff84 	addi	r2,r2,-2
 4006ef8:	e0bfc215 	stw	r2,-248(fp)
						secondEnd -= 2;
 4006efc:	e0bfc517 	ldw	r2,-236(fp)
 4006f00:	10bfff84 	addi	r2,r2,-2
 4006f04:	e0bfc515 	stw	r2,-236(fp)
						i--;
 4006f08:	e0bfc717 	ldw	r2,-228(fp)
 4006f0c:	10bfffc4 	addi	r2,r2,-1
 4006f10:	e0bfc715 	stw	r2,-228(fp)
					}

				}
			}
			else if(keycode == 0x50 && grid[i-1][randomEnd + 1] != 1){
				if(randomStart != 21){
 4006f14:	0001ae06 	br	40075d0 <dropLBlock+0x20b0>
 4006f18:	0001ad06 	br	40075d0 <dropLBlock+0x20b0>
						secondEnd -= 2;
						i--;
					}

				}
			}else if(keycode == 0x1D){
 4006f1c:	e0bffd03 	ldbu	r2,-12(fp)
 4006f20:	10800758 	cmpnei	r2,r2,29
 4006f24:	1000d01e 	bne	r2,zero,4007268 <dropLBlock+0x1d48>
				i--;
 4006f28:	e0bfc717 	ldw	r2,-228(fp)
 4006f2c:	10bfffc4 	addi	r2,r2,-1
 4006f30:	e0bfc715 	stw	r2,-228(fp)
				if(shapeLayout == 0  && i > 2 && i < 29
 4006f34:	e0bfc617 	ldw	r2,-232(fp)
 4006f38:	1000321e 	bne	r2,zero,4007004 <dropLBlock+0x1ae4>
 4006f3c:	e0bfc717 	ldw	r2,-228(fp)
 4006f40:	108000d0 	cmplti	r2,r2,3
 4006f44:	10002f1e 	bne	r2,zero,4007004 <dropLBlock+0x1ae4>
 4006f48:	e0bfc717 	ldw	r2,-228(fp)
 4006f4c:	10800748 	cmpgei	r2,r2,29
 4006f50:	10002c1e 	bne	r2,zero,4007004 <dropLBlock+0x1ae4>
						&& grid[i - 2][randomFirstStart - 1] != 1 && grid[i-2][randomStart] != 1){
 4006f54:	e0bfc717 	ldw	r2,-228(fp)
 4006f58:	10ffff84 	addi	r3,r2,-2
 4006f5c:	e0bfc217 	ldw	r2,-248(fp)
 4006f60:	147fffc4 	addi	r17,r2,-1
 4006f64:	040100f4 	movhi	r16,1027
 4006f68:	84262204 	addi	r16,r16,-26488
 4006f6c:	01400984 	movi	r5,38
 4006f70:	1809883a 	mov	r4,r3
 4006f74:	40118340 	call	4011834 <__mulsi3>
 4006f78:	1445883a 	add	r2,r2,r17
 4006f7c:	1085883a 	add	r2,r2,r2
 4006f80:	1085883a 	add	r2,r2,r2
 4006f84:	8085883a 	add	r2,r16,r2
 4006f88:	10800017 	ldw	r2,0(r2)
 4006f8c:	10800060 	cmpeqi	r2,r2,1
 4006f90:	10001c1e 	bne	r2,zero,4007004 <dropLBlock+0x1ae4>
 4006f94:	e0bfc717 	ldw	r2,-228(fp)
 4006f98:	10bfff84 	addi	r2,r2,-2
 4006f9c:	040100f4 	movhi	r16,1027
 4006fa0:	84262204 	addi	r16,r16,-26488
 4006fa4:	01400984 	movi	r5,38
 4006fa8:	1009883a 	mov	r4,r2
 4006fac:	40118340 	call	4011834 <__mulsi3>
 4006fb0:	1007883a 	mov	r3,r2
 4006fb4:	e0bfc117 	ldw	r2,-252(fp)
 4006fb8:	1885883a 	add	r2,r3,r2
 4006fbc:	1085883a 	add	r2,r2,r2
 4006fc0:	1085883a 	add	r2,r2,r2
 4006fc4:	8085883a 	add	r2,r16,r2
 4006fc8:	10800017 	ldw	r2,0(r2)
 4006fcc:	10800060 	cmpeqi	r2,r2,1
 4006fd0:	10000c1e 	bne	r2,zero,4007004 <dropLBlock+0x1ae4>
					shapeLayout = 1;
 4006fd4:	00800044 	movi	r2,1
 4006fd8:	e0bfc615 	stw	r2,-232(fp)
					randomFirstStart -= 2;
 4006fdc:	e0bfc217 	ldw	r2,-248(fp)
 4006fe0:	10bfff84 	addi	r2,r2,-2
 4006fe4:	e0bfc215 	stw	r2,-248(fp)
					randomEnd -= 2;
 4006fe8:	e0bfc317 	ldw	r2,-244(fp)
 4006fec:	10bfff84 	addi	r2,r2,-2
 4006ff0:	e0bfc315 	stw	r2,-244(fp)
					i++;
 4006ff4:	e0bfc717 	ldw	r2,-228(fp)
 4006ff8:	10800044 	addi	r2,r2,1
 4006ffc:	e0bfc715 	stw	r2,-228(fp)
 4007000:	00017406 	br	40075d4 <dropLBlock+0x20b4>
				}else if(shapeLayout == 1 && randomStart >= 23 && randomEnd <= 57
 4007004:	e0bfc617 	ldw	r2,-232(fp)
 4007008:	10800058 	cmpnei	r2,r2,1
 400700c:	10002d1e 	bne	r2,zero,40070c4 <dropLBlock+0x1ba4>
 4007010:	e0bfc117 	ldw	r2,-252(fp)
 4007014:	108005d0 	cmplti	r2,r2,23
 4007018:	10002a1e 	bne	r2,zero,40070c4 <dropLBlock+0x1ba4>
 400701c:	e0bfc317 	ldw	r2,-244(fp)
 4007020:	10800e88 	cmpgei	r2,r2,58
 4007024:	1000271e 	bne	r2,zero,40070c4 <dropLBlock+0x1ba4>
						&& grid[i][randomFirstStart - 1] != 1 && grid[i - 1][randomEnd + 1] != 1){
 4007028:	e0bfc217 	ldw	r2,-248(fp)
 400702c:	147fffc4 	addi	r17,r2,-1
 4007030:	040100f4 	movhi	r16,1027
 4007034:	84262204 	addi	r16,r16,-26488
 4007038:	e0bfc717 	ldw	r2,-228(fp)
 400703c:	01400984 	movi	r5,38
 4007040:	1009883a 	mov	r4,r2
 4007044:	40118340 	call	4011834 <__mulsi3>
 4007048:	1445883a 	add	r2,r2,r17
 400704c:	1085883a 	add	r2,r2,r2
 4007050:	1085883a 	add	r2,r2,r2
 4007054:	8085883a 	add	r2,r16,r2
 4007058:	10800017 	ldw	r2,0(r2)
 400705c:	10800060 	cmpeqi	r2,r2,1
 4007060:	1000181e 	bne	r2,zero,40070c4 <dropLBlock+0x1ba4>
 4007064:	e0bfc717 	ldw	r2,-228(fp)
 4007068:	10ffffc4 	addi	r3,r2,-1
 400706c:	e0bfc317 	ldw	r2,-244(fp)
 4007070:	14400044 	addi	r17,r2,1
 4007074:	040100f4 	movhi	r16,1027
 4007078:	84262204 	addi	r16,r16,-26488
 400707c:	01400984 	movi	r5,38
 4007080:	1809883a 	mov	r4,r3
 4007084:	40118340 	call	4011834 <__mulsi3>
 4007088:	1445883a 	add	r2,r2,r17
 400708c:	1085883a 	add	r2,r2,r2
 4007090:	1085883a 	add	r2,r2,r2
 4007094:	8085883a 	add	r2,r16,r2
 4007098:	10800017 	ldw	r2,0(r2)
 400709c:	10800060 	cmpeqi	r2,r2,1
 40070a0:	1000081e 	bne	r2,zero,40070c4 <dropLBlock+0x1ba4>
					shapeLayout = 2;
 40070a4:	00800084 	movi	r2,2
 40070a8:	e0bfc615 	stw	r2,-232(fp)
					randomEnd += 2;
 40070ac:	e0bfc317 	ldw	r2,-244(fp)
 40070b0:	10800084 	addi	r2,r2,2
 40070b4:	e0bfc315 	stw	r2,-244(fp)
					secondEnd = randomFirstStart;
 40070b8:	e0bfc217 	ldw	r2,-248(fp)
 40070bc:	e0bfc515 	stw	r2,-236(fp)
 40070c0:	00014406 	br	40075d4 <dropLBlock+0x20b4>
				}else if(shapeLayout == 2  && i > 2 && i < 29
 40070c4:	e0bfc617 	ldw	r2,-232(fp)
 40070c8:	10800098 	cmpnei	r2,r2,2
 40070cc:	10001f1e 	bne	r2,zero,400714c <dropLBlock+0x1c2c>
 40070d0:	e0bfc717 	ldw	r2,-228(fp)
 40070d4:	108000d0 	cmplti	r2,r2,3
 40070d8:	10001c1e 	bne	r2,zero,400714c <dropLBlock+0x1c2c>
 40070dc:	e0bfc717 	ldw	r2,-228(fp)
 40070e0:	10800748 	cmpgei	r2,r2,29
 40070e4:	1000191e 	bne	r2,zero,400714c <dropLBlock+0x1c2c>
						&& grid[i - 2][randomStart + 2] != 1){
 40070e8:	e0bfc717 	ldw	r2,-228(fp)
 40070ec:	10ffff84 	addi	r3,r2,-2
 40070f0:	e0bfc117 	ldw	r2,-252(fp)
 40070f4:	14400084 	addi	r17,r2,2
 40070f8:	040100f4 	movhi	r16,1027
 40070fc:	84262204 	addi	r16,r16,-26488
 4007100:	01400984 	movi	r5,38
 4007104:	1809883a 	mov	r4,r3
 4007108:	40118340 	call	4011834 <__mulsi3>
 400710c:	1445883a 	add	r2,r2,r17
 4007110:	1085883a 	add	r2,r2,r2
 4007114:	1085883a 	add	r2,r2,r2
 4007118:	8085883a 	add	r2,r16,r2
 400711c:	10800017 	ldw	r2,0(r2)
 4007120:	10800060 	cmpeqi	r2,r2,1
 4007124:	1000091e 	bne	r2,zero,400714c <dropLBlock+0x1c2c>
					shapeLayout = 3;
 4007128:	008000c4 	movi	r2,3
 400712c:	e0bfc615 	stw	r2,-232(fp)
					randomStart += 2;
 4007130:	e0bfc117 	ldw	r2,-252(fp)
 4007134:	10800084 	addi	r2,r2,2
 4007138:	e0bfc115 	stw	r2,-252(fp)
					secondEnd += 2;
 400713c:	e0bfc517 	ldw	r2,-236(fp)
 4007140:	10800084 	addi	r2,r2,2
 4007144:	e0bfc515 	stw	r2,-236(fp)
 4007148:	00012206 	br	40075d4 <dropLBlock+0x20b4>
				}else if(shapeLayout == 3  && randomStart >= 23 && randomEnd <= 57
 400714c:	e0bfc617 	ldw	r2,-232(fp)
 4007150:	108000d8 	cmpnei	r2,r2,3
 4007154:	1000401e 	bne	r2,zero,4007258 <dropLBlock+0x1d38>
 4007158:	e0bfc117 	ldw	r2,-252(fp)
 400715c:	108005d0 	cmplti	r2,r2,23
 4007160:	10003d1e 	bne	r2,zero,4007258 <dropLBlock+0x1d38>
 4007164:	e0bfc317 	ldw	r2,-244(fp)
 4007168:	10800e88 	cmpgei	r2,r2,58
 400716c:	10003a1e 	bne	r2,zero,4007258 <dropLBlock+0x1d38>
						&& grid[i - 1][randomStart - 1] != 1 && grid[i - 1][randomEnd] != 1 && grid[i - 2][randomEnd] != 1){
 4007170:	e0bfc717 	ldw	r2,-228(fp)
 4007174:	10ffffc4 	addi	r3,r2,-1
 4007178:	e0bfc117 	ldw	r2,-252(fp)
 400717c:	147fffc4 	addi	r17,r2,-1
 4007180:	040100f4 	movhi	r16,1027
 4007184:	84262204 	addi	r16,r16,-26488
 4007188:	01400984 	movi	r5,38
 400718c:	1809883a 	mov	r4,r3
 4007190:	40118340 	call	4011834 <__mulsi3>
 4007194:	1445883a 	add	r2,r2,r17
 4007198:	1085883a 	add	r2,r2,r2
 400719c:	1085883a 	add	r2,r2,r2
 40071a0:	8085883a 	add	r2,r16,r2
 40071a4:	10800017 	ldw	r2,0(r2)
 40071a8:	10800060 	cmpeqi	r2,r2,1
 40071ac:	10002a1e 	bne	r2,zero,4007258 <dropLBlock+0x1d38>
 40071b0:	e0bfc717 	ldw	r2,-228(fp)
 40071b4:	10bfffc4 	addi	r2,r2,-1
 40071b8:	040100f4 	movhi	r16,1027
 40071bc:	84262204 	addi	r16,r16,-26488
 40071c0:	01400984 	movi	r5,38
 40071c4:	1009883a 	mov	r4,r2
 40071c8:	40118340 	call	4011834 <__mulsi3>
 40071cc:	1007883a 	mov	r3,r2
 40071d0:	e0bfc317 	ldw	r2,-244(fp)
 40071d4:	1885883a 	add	r2,r3,r2
 40071d8:	1085883a 	add	r2,r2,r2
 40071dc:	1085883a 	add	r2,r2,r2
 40071e0:	8085883a 	add	r2,r16,r2
 40071e4:	10800017 	ldw	r2,0(r2)
 40071e8:	10800060 	cmpeqi	r2,r2,1
 40071ec:	10001a1e 	bne	r2,zero,4007258 <dropLBlock+0x1d38>
 40071f0:	e0bfc717 	ldw	r2,-228(fp)
 40071f4:	10bfff84 	addi	r2,r2,-2
 40071f8:	040100f4 	movhi	r16,1027
 40071fc:	84262204 	addi	r16,r16,-26488
 4007200:	01400984 	movi	r5,38
 4007204:	1009883a 	mov	r4,r2
 4007208:	40118340 	call	4011834 <__mulsi3>
 400720c:	1007883a 	mov	r3,r2
 4007210:	e0bfc317 	ldw	r2,-244(fp)
 4007214:	1885883a 	add	r2,r3,r2
 4007218:	1085883a 	add	r2,r2,r2
 400721c:	1085883a 	add	r2,r2,r2
 4007220:	8085883a 	add	r2,r16,r2
 4007224:	10800017 	ldw	r2,0(r2)
 4007228:	10800060 	cmpeqi	r2,r2,1
 400722c:	10000a1e 	bne	r2,zero,4007258 <dropLBlock+0x1d38>
					shapeLayout = 0;
 4007230:	e03fc615 	stw	zero,-232(fp)
					randomStart -= 2;
 4007234:	e0bfc117 	ldw	r2,-252(fp)
 4007238:	10bfff84 	addi	r2,r2,-2
 400723c:	e0bfc115 	stw	r2,-252(fp)
					randomFirstStart = secondEnd;
 4007240:	e0bfc517 	ldw	r2,-236(fp)
 4007244:	e0bfc215 	stw	r2,-248(fp)
					i--;
 4007248:	e0bfc717 	ldw	r2,-228(fp)
 400724c:	10bfffc4 	addi	r2,r2,-1
 4007250:	e0bfc715 	stw	r2,-228(fp)
 4007254:	0000df06 	br	40075d4 <dropLBlock+0x20b4>
				}else{
					i++;
 4007258:	e0bfc717 	ldw	r2,-228(fp)
 400725c:	10800044 	addi	r2,r2,1
 4007260:	e0bfc715 	stw	r2,-228(fp)
 4007264:	0000db06 	br	40075d4 <dropLBlock+0x20b4>
				}
			}else if(keycode == 0x1B){
 4007268:	e0bffd03 	ldbu	r2,-12(fp)
 400726c:	108006d8 	cmpnei	r2,r2,27
 4007270:	1000d01e 	bne	r2,zero,40075b4 <dropLBlock+0x2094>
				i--;
 4007274:	e0bfc717 	ldw	r2,-228(fp)
 4007278:	10bfffc4 	addi	r2,r2,-1
 400727c:	e0bfc715 	stw	r2,-228(fp)
				if(shapeLayout == 0 && i > 2 && i < 29
 4007280:	e0bfc617 	ldw	r2,-232(fp)
 4007284:	1000211e 	bne	r2,zero,400730c <dropLBlock+0x1dec>
 4007288:	e0bfc717 	ldw	r2,-228(fp)
 400728c:	108000d0 	cmplti	r2,r2,3
 4007290:	10001e1e 	bne	r2,zero,400730c <dropLBlock+0x1dec>
 4007294:	e0bfc717 	ldw	r2,-228(fp)
 4007298:	10800748 	cmpgei	r2,r2,29
 400729c:	10001b1e 	bne	r2,zero,400730c <dropLBlock+0x1dec>
						&& grid[i - 2][secondEnd + 1] != 1){
 40072a0:	e0bfc717 	ldw	r2,-228(fp)
 40072a4:	10ffff84 	addi	r3,r2,-2
 40072a8:	e0bfc517 	ldw	r2,-236(fp)
 40072ac:	14400044 	addi	r17,r2,1
 40072b0:	040100f4 	movhi	r16,1027
 40072b4:	84262204 	addi	r16,r16,-26488
 40072b8:	01400984 	movi	r5,38
 40072bc:	1809883a 	mov	r4,r3
 40072c0:	40118340 	call	4011834 <__mulsi3>
 40072c4:	1445883a 	add	r2,r2,r17
 40072c8:	1085883a 	add	r2,r2,r2
 40072cc:	1085883a 	add	r2,r2,r2
 40072d0:	8085883a 	add	r2,r16,r2
 40072d4:	10800017 	ldw	r2,0(r2)
 40072d8:	10800060 	cmpeqi	r2,r2,1
 40072dc:	10000b1e 	bne	r2,zero,400730c <dropLBlock+0x1dec>
					shapeLayout = 3;
 40072e0:	008000c4 	movi	r2,3
 40072e4:	e0bfc615 	stw	r2,-232(fp)
					randomStart += 2;
 40072e8:	e0bfc117 	ldw	r2,-252(fp)
 40072ec:	10800084 	addi	r2,r2,2
 40072f0:	e0bfc115 	stw	r2,-252(fp)
					secondEnd = randomFirstStart;
 40072f4:	e0bfc217 	ldw	r2,-248(fp)
 40072f8:	e0bfc515 	stw	r2,-236(fp)
					i++;
 40072fc:	e0bfc717 	ldw	r2,-228(fp)
 4007300:	10800044 	addi	r2,r2,1
 4007304:	e0bfc715 	stw	r2,-228(fp)
 4007308:	0000b206 	br	40075d4 <dropLBlock+0x20b4>
				}else if(shapeLayout == 1  && randomStart >= 23 && randomEnd <= 57
 400730c:	e0bfc617 	ldw	r2,-232(fp)
 4007310:	10800058 	cmpnei	r2,r2,1
 4007314:	1000311e 	bne	r2,zero,40073dc <dropLBlock+0x1ebc>
 4007318:	e0bfc117 	ldw	r2,-252(fp)
 400731c:	108005d0 	cmplti	r2,r2,23
 4007320:	10002e1e 	bne	r2,zero,40073dc <dropLBlock+0x1ebc>
 4007324:	e0bfc317 	ldw	r2,-244(fp)
 4007328:	10800e88 	cmpgei	r2,r2,58
 400732c:	10002b1e 	bne	r2,zero,40073dc <dropLBlock+0x1ebc>
						&& grid[i - 1][randomEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1){
 4007330:	e0bfc717 	ldw	r2,-228(fp)
 4007334:	10ffffc4 	addi	r3,r2,-1
 4007338:	e0bfc317 	ldw	r2,-244(fp)
 400733c:	14400044 	addi	r17,r2,1
 4007340:	040100f4 	movhi	r16,1027
 4007344:	84262204 	addi	r16,r16,-26488
 4007348:	01400984 	movi	r5,38
 400734c:	1809883a 	mov	r4,r3
 4007350:	40118340 	call	4011834 <__mulsi3>
 4007354:	1445883a 	add	r2,r2,r17
 4007358:	1085883a 	add	r2,r2,r2
 400735c:	1085883a 	add	r2,r2,r2
 4007360:	8085883a 	add	r2,r16,r2
 4007364:	10800017 	ldw	r2,0(r2)
 4007368:	10800060 	cmpeqi	r2,r2,1
 400736c:	10001b1e 	bne	r2,zero,40073dc <dropLBlock+0x1ebc>
 4007370:	e0bfc717 	ldw	r2,-228(fp)
 4007374:	10ffff84 	addi	r3,r2,-2
 4007378:	e0bfc317 	ldw	r2,-244(fp)
 400737c:	14400044 	addi	r17,r2,1
 4007380:	040100f4 	movhi	r16,1027
 4007384:	84262204 	addi	r16,r16,-26488
 4007388:	01400984 	movi	r5,38
 400738c:	1809883a 	mov	r4,r3
 4007390:	40118340 	call	4011834 <__mulsi3>
 4007394:	1445883a 	add	r2,r2,r17
 4007398:	1085883a 	add	r2,r2,r2
 400739c:	1085883a 	add	r2,r2,r2
 40073a0:	8085883a 	add	r2,r16,r2
 40073a4:	10800017 	ldw	r2,0(r2)
 40073a8:	10800060 	cmpeqi	r2,r2,1
 40073ac:	10000b1e 	bne	r2,zero,40073dc <dropLBlock+0x1ebc>
					shapeLayout = 0;
 40073b0:	e03fc615 	stw	zero,-232(fp)
					randomFirstStart += 2;
 40073b4:	e0bfc217 	ldw	r2,-248(fp)
 40073b8:	10800084 	addi	r2,r2,2
 40073bc:	e0bfc215 	stw	r2,-248(fp)
					randomEnd += 2;
 40073c0:	e0bfc317 	ldw	r2,-244(fp)
 40073c4:	10800084 	addi	r2,r2,2
 40073c8:	e0bfc315 	stw	r2,-244(fp)
					i--;
 40073cc:	e0bfc717 	ldw	r2,-228(fp)
 40073d0:	10bfffc4 	addi	r2,r2,-1
 40073d4:	e0bfc715 	stw	r2,-228(fp)
 40073d8:	00007e06 	br	40075d4 <dropLBlock+0x20b4>
				}else if(shapeLayout == 2 && i > 2 && i < 29
 40073dc:	e0bfc617 	ldw	r2,-232(fp)
 40073e0:	10800098 	cmpnei	r2,r2,2
 40073e4:	10002e1e 	bne	r2,zero,40074a0 <dropLBlock+0x1f80>
 40073e8:	e0bfc717 	ldw	r2,-228(fp)
 40073ec:	108000d0 	cmplti	r2,r2,3
 40073f0:	10002b1e 	bne	r2,zero,40074a0 <dropLBlock+0x1f80>
 40073f4:	e0bfc717 	ldw	r2,-228(fp)
 40073f8:	10800748 	cmpgei	r2,r2,29
 40073fc:	1000281e 	bne	r2,zero,40074a0 <dropLBlock+0x1f80>
						&& grid[i - 2][randomStart] != 1 && grid[i - 2][randomStart + 2] != 1){
 4007400:	e0bfc717 	ldw	r2,-228(fp)
 4007404:	10bfff84 	addi	r2,r2,-2
 4007408:	040100f4 	movhi	r16,1027
 400740c:	84262204 	addi	r16,r16,-26488
 4007410:	01400984 	movi	r5,38
 4007414:	1009883a 	mov	r4,r2
 4007418:	40118340 	call	4011834 <__mulsi3>
 400741c:	1007883a 	mov	r3,r2
 4007420:	e0bfc117 	ldw	r2,-252(fp)
 4007424:	1885883a 	add	r2,r3,r2
 4007428:	1085883a 	add	r2,r2,r2
 400742c:	1085883a 	add	r2,r2,r2
 4007430:	8085883a 	add	r2,r16,r2
 4007434:	10800017 	ldw	r2,0(r2)
 4007438:	10800060 	cmpeqi	r2,r2,1
 400743c:	1000181e 	bne	r2,zero,40074a0 <dropLBlock+0x1f80>
 4007440:	e0bfc717 	ldw	r2,-228(fp)
 4007444:	10ffff84 	addi	r3,r2,-2
 4007448:	e0bfc117 	ldw	r2,-252(fp)
 400744c:	14400084 	addi	r17,r2,2
 4007450:	040100f4 	movhi	r16,1027
 4007454:	84262204 	addi	r16,r16,-26488
 4007458:	01400984 	movi	r5,38
 400745c:	1809883a 	mov	r4,r3
 4007460:	40118340 	call	4011834 <__mulsi3>
 4007464:	1445883a 	add	r2,r2,r17
 4007468:	1085883a 	add	r2,r2,r2
 400746c:	1085883a 	add	r2,r2,r2
 4007470:	8085883a 	add	r2,r16,r2
 4007474:	10800017 	ldw	r2,0(r2)
 4007478:	10800060 	cmpeqi	r2,r2,1
 400747c:	1000081e 	bne	r2,zero,40074a0 <dropLBlock+0x1f80>
					shapeLayout = 1;
 4007480:	00800044 	movi	r2,1
 4007484:	e0bfc615 	stw	r2,-232(fp)
					randomFirstStart = secondEnd;
 4007488:	e0bfc517 	ldw	r2,-236(fp)
 400748c:	e0bfc215 	stw	r2,-248(fp)
					randomEnd -= 2;
 4007490:	e0bfc317 	ldw	r2,-244(fp)
 4007494:	10bfff84 	addi	r2,r2,-2
 4007498:	e0bfc315 	stw	r2,-244(fp)
 400749c:	00004d06 	br	40075d4 <dropLBlock+0x20b4>
				}else if(shapeLayout == 3 && randomStart >= 23 && randomEnd <= 57
 40074a0:	e0bfc617 	ldw	r2,-232(fp)
 40074a4:	108000d8 	cmpnei	r2,r2,3
 40074a8:	10003e1e 	bne	r2,zero,40075a4 <dropLBlock+0x2084>
 40074ac:	e0bfc117 	ldw	r2,-252(fp)
 40074b0:	108005d0 	cmplti	r2,r2,23
 40074b4:	10003b1e 	bne	r2,zero,40075a4 <dropLBlock+0x2084>
 40074b8:	e0bfc317 	ldw	r2,-244(fp)
 40074bc:	10800e88 	cmpgei	r2,r2,58
 40074c0:	1000381e 	bne	r2,zero,40075a4 <dropLBlock+0x2084>
						&& grid[i][randomStart - 1] != 1 && grid[i - 1][randomStart - 1] != 1 && grid[i - 1][randomEnd] != 1){
 40074c4:	e0bfc117 	ldw	r2,-252(fp)
 40074c8:	147fffc4 	addi	r17,r2,-1
 40074cc:	040100f4 	movhi	r16,1027
 40074d0:	84262204 	addi	r16,r16,-26488
 40074d4:	e0bfc717 	ldw	r2,-228(fp)
 40074d8:	01400984 	movi	r5,38
 40074dc:	1009883a 	mov	r4,r2
 40074e0:	40118340 	call	4011834 <__mulsi3>
 40074e4:	1445883a 	add	r2,r2,r17
 40074e8:	1085883a 	add	r2,r2,r2
 40074ec:	1085883a 	add	r2,r2,r2
 40074f0:	8085883a 	add	r2,r16,r2
 40074f4:	10800017 	ldw	r2,0(r2)
 40074f8:	10800060 	cmpeqi	r2,r2,1
 40074fc:	1000291e 	bne	r2,zero,40075a4 <dropLBlock+0x2084>
 4007500:	e0bfc717 	ldw	r2,-228(fp)
 4007504:	10ffffc4 	addi	r3,r2,-1
 4007508:	e0bfc117 	ldw	r2,-252(fp)
 400750c:	147fffc4 	addi	r17,r2,-1
 4007510:	040100f4 	movhi	r16,1027
 4007514:	84262204 	addi	r16,r16,-26488
 4007518:	01400984 	movi	r5,38
 400751c:	1809883a 	mov	r4,r3
 4007520:	40118340 	call	4011834 <__mulsi3>
 4007524:	1445883a 	add	r2,r2,r17
 4007528:	1085883a 	add	r2,r2,r2
 400752c:	1085883a 	add	r2,r2,r2
 4007530:	8085883a 	add	r2,r16,r2
 4007534:	10800017 	ldw	r2,0(r2)
 4007538:	10800060 	cmpeqi	r2,r2,1
 400753c:	1000191e 	bne	r2,zero,40075a4 <dropLBlock+0x2084>
 4007540:	e0bfc717 	ldw	r2,-228(fp)
 4007544:	10bfffc4 	addi	r2,r2,-1
 4007548:	040100f4 	movhi	r16,1027
 400754c:	84262204 	addi	r16,r16,-26488
 4007550:	01400984 	movi	r5,38
 4007554:	1009883a 	mov	r4,r2
 4007558:	40118340 	call	4011834 <__mulsi3>
 400755c:	1007883a 	mov	r3,r2
 4007560:	e0bfc317 	ldw	r2,-244(fp)
 4007564:	1885883a 	add	r2,r3,r2
 4007568:	1085883a 	add	r2,r2,r2
 400756c:	1085883a 	add	r2,r2,r2
 4007570:	8085883a 	add	r2,r16,r2
 4007574:	10800017 	ldw	r2,0(r2)
 4007578:	10800060 	cmpeqi	r2,r2,1
 400757c:	1000091e 	bne	r2,zero,40075a4 <dropLBlock+0x2084>
					shapeLayout = 2;
 4007580:	00800084 	movi	r2,2
 4007584:	e0bfc615 	stw	r2,-232(fp)
					randomStart -= 2;
 4007588:	e0bfc117 	ldw	r2,-252(fp)
 400758c:	10bfff84 	addi	r2,r2,-2
 4007590:	e0bfc115 	stw	r2,-252(fp)
					secondEnd -= 2;
 4007594:	e0bfc517 	ldw	r2,-236(fp)
 4007598:	10bfff84 	addi	r2,r2,-2
 400759c:	e0bfc515 	stw	r2,-236(fp)
 40075a0:	00000c06 	br	40075d4 <dropLBlock+0x20b4>
				}else{
					i++;
 40075a4:	e0bfc717 	ldw	r2,-228(fp)
 40075a8:	10800044 	addi	r2,r2,1
 40075ac:	e0bfc715 	stw	r2,-228(fp)
 40075b0:	00000806 	br	40075d4 <dropLBlock+0x20b4>
				}
			}else if(keycode == 0x2C){
 40075b4:	e0bffd03 	ldbu	r2,-12(fp)
 40075b8:	10800b18 	cmpnei	r2,r2,44
 40075bc:	1000051e 	bne	r2,zero,40075d4 <dropLBlock+0x20b4>
				time = 0;
 40075c0:	e03fc415 	stw	zero,-240(fp)
 40075c4:	00000306 	br	40075d4 <dropLBlock+0x20b4>
        	time = timer;
			if(keycode == 0x51){
				time = timer / 1.5;
			}
			else if(keycode == 0x4F && grid[i-1][randomStart - 1] != 1){
				if(randomEnd != 59){
 40075c8:	0001883a 	nop
 40075cc:	00000106 	br	40075d4 <dropLBlock+0x20b4>
					}

				}
			}
			else if(keycode == 0x50 && grid[i-1][randomEnd + 1] != 1){
				if(randomStart != 21){
 40075d0:	0001883a 	nop
				}
			}else if(keycode == 0x2C){
				time = 0;
			}

        	if(shapeLayout == 0){
 40075d4:	e0bfc617 	ldw	r2,-232(fp)
 40075d8:	1000491e 	bne	r2,zero,4007700 <dropLBlock+0x21e0>
        		for (int j = randomFirstStart; j < randomEnd; j++) {
 40075dc:	e0bfc217 	ldw	r2,-248(fp)
 40075e0:	e0bfe915 	stw	r2,-92(fp)
 40075e4:	00002006 	br	4007668 <dropLBlock+0x2148>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xC4;
 40075e8:	d4200317 	ldw	r16,-32756(gp)
 40075ec:	e0bfc717 	ldw	r2,-228(fp)
 40075f0:	10bfffc4 	addi	r2,r2,-1
 40075f4:	01401404 	movi	r5,80
 40075f8:	1009883a 	mov	r4,r2
 40075fc:	40118340 	call	4011834 <__mulsi3>
 4007600:	1007883a 	mov	r3,r2
 4007604:	e0bfe917 	ldw	r2,-92(fp)
 4007608:	1885883a 	add	r2,r3,r2
 400760c:	1085883a 	add	r2,r2,r2
 4007610:	8085883a 	add	r2,r16,r2
 4007614:	00fff104 	movi	r3,-60
 4007618:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400761c:	d4600317 	ldw	r17,-32756(gp)
 4007620:	e0bfc717 	ldw	r2,-228(fp)
 4007624:	10bfffc4 	addi	r2,r2,-1
 4007628:	01401404 	movi	r5,80
 400762c:	1009883a 	mov	r4,r2
 4007630:	40118340 	call	4011834 <__mulsi3>
 4007634:	1007883a 	mov	r3,r2
 4007638:	e0bfe917 	ldw	r2,-92(fp)
 400763c:	1885883a 	add	r2,r3,r2
 4007640:	1085883a 	add	r2,r2,r2
 4007644:	14000044 	addi	r16,r2,1
 4007648:	e13fe917 	ldw	r4,-92(fp)
 400764c:	400d8600 	call	400d860 <check_col>
 4007650:	1007883a 	mov	r3,r2
 4007654:	8c05883a 	add	r2,r17,r16
 4007658:	10c00005 	stb	r3,0(r2)
			}else if(keycode == 0x2C){
				time = 0;
			}

        	if(shapeLayout == 0){
        		for (int j = randomFirstStart; j < randomEnd; j++) {
 400765c:	e0bfe917 	ldw	r2,-92(fp)
 4007660:	10800044 	addi	r2,r2,1
 4007664:	e0bfe915 	stw	r2,-92(fp)
 4007668:	e0ffe917 	ldw	r3,-92(fp)
 400766c:	e0bfc317 	ldw	r2,-244(fp)
 4007670:	18bfdd16 	blt	r3,r2,40075e8 <__alt_mem_onchip_memory2_0+0xfc002428>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4007674:	e0bfc117 	ldw	r2,-252(fp)
 4007678:	e0bfea15 	stw	r2,-88(fp)
 400767c:	00001c06 	br	40076f0 <dropLBlock+0x21d0>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xC4;
 4007680:	d4200317 	ldw	r16,-32756(gp)
 4007684:	01401404 	movi	r5,80
 4007688:	e13fc717 	ldw	r4,-228(fp)
 400768c:	40118340 	call	4011834 <__mulsi3>
 4007690:	1007883a 	mov	r3,r2
 4007694:	e0bfea17 	ldw	r2,-88(fp)
 4007698:	1885883a 	add	r2,r3,r2
 400769c:	1085883a 	add	r2,r2,r2
 40076a0:	8085883a 	add	r2,r16,r2
 40076a4:	00fff104 	movi	r3,-60
 40076a8:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 40076ac:	d4600317 	ldw	r17,-32756(gp)
 40076b0:	01401404 	movi	r5,80
 40076b4:	e13fc717 	ldw	r4,-228(fp)
 40076b8:	40118340 	call	4011834 <__mulsi3>
 40076bc:	1007883a 	mov	r3,r2
 40076c0:	e0bfea17 	ldw	r2,-88(fp)
 40076c4:	1885883a 	add	r2,r3,r2
 40076c8:	1085883a 	add	r2,r2,r2
 40076cc:	14000044 	addi	r16,r2,1
 40076d0:	e13fea17 	ldw	r4,-88(fp)
 40076d4:	400d8600 	call	400d860 <check_col>
 40076d8:	1007883a 	mov	r3,r2
 40076dc:	8c05883a 	add	r2,r17,r16
 40076e0:	10c00005 	stb	r3,0(r2)
        		for (int j = randomFirstStart; j < randomEnd; j++) {
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 40076e4:	e0bfea17 	ldw	r2,-88(fp)
 40076e8:	10800044 	addi	r2,r2,1
 40076ec:	e0bfea15 	stw	r2,-88(fp)
 40076f0:	e0ffea17 	ldw	r3,-88(fp)
 40076f4:	e0bfc317 	ldw	r2,-244(fp)
 40076f8:	18bfe116 	blt	r3,r2,4007680 <__alt_mem_onchip_memory2_0+0xfc0024c0>
 40076fc:	0000fc06 	br	4007af0 <dropLBlock+0x25d0>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
        	}else if(shapeLayout == 1){
 4007700:	e0bfc617 	ldw	r2,-232(fp)
 4007704:	10800058 	cmpnei	r2,r2,1
 4007708:	1000571e 	bne	r2,zero,4007868 <dropLBlock+0x2348>
        		for(int row = 0; row < 2; row++){
 400770c:	e03feb15 	stw	zero,-84(fp)
 4007710:	00002b06 	br	40077c0 <dropLBlock+0x22a0>
        			for (int j = randomFirstStart; j < randomEnd; j++) {
 4007714:	e0bfc217 	ldw	r2,-248(fp)
 4007718:	e0bfec15 	stw	r2,-80(fp)
 400771c:	00002206 	br	40077a8 <dropLBlock+0x2288>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xC4;
 4007720:	d4200317 	ldw	r16,-32756(gp)
 4007724:	e0ffc717 	ldw	r3,-228(fp)
 4007728:	e0bfeb17 	ldw	r2,-84(fp)
 400772c:	1885c83a 	sub	r2,r3,r2
 4007730:	01401404 	movi	r5,80
 4007734:	1009883a 	mov	r4,r2
 4007738:	40118340 	call	4011834 <__mulsi3>
 400773c:	1007883a 	mov	r3,r2
 4007740:	e0bfec17 	ldw	r2,-80(fp)
 4007744:	1885883a 	add	r2,r3,r2
 4007748:	1085883a 	add	r2,r2,r2
 400774c:	8085883a 	add	r2,r16,r2
 4007750:	00fff104 	movi	r3,-60
 4007754:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 4007758:	d4600317 	ldw	r17,-32756(gp)
 400775c:	e0ffc717 	ldw	r3,-228(fp)
 4007760:	e0bfeb17 	ldw	r2,-84(fp)
 4007764:	1885c83a 	sub	r2,r3,r2
 4007768:	01401404 	movi	r5,80
 400776c:	1009883a 	mov	r4,r2
 4007770:	40118340 	call	4011834 <__mulsi3>
 4007774:	1007883a 	mov	r3,r2
 4007778:	e0bfec17 	ldw	r2,-80(fp)
 400777c:	1885883a 	add	r2,r3,r2
 4007780:	1085883a 	add	r2,r2,r2
 4007784:	14000044 	addi	r16,r2,1
 4007788:	e13fec17 	ldw	r4,-80(fp)
 400778c:	400d8600 	call	400d860 <check_col>
 4007790:	1007883a 	mov	r3,r2
 4007794:	8c05883a 	add	r2,r17,r16
 4007798:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
        	}else if(shapeLayout == 1){
        		for(int row = 0; row < 2; row++){
        			for (int j = randomFirstStart; j < randomEnd; j++) {
 400779c:	e0bfec17 	ldw	r2,-80(fp)
 40077a0:	10800044 	addi	r2,r2,1
 40077a4:	e0bfec15 	stw	r2,-80(fp)
 40077a8:	e0ffec17 	ldw	r3,-80(fp)
 40077ac:	e0bfc317 	ldw	r2,-244(fp)
 40077b0:	18bfdb16 	blt	r3,r2,4007720 <__alt_mem_onchip_memory2_0+0xfc002560>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
        	}else if(shapeLayout == 1){
        		for(int row = 0; row < 2; row++){
 40077b4:	e0bfeb17 	ldw	r2,-84(fp)
 40077b8:	10800044 	addi	r2,r2,1
 40077bc:	e0bfeb15 	stw	r2,-84(fp)
 40077c0:	e0bfeb17 	ldw	r2,-84(fp)
 40077c4:	10800090 	cmplti	r2,r2,2
 40077c8:	103fd21e 	bne	r2,zero,4007714 <__alt_mem_onchip_memory2_0+0xfc002554>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xC4;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
        		}
				for (int j = randomStart; j < randomEnd; j++) {
 40077cc:	e0bfc117 	ldw	r2,-252(fp)
 40077d0:	e0bfed15 	stw	r2,-76(fp)
 40077d4:	00002006 	br	4007858 <dropLBlock+0x2338>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0xC4;
 40077d8:	d4200317 	ldw	r16,-32756(gp)
 40077dc:	e0bfc717 	ldw	r2,-228(fp)
 40077e0:	10bfff84 	addi	r2,r2,-2
 40077e4:	01401404 	movi	r5,80
 40077e8:	1009883a 	mov	r4,r2
 40077ec:	40118340 	call	4011834 <__mulsi3>
 40077f0:	1007883a 	mov	r3,r2
 40077f4:	e0bfed17 	ldw	r2,-76(fp)
 40077f8:	1885883a 	add	r2,r3,r2
 40077fc:	1085883a 	add	r2,r2,r2
 4007800:	8085883a 	add	r2,r16,r2
 4007804:	00fff104 	movi	r3,-60
 4007808:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
 400780c:	d4600317 	ldw	r17,-32756(gp)
 4007810:	e0bfc717 	ldw	r2,-228(fp)
 4007814:	10bfff84 	addi	r2,r2,-2
 4007818:	01401404 	movi	r5,80
 400781c:	1009883a 	mov	r4,r2
 4007820:	40118340 	call	4011834 <__mulsi3>
 4007824:	1007883a 	mov	r3,r2
 4007828:	e0bfed17 	ldw	r2,-76(fp)
 400782c:	1885883a 	add	r2,r3,r2
 4007830:	1085883a 	add	r2,r2,r2
 4007834:	14000044 	addi	r16,r2,1
 4007838:	e13fed17 	ldw	r4,-76(fp)
 400783c:	400d8600 	call	400d860 <check_col>
 4007840:	1007883a 	mov	r3,r2
 4007844:	8c05883a 	add	r2,r17,r16
 4007848:	10c00005 	stb	r3,0(r2)
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xC4;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
        		}
				for (int j = randomStart; j < randomEnd; j++) {
 400784c:	e0bfed17 	ldw	r2,-76(fp)
 4007850:	10800044 	addi	r2,r2,1
 4007854:	e0bfed15 	stw	r2,-76(fp)
 4007858:	e0ffed17 	ldw	r3,-76(fp)
 400785c:	e0bfc317 	ldw	r2,-244(fp)
 4007860:	18bfdd16 	blt	r3,r2,40077d8 <__alt_mem_onchip_memory2_0+0xfc002618>
 4007864:	0000a206 	br	4007af0 <dropLBlock+0x25d0>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
        	}else if(shapeLayout == 2){
 4007868:	e0bfc617 	ldw	r2,-232(fp)
 400786c:	10800098 	cmpnei	r2,r2,2
 4007870:	1000491e 	bne	r2,zero,4007998 <dropLBlock+0x2478>
        		for (int j = randomStart; j < randomEnd; j++) {
 4007874:	e0bfc117 	ldw	r2,-252(fp)
 4007878:	e0bfee15 	stw	r2,-72(fp)
 400787c:	00002006 	br	4007900 <dropLBlock+0x23e0>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xC4;
 4007880:	d4200317 	ldw	r16,-32756(gp)
 4007884:	e0bfc717 	ldw	r2,-228(fp)
 4007888:	10bfffc4 	addi	r2,r2,-1
 400788c:	01401404 	movi	r5,80
 4007890:	1009883a 	mov	r4,r2
 4007894:	40118340 	call	4011834 <__mulsi3>
 4007898:	1007883a 	mov	r3,r2
 400789c:	e0bfee17 	ldw	r2,-72(fp)
 40078a0:	1885883a 	add	r2,r3,r2
 40078a4:	1085883a 	add	r2,r2,r2
 40078a8:	8085883a 	add	r2,r16,r2
 40078ac:	00fff104 	movi	r3,-60
 40078b0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 40078b4:	d4600317 	ldw	r17,-32756(gp)
 40078b8:	e0bfc717 	ldw	r2,-228(fp)
 40078bc:	10bfffc4 	addi	r2,r2,-1
 40078c0:	01401404 	movi	r5,80
 40078c4:	1009883a 	mov	r4,r2
 40078c8:	40118340 	call	4011834 <__mulsi3>
 40078cc:	1007883a 	mov	r3,r2
 40078d0:	e0bfee17 	ldw	r2,-72(fp)
 40078d4:	1885883a 	add	r2,r3,r2
 40078d8:	1085883a 	add	r2,r2,r2
 40078dc:	14000044 	addi	r16,r2,1
 40078e0:	e13fee17 	ldw	r4,-72(fp)
 40078e4:	400d8600 	call	400d860 <check_col>
 40078e8:	1007883a 	mov	r3,r2
 40078ec:	8c05883a 	add	r2,r17,r16
 40078f0:	10c00005 	stb	r3,0(r2)
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i - 2) * 80 + j) * 2 + 1] = check_col(j);
				}
        	}else if(shapeLayout == 2){
        		for (int j = randomStart; j < randomEnd; j++) {
 40078f4:	e0bfee17 	ldw	r2,-72(fp)
 40078f8:	10800044 	addi	r2,r2,1
 40078fc:	e0bfee15 	stw	r2,-72(fp)
 4007900:	e0ffee17 	ldw	r3,-72(fp)
 4007904:	e0bfc317 	ldw	r2,-244(fp)
 4007908:	18bfdd16 	blt	r3,r2,4007880 <__alt_mem_onchip_memory2_0+0xfc0026c0>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
        		for (int j = randomStart; j < secondEnd; j++) {
 400790c:	e0bfc117 	ldw	r2,-252(fp)
 4007910:	e0bfef15 	stw	r2,-68(fp)
 4007914:	00001c06 	br	4007988 <dropLBlock+0x2468>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xC4;
 4007918:	d4200317 	ldw	r16,-32756(gp)
 400791c:	01401404 	movi	r5,80
 4007920:	e13fc717 	ldw	r4,-228(fp)
 4007924:	40118340 	call	4011834 <__mulsi3>
 4007928:	1007883a 	mov	r3,r2
 400792c:	e0bfef17 	ldw	r2,-68(fp)
 4007930:	1885883a 	add	r2,r3,r2
 4007934:	1085883a 	add	r2,r2,r2
 4007938:	8085883a 	add	r2,r16,r2
 400793c:	00fff104 	movi	r3,-60
 4007940:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 4007944:	d4600317 	ldw	r17,-32756(gp)
 4007948:	01401404 	movi	r5,80
 400794c:	e13fc717 	ldw	r4,-228(fp)
 4007950:	40118340 	call	4011834 <__mulsi3>
 4007954:	1007883a 	mov	r3,r2
 4007958:	e0bfef17 	ldw	r2,-68(fp)
 400795c:	1885883a 	add	r2,r3,r2
 4007960:	1085883a 	add	r2,r2,r2
 4007964:	14000044 	addi	r16,r2,1
 4007968:	e13fef17 	ldw	r4,-68(fp)
 400796c:	400d8600 	call	400d860 <check_col>
 4007970:	1007883a 	mov	r3,r2
 4007974:	8c05883a 	add	r2,r17,r16
 4007978:	10c00005 	stb	r3,0(r2)
        		for (int j = randomStart; j < randomEnd; j++) {
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
        		for (int j = randomStart; j < secondEnd; j++) {
 400797c:	e0bfef17 	ldw	r2,-68(fp)
 4007980:	10800044 	addi	r2,r2,1
 4007984:	e0bfef15 	stw	r2,-68(fp)
 4007988:	e0ffef17 	ldw	r3,-68(fp)
 400798c:	e0bfc517 	ldw	r2,-236(fp)
 4007990:	18bfe116 	blt	r3,r2,4007918 <__alt_mem_onchip_memory2_0+0xfc002758>
 4007994:	00005606 	br	4007af0 <dropLBlock+0x25d0>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
        	}else if(shapeLayout == 3){
 4007998:	e0bfc617 	ldw	r2,-232(fp)
 400799c:	108000d8 	cmpnei	r2,r2,3
 40079a0:	1000531e 	bne	r2,zero,4007af0 <dropLBlock+0x25d0>
        		for(int row = 1; row < 3; row++){
 40079a4:	00800044 	movi	r2,1
 40079a8:	e0bff015 	stw	r2,-64(fp)
 40079ac:	00002b06 	br	4007a5c <dropLBlock+0x253c>
					for (int j = randomStart; j < secondEnd; j++) {
 40079b0:	e0bfc117 	ldw	r2,-252(fp)
 40079b4:	e0bff115 	stw	r2,-60(fp)
 40079b8:	00002206 	br	4007a44 <dropLBlock+0x2524>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xC4;
 40079bc:	d4200317 	ldw	r16,-32756(gp)
 40079c0:	e0ffc717 	ldw	r3,-228(fp)
 40079c4:	e0bff017 	ldw	r2,-64(fp)
 40079c8:	1885c83a 	sub	r2,r3,r2
 40079cc:	01401404 	movi	r5,80
 40079d0:	1009883a 	mov	r4,r2
 40079d4:	40118340 	call	4011834 <__mulsi3>
 40079d8:	1007883a 	mov	r3,r2
 40079dc:	e0bff117 	ldw	r2,-60(fp)
 40079e0:	1885883a 	add	r2,r3,r2
 40079e4:	1085883a 	add	r2,r2,r2
 40079e8:	8085883a 	add	r2,r16,r2
 40079ec:	00fff104 	movi	r3,-60
 40079f0:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 40079f4:	d4600317 	ldw	r17,-32756(gp)
 40079f8:	e0ffc717 	ldw	r3,-228(fp)
 40079fc:	e0bff017 	ldw	r2,-64(fp)
 4007a00:	1885c83a 	sub	r2,r3,r2
 4007a04:	01401404 	movi	r5,80
 4007a08:	1009883a 	mov	r4,r2
 4007a0c:	40118340 	call	4011834 <__mulsi3>
 4007a10:	1007883a 	mov	r3,r2
 4007a14:	e0bff117 	ldw	r2,-60(fp)
 4007a18:	1885883a 	add	r2,r3,r2
 4007a1c:	1085883a 	add	r2,r2,r2
 4007a20:	14000044 	addi	r16,r2,1
 4007a24:	e13ff117 	ldw	r4,-60(fp)
 4007a28:	400d8600 	call	400d860 <check_col>
 4007a2c:	1007883a 	mov	r3,r2
 4007a30:	8c05883a 	add	r2,r17,r16
 4007a34:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
        	}else if(shapeLayout == 3){
        		for(int row = 1; row < 3; row++){
					for (int j = randomStart; j < secondEnd; j++) {
 4007a38:	e0bff117 	ldw	r2,-60(fp)
 4007a3c:	10800044 	addi	r2,r2,1
 4007a40:	e0bff115 	stw	r2,-60(fp)
 4007a44:	e0fff117 	ldw	r3,-60(fp)
 4007a48:	e0bfc517 	ldw	r2,-236(fp)
 4007a4c:	18bfdb16 	blt	r3,r2,40079bc <__alt_mem_onchip_memory2_0+0xfc0027fc>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xC4;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
        	}else if(shapeLayout == 3){
        		for(int row = 1; row < 3; row++){
 4007a50:	e0bff017 	ldw	r2,-64(fp)
 4007a54:	10800044 	addi	r2,r2,1
 4007a58:	e0bff015 	stw	r2,-64(fp)
 4007a5c:	e0bff017 	ldw	r2,-64(fp)
 4007a60:	108000d0 	cmplti	r2,r2,3
 4007a64:	103fd21e 	bne	r2,zero,40079b0 <__alt_mem_onchip_memory2_0+0xfc0027f0>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xC4;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4007a68:	e0bfc117 	ldw	r2,-252(fp)
 4007a6c:	e0bff215 	stw	r2,-56(fp)
 4007a70:	00001c06 	br	4007ae4 <dropLBlock+0x25c4>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xC4;
 4007a74:	d4200317 	ldw	r16,-32756(gp)
 4007a78:	01401404 	movi	r5,80
 4007a7c:	e13fc717 	ldw	r4,-228(fp)
 4007a80:	40118340 	call	4011834 <__mulsi3>
 4007a84:	1007883a 	mov	r3,r2
 4007a88:	e0bff217 	ldw	r2,-56(fp)
 4007a8c:	1885883a 	add	r2,r3,r2
 4007a90:	1085883a 	add	r2,r2,r2
 4007a94:	8085883a 	add	r2,r16,r2
 4007a98:	00fff104 	movi	r3,-60
 4007a9c:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 4007aa0:	d4600317 	ldw	r17,-32756(gp)
 4007aa4:	01401404 	movi	r5,80
 4007aa8:	e13fc717 	ldw	r4,-228(fp)
 4007aac:	40118340 	call	4011834 <__mulsi3>
 4007ab0:	1007883a 	mov	r3,r2
 4007ab4:	e0bff217 	ldw	r2,-56(fp)
 4007ab8:	1885883a 	add	r2,r3,r2
 4007abc:	1085883a 	add	r2,r2,r2
 4007ac0:	14000044 	addi	r16,r2,1
 4007ac4:	e13ff217 	ldw	r4,-56(fp)
 4007ac8:	400d8600 	call	400d860 <check_col>
 4007acc:	1007883a 	mov	r3,r2
 4007ad0:	8c05883a 	add	r2,r17,r16
 4007ad4:	10c00005 	stb	r3,0(r2)
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xC4;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4007ad8:	e0bff217 	ldw	r2,-56(fp)
 4007adc:	10800044 	addi	r2,r2,1
 4007ae0:	e0bff215 	stw	r2,-56(fp)
 4007ae4:	e0fff217 	ldw	r3,-56(fp)
 4007ae8:	e0bfc317 	ldw	r2,-244(fp)
 4007aec:	18bfe116 	blt	r3,r2,4007a74 <__alt_mem_onchip_memory2_0+0xfc0028b4>




        }
        count++;
 4007af0:	e0bfc017 	ldw	r2,-256(fp)
 4007af4:	10800044 	addi	r2,r2,1
 4007af8:	e0bfc015 	stw	r2,-256(fp)
        usleep (time);
 4007afc:	e0bfc417 	ldw	r2,-240(fp)
 4007b00:	1009883a 	mov	r4,r2
 4007b04:	40230600 	call	4023060 <usleep>
    int randomEnd = randomStart + 6;
    int time = timer;
    int secondEnd = 0;
    int shapeLayout = 0; // 0 = default, 1 = 1 left,  2 = 2 left....
    checkEndGame(randomStart, randomEnd, 2);
    for (int i = 2; i < 30; i++) {
 4007b08:	e0bfc717 	ldw	r2,-228(fp)
 4007b0c:	10800044 	addi	r2,r2,1
 4007b10:	e0bfc715 	stw	r2,-228(fp)
 4007b14:	e0bfc717 	ldw	r2,-228(fp)
 4007b18:	10800790 	cmplti	r2,r2,30
 4007b1c:	1036ab1e 	bne	r2,zero,40055cc <__alt_mem_onchip_memory2_0+0xfc00040c>
        }
        count++;
        usleep (time);
    }

    if(shapeLayout == 0){
 4007b20:	e0bfc617 	ldw	r2,-232(fp)
 4007b24:	1000331e 	bne	r2,zero,4007bf4 <dropLBlock+0x26d4>
		for (int j = randomFirstStart; j < randomEnd; j++) {
 4007b28:	e0bfc217 	ldw	r2,-248(fp)
 4007b2c:	e0bff315 	stw	r2,-52(fp)
 4007b30:	00001306 	br	4007b80 <dropLBlock+0x2660>
	//
			grid[28][j] = 1;
 4007b34:	008100f4 	movhi	r2,1027
 4007b38:	10a62204 	addi	r2,r2,-26488
 4007b3c:	e0fff317 	ldw	r3,-52(fp)
 4007b40:	18c10a04 	addi	r3,r3,1064
 4007b44:	18c7883a 	add	r3,r3,r3
 4007b48:	18c7883a 	add	r3,r3,r3
 4007b4c:	10c5883a 	add	r2,r2,r3
 4007b50:	00c00044 	movi	r3,1
 4007b54:	10c00015 	stw	r3,0(r2)
			rowCount[28]++;
 4007b58:	008100f4 	movhi	r2,1027
 4007b5c:	10a60404 	addi	r2,r2,-26608
 4007b60:	10801c17 	ldw	r2,112(r2)
 4007b64:	10c00044 	addi	r3,r2,1
 4007b68:	008100f4 	movhi	r2,1027
 4007b6c:	10a60404 	addi	r2,r2,-26608
 4007b70:	10c01c15 	stw	r3,112(r2)
        count++;
        usleep (time);
    }

    if(shapeLayout == 0){
		for (int j = randomFirstStart; j < randomEnd; j++) {
 4007b74:	e0bff317 	ldw	r2,-52(fp)
 4007b78:	10800044 	addi	r2,r2,1
 4007b7c:	e0bff315 	stw	r2,-52(fp)
 4007b80:	e0fff317 	ldw	r3,-52(fp)
 4007b84:	e0bfc317 	ldw	r2,-244(fp)
 4007b88:	18bfea16 	blt	r3,r2,4007b34 <__alt_mem_onchip_memory2_0+0xfc002974>
	//
			grid[28][j] = 1;
			rowCount[28]++;
		}
		for (int j = randomStart; j < randomEnd; j++) {
 4007b8c:	e0bfc117 	ldw	r2,-252(fp)
 4007b90:	e0bff415 	stw	r2,-48(fp)
 4007b94:	00001306 	br	4007be4 <dropLBlock+0x26c4>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[29][j] = 1;
 4007b98:	008100f4 	movhi	r2,1027
 4007b9c:	10a62204 	addi	r2,r2,-26488
 4007ba0:	e0fff417 	ldw	r3,-48(fp)
 4007ba4:	18c11384 	addi	r3,r3,1102
 4007ba8:	18c7883a 	add	r3,r3,r3
 4007bac:	18c7883a 	add	r3,r3,r3
 4007bb0:	10c5883a 	add	r2,r2,r3
 4007bb4:	00c00044 	movi	r3,1
 4007bb8:	10c00015 	stw	r3,0(r2)
			rowCount[29]++;
 4007bbc:	008100f4 	movhi	r2,1027
 4007bc0:	10a60404 	addi	r2,r2,-26608
 4007bc4:	10801d17 	ldw	r2,116(r2)
 4007bc8:	10c00044 	addi	r3,r2,1
 4007bcc:	008100f4 	movhi	r2,1027
 4007bd0:	10a60404 	addi	r2,r2,-26608
 4007bd4:	10c01d15 	stw	r3,116(r2)
		for (int j = randomFirstStart; j < randomEnd; j++) {
	//
			grid[28][j] = 1;
			rowCount[28]++;
		}
		for (int j = randomStart; j < randomEnd; j++) {
 4007bd8:	e0bff417 	ldw	r2,-48(fp)
 4007bdc:	10800044 	addi	r2,r2,1
 4007be0:	e0bff415 	stw	r2,-48(fp)
 4007be4:	e0fff417 	ldw	r3,-48(fp)
 4007be8:	e0bfc317 	ldw	r2,-244(fp)
 4007bec:	18bfea16 	blt	r3,r2,4007b98 <__alt_mem_onchip_memory2_0+0xfc0029d8>
 4007bf0:	0000d206 	br	4007f3c <dropLBlock+0x2a1c>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
 4007bf4:	e0bfc617 	ldw	r2,-232(fp)
 4007bf8:	10800058 	cmpnei	r2,r2,1
 4007bfc:	10004b1e 	bne	r2,zero,4007d2c <dropLBlock+0x280c>
		for(int row = 0; row < 2; row++){
 4007c00:	e03ff515 	stw	zero,-44(fp)
 4007c04:	00002c06 	br	4007cb8 <dropLBlock+0x2798>
			for (int j = randomFirstStart; j < randomEnd; j++) {
 4007c08:	e0bfc217 	ldw	r2,-248(fp)
 4007c0c:	e0bff615 	stw	r2,-40(fp)
 4007c10:	00002306 	br	4007ca0 <dropLBlock+0x2780>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
				grid[29 - row][j] = 1;
 4007c14:	00c00744 	movi	r3,29
 4007c18:	e0bff517 	ldw	r2,-44(fp)
 4007c1c:	1885c83a 	sub	r2,r3,r2
 4007c20:	040100f4 	movhi	r16,1027
 4007c24:	84262204 	addi	r16,r16,-26488
 4007c28:	01400984 	movi	r5,38
 4007c2c:	1009883a 	mov	r4,r2
 4007c30:	40118340 	call	4011834 <__mulsi3>
 4007c34:	1007883a 	mov	r3,r2
 4007c38:	e0bff617 	ldw	r2,-40(fp)
 4007c3c:	1885883a 	add	r2,r3,r2
 4007c40:	1085883a 	add	r2,r2,r2
 4007c44:	1085883a 	add	r2,r2,r2
 4007c48:	8085883a 	add	r2,r16,r2
 4007c4c:	00c00044 	movi	r3,1
 4007c50:	10c00015 	stw	r3,0(r2)
				rowCount[29 - row]++;
 4007c54:	00c00744 	movi	r3,29
 4007c58:	e0bff517 	ldw	r2,-44(fp)
 4007c5c:	1885c83a 	sub	r2,r3,r2
 4007c60:	00c100f4 	movhi	r3,1027
 4007c64:	18e60404 	addi	r3,r3,-26608
 4007c68:	1089883a 	add	r4,r2,r2
 4007c6c:	2109883a 	add	r4,r4,r4
 4007c70:	1907883a 	add	r3,r3,r4
 4007c74:	18c00017 	ldw	r3,0(r3)
 4007c78:	19000044 	addi	r4,r3,1
 4007c7c:	00c100f4 	movhi	r3,1027
 4007c80:	18e60404 	addi	r3,r3,-26608
 4007c84:	1085883a 	add	r2,r2,r2
 4007c88:	1085883a 	add	r2,r2,r2
 4007c8c:	1885883a 	add	r2,r3,r2
 4007c90:	11000015 	stw	r4,0(r2)
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
		for(int row = 0; row < 2; row++){
			for (int j = randomFirstStart; j < randomEnd; j++) {
 4007c94:	e0bff617 	ldw	r2,-40(fp)
 4007c98:	10800044 	addi	r2,r2,1
 4007c9c:	e0bff615 	stw	r2,-40(fp)
 4007ca0:	e0fff617 	ldw	r3,-40(fp)
 4007ca4:	e0bfc317 	ldw	r2,-244(fp)
 4007ca8:	18bfda16 	blt	r3,r2,4007c14 <__alt_mem_onchip_memory2_0+0xfc002a54>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
		for(int row = 0; row < 2; row++){
 4007cac:	e0bff517 	ldw	r2,-44(fp)
 4007cb0:	10800044 	addi	r2,r2,1
 4007cb4:	e0bff515 	stw	r2,-44(fp)
 4007cb8:	e0bff517 	ldw	r2,-44(fp)
 4007cbc:	10800090 	cmplti	r2,r2,2
 4007cc0:	103fd11e 	bne	r2,zero,4007c08 <__alt_mem_onchip_memory2_0+0xfc002a48>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
				grid[29 - row][j] = 1;
				rowCount[29 - row]++;
			}
		}
		for (int j = randomStart; j < randomEnd; j++) {
 4007cc4:	e0bfc117 	ldw	r2,-252(fp)
 4007cc8:	e0bff715 	stw	r2,-36(fp)
 4007ccc:	00001306 	br	4007d1c <dropLBlock+0x27fc>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[27][j] = 1;
 4007cd0:	008100f4 	movhi	r2,1027
 4007cd4:	10a62204 	addi	r2,r2,-26488
 4007cd8:	e0fff717 	ldw	r3,-36(fp)
 4007cdc:	18c10084 	addi	r3,r3,1026
 4007ce0:	18c7883a 	add	r3,r3,r3
 4007ce4:	18c7883a 	add	r3,r3,r3
 4007ce8:	10c5883a 	add	r2,r2,r3
 4007cec:	00c00044 	movi	r3,1
 4007cf0:	10c00015 	stw	r3,0(r2)
			rowCount[27]++;
 4007cf4:	008100f4 	movhi	r2,1027
 4007cf8:	10a60404 	addi	r2,r2,-26608
 4007cfc:	10801b17 	ldw	r2,108(r2)
 4007d00:	10c00044 	addi	r3,r2,1
 4007d04:	008100f4 	movhi	r2,1027
 4007d08:	10a60404 	addi	r2,r2,-26608
 4007d0c:	10c01b15 	stw	r3,108(r2)
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
				grid[29 - row][j] = 1;
				rowCount[29 - row]++;
			}
		}
		for (int j = randomStart; j < randomEnd; j++) {
 4007d10:	e0bff717 	ldw	r2,-36(fp)
 4007d14:	10800044 	addi	r2,r2,1
 4007d18:	e0bff715 	stw	r2,-36(fp)
 4007d1c:	e0fff717 	ldw	r3,-36(fp)
 4007d20:	e0bfc317 	ldw	r2,-244(fp)
 4007d24:	18bfea16 	blt	r3,r2,4007cd0 <__alt_mem_onchip_memory2_0+0xfc002b10>
 4007d28:	00008406 	br	4007f3c <dropLBlock+0x2a1c>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[27][j] = 1;
			rowCount[27]++;
		}
	}else if(shapeLayout == 2){
 4007d2c:	e0bfc617 	ldw	r2,-232(fp)
 4007d30:	10800098 	cmpnei	r2,r2,2
 4007d34:	1000331e 	bne	r2,zero,4007e04 <dropLBlock+0x28e4>
		for (int j = randomStart; j < randomEnd; j++) {
 4007d38:	e0bfc117 	ldw	r2,-252(fp)
 4007d3c:	e0bff815 	stw	r2,-32(fp)
 4007d40:	00001306 	br	4007d90 <dropLBlock+0x2870>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[28][j] = 1;
 4007d44:	008100f4 	movhi	r2,1027
 4007d48:	10a62204 	addi	r2,r2,-26488
 4007d4c:	e0fff817 	ldw	r3,-32(fp)
 4007d50:	18c10a04 	addi	r3,r3,1064
 4007d54:	18c7883a 	add	r3,r3,r3
 4007d58:	18c7883a 	add	r3,r3,r3
 4007d5c:	10c5883a 	add	r2,r2,r3
 4007d60:	00c00044 	movi	r3,1
 4007d64:	10c00015 	stw	r3,0(r2)
			rowCount[28]++;
 4007d68:	008100f4 	movhi	r2,1027
 4007d6c:	10a60404 	addi	r2,r2,-26608
 4007d70:	10801c17 	ldw	r2,112(r2)
 4007d74:	10c00044 	addi	r3,r2,1
 4007d78:	008100f4 	movhi	r2,1027
 4007d7c:	10a60404 	addi	r2,r2,-26608
 4007d80:	10c01c15 	stw	r3,112(r2)
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[27][j] = 1;
			rowCount[27]++;
		}
	}else if(shapeLayout == 2){
		for (int j = randomStart; j < randomEnd; j++) {
 4007d84:	e0bff817 	ldw	r2,-32(fp)
 4007d88:	10800044 	addi	r2,r2,1
 4007d8c:	e0bff815 	stw	r2,-32(fp)
 4007d90:	e0fff817 	ldw	r3,-32(fp)
 4007d94:	e0bfc317 	ldw	r2,-244(fp)
 4007d98:	18bfea16 	blt	r3,r2,4007d44 <__alt_mem_onchip_memory2_0+0xfc002b84>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[28][j] = 1;
			rowCount[28]++;
		}
		for (int j = randomStart; j < secondEnd; j++) {
 4007d9c:	e0bfc117 	ldw	r2,-252(fp)
 4007da0:	e0bff915 	stw	r2,-28(fp)
 4007da4:	00001306 	br	4007df4 <dropLBlock+0x28d4>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[29][j] = 1;
 4007da8:	008100f4 	movhi	r2,1027
 4007dac:	10a62204 	addi	r2,r2,-26488
 4007db0:	e0fff917 	ldw	r3,-28(fp)
 4007db4:	18c11384 	addi	r3,r3,1102
 4007db8:	18c7883a 	add	r3,r3,r3
 4007dbc:	18c7883a 	add	r3,r3,r3
 4007dc0:	10c5883a 	add	r2,r2,r3
 4007dc4:	00c00044 	movi	r3,1
 4007dc8:	10c00015 	stw	r3,0(r2)
			rowCount[29]++;
 4007dcc:	008100f4 	movhi	r2,1027
 4007dd0:	10a60404 	addi	r2,r2,-26608
 4007dd4:	10801d17 	ldw	r2,116(r2)
 4007dd8:	10c00044 	addi	r3,r2,1
 4007ddc:	008100f4 	movhi	r2,1027
 4007de0:	10a60404 	addi	r2,r2,-26608
 4007de4:	10c01d15 	stw	r3,116(r2)
		for (int j = randomStart; j < randomEnd; j++) {
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[28][j] = 1;
			rowCount[28]++;
		}
		for (int j = randomStart; j < secondEnd; j++) {
 4007de8:	e0bff917 	ldw	r2,-28(fp)
 4007dec:	10800044 	addi	r2,r2,1
 4007df0:	e0bff915 	stw	r2,-28(fp)
 4007df4:	e0fff917 	ldw	r3,-28(fp)
 4007df8:	e0bfc517 	ldw	r2,-236(fp)
 4007dfc:	18bfea16 	blt	r3,r2,4007da8 <__alt_mem_onchip_memory2_0+0xfc002be8>
 4007e00:	00004e06 	br	4007f3c <dropLBlock+0x2a1c>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 3){
 4007e04:	e0bfc617 	ldw	r2,-232(fp)
 4007e08:	108000d8 	cmpnei	r2,r2,3
 4007e0c:	10004b1e 	bne	r2,zero,4007f3c <dropLBlock+0x2a1c>
		for(int row = 1; row < 3; row++){
 4007e10:	00800044 	movi	r2,1
 4007e14:	e0bffa15 	stw	r2,-24(fp)
 4007e18:	00002c06 	br	4007ecc <dropLBlock+0x29ac>
			for (int j = randomStart; j < secondEnd; j++) {
 4007e1c:	e0bfc117 	ldw	r2,-252(fp)
 4007e20:	e0bffb15 	stw	r2,-20(fp)
 4007e24:	00002306 	br	4007eb4 <dropLBlock+0x2994>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
				grid[29 - row][j] = 1;
 4007e28:	00c00744 	movi	r3,29
 4007e2c:	e0bffa17 	ldw	r2,-24(fp)
 4007e30:	1885c83a 	sub	r2,r3,r2
 4007e34:	040100f4 	movhi	r16,1027
 4007e38:	84262204 	addi	r16,r16,-26488
 4007e3c:	01400984 	movi	r5,38
 4007e40:	1009883a 	mov	r4,r2
 4007e44:	40118340 	call	4011834 <__mulsi3>
 4007e48:	1007883a 	mov	r3,r2
 4007e4c:	e0bffb17 	ldw	r2,-20(fp)
 4007e50:	1885883a 	add	r2,r3,r2
 4007e54:	1085883a 	add	r2,r2,r2
 4007e58:	1085883a 	add	r2,r2,r2
 4007e5c:	8085883a 	add	r2,r16,r2
 4007e60:	00c00044 	movi	r3,1
 4007e64:	10c00015 	stw	r3,0(r2)
				rowCount[29 - row]++;
 4007e68:	00c00744 	movi	r3,29
 4007e6c:	e0bffa17 	ldw	r2,-24(fp)
 4007e70:	1885c83a 	sub	r2,r3,r2
 4007e74:	00c100f4 	movhi	r3,1027
 4007e78:	18e60404 	addi	r3,r3,-26608
 4007e7c:	1089883a 	add	r4,r2,r2
 4007e80:	2109883a 	add	r4,r4,r4
 4007e84:	1907883a 	add	r3,r3,r4
 4007e88:	18c00017 	ldw	r3,0(r3)
 4007e8c:	19000044 	addi	r4,r3,1
 4007e90:	00c100f4 	movhi	r3,1027
 4007e94:	18e60404 	addi	r3,r3,-26608
 4007e98:	1085883a 	add	r2,r2,r2
 4007e9c:	1085883a 	add	r2,r2,r2
 4007ea0:	1885883a 	add	r2,r3,r2
 4007ea4:	11000015 	stw	r4,0(r2)
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 3){
		for(int row = 1; row < 3; row++){
			for (int j = randomStart; j < secondEnd; j++) {
 4007ea8:	e0bffb17 	ldw	r2,-20(fp)
 4007eac:	10800044 	addi	r2,r2,1
 4007eb0:	e0bffb15 	stw	r2,-20(fp)
 4007eb4:	e0fffb17 	ldw	r3,-20(fp)
 4007eb8:	e0bfc517 	ldw	r2,-236(fp)
 4007ebc:	18bfda16 	blt	r3,r2,4007e28 <__alt_mem_onchip_memory2_0+0xfc002c68>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 3){
		for(int row = 1; row < 3; row++){
 4007ec0:	e0bffa17 	ldw	r2,-24(fp)
 4007ec4:	10800044 	addi	r2,r2,1
 4007ec8:	e0bffa15 	stw	r2,-24(fp)
 4007ecc:	e0bffa17 	ldw	r2,-24(fp)
 4007ed0:	108000d0 	cmplti	r2,r2,3
 4007ed4:	103fd11e 	bne	r2,zero,4007e1c <__alt_mem_onchip_memory2_0+0xfc002c5c>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
				grid[29 - row][j] = 1;
				rowCount[29 - row]++;
			}
		}
		for (int j = randomStart; j < randomEnd; j++) {
 4007ed8:	e0bfc117 	ldw	r2,-252(fp)
 4007edc:	e0bffc15 	stw	r2,-16(fp)
 4007ee0:	00001306 	br	4007f30 <dropLBlock+0x2a10>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[29][j] = 1;
 4007ee4:	008100f4 	movhi	r2,1027
 4007ee8:	10a62204 	addi	r2,r2,-26488
 4007eec:	e0fffc17 	ldw	r3,-16(fp)
 4007ef0:	18c11384 	addi	r3,r3,1102
 4007ef4:	18c7883a 	add	r3,r3,r3
 4007ef8:	18c7883a 	add	r3,r3,r3
 4007efc:	10c5883a 	add	r2,r2,r3
 4007f00:	00c00044 	movi	r3,1
 4007f04:	10c00015 	stw	r3,0(r2)
			rowCount[29]++;
 4007f08:	008100f4 	movhi	r2,1027
 4007f0c:	10a60404 	addi	r2,r2,-26608
 4007f10:	10801d17 	ldw	r2,116(r2)
 4007f14:	10c00044 	addi	r3,r2,1
 4007f18:	008100f4 	movhi	r2,1027
 4007f1c:	10a60404 	addi	r2,r2,-26608
 4007f20:	10c01d15 	stw	r3,116(r2)
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
				grid[29 - row][j] = 1;
				rowCount[29 - row]++;
			}
		}
		for (int j = randomStart; j < randomEnd; j++) {
 4007f24:	e0bffc17 	ldw	r2,-16(fp)
 4007f28:	10800044 	addi	r2,r2,1
 4007f2c:	e0bffc15 	stw	r2,-16(fp)
 4007f30:	e0fffc17 	ldw	r3,-16(fp)
 4007f34:	e0bfc317 	ldw	r2,-244(fp)
 4007f38:	18bfea16 	blt	r3,r2,4007ee4 <__alt_mem_onchip_memory2_0+0xfc002d24>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}
}
 4007f3c:	e6fffe04 	addi	sp,fp,-8
 4007f40:	dfc00317 	ldw	ra,12(sp)
 4007f44:	df000217 	ldw	fp,8(sp)
 4007f48:	dc400117 	ldw	r17,4(sp)
 4007f4c:	dc000017 	ldw	r16,0(sp)
 4007f50:	dec00404 	addi	sp,sp,16
 4007f54:	f800283a 	ret

04007f58 <dropTBlock>:

void dropTBlock() {
 4007f58:	deffba04 	addi	sp,sp,-280
 4007f5c:	dfc04515 	stw	ra,276(sp)
 4007f60:	df004415 	stw	fp,272(sp)
 4007f64:	dc404315 	stw	r17,268(sp)
 4007f68:	dc004215 	stw	r16,264(sp)
 4007f6c:	df004404 	addi	fp,sp,272
    int count = 0;
 4007f70:	e03fbc15 	stw	zero,-272(fp)
    BYTE keycode;
    int randomStart = rand()%30+21;
 4007f74:	40141e00 	call	40141e0 <rand>
 4007f78:	01400784 	movi	r5,30
 4007f7c:	1009883a 	mov	r4,r2
 4007f80:	40117040 	call	4011704 <__modsi3>
 4007f84:	10800544 	addi	r2,r2,21
 4007f88:	e0bfbd15 	stw	r2,-268(fp)
    if(randomStart % 2 == 0){
 4007f8c:	e0bfbd17 	ldw	r2,-268(fp)
 4007f90:	1080004c 	andi	r2,r2,1
 4007f94:	10000a1e 	bne	r2,zero,4007fc0 <dropTBlock+0x68>
    	if(randomStart == 52){
 4007f98:	e0bfbd17 	ldw	r2,-268(fp)
 4007f9c:	10800d18 	cmpnei	r2,r2,52
 4007fa0:	1000041e 	bne	r2,zero,4007fb4 <dropTBlock+0x5c>
    		randomStart--;
 4007fa4:	e0bfbd17 	ldw	r2,-268(fp)
 4007fa8:	10bfffc4 	addi	r2,r2,-1
 4007fac:	e0bfbd15 	stw	r2,-268(fp)
 4007fb0:	00000306 	br	4007fc0 <dropTBlock+0x68>
    	}else{
    		randomStart++;
 4007fb4:	e0bfbd17 	ldw	r2,-268(fp)
 4007fb8:	10800044 	addi	r2,r2,1
 4007fbc:	e0bfbd15 	stw	r2,-268(fp)
    	}
    }
    int randomFirstStart = randomStart + 2;
 4007fc0:	e0bfbd17 	ldw	r2,-268(fp)
 4007fc4:	10800084 	addi	r2,r2,2
 4007fc8:	e0bfbe15 	stw	r2,-264(fp)
	int randomFirstEnd = randomStart + 4;
 4007fcc:	e0bfbd17 	ldw	r2,-268(fp)
 4007fd0:	10800104 	addi	r2,r2,4
 4007fd4:	e0bfbf15 	stw	r2,-260(fp)
	int randomEnd = randomStart + 6;
 4007fd8:	e0bfbd17 	ldw	r2,-268(fp)
 4007fdc:	10800184 	addi	r2,r2,6
 4007fe0:	e0bfc015 	stw	r2,-256(fp)
	int time = timer;
 4007fe4:	d0a80117 	ldw	r2,-24572(gp)
 4007fe8:	e0bfc115 	stw	r2,-252(fp)
	int shapeLayout = 0;
 4007fec:	e03fc215 	stw	zero,-248(fp)
	checkEndGame(randomStart, randomEnd, 2);
 4007ff0:	01800084 	movi	r6,2
 4007ff4:	e17fc017 	ldw	r5,-256(fp)
 4007ff8:	e13fbd17 	ldw	r4,-268(fp)
 4007ffc:	400dfd80 	call	400dfd8 <checkEndGame>
    for (int i = 2; i < 30; i++) {
 4008000:	00800084 	movi	r2,2
 4008004:	e0bfc315 	stw	r2,-244(fp)
 4008008:	0008e306 	br	400a398 <dropTBlock+0x2440>
        if (count == 0) {
 400800c:	e0bfbc17 	ldw	r2,-272(fp)
 4008010:	1000491e 	bne	r2,zero,4008138 <dropTBlock+0x1e0>
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;


        	for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4008014:	e0bfbe17 	ldw	r2,-264(fp)
 4008018:	e0bfc415 	stw	r2,-240(fp)
 400801c:	00002006 	br	40080a0 <dropTBlock+0x148>
//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
 4008020:	d4200317 	ldw	r16,-32756(gp)
 4008024:	e0bfc317 	ldw	r2,-244(fp)
 4008028:	10bfffc4 	addi	r2,r2,-1
 400802c:	01401404 	movi	r5,80
 4008030:	1009883a 	mov	r4,r2
 4008034:	40118340 	call	4011834 <__mulsi3>
 4008038:	1007883a 	mov	r3,r2
 400803c:	e0bfc417 	ldw	r2,-240(fp)
 4008040:	1885883a 	add	r2,r3,r2
 4008044:	1085883a 	add	r2,r2,r2
 4008048:	8085883a 	add	r2,r16,r2
 400804c:	00c01d84 	movi	r3,118
 4008050:	10c00005 	stb	r3,0(r2)
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
 4008054:	d4200317 	ldw	r16,-32756(gp)
 4008058:	e0bfc317 	ldw	r2,-244(fp)
 400805c:	10bfffc4 	addi	r2,r2,-1
 4008060:	01401404 	movi	r5,80
 4008064:	1009883a 	mov	r4,r2
 4008068:	40118340 	call	4011834 <__mulsi3>
 400806c:	1007883a 	mov	r3,r2
 4008070:	e0bfc417 	ldw	r2,-240(fp)
 4008074:	1885883a 	add	r2,r3,r2
 4008078:	1085883a 	add	r2,r2,r2
 400807c:	1023883a 	mov	r17,r2
 4008080:	e13fc417 	ldw	r4,-240(fp)
 4008084:	400d8600 	call	400d860 <check_col>
 4008088:	1007883a 	mov	r3,r2
 400808c:	8445883a 	add	r2,r16,r17
 4008090:	10c00005 	stb	r3,0(r2)
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;


        	for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4008094:	e0bfc417 	ldw	r2,-240(fp)
 4008098:	10800044 	addi	r2,r2,1
 400809c:	e0bfc415 	stw	r2,-240(fp)
 40080a0:	e0ffc417 	ldw	r3,-240(fp)
 40080a4:	e0bfbf17 	ldw	r2,-260(fp)
 40080a8:	18bfdd16 	blt	r3,r2,4008020 <__alt_mem_onchip_memory2_0+0xfc002e60>
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);

        	}

        	for (int j = randomStart; j < randomEnd; j++) {
 40080ac:	e0bfbd17 	ldw	r2,-268(fp)
 40080b0:	e0bfc515 	stw	r2,-236(fp)
 40080b4:	00001c06 	br	4008128 <dropTBlock+0x1d0>
				vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x76;
 40080b8:	d4200317 	ldw	r16,-32756(gp)
 40080bc:	01401404 	movi	r5,80
 40080c0:	e13fc317 	ldw	r4,-244(fp)
 40080c4:	40118340 	call	4011834 <__mulsi3>
 40080c8:	1007883a 	mov	r3,r2
 40080cc:	e0bfc517 	ldw	r2,-236(fp)
 40080d0:	1885883a 	add	r2,r3,r2
 40080d4:	1085883a 	add	r2,r2,r2
 40080d8:	8085883a 	add	r2,r16,r2
 40080dc:	00c01d84 	movi	r3,118
 40080e0:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[((i) * 80 + j) * 2] = check_col(j);
 40080e4:	d4200317 	ldw	r16,-32756(gp)
 40080e8:	01401404 	movi	r5,80
 40080ec:	e13fc317 	ldw	r4,-244(fp)
 40080f0:	40118340 	call	4011834 <__mulsi3>
 40080f4:	1007883a 	mov	r3,r2
 40080f8:	e0bfc517 	ldw	r2,-236(fp)
 40080fc:	1885883a 	add	r2,r3,r2
 4008100:	1085883a 	add	r2,r2,r2
 4008104:	1023883a 	mov	r17,r2
 4008108:	e13fc517 	ldw	r4,-236(fp)
 400810c:	400d8600 	call	400d860 <check_col>
 4008110:	1007883a 	mov	r3,r2
 4008114:	8445883a 	add	r2,r16,r17
 4008118:	10c00005 	stb	r3,0(r2)
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);

        	}

        	for (int j = randomStart; j < randomEnd; j++) {
 400811c:	e0bfc517 	ldw	r2,-236(fp)
 4008120:	10800044 	addi	r2,r2,1
 4008124:	e0bfc515 	stw	r2,-236(fp)
 4008128:	e0ffc517 	ldw	r3,-236(fp)
 400812c:	e0bfc017 	ldw	r2,-256(fp)
 4008130:	18bfe116 	blt	r3,r2,40080b8 <__alt_mem_onchip_memory2_0+0xfc002ef8>
 4008134:	00088f06 	br	400a374 <dropTBlock+0x241c>



        } else {

        	if(shapeLayout == 0){
 4008138:	e0bfc217 	ldw	r2,-248(fp)
 400813c:	1000681e 	bne	r2,zero,40082e0 <dropTBlock+0x388>
				for (int j = randomStart; j < randomEnd; j++) {
 4008140:	e0bfbd17 	ldw	r2,-268(fp)
 4008144:	e0bfc615 	stw	r2,-232(fp)
 4008148:	00006106 	br	40082d0 <dropTBlock+0x378>
					if(grid[i][j] == 1){
 400814c:	040100f4 	movhi	r16,1027
 4008150:	84262204 	addi	r16,r16,-26488
 4008154:	e0bfc317 	ldw	r2,-244(fp)
 4008158:	01400984 	movi	r5,38
 400815c:	1009883a 	mov	r4,r2
 4008160:	40118340 	call	4011834 <__mulsi3>
 4008164:	1007883a 	mov	r3,r2
 4008168:	e0bfc617 	ldw	r2,-232(fp)
 400816c:	1885883a 	add	r2,r3,r2
 4008170:	1085883a 	add	r2,r2,r2
 4008174:	1085883a 	add	r2,r2,r2
 4008178:	8085883a 	add	r2,r16,r2
 400817c:	10800017 	ldw	r2,0(r2)
 4008180:	10800058 	cmpnei	r2,r2,1
 4008184:	10004f1e 	bne	r2,zero,40082c4 <dropTBlock+0x36c>
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4008188:	e0bfbe17 	ldw	r2,-264(fp)
 400818c:	e0bfc715 	stw	r2,-228(fp)
 4008190:	00002106 	br	4008218 <dropTBlock+0x2c0>
			        		grid[i - 2][j] = 1;
 4008194:	e0bfc317 	ldw	r2,-244(fp)
 4008198:	10bfff84 	addi	r2,r2,-2
 400819c:	040100f4 	movhi	r16,1027
 40081a0:	84262204 	addi	r16,r16,-26488
 40081a4:	01400984 	movi	r5,38
 40081a8:	1009883a 	mov	r4,r2
 40081ac:	40118340 	call	4011834 <__mulsi3>
 40081b0:	1007883a 	mov	r3,r2
 40081b4:	e0bfc717 	ldw	r2,-228(fp)
 40081b8:	1885883a 	add	r2,r3,r2
 40081bc:	1085883a 	add	r2,r2,r2
 40081c0:	1085883a 	add	r2,r2,r2
 40081c4:	8085883a 	add	r2,r16,r2
 40081c8:	00c00044 	movi	r3,1
 40081cc:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 2]++;
 40081d0:	e0bfc317 	ldw	r2,-244(fp)
 40081d4:	10bfff84 	addi	r2,r2,-2
 40081d8:	00c100f4 	movhi	r3,1027
 40081dc:	18e60404 	addi	r3,r3,-26608
 40081e0:	1089883a 	add	r4,r2,r2
 40081e4:	2109883a 	add	r4,r4,r4
 40081e8:	1907883a 	add	r3,r3,r4
 40081ec:	18c00017 	ldw	r3,0(r3)
 40081f0:	19000044 	addi	r4,r3,1
 40081f4:	00c100f4 	movhi	r3,1027
 40081f8:	18e60404 	addi	r3,r3,-26608
 40081fc:	1085883a 	add	r2,r2,r2
 4008200:	1085883a 	add	r2,r2,r2
 4008204:	1885883a 	add	r2,r3,r2
 4008208:	11000015 	stw	r4,0(r2)
        } else {

        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
					if(grid[i][j] == 1){
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400820c:	e0bfc717 	ldw	r2,-228(fp)
 4008210:	10800044 	addi	r2,r2,1
 4008214:	e0bfc715 	stw	r2,-228(fp)
 4008218:	e0ffc717 	ldw	r3,-228(fp)
 400821c:	e0bfbf17 	ldw	r2,-260(fp)
 4008220:	18bfdc16 	blt	r3,r2,4008194 <__alt_mem_onchip_memory2_0+0xfc002fd4>
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;

						}

						for (int j = randomStart; j < randomEnd; j++) {
 4008224:	e0bfbd17 	ldw	r2,-268(fp)
 4008228:	e0bfc815 	stw	r2,-224(fp)
 400822c:	00002106 	br	40082b4 <dropTBlock+0x35c>
			        		grid[i - 1][j] = 1;
 4008230:	e0bfc317 	ldw	r2,-244(fp)
 4008234:	10bfffc4 	addi	r2,r2,-1
 4008238:	040100f4 	movhi	r16,1027
 400823c:	84262204 	addi	r16,r16,-26488
 4008240:	01400984 	movi	r5,38
 4008244:	1009883a 	mov	r4,r2
 4008248:	40118340 	call	4011834 <__mulsi3>
 400824c:	1007883a 	mov	r3,r2
 4008250:	e0bfc817 	ldw	r2,-224(fp)
 4008254:	1885883a 	add	r2,r3,r2
 4008258:	1085883a 	add	r2,r2,r2
 400825c:	1085883a 	add	r2,r2,r2
 4008260:	8085883a 	add	r2,r16,r2
 4008264:	00c00044 	movi	r3,1
 4008268:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 1]++;
 400826c:	e0bfc317 	ldw	r2,-244(fp)
 4008270:	10bfffc4 	addi	r2,r2,-1
 4008274:	00c100f4 	movhi	r3,1027
 4008278:	18e60404 	addi	r3,r3,-26608
 400827c:	1089883a 	add	r4,r2,r2
 4008280:	2109883a 	add	r4,r4,r4
 4008284:	1907883a 	add	r3,r3,r4
 4008288:	18c00017 	ldw	r3,0(r3)
 400828c:	19000044 	addi	r4,r3,1
 4008290:	00c100f4 	movhi	r3,1027
 4008294:	18e60404 	addi	r3,r3,-26608
 4008298:	1085883a 	add	r2,r2,r2
 400829c:	1085883a 	add	r2,r2,r2
 40082a0:	1885883a 	add	r2,r3,r2
 40082a4:	11000015 	stw	r4,0(r2)
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;

						}

						for (int j = randomStart; j < randomEnd; j++) {
 40082a8:	e0bfc817 	ldw	r2,-224(fp)
 40082ac:	10800044 	addi	r2,r2,1
 40082b0:	e0bfc815 	stw	r2,-224(fp)
 40082b4:	e0ffc817 	ldw	r3,-224(fp)
 40082b8:	e0bfc017 	ldw	r2,-256(fp)
 40082bc:	18bfdc16 	blt	r3,r2,4008230 <__alt_mem_onchip_memory2_0+0xfc003070>
			        		grid[i - 1][j] = 1;
			        		rowCount[i - 1]++;
						}
						return;
 40082c0:	00093e06 	br	400a7bc <dropTBlock+0x2864>


        } else {

        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
 40082c4:	e0bfc617 	ldw	r2,-232(fp)
 40082c8:	10800044 	addi	r2,r2,1
 40082cc:	e0bfc615 	stw	r2,-232(fp)
 40082d0:	e0ffc617 	ldw	r3,-232(fp)
 40082d4:	e0bfc017 	ldw	r2,-256(fp)
 40082d8:	18bf9c16 	blt	r3,r2,400814c <__alt_mem_onchip_memory2_0+0xfc002f8c>
 40082dc:	0002a806 	br	4008d80 <dropTBlock+0xe28>
						}
						return;
					}

				}
			}else if(shapeLayout == 1){
 40082e0:	e0bfc217 	ldw	r2,-248(fp)
 40082e4:	10800058 	cmpnei	r2,r2,1
 40082e8:	1000e81e 	bne	r2,zero,400868c <dropTBlock+0x734>
				for (int j = randomFirstStart; j < randomEnd; j++) {
 40082ec:	e0bfbe17 	ldw	r2,-264(fp)
 40082f0:	e0bfc915 	stw	r2,-220(fp)
 40082f4:	00006d06 	br	40084ac <dropTBlock+0x554>
					if(grid[i][j] == 1){
 40082f8:	040100f4 	movhi	r16,1027
 40082fc:	84262204 	addi	r16,r16,-26488
 4008300:	e0bfc317 	ldw	r2,-244(fp)
 4008304:	01400984 	movi	r5,38
 4008308:	1009883a 	mov	r4,r2
 400830c:	40118340 	call	4011834 <__mulsi3>
 4008310:	1007883a 	mov	r3,r2
 4008314:	e0bfc917 	ldw	r2,-220(fp)
 4008318:	1885883a 	add	r2,r3,r2
 400831c:	1085883a 	add	r2,r2,r2
 4008320:	1085883a 	add	r2,r2,r2
 4008324:	8085883a 	add	r2,r16,r2
 4008328:	10800017 	ldw	r2,0(r2)
 400832c:	10800058 	cmpnei	r2,r2,1
 4008330:	10005b1e 	bne	r2,zero,40084a0 <dropTBlock+0x548>
						for(int row = 0; row  < 3; row++){
 4008334:	e03fca15 	stw	zero,-216(fp)
 4008338:	00002e06 	br	40083f4 <dropTBlock+0x49c>
							for (int j = randomFirstStart; j < randomEnd; j++) {
 400833c:	e0bfbe17 	ldw	r2,-264(fp)
 4008340:	e0bfcb15 	stw	r2,-212(fp)
 4008344:	00002506 	br	40083dc <dropTBlock+0x484>
				        		grid[i - 1 - row][j] = 1;
 4008348:	e0bfc317 	ldw	r2,-244(fp)
 400834c:	10ffffc4 	addi	r3,r2,-1
 4008350:	e0bfca17 	ldw	r2,-216(fp)
 4008354:	1885c83a 	sub	r2,r3,r2
 4008358:	040100f4 	movhi	r16,1027
 400835c:	84262204 	addi	r16,r16,-26488
 4008360:	01400984 	movi	r5,38
 4008364:	1009883a 	mov	r4,r2
 4008368:	40118340 	call	4011834 <__mulsi3>
 400836c:	1007883a 	mov	r3,r2
 4008370:	e0bfcb17 	ldw	r2,-212(fp)
 4008374:	1885883a 	add	r2,r3,r2
 4008378:	1085883a 	add	r2,r2,r2
 400837c:	1085883a 	add	r2,r2,r2
 4008380:	8085883a 	add	r2,r16,r2
 4008384:	00c00044 	movi	r3,1
 4008388:	10c00015 	stw	r3,0(r2)
				        		rowCount[i - 1 - row]++;
 400838c:	e0bfc317 	ldw	r2,-244(fp)
 4008390:	10ffffc4 	addi	r3,r2,-1
 4008394:	e0bfca17 	ldw	r2,-216(fp)
 4008398:	1885c83a 	sub	r2,r3,r2
 400839c:	00c100f4 	movhi	r3,1027
 40083a0:	18e60404 	addi	r3,r3,-26608
 40083a4:	1089883a 	add	r4,r2,r2
 40083a8:	2109883a 	add	r4,r4,r4
 40083ac:	1907883a 	add	r3,r3,r4
 40083b0:	18c00017 	ldw	r3,0(r3)
 40083b4:	19000044 	addi	r4,r3,1
 40083b8:	00c100f4 	movhi	r3,1027
 40083bc:	18e60404 	addi	r3,r3,-26608
 40083c0:	1085883a 	add	r2,r2,r2
 40083c4:	1085883a 	add	r2,r2,r2
 40083c8:	1885883a 	add	r2,r3,r2
 40083cc:	11000015 	stw	r4,0(r2)
				}
			}else if(shapeLayout == 1){
				for (int j = randomFirstStart; j < randomEnd; j++) {
					if(grid[i][j] == 1){
						for(int row = 0; row  < 3; row++){
							for (int j = randomFirstStart; j < randomEnd; j++) {
 40083d0:	e0bfcb17 	ldw	r2,-212(fp)
 40083d4:	10800044 	addi	r2,r2,1
 40083d8:	e0bfcb15 	stw	r2,-212(fp)
 40083dc:	e0ffcb17 	ldw	r3,-212(fp)
 40083e0:	e0bfc017 	ldw	r2,-256(fp)
 40083e4:	18bfd816 	blt	r3,r2,4008348 <__alt_mem_onchip_memory2_0+0xfc003188>

				}
			}else if(shapeLayout == 1){
				for (int j = randomFirstStart; j < randomEnd; j++) {
					if(grid[i][j] == 1){
						for(int row = 0; row  < 3; row++){
 40083e8:	e0bfca17 	ldw	r2,-216(fp)
 40083ec:	10800044 	addi	r2,r2,1
 40083f0:	e0bfca15 	stw	r2,-216(fp)
 40083f4:	e0bfca17 	ldw	r2,-216(fp)
 40083f8:	108000d0 	cmplti	r2,r2,3
 40083fc:	103fcf1e 	bne	r2,zero,400833c <__alt_mem_onchip_memory2_0+0xfc00317c>
							for (int j = randomFirstStart; j < randomEnd; j++) {
				        		grid[i - 1 - row][j] = 1;
				        		rowCount[i - 1 - row]++;
							}
						}
						for (int j = randomStart; j < randomFirstStart; j++) {
 4008400:	e0bfbd17 	ldw	r2,-268(fp)
 4008404:	e0bfcc15 	stw	r2,-208(fp)
 4008408:	00002106 	br	4008490 <dropTBlock+0x538>
			        		grid[i - 2][j] = 1;
 400840c:	e0bfc317 	ldw	r2,-244(fp)
 4008410:	10bfff84 	addi	r2,r2,-2
 4008414:	040100f4 	movhi	r16,1027
 4008418:	84262204 	addi	r16,r16,-26488
 400841c:	01400984 	movi	r5,38
 4008420:	1009883a 	mov	r4,r2
 4008424:	40118340 	call	4011834 <__mulsi3>
 4008428:	1007883a 	mov	r3,r2
 400842c:	e0bfcc17 	ldw	r2,-208(fp)
 4008430:	1885883a 	add	r2,r3,r2
 4008434:	1085883a 	add	r2,r2,r2
 4008438:	1085883a 	add	r2,r2,r2
 400843c:	8085883a 	add	r2,r16,r2
 4008440:	00c00044 	movi	r3,1
 4008444:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 2]++;
 4008448:	e0bfc317 	ldw	r2,-244(fp)
 400844c:	10bfff84 	addi	r2,r2,-2
 4008450:	00c100f4 	movhi	r3,1027
 4008454:	18e60404 	addi	r3,r3,-26608
 4008458:	1089883a 	add	r4,r2,r2
 400845c:	2109883a 	add	r4,r4,r4
 4008460:	1907883a 	add	r3,r3,r4
 4008464:	18c00017 	ldw	r3,0(r3)
 4008468:	19000044 	addi	r4,r3,1
 400846c:	00c100f4 	movhi	r3,1027
 4008470:	18e60404 	addi	r3,r3,-26608
 4008474:	1085883a 	add	r2,r2,r2
 4008478:	1085883a 	add	r2,r2,r2
 400847c:	1885883a 	add	r2,r3,r2
 4008480:	11000015 	stw	r4,0(r2)
							for (int j = randomFirstStart; j < randomEnd; j++) {
				        		grid[i - 1 - row][j] = 1;
				        		rowCount[i - 1 - row]++;
							}
						}
						for (int j = randomStart; j < randomFirstStart; j++) {
 4008484:	e0bfcc17 	ldw	r2,-208(fp)
 4008488:	10800044 	addi	r2,r2,1
 400848c:	e0bfcc15 	stw	r2,-208(fp)
 4008490:	e0ffcc17 	ldw	r3,-208(fp)
 4008494:	e0bfbe17 	ldw	r2,-264(fp)
 4008498:	18bfdc16 	blt	r3,r2,400840c <__alt_mem_onchip_memory2_0+0xfc00324c>
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}
						return;
 400849c:	0008c706 	br	400a7bc <dropTBlock+0x2864>
						return;
					}

				}
			}else if(shapeLayout == 1){
				for (int j = randomFirstStart; j < randomEnd; j++) {
 40084a0:	e0bfc917 	ldw	r2,-220(fp)
 40084a4:	10800044 	addi	r2,r2,1
 40084a8:	e0bfc915 	stw	r2,-220(fp)
 40084ac:	e0ffc917 	ldw	r3,-220(fp)
 40084b0:	e0bfc017 	ldw	r2,-256(fp)
 40084b4:	18bf9016 	blt	r3,r2,40082f8 <__alt_mem_onchip_memory2_0+0xfc003138>
			        		rowCount[i - 2]++;
						}
						return;
					}
				}
				for (int j = randomStart; j < randomFirstStart; j++) {
 40084b8:	e0bfbd17 	ldw	r2,-268(fp)
 40084bc:	e0bfcd15 	stw	r2,-204(fp)
 40084c0:	00006e06 	br	400867c <dropTBlock+0x724>
					if(grid[i - 1][j] == 1){
 40084c4:	e0bfc317 	ldw	r2,-244(fp)
 40084c8:	10bfffc4 	addi	r2,r2,-1
 40084cc:	040100f4 	movhi	r16,1027
 40084d0:	84262204 	addi	r16,r16,-26488
 40084d4:	01400984 	movi	r5,38
 40084d8:	1009883a 	mov	r4,r2
 40084dc:	40118340 	call	4011834 <__mulsi3>
 40084e0:	1007883a 	mov	r3,r2
 40084e4:	e0bfcd17 	ldw	r2,-204(fp)
 40084e8:	1885883a 	add	r2,r3,r2
 40084ec:	1085883a 	add	r2,r2,r2
 40084f0:	1085883a 	add	r2,r2,r2
 40084f4:	8085883a 	add	r2,r16,r2
 40084f8:	10800017 	ldw	r2,0(r2)
 40084fc:	10800058 	cmpnei	r2,r2,1
 4008500:	10005b1e 	bne	r2,zero,4008670 <dropTBlock+0x718>
						for(int row = 0; row  < 3; row++){
 4008504:	e03fce15 	stw	zero,-200(fp)
 4008508:	00002e06 	br	40085c4 <dropTBlock+0x66c>
							for (int j = randomFirstStart; j < randomEnd; j++) {
 400850c:	e0bfbe17 	ldw	r2,-264(fp)
 4008510:	e0bfcf15 	stw	r2,-196(fp)
 4008514:	00002506 	br	40085ac <dropTBlock+0x654>
								grid[i - 1 - row][j] = 1;
 4008518:	e0bfc317 	ldw	r2,-244(fp)
 400851c:	10ffffc4 	addi	r3,r2,-1
 4008520:	e0bfce17 	ldw	r2,-200(fp)
 4008524:	1885c83a 	sub	r2,r3,r2
 4008528:	040100f4 	movhi	r16,1027
 400852c:	84262204 	addi	r16,r16,-26488
 4008530:	01400984 	movi	r5,38
 4008534:	1009883a 	mov	r4,r2
 4008538:	40118340 	call	4011834 <__mulsi3>
 400853c:	1007883a 	mov	r3,r2
 4008540:	e0bfcf17 	ldw	r2,-196(fp)
 4008544:	1885883a 	add	r2,r3,r2
 4008548:	1085883a 	add	r2,r2,r2
 400854c:	1085883a 	add	r2,r2,r2
 4008550:	8085883a 	add	r2,r16,r2
 4008554:	00c00044 	movi	r3,1
 4008558:	10c00015 	stw	r3,0(r2)
								rowCount[i - 1 - row]++;
 400855c:	e0bfc317 	ldw	r2,-244(fp)
 4008560:	10ffffc4 	addi	r3,r2,-1
 4008564:	e0bfce17 	ldw	r2,-200(fp)
 4008568:	1885c83a 	sub	r2,r3,r2
 400856c:	00c100f4 	movhi	r3,1027
 4008570:	18e60404 	addi	r3,r3,-26608
 4008574:	1089883a 	add	r4,r2,r2
 4008578:	2109883a 	add	r4,r4,r4
 400857c:	1907883a 	add	r3,r3,r4
 4008580:	18c00017 	ldw	r3,0(r3)
 4008584:	19000044 	addi	r4,r3,1
 4008588:	00c100f4 	movhi	r3,1027
 400858c:	18e60404 	addi	r3,r3,-26608
 4008590:	1085883a 	add	r2,r2,r2
 4008594:	1085883a 	add	r2,r2,r2
 4008598:	1885883a 	add	r2,r3,r2
 400859c:	11000015 	stw	r4,0(r2)
					}
				}
				for (int j = randomStart; j < randomFirstStart; j++) {
					if(grid[i - 1][j] == 1){
						for(int row = 0; row  < 3; row++){
							for (int j = randomFirstStart; j < randomEnd; j++) {
 40085a0:	e0bfcf17 	ldw	r2,-196(fp)
 40085a4:	10800044 	addi	r2,r2,1
 40085a8:	e0bfcf15 	stw	r2,-196(fp)
 40085ac:	e0ffcf17 	ldw	r3,-196(fp)
 40085b0:	e0bfc017 	ldw	r2,-256(fp)
 40085b4:	18bfd816 	blt	r3,r2,4008518 <__alt_mem_onchip_memory2_0+0xfc003358>
						return;
					}
				}
				for (int j = randomStart; j < randomFirstStart; j++) {
					if(grid[i - 1][j] == 1){
						for(int row = 0; row  < 3; row++){
 40085b8:	e0bfce17 	ldw	r2,-200(fp)
 40085bc:	10800044 	addi	r2,r2,1
 40085c0:	e0bfce15 	stw	r2,-200(fp)
 40085c4:	e0bfce17 	ldw	r2,-200(fp)
 40085c8:	108000d0 	cmplti	r2,r2,3
 40085cc:	103fcf1e 	bne	r2,zero,400850c <__alt_mem_onchip_memory2_0+0xfc00334c>
							for (int j = randomFirstStart; j < randomEnd; j++) {
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 - row]++;
							}
						}
						for (int j = randomStart; j < randomFirstStart; j++) {
 40085d0:	e0bfbd17 	ldw	r2,-268(fp)
 40085d4:	e0bfd015 	stw	r2,-192(fp)
 40085d8:	00002106 	br	4008660 <dropTBlock+0x708>
							grid[i - 2][j] = 1;
 40085dc:	e0bfc317 	ldw	r2,-244(fp)
 40085e0:	10bfff84 	addi	r2,r2,-2
 40085e4:	040100f4 	movhi	r16,1027
 40085e8:	84262204 	addi	r16,r16,-26488
 40085ec:	01400984 	movi	r5,38
 40085f0:	1009883a 	mov	r4,r2
 40085f4:	40118340 	call	4011834 <__mulsi3>
 40085f8:	1007883a 	mov	r3,r2
 40085fc:	e0bfd017 	ldw	r2,-192(fp)
 4008600:	1885883a 	add	r2,r3,r2
 4008604:	1085883a 	add	r2,r2,r2
 4008608:	1085883a 	add	r2,r2,r2
 400860c:	8085883a 	add	r2,r16,r2
 4008610:	00c00044 	movi	r3,1
 4008614:	10c00015 	stw	r3,0(r2)
							rowCount[i - 2]++;
 4008618:	e0bfc317 	ldw	r2,-244(fp)
 400861c:	10bfff84 	addi	r2,r2,-2
 4008620:	00c100f4 	movhi	r3,1027
 4008624:	18e60404 	addi	r3,r3,-26608
 4008628:	1089883a 	add	r4,r2,r2
 400862c:	2109883a 	add	r4,r4,r4
 4008630:	1907883a 	add	r3,r3,r4
 4008634:	18c00017 	ldw	r3,0(r3)
 4008638:	19000044 	addi	r4,r3,1
 400863c:	00c100f4 	movhi	r3,1027
 4008640:	18e60404 	addi	r3,r3,-26608
 4008644:	1085883a 	add	r2,r2,r2
 4008648:	1085883a 	add	r2,r2,r2
 400864c:	1885883a 	add	r2,r3,r2
 4008650:	11000015 	stw	r4,0(r2)
							for (int j = randomFirstStart; j < randomEnd; j++) {
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 - row]++;
							}
						}
						for (int j = randomStart; j < randomFirstStart; j++) {
 4008654:	e0bfd017 	ldw	r2,-192(fp)
 4008658:	10800044 	addi	r2,r2,1
 400865c:	e0bfd015 	stw	r2,-192(fp)
 4008660:	e0ffd017 	ldw	r3,-192(fp)
 4008664:	e0bfbe17 	ldw	r2,-264(fp)
 4008668:	18bfdc16 	blt	r3,r2,40085dc <__alt_mem_onchip_memory2_0+0xfc00341c>
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}
						return;
 400866c:	00085306 	br	400a7bc <dropTBlock+0x2864>
			        		rowCount[i - 2]++;
						}
						return;
					}
				}
				for (int j = randomStart; j < randomFirstStart; j++) {
 4008670:	e0bfcd17 	ldw	r2,-204(fp)
 4008674:	10800044 	addi	r2,r2,1
 4008678:	e0bfcd15 	stw	r2,-204(fp)
 400867c:	e0ffcd17 	ldw	r3,-204(fp)
 4008680:	e0bfbe17 	ldw	r2,-264(fp)
 4008684:	18bf8f16 	blt	r3,r2,40084c4 <__alt_mem_onchip_memory2_0+0xfc003304>
 4008688:	0001bd06 	br	4008d80 <dropTBlock+0xe28>
						}
						return;
					}
				}

			}else if(shapeLayout == 2){
 400868c:	e0bfc217 	ldw	r2,-248(fp)
 4008690:	10800098 	cmpnei	r2,r2,2
 4008694:	1000d01e 	bne	r2,zero,40089d8 <dropTBlock+0xa80>
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4008698:	e0bfbe17 	ldw	r2,-264(fp)
 400869c:	e0bfd115 	stw	r2,-188(fp)
 40086a0:	00006106 	br	4008828 <dropTBlock+0x8d0>
					if(grid[i][j] == 1){
 40086a4:	040100f4 	movhi	r16,1027
 40086a8:	84262204 	addi	r16,r16,-26488
 40086ac:	e0bfc317 	ldw	r2,-244(fp)
 40086b0:	01400984 	movi	r5,38
 40086b4:	1009883a 	mov	r4,r2
 40086b8:	40118340 	call	4011834 <__mulsi3>
 40086bc:	1007883a 	mov	r3,r2
 40086c0:	e0bfd117 	ldw	r2,-188(fp)
 40086c4:	1885883a 	add	r2,r3,r2
 40086c8:	1085883a 	add	r2,r2,r2
 40086cc:	1085883a 	add	r2,r2,r2
 40086d0:	8085883a 	add	r2,r16,r2
 40086d4:	10800017 	ldw	r2,0(r2)
 40086d8:	10800058 	cmpnei	r2,r2,1
 40086dc:	10004f1e 	bne	r2,zero,400881c <dropTBlock+0x8c4>
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 40086e0:	e0bfbe17 	ldw	r2,-264(fp)
 40086e4:	e0bfd215 	stw	r2,-184(fp)
 40086e8:	00002106 	br	4008770 <dropTBlock+0x818>
			        		grid[i - 1][j] = 1;
 40086ec:	e0bfc317 	ldw	r2,-244(fp)
 40086f0:	10bfffc4 	addi	r2,r2,-1
 40086f4:	040100f4 	movhi	r16,1027
 40086f8:	84262204 	addi	r16,r16,-26488
 40086fc:	01400984 	movi	r5,38
 4008700:	1009883a 	mov	r4,r2
 4008704:	40118340 	call	4011834 <__mulsi3>
 4008708:	1007883a 	mov	r3,r2
 400870c:	e0bfd217 	ldw	r2,-184(fp)
 4008710:	1885883a 	add	r2,r3,r2
 4008714:	1085883a 	add	r2,r2,r2
 4008718:	1085883a 	add	r2,r2,r2
 400871c:	8085883a 	add	r2,r16,r2
 4008720:	00c00044 	movi	r3,1
 4008724:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 1]++;
 4008728:	e0bfc317 	ldw	r2,-244(fp)
 400872c:	10bfffc4 	addi	r2,r2,-1
 4008730:	00c100f4 	movhi	r3,1027
 4008734:	18e60404 	addi	r3,r3,-26608
 4008738:	1089883a 	add	r4,r2,r2
 400873c:	2109883a 	add	r4,r4,r4
 4008740:	1907883a 	add	r3,r3,r4
 4008744:	18c00017 	ldw	r3,0(r3)
 4008748:	19000044 	addi	r4,r3,1
 400874c:	00c100f4 	movhi	r3,1027
 4008750:	18e60404 	addi	r3,r3,-26608
 4008754:	1085883a 	add	r2,r2,r2
 4008758:	1085883a 	add	r2,r2,r2
 400875c:	1885883a 	add	r2,r3,r2
 4008760:	11000015 	stw	r4,0(r2)
				}

			}else if(shapeLayout == 2){
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
					if(grid[i][j] == 1){
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4008764:	e0bfd217 	ldw	r2,-184(fp)
 4008768:	10800044 	addi	r2,r2,1
 400876c:	e0bfd215 	stw	r2,-184(fp)
 4008770:	e0ffd217 	ldw	r3,-184(fp)
 4008774:	e0bfbf17 	ldw	r2,-260(fp)
 4008778:	18bfdc16 	blt	r3,r2,40086ec <__alt_mem_onchip_memory2_0+0xfc00352c>
			        		grid[i - 1][j] = 1;
			        		rowCount[i - 1]++;
						}
						for (int j = randomStart; j < randomEnd; j++) {
 400877c:	e0bfbd17 	ldw	r2,-268(fp)
 4008780:	e0bfd315 	stw	r2,-180(fp)
 4008784:	00002106 	br	400880c <dropTBlock+0x8b4>
			        		grid[i - 2][j] = 1;
 4008788:	e0bfc317 	ldw	r2,-244(fp)
 400878c:	10bfff84 	addi	r2,r2,-2
 4008790:	040100f4 	movhi	r16,1027
 4008794:	84262204 	addi	r16,r16,-26488
 4008798:	01400984 	movi	r5,38
 400879c:	1009883a 	mov	r4,r2
 40087a0:	40118340 	call	4011834 <__mulsi3>
 40087a4:	1007883a 	mov	r3,r2
 40087a8:	e0bfd317 	ldw	r2,-180(fp)
 40087ac:	1885883a 	add	r2,r3,r2
 40087b0:	1085883a 	add	r2,r2,r2
 40087b4:	1085883a 	add	r2,r2,r2
 40087b8:	8085883a 	add	r2,r16,r2
 40087bc:	00c00044 	movi	r3,1
 40087c0:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 2]++;
 40087c4:	e0bfc317 	ldw	r2,-244(fp)
 40087c8:	10bfff84 	addi	r2,r2,-2
 40087cc:	00c100f4 	movhi	r3,1027
 40087d0:	18e60404 	addi	r3,r3,-26608
 40087d4:	1089883a 	add	r4,r2,r2
 40087d8:	2109883a 	add	r4,r4,r4
 40087dc:	1907883a 	add	r3,r3,r4
 40087e0:	18c00017 	ldw	r3,0(r3)
 40087e4:	19000044 	addi	r4,r3,1
 40087e8:	00c100f4 	movhi	r3,1027
 40087ec:	18e60404 	addi	r3,r3,-26608
 40087f0:	1085883a 	add	r2,r2,r2
 40087f4:	1085883a 	add	r2,r2,r2
 40087f8:	1885883a 	add	r2,r3,r2
 40087fc:	11000015 	stw	r4,0(r2)
					if(grid[i][j] == 1){
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
			        		grid[i - 1][j] = 1;
			        		rowCount[i - 1]++;
						}
						for (int j = randomStart; j < randomEnd; j++) {
 4008800:	e0bfd317 	ldw	r2,-180(fp)
 4008804:	10800044 	addi	r2,r2,1
 4008808:	e0bfd315 	stw	r2,-180(fp)
 400880c:	e0ffd317 	ldw	r3,-180(fp)
 4008810:	e0bfc017 	ldw	r2,-256(fp)
 4008814:	18bfdc16 	blt	r3,r2,4008788 <__alt_mem_onchip_memory2_0+0xfc0035c8>
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}
						return;
 4008818:	0007e806 	br	400a7bc <dropTBlock+0x2864>
						return;
					}
				}

			}else if(shapeLayout == 2){
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400881c:	e0bfd117 	ldw	r2,-188(fp)
 4008820:	10800044 	addi	r2,r2,1
 4008824:	e0bfd115 	stw	r2,-188(fp)
 4008828:	e0ffd117 	ldw	r3,-188(fp)
 400882c:	e0bfbf17 	ldw	r2,-260(fp)
 4008830:	18bf9c16 	blt	r3,r2,40086a4 <__alt_mem_onchip_memory2_0+0xfc0034e4>
			        		rowCount[i - 2]++;
						}
						return;
					}
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4008834:	e0bfbd17 	ldw	r2,-268(fp)
 4008838:	e0bfd415 	stw	r2,-176(fp)
 400883c:	00006206 	br	40089c8 <dropTBlock+0xa70>
					if(grid[i-1][j] == 1){
 4008840:	e0bfc317 	ldw	r2,-244(fp)
 4008844:	10bfffc4 	addi	r2,r2,-1
 4008848:	040100f4 	movhi	r16,1027
 400884c:	84262204 	addi	r16,r16,-26488
 4008850:	01400984 	movi	r5,38
 4008854:	1009883a 	mov	r4,r2
 4008858:	40118340 	call	4011834 <__mulsi3>
 400885c:	1007883a 	mov	r3,r2
 4008860:	e0bfd417 	ldw	r2,-176(fp)
 4008864:	1885883a 	add	r2,r3,r2
 4008868:	1085883a 	add	r2,r2,r2
 400886c:	1085883a 	add	r2,r2,r2
 4008870:	8085883a 	add	r2,r16,r2
 4008874:	10800017 	ldw	r2,0(r2)
 4008878:	10800058 	cmpnei	r2,r2,1
 400887c:	10004f1e 	bne	r2,zero,40089bc <dropTBlock+0xa64>
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4008880:	e0bfbe17 	ldw	r2,-264(fp)
 4008884:	e0bfd515 	stw	r2,-172(fp)
 4008888:	00002106 	br	4008910 <dropTBlock+0x9b8>
							grid[i - 1][j] = 1;
 400888c:	e0bfc317 	ldw	r2,-244(fp)
 4008890:	10bfffc4 	addi	r2,r2,-1
 4008894:	040100f4 	movhi	r16,1027
 4008898:	84262204 	addi	r16,r16,-26488
 400889c:	01400984 	movi	r5,38
 40088a0:	1009883a 	mov	r4,r2
 40088a4:	40118340 	call	4011834 <__mulsi3>
 40088a8:	1007883a 	mov	r3,r2
 40088ac:	e0bfd517 	ldw	r2,-172(fp)
 40088b0:	1885883a 	add	r2,r3,r2
 40088b4:	1085883a 	add	r2,r2,r2
 40088b8:	1085883a 	add	r2,r2,r2
 40088bc:	8085883a 	add	r2,r16,r2
 40088c0:	00c00044 	movi	r3,1
 40088c4:	10c00015 	stw	r3,0(r2)
							rowCount[i - 1]++;
 40088c8:	e0bfc317 	ldw	r2,-244(fp)
 40088cc:	10bfffc4 	addi	r2,r2,-1
 40088d0:	00c100f4 	movhi	r3,1027
 40088d4:	18e60404 	addi	r3,r3,-26608
 40088d8:	1089883a 	add	r4,r2,r2
 40088dc:	2109883a 	add	r4,r4,r4
 40088e0:	1907883a 	add	r3,r3,r4
 40088e4:	18c00017 	ldw	r3,0(r3)
 40088e8:	19000044 	addi	r4,r3,1
 40088ec:	00c100f4 	movhi	r3,1027
 40088f0:	18e60404 	addi	r3,r3,-26608
 40088f4:	1085883a 	add	r2,r2,r2
 40088f8:	1085883a 	add	r2,r2,r2
 40088fc:	1885883a 	add	r2,r3,r2
 4008900:	11000015 	stw	r4,0(r2)
						return;
					}
				}
				for (int j = randomStart; j < randomEnd; j++) {
					if(grid[i-1][j] == 1){
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4008904:	e0bfd517 	ldw	r2,-172(fp)
 4008908:	10800044 	addi	r2,r2,1
 400890c:	e0bfd515 	stw	r2,-172(fp)
 4008910:	e0ffd517 	ldw	r3,-172(fp)
 4008914:	e0bfbf17 	ldw	r2,-260(fp)
 4008918:	18bfdc16 	blt	r3,r2,400888c <__alt_mem_onchip_memory2_0+0xfc0036cc>
							grid[i - 1][j] = 1;
							rowCount[i - 1]++;
						}
						for (int j = randomStart; j < randomEnd; j++) {
 400891c:	e0bfbd17 	ldw	r2,-268(fp)
 4008920:	e0bfd615 	stw	r2,-168(fp)
 4008924:	00002106 	br	40089ac <dropTBlock+0xa54>
							grid[i - 2][j] = 1;
 4008928:	e0bfc317 	ldw	r2,-244(fp)
 400892c:	10bfff84 	addi	r2,r2,-2
 4008930:	040100f4 	movhi	r16,1027
 4008934:	84262204 	addi	r16,r16,-26488
 4008938:	01400984 	movi	r5,38
 400893c:	1009883a 	mov	r4,r2
 4008940:	40118340 	call	4011834 <__mulsi3>
 4008944:	1007883a 	mov	r3,r2
 4008948:	e0bfd617 	ldw	r2,-168(fp)
 400894c:	1885883a 	add	r2,r3,r2
 4008950:	1085883a 	add	r2,r2,r2
 4008954:	1085883a 	add	r2,r2,r2
 4008958:	8085883a 	add	r2,r16,r2
 400895c:	00c00044 	movi	r3,1
 4008960:	10c00015 	stw	r3,0(r2)
							rowCount[i - 2]++;
 4008964:	e0bfc317 	ldw	r2,-244(fp)
 4008968:	10bfff84 	addi	r2,r2,-2
 400896c:	00c100f4 	movhi	r3,1027
 4008970:	18e60404 	addi	r3,r3,-26608
 4008974:	1089883a 	add	r4,r2,r2
 4008978:	2109883a 	add	r4,r4,r4
 400897c:	1907883a 	add	r3,r3,r4
 4008980:	18c00017 	ldw	r3,0(r3)
 4008984:	19000044 	addi	r4,r3,1
 4008988:	00c100f4 	movhi	r3,1027
 400898c:	18e60404 	addi	r3,r3,-26608
 4008990:	1085883a 	add	r2,r2,r2
 4008994:	1085883a 	add	r2,r2,r2
 4008998:	1885883a 	add	r2,r3,r2
 400899c:	11000015 	stw	r4,0(r2)
					if(grid[i-1][j] == 1){
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
							grid[i - 1][j] = 1;
							rowCount[i - 1]++;
						}
						for (int j = randomStart; j < randomEnd; j++) {
 40089a0:	e0bfd617 	ldw	r2,-168(fp)
 40089a4:	10800044 	addi	r2,r2,1
 40089a8:	e0bfd615 	stw	r2,-168(fp)
 40089ac:	e0ffd617 	ldw	r3,-168(fp)
 40089b0:	e0bfc017 	ldw	r2,-256(fp)
 40089b4:	18bfdc16 	blt	r3,r2,4008928 <__alt_mem_onchip_memory2_0+0xfc003768>
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}
						return;
 40089b8:	00078006 	br	400a7bc <dropTBlock+0x2864>
			        		rowCount[i - 2]++;
						}
						return;
					}
				}
				for (int j = randomStart; j < randomEnd; j++) {
 40089bc:	e0bfd417 	ldw	r2,-176(fp)
 40089c0:	10800044 	addi	r2,r2,1
 40089c4:	e0bfd415 	stw	r2,-176(fp)
 40089c8:	e0ffd417 	ldw	r3,-176(fp)
 40089cc:	e0bfc017 	ldw	r2,-256(fp)
 40089d0:	18bf9b16 	blt	r3,r2,4008840 <__alt_mem_onchip_memory2_0+0xfc003680>
 40089d4:	0000ea06 	br	4008d80 <dropTBlock+0xe28>
							rowCount[i - 2]++;
						}
						return;
					}
				}
			}else if(shapeLayout == 3){
 40089d8:	e0bfc217 	ldw	r2,-248(fp)
 40089dc:	108000d8 	cmpnei	r2,r2,3
 40089e0:	1000e71e 	bne	r2,zero,4008d80 <dropTBlock+0xe28>
				for (int j = randomStart; j < randomFirstEnd; j++) {
 40089e4:	e0bfbd17 	ldw	r2,-268(fp)
 40089e8:	e0bfd715 	stw	r2,-164(fp)
 40089ec:	00006d06 	br	4008ba4 <dropTBlock+0xc4c>
					if(grid[i][j] == 1){
 40089f0:	040100f4 	movhi	r16,1027
 40089f4:	84262204 	addi	r16,r16,-26488
 40089f8:	e0bfc317 	ldw	r2,-244(fp)
 40089fc:	01400984 	movi	r5,38
 4008a00:	1009883a 	mov	r4,r2
 4008a04:	40118340 	call	4011834 <__mulsi3>
 4008a08:	1007883a 	mov	r3,r2
 4008a0c:	e0bfd717 	ldw	r2,-164(fp)
 4008a10:	1885883a 	add	r2,r3,r2
 4008a14:	1085883a 	add	r2,r2,r2
 4008a18:	1085883a 	add	r2,r2,r2
 4008a1c:	8085883a 	add	r2,r16,r2
 4008a20:	10800017 	ldw	r2,0(r2)
 4008a24:	10800058 	cmpnei	r2,r2,1
 4008a28:	10005b1e 	bne	r2,zero,4008b98 <dropTBlock+0xc40>
						for(int row = 0; row  < 3; row++){
 4008a2c:	e03fd815 	stw	zero,-160(fp)
 4008a30:	00002e06 	br	4008aec <dropTBlock+0xb94>
							for (int j = randomStart; j < randomFirstEnd; j++) {
 4008a34:	e0bfbd17 	ldw	r2,-268(fp)
 4008a38:	e0bfd915 	stw	r2,-156(fp)
 4008a3c:	00002506 	br	4008ad4 <dropTBlock+0xb7c>
								grid[i - 1 - row][j] = 1;
 4008a40:	e0bfc317 	ldw	r2,-244(fp)
 4008a44:	10ffffc4 	addi	r3,r2,-1
 4008a48:	e0bfd817 	ldw	r2,-160(fp)
 4008a4c:	1885c83a 	sub	r2,r3,r2
 4008a50:	040100f4 	movhi	r16,1027
 4008a54:	84262204 	addi	r16,r16,-26488
 4008a58:	01400984 	movi	r5,38
 4008a5c:	1009883a 	mov	r4,r2
 4008a60:	40118340 	call	4011834 <__mulsi3>
 4008a64:	1007883a 	mov	r3,r2
 4008a68:	e0bfd917 	ldw	r2,-156(fp)
 4008a6c:	1885883a 	add	r2,r3,r2
 4008a70:	1085883a 	add	r2,r2,r2
 4008a74:	1085883a 	add	r2,r2,r2
 4008a78:	8085883a 	add	r2,r16,r2
 4008a7c:	00c00044 	movi	r3,1
 4008a80:	10c00015 	stw	r3,0(r2)
								rowCount[i - 1 - row]++;
 4008a84:	e0bfc317 	ldw	r2,-244(fp)
 4008a88:	10ffffc4 	addi	r3,r2,-1
 4008a8c:	e0bfd817 	ldw	r2,-160(fp)
 4008a90:	1885c83a 	sub	r2,r3,r2
 4008a94:	00c100f4 	movhi	r3,1027
 4008a98:	18e60404 	addi	r3,r3,-26608
 4008a9c:	1089883a 	add	r4,r2,r2
 4008aa0:	2109883a 	add	r4,r4,r4
 4008aa4:	1907883a 	add	r3,r3,r4
 4008aa8:	18c00017 	ldw	r3,0(r3)
 4008aac:	19000044 	addi	r4,r3,1
 4008ab0:	00c100f4 	movhi	r3,1027
 4008ab4:	18e60404 	addi	r3,r3,-26608
 4008ab8:	1085883a 	add	r2,r2,r2
 4008abc:	1085883a 	add	r2,r2,r2
 4008ac0:	1885883a 	add	r2,r3,r2
 4008ac4:	11000015 	stw	r4,0(r2)
				}
			}else if(shapeLayout == 3){
				for (int j = randomStart; j < randomFirstEnd; j++) {
					if(grid[i][j] == 1){
						for(int row = 0; row  < 3; row++){
							for (int j = randomStart; j < randomFirstEnd; j++) {
 4008ac8:	e0bfd917 	ldw	r2,-156(fp)
 4008acc:	10800044 	addi	r2,r2,1
 4008ad0:	e0bfd915 	stw	r2,-156(fp)
 4008ad4:	e0ffd917 	ldw	r3,-156(fp)
 4008ad8:	e0bfbf17 	ldw	r2,-260(fp)
 4008adc:	18bfd816 	blt	r3,r2,4008a40 <__alt_mem_onchip_memory2_0+0xfc003880>
					}
				}
			}else if(shapeLayout == 3){
				for (int j = randomStart; j < randomFirstEnd; j++) {
					if(grid[i][j] == 1){
						for(int row = 0; row  < 3; row++){
 4008ae0:	e0bfd817 	ldw	r2,-160(fp)
 4008ae4:	10800044 	addi	r2,r2,1
 4008ae8:	e0bfd815 	stw	r2,-160(fp)
 4008aec:	e0bfd817 	ldw	r2,-160(fp)
 4008af0:	108000d0 	cmplti	r2,r2,3
 4008af4:	103fcf1e 	bne	r2,zero,4008a34 <__alt_mem_onchip_memory2_0+0xfc003874>
							for (int j = randomStart; j < randomFirstEnd; j++) {
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 - row]++;
							}
						}
						for (int j = randomFirstEnd; j < randomEnd; j++) {
 4008af8:	e0bfbf17 	ldw	r2,-260(fp)
 4008afc:	e0bfda15 	stw	r2,-152(fp)
 4008b00:	00002106 	br	4008b88 <dropTBlock+0xc30>
							grid[i - 2][j] = 1;
 4008b04:	e0bfc317 	ldw	r2,-244(fp)
 4008b08:	10bfff84 	addi	r2,r2,-2
 4008b0c:	040100f4 	movhi	r16,1027
 4008b10:	84262204 	addi	r16,r16,-26488
 4008b14:	01400984 	movi	r5,38
 4008b18:	1009883a 	mov	r4,r2
 4008b1c:	40118340 	call	4011834 <__mulsi3>
 4008b20:	1007883a 	mov	r3,r2
 4008b24:	e0bfda17 	ldw	r2,-152(fp)
 4008b28:	1885883a 	add	r2,r3,r2
 4008b2c:	1085883a 	add	r2,r2,r2
 4008b30:	1085883a 	add	r2,r2,r2
 4008b34:	8085883a 	add	r2,r16,r2
 4008b38:	00c00044 	movi	r3,1
 4008b3c:	10c00015 	stw	r3,0(r2)
							rowCount[i - 2]++;
 4008b40:	e0bfc317 	ldw	r2,-244(fp)
 4008b44:	10bfff84 	addi	r2,r2,-2
 4008b48:	00c100f4 	movhi	r3,1027
 4008b4c:	18e60404 	addi	r3,r3,-26608
 4008b50:	1089883a 	add	r4,r2,r2
 4008b54:	2109883a 	add	r4,r4,r4
 4008b58:	1907883a 	add	r3,r3,r4
 4008b5c:	18c00017 	ldw	r3,0(r3)
 4008b60:	19000044 	addi	r4,r3,1
 4008b64:	00c100f4 	movhi	r3,1027
 4008b68:	18e60404 	addi	r3,r3,-26608
 4008b6c:	1085883a 	add	r2,r2,r2
 4008b70:	1085883a 	add	r2,r2,r2
 4008b74:	1885883a 	add	r2,r3,r2
 4008b78:	11000015 	stw	r4,0(r2)
							for (int j = randomStart; j < randomFirstEnd; j++) {
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 - row]++;
							}
						}
						for (int j = randomFirstEnd; j < randomEnd; j++) {
 4008b7c:	e0bfda17 	ldw	r2,-152(fp)
 4008b80:	10800044 	addi	r2,r2,1
 4008b84:	e0bfda15 	stw	r2,-152(fp)
 4008b88:	e0ffda17 	ldw	r3,-152(fp)
 4008b8c:	e0bfc017 	ldw	r2,-256(fp)
 4008b90:	18bfdc16 	blt	r3,r2,4008b04 <__alt_mem_onchip_memory2_0+0xfc003944>
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}
						return;
 4008b94:	00070906 	br	400a7bc <dropTBlock+0x2864>
						}
						return;
					}
				}
			}else if(shapeLayout == 3){
				for (int j = randomStart; j < randomFirstEnd; j++) {
 4008b98:	e0bfd717 	ldw	r2,-164(fp)
 4008b9c:	10800044 	addi	r2,r2,1
 4008ba0:	e0bfd715 	stw	r2,-164(fp)
 4008ba4:	e0ffd717 	ldw	r3,-164(fp)
 4008ba8:	e0bfbf17 	ldw	r2,-260(fp)
 4008bac:	18bf9016 	blt	r3,r2,40089f0 <__alt_mem_onchip_memory2_0+0xfc003830>
							rowCount[i - 2]++;
						}
						return;
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++) {
 4008bb0:	e0bfbf17 	ldw	r2,-260(fp)
 4008bb4:	e0bfdb15 	stw	r2,-148(fp)
 4008bb8:	00006e06 	br	4008d74 <dropTBlock+0xe1c>
					if(grid[i - 1][j] == 1){
 4008bbc:	e0bfc317 	ldw	r2,-244(fp)
 4008bc0:	10bfffc4 	addi	r2,r2,-1
 4008bc4:	040100f4 	movhi	r16,1027
 4008bc8:	84262204 	addi	r16,r16,-26488
 4008bcc:	01400984 	movi	r5,38
 4008bd0:	1009883a 	mov	r4,r2
 4008bd4:	40118340 	call	4011834 <__mulsi3>
 4008bd8:	1007883a 	mov	r3,r2
 4008bdc:	e0bfdb17 	ldw	r2,-148(fp)
 4008be0:	1885883a 	add	r2,r3,r2
 4008be4:	1085883a 	add	r2,r2,r2
 4008be8:	1085883a 	add	r2,r2,r2
 4008bec:	8085883a 	add	r2,r16,r2
 4008bf0:	10800017 	ldw	r2,0(r2)
 4008bf4:	10800058 	cmpnei	r2,r2,1
 4008bf8:	10005b1e 	bne	r2,zero,4008d68 <dropTBlock+0xe10>
						for(int row = 0; row  < 3; row++){
 4008bfc:	e03fdc15 	stw	zero,-144(fp)
 4008c00:	00002e06 	br	4008cbc <dropTBlock+0xd64>
							for (int j = randomStart; j < randomFirstEnd; j++) {
 4008c04:	e0bfbd17 	ldw	r2,-268(fp)
 4008c08:	e0bfdd15 	stw	r2,-140(fp)
 4008c0c:	00002506 	br	4008ca4 <dropTBlock+0xd4c>
				        		grid[i - 1 - row][j] = 1;
 4008c10:	e0bfc317 	ldw	r2,-244(fp)
 4008c14:	10ffffc4 	addi	r3,r2,-1
 4008c18:	e0bfdc17 	ldw	r2,-144(fp)
 4008c1c:	1885c83a 	sub	r2,r3,r2
 4008c20:	040100f4 	movhi	r16,1027
 4008c24:	84262204 	addi	r16,r16,-26488
 4008c28:	01400984 	movi	r5,38
 4008c2c:	1009883a 	mov	r4,r2
 4008c30:	40118340 	call	4011834 <__mulsi3>
 4008c34:	1007883a 	mov	r3,r2
 4008c38:	e0bfdd17 	ldw	r2,-140(fp)
 4008c3c:	1885883a 	add	r2,r3,r2
 4008c40:	1085883a 	add	r2,r2,r2
 4008c44:	1085883a 	add	r2,r2,r2
 4008c48:	8085883a 	add	r2,r16,r2
 4008c4c:	00c00044 	movi	r3,1
 4008c50:	10c00015 	stw	r3,0(r2)
				        		rowCount[i - 1 - row]++;
 4008c54:	e0bfc317 	ldw	r2,-244(fp)
 4008c58:	10ffffc4 	addi	r3,r2,-1
 4008c5c:	e0bfdc17 	ldw	r2,-144(fp)
 4008c60:	1885c83a 	sub	r2,r3,r2
 4008c64:	00c100f4 	movhi	r3,1027
 4008c68:	18e60404 	addi	r3,r3,-26608
 4008c6c:	1089883a 	add	r4,r2,r2
 4008c70:	2109883a 	add	r4,r4,r4
 4008c74:	1907883a 	add	r3,r3,r4
 4008c78:	18c00017 	ldw	r3,0(r3)
 4008c7c:	19000044 	addi	r4,r3,1
 4008c80:	00c100f4 	movhi	r3,1027
 4008c84:	18e60404 	addi	r3,r3,-26608
 4008c88:	1085883a 	add	r2,r2,r2
 4008c8c:	1085883a 	add	r2,r2,r2
 4008c90:	1885883a 	add	r2,r3,r2
 4008c94:	11000015 	stw	r4,0(r2)
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++) {
					if(grid[i - 1][j] == 1){
						for(int row = 0; row  < 3; row++){
							for (int j = randomStart; j < randomFirstEnd; j++) {
 4008c98:	e0bfdd17 	ldw	r2,-140(fp)
 4008c9c:	10800044 	addi	r2,r2,1
 4008ca0:	e0bfdd15 	stw	r2,-140(fp)
 4008ca4:	e0ffdd17 	ldw	r3,-140(fp)
 4008ca8:	e0bfbf17 	ldw	r2,-260(fp)
 4008cac:	18bfd816 	blt	r3,r2,4008c10 <__alt_mem_onchip_memory2_0+0xfc003a50>
						return;
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++) {
					if(grid[i - 1][j] == 1){
						for(int row = 0; row  < 3; row++){
 4008cb0:	e0bfdc17 	ldw	r2,-144(fp)
 4008cb4:	10800044 	addi	r2,r2,1
 4008cb8:	e0bfdc15 	stw	r2,-144(fp)
 4008cbc:	e0bfdc17 	ldw	r2,-144(fp)
 4008cc0:	108000d0 	cmplti	r2,r2,3
 4008cc4:	103fcf1e 	bne	r2,zero,4008c04 <__alt_mem_onchip_memory2_0+0xfc003a44>
							for (int j = randomStart; j < randomFirstEnd; j++) {
				        		grid[i - 1 - row][j] = 1;
				        		rowCount[i - 1 - row]++;
							}
						}
						for (int j = randomFirstEnd; j < randomEnd; j++) {
 4008cc8:	e0bfbf17 	ldw	r2,-260(fp)
 4008ccc:	e0bfde15 	stw	r2,-136(fp)
 4008cd0:	00002106 	br	4008d58 <dropTBlock+0xe00>
			        		grid[i - 2][j] = 1;
 4008cd4:	e0bfc317 	ldw	r2,-244(fp)
 4008cd8:	10bfff84 	addi	r2,r2,-2
 4008cdc:	040100f4 	movhi	r16,1027
 4008ce0:	84262204 	addi	r16,r16,-26488
 4008ce4:	01400984 	movi	r5,38
 4008ce8:	1009883a 	mov	r4,r2
 4008cec:	40118340 	call	4011834 <__mulsi3>
 4008cf0:	1007883a 	mov	r3,r2
 4008cf4:	e0bfde17 	ldw	r2,-136(fp)
 4008cf8:	1885883a 	add	r2,r3,r2
 4008cfc:	1085883a 	add	r2,r2,r2
 4008d00:	1085883a 	add	r2,r2,r2
 4008d04:	8085883a 	add	r2,r16,r2
 4008d08:	00c00044 	movi	r3,1
 4008d0c:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 2]++;
 4008d10:	e0bfc317 	ldw	r2,-244(fp)
 4008d14:	10bfff84 	addi	r2,r2,-2
 4008d18:	00c100f4 	movhi	r3,1027
 4008d1c:	18e60404 	addi	r3,r3,-26608
 4008d20:	1089883a 	add	r4,r2,r2
 4008d24:	2109883a 	add	r4,r4,r4
 4008d28:	1907883a 	add	r3,r3,r4
 4008d2c:	18c00017 	ldw	r3,0(r3)
 4008d30:	19000044 	addi	r4,r3,1
 4008d34:	00c100f4 	movhi	r3,1027
 4008d38:	18e60404 	addi	r3,r3,-26608
 4008d3c:	1085883a 	add	r2,r2,r2
 4008d40:	1085883a 	add	r2,r2,r2
 4008d44:	1885883a 	add	r2,r3,r2
 4008d48:	11000015 	stw	r4,0(r2)
							for (int j = randomStart; j < randomFirstEnd; j++) {
				        		grid[i - 1 - row][j] = 1;
				        		rowCount[i - 1 - row]++;
							}
						}
						for (int j = randomFirstEnd; j < randomEnd; j++) {
 4008d4c:	e0bfde17 	ldw	r2,-136(fp)
 4008d50:	10800044 	addi	r2,r2,1
 4008d54:	e0bfde15 	stw	r2,-136(fp)
 4008d58:	e0ffde17 	ldw	r3,-136(fp)
 4008d5c:	e0bfc017 	ldw	r2,-256(fp)
 4008d60:	18bfdc16 	blt	r3,r2,4008cd4 <__alt_mem_onchip_memory2_0+0xfc003b14>
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}
						return;
 4008d64:	00069506 	br	400a7bc <dropTBlock+0x2864>
							rowCount[i - 2]++;
						}
						return;
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++) {
 4008d68:	e0bfdb17 	ldw	r2,-148(fp)
 4008d6c:	10800044 	addi	r2,r2,1
 4008d70:	e0bfdb15 	stw	r2,-148(fp)
 4008d74:	e0ffdb17 	ldw	r3,-148(fp)
 4008d78:	e0bfc017 	ldw	r2,-256(fp)
 4008d7c:	18bf8f16 	blt	r3,r2,4008bbc <__alt_mem_onchip_memory2_0+0xfc0039fc>
					}
				}
			}


        	i--;
 4008d80:	e0bfc317 	ldw	r2,-244(fp)
 4008d84:	10bfffc4 	addi	r2,r2,-1
 4008d88:	e0bfc315 	stw	r2,-244(fp)
        	if(shapeLayout == 0){
 4008d8c:	e0bfc217 	ldw	r2,-248(fp)
 4008d90:	1000491e 	bne	r2,zero,4008eb8 <dropTBlock+0xf60>
        		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4008d94:	e0bfbe17 	ldw	r2,-264(fp)
 4008d98:	e0bfdf15 	stw	r2,-132(fp)
 4008d9c:	00002006 	br	4008e20 <dropTBlock+0xec8>
	//        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x00;
						vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 4008da0:	d4200317 	ldw	r16,-32756(gp)
 4008da4:	e0bfc317 	ldw	r2,-244(fp)
 4008da8:	10bfffc4 	addi	r2,r2,-1
 4008dac:	01401404 	movi	r5,80
 4008db0:	1009883a 	mov	r4,r2
 4008db4:	40118340 	call	4011834 <__mulsi3>
 4008db8:	1007883a 	mov	r3,r2
 4008dbc:	e0bfdf17 	ldw	r2,-132(fp)
 4008dc0:	1885883a 	add	r2,r3,r2
 4008dc4:	1085883a 	add	r2,r2,r2
 4008dc8:	8085883a 	add	r2,r16,r2
 4008dcc:	00c00404 	movi	r3,16
 4008dd0:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 4008dd4:	d4600317 	ldw	r17,-32756(gp)
 4008dd8:	e0bfc317 	ldw	r2,-244(fp)
 4008ddc:	10bfffc4 	addi	r2,r2,-1
 4008de0:	01401404 	movi	r5,80
 4008de4:	1009883a 	mov	r4,r2
 4008de8:	40118340 	call	4011834 <__mulsi3>
 4008dec:	1007883a 	mov	r3,r2
 4008df0:	e0bfdf17 	ldw	r2,-132(fp)
 4008df4:	1885883a 	add	r2,r3,r2
 4008df8:	1085883a 	add	r2,r2,r2
 4008dfc:	14000044 	addi	r16,r2,1
 4008e00:	e13fdf17 	ldw	r4,-132(fp)
 4008e04:	400d8600 	call	400d860 <check_col>
 4008e08:	1007883a 	mov	r3,r2
 4008e0c:	8c05883a 	add	r2,r17,r16
 4008e10:	10c00005 	stb	r3,0(r2)
			}


        	i--;
        	if(shapeLayout == 0){
        		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4008e14:	e0bfdf17 	ldw	r2,-132(fp)
 4008e18:	10800044 	addi	r2,r2,1
 4008e1c:	e0bfdf15 	stw	r2,-132(fp)
 4008e20:	e0ffdf17 	ldw	r3,-132(fp)
 4008e24:	e0bfbf17 	ldw	r2,-260(fp)
 4008e28:	18bfdd16 	blt	r3,r2,4008da0 <__alt_mem_onchip_memory2_0+0xfc003be0>
						vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);

				}

				for (int j = randomStart; j < randomEnd; j++) {
 4008e2c:	e0bfbd17 	ldw	r2,-268(fp)
 4008e30:	e0bfe015 	stw	r2,-128(fp)
 4008e34:	00001c06 	br	4008ea8 <dropTBlock+0xf50>
	//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x00;
						vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
 4008e38:	d4200317 	ldw	r16,-32756(gp)
 4008e3c:	01401404 	movi	r5,80
 4008e40:	e13fc317 	ldw	r4,-244(fp)
 4008e44:	40118340 	call	4011834 <__mulsi3>
 4008e48:	1007883a 	mov	r3,r2
 4008e4c:	e0bfe017 	ldw	r2,-128(fp)
 4008e50:	1885883a 	add	r2,r3,r2
 4008e54:	1085883a 	add	r2,r2,r2
 4008e58:	8085883a 	add	r2,r16,r2
 4008e5c:	00c00404 	movi	r3,16
 4008e60:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 4008e64:	d4600317 	ldw	r17,-32756(gp)
 4008e68:	01401404 	movi	r5,80
 4008e6c:	e13fc317 	ldw	r4,-244(fp)
 4008e70:	40118340 	call	4011834 <__mulsi3>
 4008e74:	1007883a 	mov	r3,r2
 4008e78:	e0bfe017 	ldw	r2,-128(fp)
 4008e7c:	1885883a 	add	r2,r3,r2
 4008e80:	1085883a 	add	r2,r2,r2
 4008e84:	14000044 	addi	r16,r2,1
 4008e88:	e13fe017 	ldw	r4,-128(fp)
 4008e8c:	400d8600 	call	400d860 <check_col>
 4008e90:	1007883a 	mov	r3,r2
 4008e94:	8c05883a 	add	r2,r17,r16
 4008e98:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);

				}

				for (int j = randomStart; j < randomEnd; j++) {
 4008e9c:	e0bfe017 	ldw	r2,-128(fp)
 4008ea0:	10800044 	addi	r2,r2,1
 4008ea4:	e0bfe015 	stw	r2,-128(fp)
 4008ea8:	e0ffe017 	ldw	r3,-128(fp)
 4008eac:	e0bfc017 	ldw	r2,-256(fp)
 4008eb0:	18bfe116 	blt	r3,r2,4008e38 <__alt_mem_onchip_memory2_0+0xfc003c78>
 4008eb4:	0000ff06 	br	40092b4 <dropTBlock+0x135c>
	//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x00;
						vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
 4008eb8:	e0bfc217 	ldw	r2,-248(fp)
 4008ebc:	10800058 	cmpnei	r2,r2,1
 4008ec0:	1000571e 	bne	r2,zero,4009020 <dropTBlock+0x10c8>
				for(int row = 0; row  < 3; row++){
 4008ec4:	e03fe115 	stw	zero,-124(fp)
 4008ec8:	00002b06 	br	4008f78 <dropTBlock+0x1020>
					for (int j = randomFirstStart; j < randomEnd; j++) {
 4008ecc:	e0bfbe17 	ldw	r2,-264(fp)
 4008ed0:	e0bfe215 	stw	r2,-120(fp)
 4008ed4:	00002206 	br	4008f60 <dropTBlock+0x1008>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
 4008ed8:	d4200317 	ldw	r16,-32756(gp)
 4008edc:	e0ffc317 	ldw	r3,-244(fp)
 4008ee0:	e0bfe117 	ldw	r2,-124(fp)
 4008ee4:	1885c83a 	sub	r2,r3,r2
 4008ee8:	01401404 	movi	r5,80
 4008eec:	1009883a 	mov	r4,r2
 4008ef0:	40118340 	call	4011834 <__mulsi3>
 4008ef4:	1007883a 	mov	r3,r2
 4008ef8:	e0bfe217 	ldw	r2,-120(fp)
 4008efc:	1885883a 	add	r2,r3,r2
 4008f00:	1085883a 	add	r2,r2,r2
 4008f04:	8085883a 	add	r2,r16,r2
 4008f08:	00c00404 	movi	r3,16
 4008f0c:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 4008f10:	d4600317 	ldw	r17,-32756(gp)
 4008f14:	e0ffc317 	ldw	r3,-244(fp)
 4008f18:	e0bfe117 	ldw	r2,-124(fp)
 4008f1c:	1885c83a 	sub	r2,r3,r2
 4008f20:	01401404 	movi	r5,80
 4008f24:	1009883a 	mov	r4,r2
 4008f28:	40118340 	call	4011834 <__mulsi3>
 4008f2c:	1007883a 	mov	r3,r2
 4008f30:	e0bfe217 	ldw	r2,-120(fp)
 4008f34:	1885883a 	add	r2,r3,r2
 4008f38:	1085883a 	add	r2,r2,r2
 4008f3c:	14000044 	addi	r16,r2,1
 4008f40:	e13fe217 	ldw	r4,-120(fp)
 4008f44:	400d8600 	call	400d860 <check_col>
 4008f48:	1007883a 	mov	r3,r2
 4008f4c:	8c05883a 	add	r2,r17,r16
 4008f50:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row  < 3; row++){
					for (int j = randomFirstStart; j < randomEnd; j++) {
 4008f54:	e0bfe217 	ldw	r2,-120(fp)
 4008f58:	10800044 	addi	r2,r2,1
 4008f5c:	e0bfe215 	stw	r2,-120(fp)
 4008f60:	e0ffe217 	ldw	r3,-120(fp)
 4008f64:	e0bfc017 	ldw	r2,-256(fp)
 4008f68:	18bfdb16 	blt	r3,r2,4008ed8 <__alt_mem_onchip_memory2_0+0xfc003d18>
	//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x00;
						vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row  < 3; row++){
 4008f6c:	e0bfe117 	ldw	r2,-124(fp)
 4008f70:	10800044 	addi	r2,r2,1
 4008f74:	e0bfe115 	stw	r2,-124(fp)
 4008f78:	e0bfe117 	ldw	r2,-124(fp)
 4008f7c:	108000d0 	cmplti	r2,r2,3
 4008f80:	103fd21e 	bne	r2,zero,4008ecc <__alt_mem_onchip_memory2_0+0xfc003d0c>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomFirstStart; j++) {
 4008f84:	e0bfbd17 	ldw	r2,-268(fp)
 4008f88:	e0bfe315 	stw	r2,-116(fp)
 4008f8c:	00002006 	br	4009010 <dropTBlock+0x10b8>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 4008f90:	d4200317 	ldw	r16,-32756(gp)
 4008f94:	e0bfc317 	ldw	r2,-244(fp)
 4008f98:	10bfffc4 	addi	r2,r2,-1
 4008f9c:	01401404 	movi	r5,80
 4008fa0:	1009883a 	mov	r4,r2
 4008fa4:	40118340 	call	4011834 <__mulsi3>
 4008fa8:	1007883a 	mov	r3,r2
 4008fac:	e0bfe317 	ldw	r2,-116(fp)
 4008fb0:	1885883a 	add	r2,r3,r2
 4008fb4:	1085883a 	add	r2,r2,r2
 4008fb8:	8085883a 	add	r2,r16,r2
 4008fbc:	00c00404 	movi	r3,16
 4008fc0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 4008fc4:	d4600317 	ldw	r17,-32756(gp)
 4008fc8:	e0bfc317 	ldw	r2,-244(fp)
 4008fcc:	10bfffc4 	addi	r2,r2,-1
 4008fd0:	01401404 	movi	r5,80
 4008fd4:	1009883a 	mov	r4,r2
 4008fd8:	40118340 	call	4011834 <__mulsi3>
 4008fdc:	1007883a 	mov	r3,r2
 4008fe0:	e0bfe317 	ldw	r2,-116(fp)
 4008fe4:	1885883a 	add	r2,r3,r2
 4008fe8:	1085883a 	add	r2,r2,r2
 4008fec:	14000044 	addi	r16,r2,1
 4008ff0:	e13fe317 	ldw	r4,-116(fp)
 4008ff4:	400d8600 	call	400d860 <check_col>
 4008ff8:	1007883a 	mov	r3,r2
 4008ffc:	8c05883a 	add	r2,r17,r16
 4009000:	10c00005 	stb	r3,0(r2)
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomFirstStart; j++) {
 4009004:	e0bfe317 	ldw	r2,-116(fp)
 4009008:	10800044 	addi	r2,r2,1
 400900c:	e0bfe315 	stw	r2,-116(fp)
 4009010:	e0ffe317 	ldw	r3,-116(fp)
 4009014:	e0bfbe17 	ldw	r2,-264(fp)
 4009018:	18bfdd16 	blt	r3,r2,4008f90 <__alt_mem_onchip_memory2_0+0xfc003dd0>
 400901c:	0000a506 	br	40092b4 <dropTBlock+0x135c>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 2){
 4009020:	e0bfc217 	ldw	r2,-248(fp)
 4009024:	10800098 	cmpnei	r2,r2,2
 4009028:	1000491e 	bne	r2,zero,4009150 <dropTBlock+0x11f8>
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400902c:	e0bfbe17 	ldw	r2,-264(fp)
 4009030:	e0bfe415 	stw	r2,-112(fp)
 4009034:	00001c06 	br	40090a8 <dropTBlock+0x1150>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
 4009038:	d4200317 	ldw	r16,-32756(gp)
 400903c:	01401404 	movi	r5,80
 4009040:	e13fc317 	ldw	r4,-244(fp)
 4009044:	40118340 	call	4011834 <__mulsi3>
 4009048:	1007883a 	mov	r3,r2
 400904c:	e0bfe417 	ldw	r2,-112(fp)
 4009050:	1885883a 	add	r2,r3,r2
 4009054:	1085883a 	add	r2,r2,r2
 4009058:	8085883a 	add	r2,r16,r2
 400905c:	00c00404 	movi	r3,16
 4009060:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 4009064:	d4600317 	ldw	r17,-32756(gp)
 4009068:	01401404 	movi	r5,80
 400906c:	e13fc317 	ldw	r4,-244(fp)
 4009070:	40118340 	call	4011834 <__mulsi3>
 4009074:	1007883a 	mov	r3,r2
 4009078:	e0bfe417 	ldw	r2,-112(fp)
 400907c:	1885883a 	add	r2,r3,r2
 4009080:	1085883a 	add	r2,r2,r2
 4009084:	14000044 	addi	r16,r2,1
 4009088:	e13fe417 	ldw	r4,-112(fp)
 400908c:	400d8600 	call	400d860 <check_col>
 4009090:	1007883a 	mov	r3,r2
 4009094:	8c05883a 	add	r2,r17,r16
 4009098:	10c00005 	stb	r3,0(r2)
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 2){
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400909c:	e0bfe417 	ldw	r2,-112(fp)
 40090a0:	10800044 	addi	r2,r2,1
 40090a4:	e0bfe415 	stw	r2,-112(fp)
 40090a8:	e0ffe417 	ldw	r3,-112(fp)
 40090ac:	e0bfbf17 	ldw	r2,-260(fp)
 40090b0:	18bfe116 	blt	r3,r2,4009038 <__alt_mem_onchip_memory2_0+0xfc003e78>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 40090b4:	e0bfbd17 	ldw	r2,-268(fp)
 40090b8:	e0bfe515 	stw	r2,-108(fp)
 40090bc:	00002006 	br	4009140 <dropTBlock+0x11e8>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 40090c0:	d4200317 	ldw	r16,-32756(gp)
 40090c4:	e0bfc317 	ldw	r2,-244(fp)
 40090c8:	10bfffc4 	addi	r2,r2,-1
 40090cc:	01401404 	movi	r5,80
 40090d0:	1009883a 	mov	r4,r2
 40090d4:	40118340 	call	4011834 <__mulsi3>
 40090d8:	1007883a 	mov	r3,r2
 40090dc:	e0bfe517 	ldw	r2,-108(fp)
 40090e0:	1885883a 	add	r2,r3,r2
 40090e4:	1085883a 	add	r2,r2,r2
 40090e8:	8085883a 	add	r2,r16,r2
 40090ec:	00c00404 	movi	r3,16
 40090f0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 40090f4:	d4600317 	ldw	r17,-32756(gp)
 40090f8:	e0bfc317 	ldw	r2,-244(fp)
 40090fc:	10bfffc4 	addi	r2,r2,-1
 4009100:	01401404 	movi	r5,80
 4009104:	1009883a 	mov	r4,r2
 4009108:	40118340 	call	4011834 <__mulsi3>
 400910c:	1007883a 	mov	r3,r2
 4009110:	e0bfe517 	ldw	r2,-108(fp)
 4009114:	1885883a 	add	r2,r3,r2
 4009118:	1085883a 	add	r2,r2,r2
 400911c:	14000044 	addi	r16,r2,1
 4009120:	e13fe517 	ldw	r4,-108(fp)
 4009124:	400d8600 	call	400d860 <check_col>
 4009128:	1007883a 	mov	r3,r2
 400912c:	8c05883a 	add	r2,r17,r16
 4009130:	10c00005 	stb	r3,0(r2)
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4009134:	e0bfe517 	ldw	r2,-108(fp)
 4009138:	10800044 	addi	r2,r2,1
 400913c:	e0bfe515 	stw	r2,-108(fp)
 4009140:	e0ffe517 	ldw	r3,-108(fp)
 4009144:	e0bfc017 	ldw	r2,-256(fp)
 4009148:	18bfdd16 	blt	r3,r2,40090c0 <__alt_mem_onchip_memory2_0+0xfc003f00>
 400914c:	00005906 	br	40092b4 <dropTBlock+0x135c>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 3){
 4009150:	e0bfc217 	ldw	r2,-248(fp)
 4009154:	108000d8 	cmpnei	r2,r2,3
 4009158:	1000561e 	bne	r2,zero,40092b4 <dropTBlock+0x135c>
				for(int row = 0; row  < 3; row++){
 400915c:	e03fe615 	stw	zero,-104(fp)
 4009160:	00002b06 	br	4009210 <dropTBlock+0x12b8>
					for (int j = randomStart; j < randomFirstEnd; j++) {
 4009164:	e0bfbd17 	ldw	r2,-268(fp)
 4009168:	e0bfe715 	stw	r2,-100(fp)
 400916c:	00002206 	br	40091f8 <dropTBlock+0x12a0>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
 4009170:	d4200317 	ldw	r16,-32756(gp)
 4009174:	e0ffc317 	ldw	r3,-244(fp)
 4009178:	e0bfe617 	ldw	r2,-104(fp)
 400917c:	1885c83a 	sub	r2,r3,r2
 4009180:	01401404 	movi	r5,80
 4009184:	1009883a 	mov	r4,r2
 4009188:	40118340 	call	4011834 <__mulsi3>
 400918c:	1007883a 	mov	r3,r2
 4009190:	e0bfe717 	ldw	r2,-100(fp)
 4009194:	1885883a 	add	r2,r3,r2
 4009198:	1085883a 	add	r2,r2,r2
 400919c:	8085883a 	add	r2,r16,r2
 40091a0:	00c00404 	movi	r3,16
 40091a4:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 40091a8:	d4600317 	ldw	r17,-32756(gp)
 40091ac:	e0ffc317 	ldw	r3,-244(fp)
 40091b0:	e0bfe617 	ldw	r2,-104(fp)
 40091b4:	1885c83a 	sub	r2,r3,r2
 40091b8:	01401404 	movi	r5,80
 40091bc:	1009883a 	mov	r4,r2
 40091c0:	40118340 	call	4011834 <__mulsi3>
 40091c4:	1007883a 	mov	r3,r2
 40091c8:	e0bfe717 	ldw	r2,-100(fp)
 40091cc:	1885883a 	add	r2,r3,r2
 40091d0:	1085883a 	add	r2,r2,r2
 40091d4:	14000044 	addi	r16,r2,1
 40091d8:	e13fe717 	ldw	r4,-100(fp)
 40091dc:	400d8600 	call	400d860 <check_col>
 40091e0:	1007883a 	mov	r3,r2
 40091e4:	8c05883a 	add	r2,r17,r16
 40091e8:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 3){
				for(int row = 0; row  < 3; row++){
					for (int j = randomStart; j < randomFirstEnd; j++) {
 40091ec:	e0bfe717 	ldw	r2,-100(fp)
 40091f0:	10800044 	addi	r2,r2,1
 40091f4:	e0bfe715 	stw	r2,-100(fp)
 40091f8:	e0ffe717 	ldw	r3,-100(fp)
 40091fc:	e0bfbf17 	ldw	r2,-260(fp)
 4009200:	18bfdb16 	blt	r3,r2,4009170 <__alt_mem_onchip_memory2_0+0xfc003fb0>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 3){
				for(int row = 0; row  < 3; row++){
 4009204:	e0bfe617 	ldw	r2,-104(fp)
 4009208:	10800044 	addi	r2,r2,1
 400920c:	e0bfe615 	stw	r2,-104(fp)
 4009210:	e0bfe617 	ldw	r2,-104(fp)
 4009214:	108000d0 	cmplti	r2,r2,3
 4009218:	103fd21e 	bne	r2,zero,4009164 <__alt_mem_onchip_memory2_0+0xfc003fa4>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++) {
 400921c:	e0bfbf17 	ldw	r2,-260(fp)
 4009220:	e0bfe815 	stw	r2,-96(fp)
 4009224:	00002006 	br	40092a8 <dropTBlock+0x1350>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 4009228:	d4200317 	ldw	r16,-32756(gp)
 400922c:	e0bfc317 	ldw	r2,-244(fp)
 4009230:	10bfffc4 	addi	r2,r2,-1
 4009234:	01401404 	movi	r5,80
 4009238:	1009883a 	mov	r4,r2
 400923c:	40118340 	call	4011834 <__mulsi3>
 4009240:	1007883a 	mov	r3,r2
 4009244:	e0bfe817 	ldw	r2,-96(fp)
 4009248:	1885883a 	add	r2,r3,r2
 400924c:	1085883a 	add	r2,r2,r2
 4009250:	8085883a 	add	r2,r16,r2
 4009254:	00c00404 	movi	r3,16
 4009258:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400925c:	d4600317 	ldw	r17,-32756(gp)
 4009260:	e0bfc317 	ldw	r2,-244(fp)
 4009264:	10bfffc4 	addi	r2,r2,-1
 4009268:	01401404 	movi	r5,80
 400926c:	1009883a 	mov	r4,r2
 4009270:	40118340 	call	4011834 <__mulsi3>
 4009274:	1007883a 	mov	r3,r2
 4009278:	e0bfe817 	ldw	r2,-96(fp)
 400927c:	1885883a 	add	r2,r3,r2
 4009280:	1085883a 	add	r2,r2,r2
 4009284:	14000044 	addi	r16,r2,1
 4009288:	e13fe817 	ldw	r4,-96(fp)
 400928c:	400d8600 	call	400d860 <check_col>
 4009290:	1007883a 	mov	r3,r2
 4009294:	8c05883a 	add	r2,r17,r16
 4009298:	10c00005 	stb	r3,0(r2)
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++) {
 400929c:	e0bfe817 	ldw	r2,-96(fp)
 40092a0:	10800044 	addi	r2,r2,1
 40092a4:	e0bfe815 	stw	r2,-96(fp)
 40092a8:	e0ffe817 	ldw	r3,-96(fp)
 40092ac:	e0bfc017 	ldw	r2,-256(fp)
 40092b0:	18bfdd16 	blt	r3,r2,4009228 <__alt_mem_onchip_memory2_0+0xfc004068>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}
			}
        	i++;
 40092b4:	e0bfc317 	ldw	r2,-244(fp)
 40092b8:	10800044 	addi	r2,r2,1
 40092bc:	e0bfc315 	stw	r2,-244(fp)

        	keycode = keyboard_input();
 40092c0:	40007d00 	call	40007d0 <keyboard_input>
 40092c4:	e0bffd05 	stb	r2,-12(fp)
        	time = timer;
 40092c8:	d0a80117 	ldw	r2,-24572(gp)
 40092cc:	e0bfc115 	stw	r2,-252(fp)
			if(keycode == 0x51){
 40092d0:	e0bffd03 	ldbu	r2,-12(fp)
 40092d4:	10801458 	cmpnei	r2,r2,81
 40092d8:	1000131e 	bne	r2,zero,4009328 <dropTBlock+0x13d0>
				time = timer / 1.5;
 40092dc:	d0a80117 	ldw	r2,-24572(gp)
 40092e0:	1009883a 	mov	r4,r2
 40092e4:	4013f180 	call	4013f18 <__floatsidf>
 40092e8:	1011883a 	mov	r8,r2
 40092ec:	1813883a 	mov	r9,r3
 40092f0:	000d883a 	mov	r6,zero
 40092f4:	01cffe34 	movhi	r7,16376
 40092f8:	4009883a 	mov	r4,r8
 40092fc:	480b883a 	mov	r5,r9
 4009300:	40121080 	call	4012108 <__divdf3>
 4009304:	1009883a 	mov	r4,r2
 4009308:	180b883a 	mov	r5,r3
 400930c:	2005883a 	mov	r2,r4
 4009310:	2807883a 	mov	r3,r5
 4009314:	1009883a 	mov	r4,r2
 4009318:	180b883a 	mov	r5,r3
 400931c:	4013e980 	call	4013e98 <__fixdfsi>
 4009320:	e0bfc115 	stw	r2,-252(fp)
 4009324:	0002c906 	br	4009e4c <dropTBlock+0x1ef4>
			}
			else if(keycode == 0x4F){
 4009328:	e0bffd03 	ldbu	r2,-12(fp)
 400932c:	108013d8 	cmpnei	r2,r2,79
 4009330:	1000ee1e 	bne	r2,zero,40096ec <dropTBlock+0x1794>
				if(randomEnd != 59){
 4009334:	e0bfc017 	ldw	r2,-256(fp)
 4009338:	10800ee0 	cmpeqi	r2,r2,59
 400933c:	1002c31e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
					if(shapeLayout == 0
 4009340:	e0bfc217 	ldw	r2,-248(fp)
 4009344:	1000301e 	bne	r2,zero,4009408 <dropTBlock+0x14b0>
							&& grid[i-1][randomEnd + 1] != 1 && grid[i - 2][randomFirstEnd + 1] != 1){
 4009348:	e0bfc317 	ldw	r2,-244(fp)
 400934c:	10ffffc4 	addi	r3,r2,-1
 4009350:	e0bfc017 	ldw	r2,-256(fp)
 4009354:	14400044 	addi	r17,r2,1
 4009358:	040100f4 	movhi	r16,1027
 400935c:	84262204 	addi	r16,r16,-26488
 4009360:	01400984 	movi	r5,38
 4009364:	1809883a 	mov	r4,r3
 4009368:	40118340 	call	4011834 <__mulsi3>
 400936c:	1445883a 	add	r2,r2,r17
 4009370:	1085883a 	add	r2,r2,r2
 4009374:	1085883a 	add	r2,r2,r2
 4009378:	8085883a 	add	r2,r16,r2
 400937c:	10800017 	ldw	r2,0(r2)
 4009380:	10800060 	cmpeqi	r2,r2,1
 4009384:	1000201e 	bne	r2,zero,4009408 <dropTBlock+0x14b0>
 4009388:	e0bfc317 	ldw	r2,-244(fp)
 400938c:	10ffff84 	addi	r3,r2,-2
 4009390:	e0bfbf17 	ldw	r2,-260(fp)
 4009394:	14400044 	addi	r17,r2,1
 4009398:	040100f4 	movhi	r16,1027
 400939c:	84262204 	addi	r16,r16,-26488
 40093a0:	01400984 	movi	r5,38
 40093a4:	1809883a 	mov	r4,r3
 40093a8:	40118340 	call	4011834 <__mulsi3>
 40093ac:	1445883a 	add	r2,r2,r17
 40093b0:	1085883a 	add	r2,r2,r2
 40093b4:	1085883a 	add	r2,r2,r2
 40093b8:	8085883a 	add	r2,r16,r2
 40093bc:	10800017 	ldw	r2,0(r2)
 40093c0:	10800060 	cmpeqi	r2,r2,1
 40093c4:	1000101e 	bne	r2,zero,4009408 <dropTBlock+0x14b0>
						randomStart += 2;
 40093c8:	e0bfbd17 	ldw	r2,-268(fp)
 40093cc:	10800084 	addi	r2,r2,2
 40093d0:	e0bfbd15 	stw	r2,-268(fp)
						randomEnd += 2;
 40093d4:	e0bfc017 	ldw	r2,-256(fp)
 40093d8:	10800084 	addi	r2,r2,2
 40093dc:	e0bfc015 	stw	r2,-256(fp)
						randomFirstEnd += 2;
 40093e0:	e0bfbf17 	ldw	r2,-260(fp)
 40093e4:	10800084 	addi	r2,r2,2
 40093e8:	e0bfbf15 	stw	r2,-260(fp)
						randomFirstStart += 2;
 40093ec:	e0bfbe17 	ldw	r2,-264(fp)
 40093f0:	10800084 	addi	r2,r2,2
 40093f4:	e0bfbe15 	stw	r2,-264(fp)
						i--;
 40093f8:	e0bfc317 	ldw	r2,-244(fp)
 40093fc:	10bfffc4 	addi	r2,r2,-1
 4009400:	e0bfc315 	stw	r2,-244(fp)
 4009404:	00029106 	br	4009e4c <dropTBlock+0x1ef4>
					}else if(shapeLayout == 1
 4009408:	e0bfc217 	ldw	r2,-248(fp)
 400940c:	10800058 	cmpnei	r2,r2,1
 4009410:	1000401e 	bne	r2,zero,4009514 <dropTBlock+0x15bc>
							&& grid[i-1][randomFirstEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1 && grid[i-3][randomFirstEnd + 1] != 1){
 4009414:	e0bfc317 	ldw	r2,-244(fp)
 4009418:	10ffffc4 	addi	r3,r2,-1
 400941c:	e0bfbf17 	ldw	r2,-260(fp)
 4009420:	14400044 	addi	r17,r2,1
 4009424:	040100f4 	movhi	r16,1027
 4009428:	84262204 	addi	r16,r16,-26488
 400942c:	01400984 	movi	r5,38
 4009430:	1809883a 	mov	r4,r3
 4009434:	40118340 	call	4011834 <__mulsi3>
 4009438:	1445883a 	add	r2,r2,r17
 400943c:	1085883a 	add	r2,r2,r2
 4009440:	1085883a 	add	r2,r2,r2
 4009444:	8085883a 	add	r2,r16,r2
 4009448:	10800017 	ldw	r2,0(r2)
 400944c:	10800060 	cmpeqi	r2,r2,1
 4009450:	1000301e 	bne	r2,zero,4009514 <dropTBlock+0x15bc>
 4009454:	e0bfc317 	ldw	r2,-244(fp)
 4009458:	10ffff84 	addi	r3,r2,-2
 400945c:	e0bfc017 	ldw	r2,-256(fp)
 4009460:	14400044 	addi	r17,r2,1
 4009464:	040100f4 	movhi	r16,1027
 4009468:	84262204 	addi	r16,r16,-26488
 400946c:	01400984 	movi	r5,38
 4009470:	1809883a 	mov	r4,r3
 4009474:	40118340 	call	4011834 <__mulsi3>
 4009478:	1445883a 	add	r2,r2,r17
 400947c:	1085883a 	add	r2,r2,r2
 4009480:	1085883a 	add	r2,r2,r2
 4009484:	8085883a 	add	r2,r16,r2
 4009488:	10800017 	ldw	r2,0(r2)
 400948c:	10800060 	cmpeqi	r2,r2,1
 4009490:	1000201e 	bne	r2,zero,4009514 <dropTBlock+0x15bc>
 4009494:	e0bfc317 	ldw	r2,-244(fp)
 4009498:	10ffff44 	addi	r3,r2,-3
 400949c:	e0bfbf17 	ldw	r2,-260(fp)
 40094a0:	14400044 	addi	r17,r2,1
 40094a4:	040100f4 	movhi	r16,1027
 40094a8:	84262204 	addi	r16,r16,-26488
 40094ac:	01400984 	movi	r5,38
 40094b0:	1809883a 	mov	r4,r3
 40094b4:	40118340 	call	4011834 <__mulsi3>
 40094b8:	1445883a 	add	r2,r2,r17
 40094bc:	1085883a 	add	r2,r2,r2
 40094c0:	1085883a 	add	r2,r2,r2
 40094c4:	8085883a 	add	r2,r16,r2
 40094c8:	10800017 	ldw	r2,0(r2)
 40094cc:	10800060 	cmpeqi	r2,r2,1
 40094d0:	1000101e 	bne	r2,zero,4009514 <dropTBlock+0x15bc>
						randomStart += 2;
 40094d4:	e0bfbd17 	ldw	r2,-268(fp)
 40094d8:	10800084 	addi	r2,r2,2
 40094dc:	e0bfbd15 	stw	r2,-268(fp)
						randomEnd += 2;
 40094e0:	e0bfc017 	ldw	r2,-256(fp)
 40094e4:	10800084 	addi	r2,r2,2
 40094e8:	e0bfc015 	stw	r2,-256(fp)
						randomFirstEnd += 2;
 40094ec:	e0bfbf17 	ldw	r2,-260(fp)
 40094f0:	10800084 	addi	r2,r2,2
 40094f4:	e0bfbf15 	stw	r2,-260(fp)
						randomFirstStart += 2;
 40094f8:	e0bfbe17 	ldw	r2,-264(fp)
 40094fc:	10800084 	addi	r2,r2,2
 4009500:	e0bfbe15 	stw	r2,-264(fp)
						i--;
 4009504:	e0bfc317 	ldw	r2,-244(fp)
 4009508:	10bfffc4 	addi	r2,r2,-1
 400950c:	e0bfc315 	stw	r2,-244(fp)
 4009510:	00024e06 	br	4009e4c <dropTBlock+0x1ef4>
					}else if(shapeLayout == 2
 4009514:	e0bfc217 	ldw	r2,-248(fp)
 4009518:	10800098 	cmpnei	r2,r2,2
 400951c:	1000301e 	bne	r2,zero,40095e0 <dropTBlock+0x1688>
							&& grid[i-2][randomEnd + 1] != 1 && grid[i - 1][randomFirstEnd + 1] != 1){
 4009520:	e0bfc317 	ldw	r2,-244(fp)
 4009524:	10ffff84 	addi	r3,r2,-2
 4009528:	e0bfc017 	ldw	r2,-256(fp)
 400952c:	14400044 	addi	r17,r2,1
 4009530:	040100f4 	movhi	r16,1027
 4009534:	84262204 	addi	r16,r16,-26488
 4009538:	01400984 	movi	r5,38
 400953c:	1809883a 	mov	r4,r3
 4009540:	40118340 	call	4011834 <__mulsi3>
 4009544:	1445883a 	add	r2,r2,r17
 4009548:	1085883a 	add	r2,r2,r2
 400954c:	1085883a 	add	r2,r2,r2
 4009550:	8085883a 	add	r2,r16,r2
 4009554:	10800017 	ldw	r2,0(r2)
 4009558:	10800060 	cmpeqi	r2,r2,1
 400955c:	1000201e 	bne	r2,zero,40095e0 <dropTBlock+0x1688>
 4009560:	e0bfc317 	ldw	r2,-244(fp)
 4009564:	10ffffc4 	addi	r3,r2,-1
 4009568:	e0bfbf17 	ldw	r2,-260(fp)
 400956c:	14400044 	addi	r17,r2,1
 4009570:	040100f4 	movhi	r16,1027
 4009574:	84262204 	addi	r16,r16,-26488
 4009578:	01400984 	movi	r5,38
 400957c:	1809883a 	mov	r4,r3
 4009580:	40118340 	call	4011834 <__mulsi3>
 4009584:	1445883a 	add	r2,r2,r17
 4009588:	1085883a 	add	r2,r2,r2
 400958c:	1085883a 	add	r2,r2,r2
 4009590:	8085883a 	add	r2,r16,r2
 4009594:	10800017 	ldw	r2,0(r2)
 4009598:	10800060 	cmpeqi	r2,r2,1
 400959c:	1000101e 	bne	r2,zero,40095e0 <dropTBlock+0x1688>
						randomStart += 2;
 40095a0:	e0bfbd17 	ldw	r2,-268(fp)
 40095a4:	10800084 	addi	r2,r2,2
 40095a8:	e0bfbd15 	stw	r2,-268(fp)
						randomEnd += 2;
 40095ac:	e0bfc017 	ldw	r2,-256(fp)
 40095b0:	10800084 	addi	r2,r2,2
 40095b4:	e0bfc015 	stw	r2,-256(fp)
						randomFirstEnd += 2;
 40095b8:	e0bfbf17 	ldw	r2,-260(fp)
 40095bc:	10800084 	addi	r2,r2,2
 40095c0:	e0bfbf15 	stw	r2,-260(fp)
						randomFirstStart += 2;
 40095c4:	e0bfbe17 	ldw	r2,-264(fp)
 40095c8:	10800084 	addi	r2,r2,2
 40095cc:	e0bfbe15 	stw	r2,-264(fp)
						i--;
 40095d0:	e0bfc317 	ldw	r2,-244(fp)
 40095d4:	10bfffc4 	addi	r2,r2,-1
 40095d8:	e0bfc315 	stw	r2,-244(fp)
 40095dc:	00021b06 	br	4009e4c <dropTBlock+0x1ef4>
					}else if(shapeLayout == 3
 40095e0:	e0bfc217 	ldw	r2,-248(fp)
 40095e4:	108000d8 	cmpnei	r2,r2,3
 40095e8:	1002181e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
							&& grid[i-1][randomEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1 && grid[i-3][randomEnd + 1] != 1){
 40095ec:	e0bfc317 	ldw	r2,-244(fp)
 40095f0:	10ffffc4 	addi	r3,r2,-1
 40095f4:	e0bfc017 	ldw	r2,-256(fp)
 40095f8:	14400044 	addi	r17,r2,1
 40095fc:	040100f4 	movhi	r16,1027
 4009600:	84262204 	addi	r16,r16,-26488
 4009604:	01400984 	movi	r5,38
 4009608:	1809883a 	mov	r4,r3
 400960c:	40118340 	call	4011834 <__mulsi3>
 4009610:	1445883a 	add	r2,r2,r17
 4009614:	1085883a 	add	r2,r2,r2
 4009618:	1085883a 	add	r2,r2,r2
 400961c:	8085883a 	add	r2,r16,r2
 4009620:	10800017 	ldw	r2,0(r2)
 4009624:	10800060 	cmpeqi	r2,r2,1
 4009628:	1002081e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
 400962c:	e0bfc317 	ldw	r2,-244(fp)
 4009630:	10ffff84 	addi	r3,r2,-2
 4009634:	e0bfc017 	ldw	r2,-256(fp)
 4009638:	14400044 	addi	r17,r2,1
 400963c:	040100f4 	movhi	r16,1027
 4009640:	84262204 	addi	r16,r16,-26488
 4009644:	01400984 	movi	r5,38
 4009648:	1809883a 	mov	r4,r3
 400964c:	40118340 	call	4011834 <__mulsi3>
 4009650:	1445883a 	add	r2,r2,r17
 4009654:	1085883a 	add	r2,r2,r2
 4009658:	1085883a 	add	r2,r2,r2
 400965c:	8085883a 	add	r2,r16,r2
 4009660:	10800017 	ldw	r2,0(r2)
 4009664:	10800060 	cmpeqi	r2,r2,1
 4009668:	1001f81e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
 400966c:	e0bfc317 	ldw	r2,-244(fp)
 4009670:	10ffff44 	addi	r3,r2,-3
 4009674:	e0bfc017 	ldw	r2,-256(fp)
 4009678:	14400044 	addi	r17,r2,1
 400967c:	040100f4 	movhi	r16,1027
 4009680:	84262204 	addi	r16,r16,-26488
 4009684:	01400984 	movi	r5,38
 4009688:	1809883a 	mov	r4,r3
 400968c:	40118340 	call	4011834 <__mulsi3>
 4009690:	1445883a 	add	r2,r2,r17
 4009694:	1085883a 	add	r2,r2,r2
 4009698:	1085883a 	add	r2,r2,r2
 400969c:	8085883a 	add	r2,r16,r2
 40096a0:	10800017 	ldw	r2,0(r2)
 40096a4:	10800060 	cmpeqi	r2,r2,1
 40096a8:	1001e81e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
						randomStart += 2;
 40096ac:	e0bfbd17 	ldw	r2,-268(fp)
 40096b0:	10800084 	addi	r2,r2,2
 40096b4:	e0bfbd15 	stw	r2,-268(fp)
						randomEnd += 2;
 40096b8:	e0bfc017 	ldw	r2,-256(fp)
 40096bc:	10800084 	addi	r2,r2,2
 40096c0:	e0bfc015 	stw	r2,-256(fp)
						randomFirstEnd += 2;
 40096c4:	e0bfbf17 	ldw	r2,-260(fp)
 40096c8:	10800084 	addi	r2,r2,2
 40096cc:	e0bfbf15 	stw	r2,-260(fp)
						randomFirstStart += 2;
 40096d0:	e0bfbe17 	ldw	r2,-264(fp)
 40096d4:	10800084 	addi	r2,r2,2
 40096d8:	e0bfbe15 	stw	r2,-264(fp)
						i--;
 40096dc:	e0bfc317 	ldw	r2,-244(fp)
 40096e0:	10bfffc4 	addi	r2,r2,-1
 40096e4:	e0bfc315 	stw	r2,-244(fp)
 40096e8:	0001d806 	br	4009e4c <dropTBlock+0x1ef4>
					}


				}
			}
			else if(keycode == 0x50){
 40096ec:	e0bffd03 	ldbu	r2,-12(fp)
 40096f0:	10801418 	cmpnei	r2,r2,80
 40096f4:	1000ee1e 	bne	r2,zero,4009ab0 <dropTBlock+0x1b58>
				if(randomStart != 21){
 40096f8:	e0bfbd17 	ldw	r2,-268(fp)
 40096fc:	10800560 	cmpeqi	r2,r2,21
 4009700:	1001d21e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
					if(shapeLayout == 0
 4009704:	e0bfc217 	ldw	r2,-248(fp)
 4009708:	1000301e 	bne	r2,zero,40097cc <dropTBlock+0x1874>
							&& grid[i-1][randomStart - 1] != 1 && grid[i - 2][randomFirstStart - 1] != 1){
 400970c:	e0bfc317 	ldw	r2,-244(fp)
 4009710:	10ffffc4 	addi	r3,r2,-1
 4009714:	e0bfbd17 	ldw	r2,-268(fp)
 4009718:	147fffc4 	addi	r17,r2,-1
 400971c:	040100f4 	movhi	r16,1027
 4009720:	84262204 	addi	r16,r16,-26488
 4009724:	01400984 	movi	r5,38
 4009728:	1809883a 	mov	r4,r3
 400972c:	40118340 	call	4011834 <__mulsi3>
 4009730:	1445883a 	add	r2,r2,r17
 4009734:	1085883a 	add	r2,r2,r2
 4009738:	1085883a 	add	r2,r2,r2
 400973c:	8085883a 	add	r2,r16,r2
 4009740:	10800017 	ldw	r2,0(r2)
 4009744:	10800060 	cmpeqi	r2,r2,1
 4009748:	1000201e 	bne	r2,zero,40097cc <dropTBlock+0x1874>
 400974c:	e0bfc317 	ldw	r2,-244(fp)
 4009750:	10ffff84 	addi	r3,r2,-2
 4009754:	e0bfbe17 	ldw	r2,-264(fp)
 4009758:	147fffc4 	addi	r17,r2,-1
 400975c:	040100f4 	movhi	r16,1027
 4009760:	84262204 	addi	r16,r16,-26488
 4009764:	01400984 	movi	r5,38
 4009768:	1809883a 	mov	r4,r3
 400976c:	40118340 	call	4011834 <__mulsi3>
 4009770:	1445883a 	add	r2,r2,r17
 4009774:	1085883a 	add	r2,r2,r2
 4009778:	1085883a 	add	r2,r2,r2
 400977c:	8085883a 	add	r2,r16,r2
 4009780:	10800017 	ldw	r2,0(r2)
 4009784:	10800060 	cmpeqi	r2,r2,1
 4009788:	1000101e 	bne	r2,zero,40097cc <dropTBlock+0x1874>
						randomStart -= 2;
 400978c:	e0bfbd17 	ldw	r2,-268(fp)
 4009790:	10bfff84 	addi	r2,r2,-2
 4009794:	e0bfbd15 	stw	r2,-268(fp)
						randomEnd -= 2;
 4009798:	e0bfc017 	ldw	r2,-256(fp)
 400979c:	10bfff84 	addi	r2,r2,-2
 40097a0:	e0bfc015 	stw	r2,-256(fp)
						randomFirstEnd -= 2;
 40097a4:	e0bfbf17 	ldw	r2,-260(fp)
 40097a8:	10bfff84 	addi	r2,r2,-2
 40097ac:	e0bfbf15 	stw	r2,-260(fp)
						randomFirstStart -= 2;
 40097b0:	e0bfbe17 	ldw	r2,-264(fp)
 40097b4:	10bfff84 	addi	r2,r2,-2
 40097b8:	e0bfbe15 	stw	r2,-264(fp)
						i--;
 40097bc:	e0bfc317 	ldw	r2,-244(fp)
 40097c0:	10bfffc4 	addi	r2,r2,-1
 40097c4:	e0bfc315 	stw	r2,-244(fp)
 40097c8:	0001a006 	br	4009e4c <dropTBlock+0x1ef4>
					}else if(shapeLayout == 1
 40097cc:	e0bfc217 	ldw	r2,-248(fp)
 40097d0:	10800058 	cmpnei	r2,r2,1
 40097d4:	1000401e 	bne	r2,zero,40098d8 <dropTBlock+0x1980>
							&& grid[i-1][randomFirstStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1 && grid[i-3][randomFirstStart - 1] != 1){
 40097d8:	e0bfc317 	ldw	r2,-244(fp)
 40097dc:	10ffffc4 	addi	r3,r2,-1
 40097e0:	e0bfbe17 	ldw	r2,-264(fp)
 40097e4:	147fffc4 	addi	r17,r2,-1
 40097e8:	040100f4 	movhi	r16,1027
 40097ec:	84262204 	addi	r16,r16,-26488
 40097f0:	01400984 	movi	r5,38
 40097f4:	1809883a 	mov	r4,r3
 40097f8:	40118340 	call	4011834 <__mulsi3>
 40097fc:	1445883a 	add	r2,r2,r17
 4009800:	1085883a 	add	r2,r2,r2
 4009804:	1085883a 	add	r2,r2,r2
 4009808:	8085883a 	add	r2,r16,r2
 400980c:	10800017 	ldw	r2,0(r2)
 4009810:	10800060 	cmpeqi	r2,r2,1
 4009814:	1000301e 	bne	r2,zero,40098d8 <dropTBlock+0x1980>
 4009818:	e0bfc317 	ldw	r2,-244(fp)
 400981c:	10ffff84 	addi	r3,r2,-2
 4009820:	e0bfbd17 	ldw	r2,-268(fp)
 4009824:	147fffc4 	addi	r17,r2,-1
 4009828:	040100f4 	movhi	r16,1027
 400982c:	84262204 	addi	r16,r16,-26488
 4009830:	01400984 	movi	r5,38
 4009834:	1809883a 	mov	r4,r3
 4009838:	40118340 	call	4011834 <__mulsi3>
 400983c:	1445883a 	add	r2,r2,r17
 4009840:	1085883a 	add	r2,r2,r2
 4009844:	1085883a 	add	r2,r2,r2
 4009848:	8085883a 	add	r2,r16,r2
 400984c:	10800017 	ldw	r2,0(r2)
 4009850:	10800060 	cmpeqi	r2,r2,1
 4009854:	1000201e 	bne	r2,zero,40098d8 <dropTBlock+0x1980>
 4009858:	e0bfc317 	ldw	r2,-244(fp)
 400985c:	10ffff44 	addi	r3,r2,-3
 4009860:	e0bfbe17 	ldw	r2,-264(fp)
 4009864:	147fffc4 	addi	r17,r2,-1
 4009868:	040100f4 	movhi	r16,1027
 400986c:	84262204 	addi	r16,r16,-26488
 4009870:	01400984 	movi	r5,38
 4009874:	1809883a 	mov	r4,r3
 4009878:	40118340 	call	4011834 <__mulsi3>
 400987c:	1445883a 	add	r2,r2,r17
 4009880:	1085883a 	add	r2,r2,r2
 4009884:	1085883a 	add	r2,r2,r2
 4009888:	8085883a 	add	r2,r16,r2
 400988c:	10800017 	ldw	r2,0(r2)
 4009890:	10800060 	cmpeqi	r2,r2,1
 4009894:	1000101e 	bne	r2,zero,40098d8 <dropTBlock+0x1980>
						randomStart -= 2;
 4009898:	e0bfbd17 	ldw	r2,-268(fp)
 400989c:	10bfff84 	addi	r2,r2,-2
 40098a0:	e0bfbd15 	stw	r2,-268(fp)
						randomEnd -= 2;
 40098a4:	e0bfc017 	ldw	r2,-256(fp)
 40098a8:	10bfff84 	addi	r2,r2,-2
 40098ac:	e0bfc015 	stw	r2,-256(fp)
						randomFirstEnd -= 2;
 40098b0:	e0bfbf17 	ldw	r2,-260(fp)
 40098b4:	10bfff84 	addi	r2,r2,-2
 40098b8:	e0bfbf15 	stw	r2,-260(fp)
						randomFirstStart -= 2;
 40098bc:	e0bfbe17 	ldw	r2,-264(fp)
 40098c0:	10bfff84 	addi	r2,r2,-2
 40098c4:	e0bfbe15 	stw	r2,-264(fp)
						i--;
 40098c8:	e0bfc317 	ldw	r2,-244(fp)
 40098cc:	10bfffc4 	addi	r2,r2,-1
 40098d0:	e0bfc315 	stw	r2,-244(fp)
 40098d4:	00015d06 	br	4009e4c <dropTBlock+0x1ef4>
					}else if(shapeLayout == 2
 40098d8:	e0bfc217 	ldw	r2,-248(fp)
 40098dc:	10800098 	cmpnei	r2,r2,2
 40098e0:	1000301e 	bne	r2,zero,40099a4 <dropTBlock+0x1a4c>
							&& grid[i-2][randomStart - 1] != 1 && grid[i - 1][randomFirstStart - 1] != 1){
 40098e4:	e0bfc317 	ldw	r2,-244(fp)
 40098e8:	10ffff84 	addi	r3,r2,-2
 40098ec:	e0bfbd17 	ldw	r2,-268(fp)
 40098f0:	147fffc4 	addi	r17,r2,-1
 40098f4:	040100f4 	movhi	r16,1027
 40098f8:	84262204 	addi	r16,r16,-26488
 40098fc:	01400984 	movi	r5,38
 4009900:	1809883a 	mov	r4,r3
 4009904:	40118340 	call	4011834 <__mulsi3>
 4009908:	1445883a 	add	r2,r2,r17
 400990c:	1085883a 	add	r2,r2,r2
 4009910:	1085883a 	add	r2,r2,r2
 4009914:	8085883a 	add	r2,r16,r2
 4009918:	10800017 	ldw	r2,0(r2)
 400991c:	10800060 	cmpeqi	r2,r2,1
 4009920:	1000201e 	bne	r2,zero,40099a4 <dropTBlock+0x1a4c>
 4009924:	e0bfc317 	ldw	r2,-244(fp)
 4009928:	10ffffc4 	addi	r3,r2,-1
 400992c:	e0bfbe17 	ldw	r2,-264(fp)
 4009930:	147fffc4 	addi	r17,r2,-1
 4009934:	040100f4 	movhi	r16,1027
 4009938:	84262204 	addi	r16,r16,-26488
 400993c:	01400984 	movi	r5,38
 4009940:	1809883a 	mov	r4,r3
 4009944:	40118340 	call	4011834 <__mulsi3>
 4009948:	1445883a 	add	r2,r2,r17
 400994c:	1085883a 	add	r2,r2,r2
 4009950:	1085883a 	add	r2,r2,r2
 4009954:	8085883a 	add	r2,r16,r2
 4009958:	10800017 	ldw	r2,0(r2)
 400995c:	10800060 	cmpeqi	r2,r2,1
 4009960:	1000101e 	bne	r2,zero,40099a4 <dropTBlock+0x1a4c>
						randomStart -= 2;
 4009964:	e0bfbd17 	ldw	r2,-268(fp)
 4009968:	10bfff84 	addi	r2,r2,-2
 400996c:	e0bfbd15 	stw	r2,-268(fp)
						randomEnd -= 2;
 4009970:	e0bfc017 	ldw	r2,-256(fp)
 4009974:	10bfff84 	addi	r2,r2,-2
 4009978:	e0bfc015 	stw	r2,-256(fp)
						randomFirstEnd -= 2;
 400997c:	e0bfbf17 	ldw	r2,-260(fp)
 4009980:	10bfff84 	addi	r2,r2,-2
 4009984:	e0bfbf15 	stw	r2,-260(fp)
						randomFirstStart -= 2;
 4009988:	e0bfbe17 	ldw	r2,-264(fp)
 400998c:	10bfff84 	addi	r2,r2,-2
 4009990:	e0bfbe15 	stw	r2,-264(fp)
						i--;
 4009994:	e0bfc317 	ldw	r2,-244(fp)
 4009998:	10bfffc4 	addi	r2,r2,-1
 400999c:	e0bfc315 	stw	r2,-244(fp)
 40099a0:	00012a06 	br	4009e4c <dropTBlock+0x1ef4>
					}else if(shapeLayout == 3
 40099a4:	e0bfc217 	ldw	r2,-248(fp)
 40099a8:	108000d8 	cmpnei	r2,r2,3
 40099ac:	1001271e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
							&& grid[i-1][randomStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1 && grid[i-3][randomStart - 1] != 1){
 40099b0:	e0bfc317 	ldw	r2,-244(fp)
 40099b4:	10ffffc4 	addi	r3,r2,-1
 40099b8:	e0bfbd17 	ldw	r2,-268(fp)
 40099bc:	147fffc4 	addi	r17,r2,-1
 40099c0:	040100f4 	movhi	r16,1027
 40099c4:	84262204 	addi	r16,r16,-26488
 40099c8:	01400984 	movi	r5,38
 40099cc:	1809883a 	mov	r4,r3
 40099d0:	40118340 	call	4011834 <__mulsi3>
 40099d4:	1445883a 	add	r2,r2,r17
 40099d8:	1085883a 	add	r2,r2,r2
 40099dc:	1085883a 	add	r2,r2,r2
 40099e0:	8085883a 	add	r2,r16,r2
 40099e4:	10800017 	ldw	r2,0(r2)
 40099e8:	10800060 	cmpeqi	r2,r2,1
 40099ec:	1001171e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
 40099f0:	e0bfc317 	ldw	r2,-244(fp)
 40099f4:	10ffff84 	addi	r3,r2,-2
 40099f8:	e0bfbd17 	ldw	r2,-268(fp)
 40099fc:	147fffc4 	addi	r17,r2,-1
 4009a00:	040100f4 	movhi	r16,1027
 4009a04:	84262204 	addi	r16,r16,-26488
 4009a08:	01400984 	movi	r5,38
 4009a0c:	1809883a 	mov	r4,r3
 4009a10:	40118340 	call	4011834 <__mulsi3>
 4009a14:	1445883a 	add	r2,r2,r17
 4009a18:	1085883a 	add	r2,r2,r2
 4009a1c:	1085883a 	add	r2,r2,r2
 4009a20:	8085883a 	add	r2,r16,r2
 4009a24:	10800017 	ldw	r2,0(r2)
 4009a28:	10800060 	cmpeqi	r2,r2,1
 4009a2c:	1001071e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
 4009a30:	e0bfc317 	ldw	r2,-244(fp)
 4009a34:	10ffff44 	addi	r3,r2,-3
 4009a38:	e0bfbd17 	ldw	r2,-268(fp)
 4009a3c:	147fffc4 	addi	r17,r2,-1
 4009a40:	040100f4 	movhi	r16,1027
 4009a44:	84262204 	addi	r16,r16,-26488
 4009a48:	01400984 	movi	r5,38
 4009a4c:	1809883a 	mov	r4,r3
 4009a50:	40118340 	call	4011834 <__mulsi3>
 4009a54:	1445883a 	add	r2,r2,r17
 4009a58:	1085883a 	add	r2,r2,r2
 4009a5c:	1085883a 	add	r2,r2,r2
 4009a60:	8085883a 	add	r2,r16,r2
 4009a64:	10800017 	ldw	r2,0(r2)
 4009a68:	10800060 	cmpeqi	r2,r2,1
 4009a6c:	1000f71e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
						randomStart -= 2;
 4009a70:	e0bfbd17 	ldw	r2,-268(fp)
 4009a74:	10bfff84 	addi	r2,r2,-2
 4009a78:	e0bfbd15 	stw	r2,-268(fp)
						randomEnd -= 2;
 4009a7c:	e0bfc017 	ldw	r2,-256(fp)
 4009a80:	10bfff84 	addi	r2,r2,-2
 4009a84:	e0bfc015 	stw	r2,-256(fp)
						randomFirstEnd -= 2;
 4009a88:	e0bfbf17 	ldw	r2,-260(fp)
 4009a8c:	10bfff84 	addi	r2,r2,-2
 4009a90:	e0bfbf15 	stw	r2,-260(fp)
						randomFirstStart -= 2;
 4009a94:	e0bfbe17 	ldw	r2,-264(fp)
 4009a98:	10bfff84 	addi	r2,r2,-2
 4009a9c:	e0bfbe15 	stw	r2,-264(fp)
						i--;
 4009aa0:	e0bfc317 	ldw	r2,-244(fp)
 4009aa4:	10bfffc4 	addi	r2,r2,-1
 4009aa8:	e0bfc315 	stw	r2,-244(fp)
 4009aac:	0000e706 	br	4009e4c <dropTBlock+0x1ef4>
					}
				}
			}else if(keycode == 0x1D){
 4009ab0:	e0bffd03 	ldbu	r2,-12(fp)
 4009ab4:	10800758 	cmpnei	r2,r2,29
 4009ab8:	10006b1e 	bne	r2,zero,4009c68 <dropTBlock+0x1d10>
				i--;
 4009abc:	e0bfc317 	ldw	r2,-244(fp)
 4009ac0:	10bfffc4 	addi	r2,r2,-1
 4009ac4:	e0bfc315 	stw	r2,-244(fp)
				if(shapeLayout == 0){
 4009ac8:	e0bfc217 	ldw	r2,-248(fp)
 4009acc:	1000091e 	bne	r2,zero,4009af4 <dropTBlock+0x1b9c>
					i++;
 4009ad0:	e0bfc317 	ldw	r2,-244(fp)
 4009ad4:	10800044 	addi	r2,r2,1
 4009ad8:	e0bfc315 	stw	r2,-244(fp)
					shapeLayout = 1;
 4009adc:	00800044 	movi	r2,1
 4009ae0:	e0bfc215 	stw	r2,-248(fp)
					randomEnd -= 2;
 4009ae4:	e0bfc017 	ldw	r2,-256(fp)
 4009ae8:	10bfff84 	addi	r2,r2,-2
 4009aec:	e0bfc015 	stw	r2,-256(fp)
 4009af0:	0000d606 	br	4009e4c <dropTBlock+0x1ef4>
				}else if(shapeLayout == 1 && randomStart >= 23 && randomEnd <= 57
 4009af4:	e0bfc217 	ldw	r2,-248(fp)
 4009af8:	10800058 	cmpnei	r2,r2,1
 4009afc:	10001c1e 	bne	r2,zero,4009b70 <dropTBlock+0x1c18>
 4009b00:	e0bfbd17 	ldw	r2,-268(fp)
 4009b04:	108005d0 	cmplti	r2,r2,23
 4009b08:	1000191e 	bne	r2,zero,4009b70 <dropTBlock+0x1c18>
 4009b0c:	e0bfc017 	ldw	r2,-256(fp)
 4009b10:	10800e88 	cmpgei	r2,r2,58
 4009b14:	1000161e 	bne	r2,zero,4009b70 <dropTBlock+0x1c18>
						&& grid[i - 1][randomEnd + 1] != 1){
 4009b18:	e0bfc317 	ldw	r2,-244(fp)
 4009b1c:	10ffffc4 	addi	r3,r2,-1
 4009b20:	e0bfc017 	ldw	r2,-256(fp)
 4009b24:	14400044 	addi	r17,r2,1
 4009b28:	040100f4 	movhi	r16,1027
 4009b2c:	84262204 	addi	r16,r16,-26488
 4009b30:	01400984 	movi	r5,38
 4009b34:	1809883a 	mov	r4,r3
 4009b38:	40118340 	call	4011834 <__mulsi3>
 4009b3c:	1445883a 	add	r2,r2,r17
 4009b40:	1085883a 	add	r2,r2,r2
 4009b44:	1085883a 	add	r2,r2,r2
 4009b48:	8085883a 	add	r2,r16,r2
 4009b4c:	10800017 	ldw	r2,0(r2)
 4009b50:	10800060 	cmpeqi	r2,r2,1
 4009b54:	1000061e 	bne	r2,zero,4009b70 <dropTBlock+0x1c18>
					shapeLayout = 2;
 4009b58:	00800084 	movi	r2,2
 4009b5c:	e0bfc215 	stw	r2,-248(fp)
					randomEnd += 2;
 4009b60:	e0bfc017 	ldw	r2,-256(fp)
 4009b64:	10800084 	addi	r2,r2,2
 4009b68:	e0bfc015 	stw	r2,-256(fp)
 4009b6c:	0000b706 	br	4009e4c <dropTBlock+0x1ef4>
				}else if(shapeLayout == 2 && grid[i - 2][randomStart + 2] != 1){
 4009b70:	e0bfc217 	ldw	r2,-248(fp)
 4009b74:	10800098 	cmpnei	r2,r2,2
 4009b78:	1000161e 	bne	r2,zero,4009bd4 <dropTBlock+0x1c7c>
 4009b7c:	e0bfc317 	ldw	r2,-244(fp)
 4009b80:	10ffff84 	addi	r3,r2,-2
 4009b84:	e0bfbd17 	ldw	r2,-268(fp)
 4009b88:	14400084 	addi	r17,r2,2
 4009b8c:	040100f4 	movhi	r16,1027
 4009b90:	84262204 	addi	r16,r16,-26488
 4009b94:	01400984 	movi	r5,38
 4009b98:	1809883a 	mov	r4,r3
 4009b9c:	40118340 	call	4011834 <__mulsi3>
 4009ba0:	1445883a 	add	r2,r2,r17
 4009ba4:	1085883a 	add	r2,r2,r2
 4009ba8:	1085883a 	add	r2,r2,r2
 4009bac:	8085883a 	add	r2,r16,r2
 4009bb0:	10800017 	ldw	r2,0(r2)
 4009bb4:	10800060 	cmpeqi	r2,r2,1
 4009bb8:	1000061e 	bne	r2,zero,4009bd4 <dropTBlock+0x1c7c>
					shapeLayout = 3;
 4009bbc:	008000c4 	movi	r2,3
 4009bc0:	e0bfc215 	stw	r2,-248(fp)
					randomStart += 2;
 4009bc4:	e0bfbd17 	ldw	r2,-268(fp)
 4009bc8:	10800084 	addi	r2,r2,2
 4009bcc:	e0bfbd15 	stw	r2,-268(fp)
 4009bd0:	00009e06 	br	4009e4c <dropTBlock+0x1ef4>
				}else if(shapeLayout == 3 && randomStart >= 23 && randomEnd <= 57
 4009bd4:	e0bfc217 	ldw	r2,-248(fp)
 4009bd8:	108000d8 	cmpnei	r2,r2,3
 4009bdc:	10001e1e 	bne	r2,zero,4009c58 <dropTBlock+0x1d00>
 4009be0:	e0bfbd17 	ldw	r2,-268(fp)
 4009be4:	108005d0 	cmplti	r2,r2,23
 4009be8:	10001b1e 	bne	r2,zero,4009c58 <dropTBlock+0x1d00>
 4009bec:	e0bfc017 	ldw	r2,-256(fp)
 4009bf0:	10800e88 	cmpgei	r2,r2,58
 4009bf4:	1000181e 	bne	r2,zero,4009c58 <dropTBlock+0x1d00>
						&& grid[i - 1][randomStart - 1] != 1){
 4009bf8:	e0bfc317 	ldw	r2,-244(fp)
 4009bfc:	10ffffc4 	addi	r3,r2,-1
 4009c00:	e0bfbd17 	ldw	r2,-268(fp)
 4009c04:	147fffc4 	addi	r17,r2,-1
 4009c08:	040100f4 	movhi	r16,1027
 4009c0c:	84262204 	addi	r16,r16,-26488
 4009c10:	01400984 	movi	r5,38
 4009c14:	1809883a 	mov	r4,r3
 4009c18:	40118340 	call	4011834 <__mulsi3>
 4009c1c:	1445883a 	add	r2,r2,r17
 4009c20:	1085883a 	add	r2,r2,r2
 4009c24:	1085883a 	add	r2,r2,r2
 4009c28:	8085883a 	add	r2,r16,r2
 4009c2c:	10800017 	ldw	r2,0(r2)
 4009c30:	10800060 	cmpeqi	r2,r2,1
 4009c34:	1000081e 	bne	r2,zero,4009c58 <dropTBlock+0x1d00>
					shapeLayout = 0;
 4009c38:	e03fc215 	stw	zero,-248(fp)
					randomStart -= 2;
 4009c3c:	e0bfbd17 	ldw	r2,-268(fp)
 4009c40:	10bfff84 	addi	r2,r2,-2
 4009c44:	e0bfbd15 	stw	r2,-268(fp)
					i--;
 4009c48:	e0bfc317 	ldw	r2,-244(fp)
 4009c4c:	10bfffc4 	addi	r2,r2,-1
 4009c50:	e0bfc315 	stw	r2,-244(fp)
 4009c54:	00007d06 	br	4009e4c <dropTBlock+0x1ef4>
				}else{
					i++;
 4009c58:	e0bfc317 	ldw	r2,-244(fp)
 4009c5c:	10800044 	addi	r2,r2,1
 4009c60:	e0bfc315 	stw	r2,-244(fp)
 4009c64:	00007906 	br	4009e4c <dropTBlock+0x1ef4>
				}
			}else if(keycode == 0x1B && i > 2 && i < 29){
 4009c68:	e0bffd03 	ldbu	r2,-12(fp)
 4009c6c:	108006d8 	cmpnei	r2,r2,27
 4009c70:	1000721e 	bne	r2,zero,4009e3c <dropTBlock+0x1ee4>
 4009c74:	e0bfc317 	ldw	r2,-244(fp)
 4009c78:	108000d0 	cmplti	r2,r2,3
 4009c7c:	10006f1e 	bne	r2,zero,4009e3c <dropTBlock+0x1ee4>
 4009c80:	e0bfc317 	ldw	r2,-244(fp)
 4009c84:	10800748 	cmpgei	r2,r2,29
 4009c88:	10006c1e 	bne	r2,zero,4009e3c <dropTBlock+0x1ee4>
				i--;
 4009c8c:	e0bfc317 	ldw	r2,-244(fp)
 4009c90:	10bfffc4 	addi	r2,r2,-1
 4009c94:	e0bfc315 	stw	r2,-244(fp)
				if(shapeLayout == 0){
 4009c98:	e0bfc217 	ldw	r2,-248(fp)
 4009c9c:	1000091e 	bne	r2,zero,4009cc4 <dropTBlock+0x1d6c>
					i++;
 4009ca0:	e0bfc317 	ldw	r2,-244(fp)
 4009ca4:	10800044 	addi	r2,r2,1
 4009ca8:	e0bfc315 	stw	r2,-244(fp)
					shapeLayout = 3;
 4009cac:	008000c4 	movi	r2,3
 4009cb0:	e0bfc215 	stw	r2,-248(fp)
					randomStart += 2;
 4009cb4:	e0bfbd17 	ldw	r2,-268(fp)
 4009cb8:	10800084 	addi	r2,r2,2
 4009cbc:	e0bfbd15 	stw	r2,-268(fp)
				}else{
					i++;
				}
			}else if(keycode == 0x1B && i > 2 && i < 29){
				i--;
				if(shapeLayout == 0){
 4009cc0:	00006206 	br	4009e4c <dropTBlock+0x1ef4>
					i++;
					shapeLayout = 3;
					randomStart += 2;
				}else if(shapeLayout == 1 && randomStart >= 23 && randomEnd <= 57
 4009cc4:	e0bfc217 	ldw	r2,-248(fp)
 4009cc8:	10800058 	cmpnei	r2,r2,1
 4009ccc:	10001e1e 	bne	r2,zero,4009d48 <dropTBlock+0x1df0>
 4009cd0:	e0bfbd17 	ldw	r2,-268(fp)
 4009cd4:	108005d0 	cmplti	r2,r2,23
 4009cd8:	10001b1e 	bne	r2,zero,4009d48 <dropTBlock+0x1df0>
 4009cdc:	e0bfc017 	ldw	r2,-256(fp)
 4009ce0:	10800e88 	cmpgei	r2,r2,58
 4009ce4:	1000181e 	bne	r2,zero,4009d48 <dropTBlock+0x1df0>
						&& grid[i - 1][randomEnd + 1] != 1){
 4009ce8:	e0bfc317 	ldw	r2,-244(fp)
 4009cec:	10ffffc4 	addi	r3,r2,-1
 4009cf0:	e0bfc017 	ldw	r2,-256(fp)
 4009cf4:	14400044 	addi	r17,r2,1
 4009cf8:	040100f4 	movhi	r16,1027
 4009cfc:	84262204 	addi	r16,r16,-26488
 4009d00:	01400984 	movi	r5,38
 4009d04:	1809883a 	mov	r4,r3
 4009d08:	40118340 	call	4011834 <__mulsi3>
 4009d0c:	1445883a 	add	r2,r2,r17
 4009d10:	1085883a 	add	r2,r2,r2
 4009d14:	1085883a 	add	r2,r2,r2
 4009d18:	8085883a 	add	r2,r16,r2
 4009d1c:	10800017 	ldw	r2,0(r2)
 4009d20:	10800060 	cmpeqi	r2,r2,1
 4009d24:	1000081e 	bne	r2,zero,4009d48 <dropTBlock+0x1df0>
					shapeLayout = 0;
 4009d28:	e03fc215 	stw	zero,-248(fp)
					randomEnd += 2;
 4009d2c:	e0bfc017 	ldw	r2,-256(fp)
 4009d30:	10800084 	addi	r2,r2,2
 4009d34:	e0bfc015 	stw	r2,-256(fp)
					i--;
 4009d38:	e0bfc317 	ldw	r2,-244(fp)
 4009d3c:	10bfffc4 	addi	r2,r2,-1
 4009d40:	e0bfc315 	stw	r2,-244(fp)
 4009d44:	00003c06 	br	4009e38 <dropTBlock+0x1ee0>
				}else if(shapeLayout == 2 && grid[i - 2][randomStart + 2] != 1){
 4009d48:	e0bfc217 	ldw	r2,-248(fp)
 4009d4c:	10800098 	cmpnei	r2,r2,2
 4009d50:	1000161e 	bne	r2,zero,4009dac <dropTBlock+0x1e54>
 4009d54:	e0bfc317 	ldw	r2,-244(fp)
 4009d58:	10ffff84 	addi	r3,r2,-2
 4009d5c:	e0bfbd17 	ldw	r2,-268(fp)
 4009d60:	14400084 	addi	r17,r2,2
 4009d64:	040100f4 	movhi	r16,1027
 4009d68:	84262204 	addi	r16,r16,-26488
 4009d6c:	01400984 	movi	r5,38
 4009d70:	1809883a 	mov	r4,r3
 4009d74:	40118340 	call	4011834 <__mulsi3>
 4009d78:	1445883a 	add	r2,r2,r17
 4009d7c:	1085883a 	add	r2,r2,r2
 4009d80:	1085883a 	add	r2,r2,r2
 4009d84:	8085883a 	add	r2,r16,r2
 4009d88:	10800017 	ldw	r2,0(r2)
 4009d8c:	10800060 	cmpeqi	r2,r2,1
 4009d90:	1000061e 	bne	r2,zero,4009dac <dropTBlock+0x1e54>
					shapeLayout = 1;
 4009d94:	00800044 	movi	r2,1
 4009d98:	e0bfc215 	stw	r2,-248(fp)
					randomEnd -= 2;
 4009d9c:	e0bfc017 	ldw	r2,-256(fp)
 4009da0:	10bfff84 	addi	r2,r2,-2
 4009da4:	e0bfc015 	stw	r2,-256(fp)
 4009da8:	00002306 	br	4009e38 <dropTBlock+0x1ee0>
				}else if(shapeLayout == 3 && randomStart >= 23 && randomEnd <= 57
 4009dac:	e0bfc217 	ldw	r2,-248(fp)
 4009db0:	108000d8 	cmpnei	r2,r2,3
 4009db4:	10001c1e 	bne	r2,zero,4009e28 <dropTBlock+0x1ed0>
 4009db8:	e0bfbd17 	ldw	r2,-268(fp)
 4009dbc:	108005d0 	cmplti	r2,r2,23
 4009dc0:	1000191e 	bne	r2,zero,4009e28 <dropTBlock+0x1ed0>
 4009dc4:	e0bfc017 	ldw	r2,-256(fp)
 4009dc8:	10800e88 	cmpgei	r2,r2,58
 4009dcc:	1000161e 	bne	r2,zero,4009e28 <dropTBlock+0x1ed0>
						&& grid[i - 1][randomStart - 1] != 1){
 4009dd0:	e0bfc317 	ldw	r2,-244(fp)
 4009dd4:	10ffffc4 	addi	r3,r2,-1
 4009dd8:	e0bfbd17 	ldw	r2,-268(fp)
 4009ddc:	147fffc4 	addi	r17,r2,-1
 4009de0:	040100f4 	movhi	r16,1027
 4009de4:	84262204 	addi	r16,r16,-26488
 4009de8:	01400984 	movi	r5,38
 4009dec:	1809883a 	mov	r4,r3
 4009df0:	40118340 	call	4011834 <__mulsi3>
 4009df4:	1445883a 	add	r2,r2,r17
 4009df8:	1085883a 	add	r2,r2,r2
 4009dfc:	1085883a 	add	r2,r2,r2
 4009e00:	8085883a 	add	r2,r16,r2
 4009e04:	10800017 	ldw	r2,0(r2)
 4009e08:	10800060 	cmpeqi	r2,r2,1
 4009e0c:	1000061e 	bne	r2,zero,4009e28 <dropTBlock+0x1ed0>
					shapeLayout = 2;
 4009e10:	00800084 	movi	r2,2
 4009e14:	e0bfc215 	stw	r2,-248(fp)
					randomStart -= 2;
 4009e18:	e0bfbd17 	ldw	r2,-268(fp)
 4009e1c:	10bfff84 	addi	r2,r2,-2
 4009e20:	e0bfbd15 	stw	r2,-268(fp)
 4009e24:	00000406 	br	4009e38 <dropTBlock+0x1ee0>
				}else{
					i++;
 4009e28:	e0bfc317 	ldw	r2,-244(fp)
 4009e2c:	10800044 	addi	r2,r2,1
 4009e30:	e0bfc315 	stw	r2,-244(fp)
				}else{
					i++;
				}
			}else if(keycode == 0x1B && i > 2 && i < 29){
				i--;
				if(shapeLayout == 0){
 4009e34:	00000506 	br	4009e4c <dropTBlock+0x1ef4>
 4009e38:	00000406 	br	4009e4c <dropTBlock+0x1ef4>
					shapeLayout = 2;
					randomStart -= 2;
				}else{
					i++;
				}
			}else if(keycode == 0x2C){
 4009e3c:	e0bffd03 	ldbu	r2,-12(fp)
 4009e40:	10800b18 	cmpnei	r2,r2,44
 4009e44:	1000011e 	bne	r2,zero,4009e4c <dropTBlock+0x1ef4>
				time = 0;
 4009e48:	e03fc115 	stw	zero,-252(fp)
			}

			if(shapeLayout == 0){
 4009e4c:	e0bfc217 	ldw	r2,-248(fp)
 4009e50:	1000491e 	bne	r2,zero,4009f78 <dropTBlock+0x2020>
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4009e54:	e0bfbe17 	ldw	r2,-264(fp)
 4009e58:	e0bfe915 	stw	r2,-92(fp)
 4009e5c:	00002006 	br	4009ee0 <dropTBlock+0x1f88>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
 4009e60:	d4200317 	ldw	r16,-32756(gp)
 4009e64:	e0bfc317 	ldw	r2,-244(fp)
 4009e68:	10bfffc4 	addi	r2,r2,-1
 4009e6c:	01401404 	movi	r5,80
 4009e70:	1009883a 	mov	r4,r2
 4009e74:	40118340 	call	4011834 <__mulsi3>
 4009e78:	1007883a 	mov	r3,r2
 4009e7c:	e0bfe917 	ldw	r2,-92(fp)
 4009e80:	1885883a 	add	r2,r3,r2
 4009e84:	1085883a 	add	r2,r2,r2
 4009e88:	8085883a 	add	r2,r16,r2
 4009e8c:	00c01d84 	movi	r3,118
 4009e90:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
 4009e94:	d4200317 	ldw	r16,-32756(gp)
 4009e98:	e0bfc317 	ldw	r2,-244(fp)
 4009e9c:	10bfffc4 	addi	r2,r2,-1
 4009ea0:	01401404 	movi	r5,80
 4009ea4:	1009883a 	mov	r4,r2
 4009ea8:	40118340 	call	4011834 <__mulsi3>
 4009eac:	1007883a 	mov	r3,r2
 4009eb0:	e0bfe917 	ldw	r2,-92(fp)
 4009eb4:	1885883a 	add	r2,r3,r2
 4009eb8:	1085883a 	add	r2,r2,r2
 4009ebc:	1023883a 	mov	r17,r2
 4009ec0:	e13fe917 	ldw	r4,-92(fp)
 4009ec4:	400d8600 	call	400d860 <check_col>
 4009ec8:	1007883a 	mov	r3,r2
 4009ecc:	8445883a 	add	r2,r16,r17
 4009ed0:	10c00005 	stb	r3,0(r2)
			}else if(keycode == 0x2C){
				time = 0;
			}

			if(shapeLayout == 0){
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 4009ed4:	e0bfe917 	ldw	r2,-92(fp)
 4009ed8:	10800044 	addi	r2,r2,1
 4009edc:	e0bfe915 	stw	r2,-92(fp)
 4009ee0:	e0ffe917 	ldw	r3,-92(fp)
 4009ee4:	e0bfbf17 	ldw	r2,-260(fp)
 4009ee8:	18bfdd16 	blt	r3,r2,4009e60 <__alt_mem_onchip_memory2_0+0xfc004ca0>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4009eec:	e0bfbd17 	ldw	r2,-268(fp)
 4009ef0:	e0bfea15 	stw	r2,-88(fp)
 4009ef4:	00001c06 	br	4009f68 <dropTBlock+0x2010>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x76;
 4009ef8:	d4200317 	ldw	r16,-32756(gp)
 4009efc:	01401404 	movi	r5,80
 4009f00:	e13fc317 	ldw	r4,-244(fp)
 4009f04:	40118340 	call	4011834 <__mulsi3>
 4009f08:	1007883a 	mov	r3,r2
 4009f0c:	e0bfea17 	ldw	r2,-88(fp)
 4009f10:	1885883a 	add	r2,r3,r2
 4009f14:	1085883a 	add	r2,r2,r2
 4009f18:	8085883a 	add	r2,r16,r2
 4009f1c:	00c01d84 	movi	r3,118
 4009f20:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = check_col(j);
 4009f24:	d4200317 	ldw	r16,-32756(gp)
 4009f28:	01401404 	movi	r5,80
 4009f2c:	e13fc317 	ldw	r4,-244(fp)
 4009f30:	40118340 	call	4011834 <__mulsi3>
 4009f34:	1007883a 	mov	r3,r2
 4009f38:	e0bfea17 	ldw	r2,-88(fp)
 4009f3c:	1885883a 	add	r2,r3,r2
 4009f40:	1085883a 	add	r2,r2,r2
 4009f44:	1023883a 	mov	r17,r2
 4009f48:	e13fea17 	ldw	r4,-88(fp)
 4009f4c:	400d8600 	call	400d860 <check_col>
 4009f50:	1007883a 	mov	r3,r2
 4009f54:	8445883a 	add	r2,r16,r17
 4009f58:	10c00005 	stb	r3,0(r2)
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 4009f5c:	e0bfea17 	ldw	r2,-88(fp)
 4009f60:	10800044 	addi	r2,r2,1
 4009f64:	e0bfea15 	stw	r2,-88(fp)
 4009f68:	e0ffea17 	ldw	r3,-88(fp)
 4009f6c:	e0bfc017 	ldw	r2,-256(fp)
 4009f70:	18bfe116 	blt	r3,r2,4009ef8 <__alt_mem_onchip_memory2_0+0xfc004d38>
 4009f74:	0000ff06 	br	400a374 <dropTBlock+0x241c>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = check_col(j);
				}
			}else if(shapeLayout == 1){
 4009f78:	e0bfc217 	ldw	r2,-248(fp)
 4009f7c:	10800058 	cmpnei	r2,r2,1
 4009f80:	1000571e 	bne	r2,zero,400a0e0 <dropTBlock+0x2188>
				for(int row = 0; row  < 3; row++){
 4009f84:	e03feb15 	stw	zero,-84(fp)
 4009f88:	00002b06 	br	400a038 <dropTBlock+0x20e0>
					for (int j = randomFirstStart; j < randomEnd; j++) {
 4009f8c:	e0bfbe17 	ldw	r2,-264(fp)
 4009f90:	e0bfec15 	stw	r2,-80(fp)
 4009f94:	00002206 	br	400a020 <dropTBlock+0x20c8>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x76;
 4009f98:	d4200317 	ldw	r16,-32756(gp)
 4009f9c:	e0ffc317 	ldw	r3,-244(fp)
 4009fa0:	e0bfeb17 	ldw	r2,-84(fp)
 4009fa4:	1885c83a 	sub	r2,r3,r2
 4009fa8:	01401404 	movi	r5,80
 4009fac:	1009883a 	mov	r4,r2
 4009fb0:	40118340 	call	4011834 <__mulsi3>
 4009fb4:	1007883a 	mov	r3,r2
 4009fb8:	e0bfec17 	ldw	r2,-80(fp)
 4009fbc:	1885883a 	add	r2,r3,r2
 4009fc0:	1085883a 	add	r2,r2,r2
 4009fc4:	8085883a 	add	r2,r16,r2
 4009fc8:	00c01d84 	movi	r3,118
 4009fcc:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = check_col(j);
 4009fd0:	d4200317 	ldw	r16,-32756(gp)
 4009fd4:	e0ffc317 	ldw	r3,-244(fp)
 4009fd8:	e0bfeb17 	ldw	r2,-84(fp)
 4009fdc:	1885c83a 	sub	r2,r3,r2
 4009fe0:	01401404 	movi	r5,80
 4009fe4:	1009883a 	mov	r4,r2
 4009fe8:	40118340 	call	4011834 <__mulsi3>
 4009fec:	1007883a 	mov	r3,r2
 4009ff0:	e0bfec17 	ldw	r2,-80(fp)
 4009ff4:	1885883a 	add	r2,r3,r2
 4009ff8:	1085883a 	add	r2,r2,r2
 4009ffc:	1023883a 	mov	r17,r2
 400a000:	e13fec17 	ldw	r4,-80(fp)
 400a004:	400d8600 	call	400d860 <check_col>
 400a008:	1007883a 	mov	r3,r2
 400a00c:	8445883a 	add	r2,r16,r17
 400a010:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row  < 3; row++){
					for (int j = randomFirstStart; j < randomEnd; j++) {
 400a014:	e0bfec17 	ldw	r2,-80(fp)
 400a018:	10800044 	addi	r2,r2,1
 400a01c:	e0bfec15 	stw	r2,-80(fp)
 400a020:	e0ffec17 	ldw	r3,-80(fp)
 400a024:	e0bfc017 	ldw	r2,-256(fp)
 400a028:	18bfdb16 	blt	r3,r2,4009f98 <__alt_mem_onchip_memory2_0+0xfc004dd8>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row  < 3; row++){
 400a02c:	e0bfeb17 	ldw	r2,-84(fp)
 400a030:	10800044 	addi	r2,r2,1
 400a034:	e0bfeb15 	stw	r2,-84(fp)
 400a038:	e0bfeb17 	ldw	r2,-84(fp)
 400a03c:	108000d0 	cmplti	r2,r2,3
 400a040:	103fd21e 	bne	r2,zero,4009f8c <__alt_mem_onchip_memory2_0+0xfc004dcc>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x76;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomFirstStart; j++) {
 400a044:	e0bfbd17 	ldw	r2,-268(fp)
 400a048:	e0bfed15 	stw	r2,-76(fp)
 400a04c:	00002006 	br	400a0d0 <dropTBlock+0x2178>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
 400a050:	d4200317 	ldw	r16,-32756(gp)
 400a054:	e0bfc317 	ldw	r2,-244(fp)
 400a058:	10bfffc4 	addi	r2,r2,-1
 400a05c:	01401404 	movi	r5,80
 400a060:	1009883a 	mov	r4,r2
 400a064:	40118340 	call	4011834 <__mulsi3>
 400a068:	1007883a 	mov	r3,r2
 400a06c:	e0bfed17 	ldw	r2,-76(fp)
 400a070:	1885883a 	add	r2,r3,r2
 400a074:	1085883a 	add	r2,r2,r2
 400a078:	8085883a 	add	r2,r16,r2
 400a07c:	00c01d84 	movi	r3,118
 400a080:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
 400a084:	d4200317 	ldw	r16,-32756(gp)
 400a088:	e0bfc317 	ldw	r2,-244(fp)
 400a08c:	10bfffc4 	addi	r2,r2,-1
 400a090:	01401404 	movi	r5,80
 400a094:	1009883a 	mov	r4,r2
 400a098:	40118340 	call	4011834 <__mulsi3>
 400a09c:	1007883a 	mov	r3,r2
 400a0a0:	e0bfed17 	ldw	r2,-76(fp)
 400a0a4:	1885883a 	add	r2,r3,r2
 400a0a8:	1085883a 	add	r2,r2,r2
 400a0ac:	1023883a 	mov	r17,r2
 400a0b0:	e13fed17 	ldw	r4,-76(fp)
 400a0b4:	400d8600 	call	400d860 <check_col>
 400a0b8:	1007883a 	mov	r3,r2
 400a0bc:	8445883a 	add	r2,r16,r17
 400a0c0:	10c00005 	stb	r3,0(r2)
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x76;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = check_col(j);
					}
				}
				for (int j = randomStart; j < randomFirstStart; j++) {
 400a0c4:	e0bfed17 	ldw	r2,-76(fp)
 400a0c8:	10800044 	addi	r2,r2,1
 400a0cc:	e0bfed15 	stw	r2,-76(fp)
 400a0d0:	e0ffed17 	ldw	r3,-76(fp)
 400a0d4:	e0bfbe17 	ldw	r2,-264(fp)
 400a0d8:	18bfdd16 	blt	r3,r2,400a050 <__alt_mem_onchip_memory2_0+0xfc004e90>
 400a0dc:	0000a506 	br	400a374 <dropTBlock+0x241c>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
				}
			}else if(shapeLayout == 2){
 400a0e0:	e0bfc217 	ldw	r2,-248(fp)
 400a0e4:	10800098 	cmpnei	r2,r2,2
 400a0e8:	1000491e 	bne	r2,zero,400a210 <dropTBlock+0x22b8>
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400a0ec:	e0bfbe17 	ldw	r2,-264(fp)
 400a0f0:	e0bfee15 	stw	r2,-72(fp)
 400a0f4:	00001c06 	br	400a168 <dropTBlock+0x2210>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x76;
 400a0f8:	d4200317 	ldw	r16,-32756(gp)
 400a0fc:	01401404 	movi	r5,80
 400a100:	e13fc317 	ldw	r4,-244(fp)
 400a104:	40118340 	call	4011834 <__mulsi3>
 400a108:	1007883a 	mov	r3,r2
 400a10c:	e0bfee17 	ldw	r2,-72(fp)
 400a110:	1885883a 	add	r2,r3,r2
 400a114:	1085883a 	add	r2,r2,r2
 400a118:	8085883a 	add	r2,r16,r2
 400a11c:	00c01d84 	movi	r3,118
 400a120:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = check_col(j);
 400a124:	d4200317 	ldw	r16,-32756(gp)
 400a128:	01401404 	movi	r5,80
 400a12c:	e13fc317 	ldw	r4,-244(fp)
 400a130:	40118340 	call	4011834 <__mulsi3>
 400a134:	1007883a 	mov	r3,r2
 400a138:	e0bfee17 	ldw	r2,-72(fp)
 400a13c:	1885883a 	add	r2,r3,r2
 400a140:	1085883a 	add	r2,r2,r2
 400a144:	1023883a 	mov	r17,r2
 400a148:	e13fee17 	ldw	r4,-72(fp)
 400a14c:	400d8600 	call	400d860 <check_col>
 400a150:	1007883a 	mov	r3,r2
 400a154:	8445883a 	add	r2,r16,r17
 400a158:	10c00005 	stb	r3,0(r2)
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
				}
			}else if(shapeLayout == 2){
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400a15c:	e0bfee17 	ldw	r2,-72(fp)
 400a160:	10800044 	addi	r2,r2,1
 400a164:	e0bfee15 	stw	r2,-72(fp)
 400a168:	e0ffee17 	ldw	r3,-72(fp)
 400a16c:	e0bfbf17 	ldw	r2,-260(fp)
 400a170:	18bfe116 	blt	r3,r2,400a0f8 <__alt_mem_onchip_memory2_0+0xfc004f38>
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 400a174:	e0bfbd17 	ldw	r2,-268(fp)
 400a178:	e0bfef15 	stw	r2,-68(fp)
 400a17c:	00002006 	br	400a200 <dropTBlock+0x22a8>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
 400a180:	d4200317 	ldw	r16,-32756(gp)
 400a184:	e0bfc317 	ldw	r2,-244(fp)
 400a188:	10bfffc4 	addi	r2,r2,-1
 400a18c:	01401404 	movi	r5,80
 400a190:	1009883a 	mov	r4,r2
 400a194:	40118340 	call	4011834 <__mulsi3>
 400a198:	1007883a 	mov	r3,r2
 400a19c:	e0bfef17 	ldw	r2,-68(fp)
 400a1a0:	1885883a 	add	r2,r3,r2
 400a1a4:	1085883a 	add	r2,r2,r2
 400a1a8:	8085883a 	add	r2,r16,r2
 400a1ac:	00c01d84 	movi	r3,118
 400a1b0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
 400a1b4:	d4200317 	ldw	r16,-32756(gp)
 400a1b8:	e0bfc317 	ldw	r2,-244(fp)
 400a1bc:	10bfffc4 	addi	r2,r2,-1
 400a1c0:	01401404 	movi	r5,80
 400a1c4:	1009883a 	mov	r4,r2
 400a1c8:	40118340 	call	4011834 <__mulsi3>
 400a1cc:	1007883a 	mov	r3,r2
 400a1d0:	e0bfef17 	ldw	r2,-68(fp)
 400a1d4:	1885883a 	add	r2,r3,r2
 400a1d8:	1085883a 	add	r2,r2,r2
 400a1dc:	1023883a 	mov	r17,r2
 400a1e0:	e13fef17 	ldw	r4,-68(fp)
 400a1e4:	400d8600 	call	400d860 <check_col>
 400a1e8:	1007883a 	mov	r3,r2
 400a1ec:	8445883a 	add	r2,r16,r17
 400a1f0:	10c00005 	stb	r3,0(r2)
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
	//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = check_col(j);
				}
				for (int j = randomStart; j < randomEnd; j++) {
 400a1f4:	e0bfef17 	ldw	r2,-68(fp)
 400a1f8:	10800044 	addi	r2,r2,1
 400a1fc:	e0bfef15 	stw	r2,-68(fp)
 400a200:	e0ffef17 	ldw	r3,-68(fp)
 400a204:	e0bfc017 	ldw	r2,-256(fp)
 400a208:	18bfdd16 	blt	r3,r2,400a180 <__alt_mem_onchip_memory2_0+0xfc004fc0>
 400a20c:	00005906 	br	400a374 <dropTBlock+0x241c>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
				}
			}else if(shapeLayout == 3){
 400a210:	e0bfc217 	ldw	r2,-248(fp)
 400a214:	108000d8 	cmpnei	r2,r2,3
 400a218:	1000561e 	bne	r2,zero,400a374 <dropTBlock+0x241c>
				for(int row = 0; row  < 3; row++){
 400a21c:	e03ff015 	stw	zero,-64(fp)
 400a220:	00002b06 	br	400a2d0 <dropTBlock+0x2378>
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400a224:	e0bfbd17 	ldw	r2,-268(fp)
 400a228:	e0bff115 	stw	r2,-60(fp)
 400a22c:	00002206 	br	400a2b8 <dropTBlock+0x2360>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x76;
 400a230:	d4200317 	ldw	r16,-32756(gp)
 400a234:	e0ffc317 	ldw	r3,-244(fp)
 400a238:	e0bff017 	ldw	r2,-64(fp)
 400a23c:	1885c83a 	sub	r2,r3,r2
 400a240:	01401404 	movi	r5,80
 400a244:	1009883a 	mov	r4,r2
 400a248:	40118340 	call	4011834 <__mulsi3>
 400a24c:	1007883a 	mov	r3,r2
 400a250:	e0bff117 	ldw	r2,-60(fp)
 400a254:	1885883a 	add	r2,r3,r2
 400a258:	1085883a 	add	r2,r2,r2
 400a25c:	8085883a 	add	r2,r16,r2
 400a260:	00c01d84 	movi	r3,118
 400a264:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = check_col(j);
 400a268:	d4200317 	ldw	r16,-32756(gp)
 400a26c:	e0ffc317 	ldw	r3,-244(fp)
 400a270:	e0bff017 	ldw	r2,-64(fp)
 400a274:	1885c83a 	sub	r2,r3,r2
 400a278:	01401404 	movi	r5,80
 400a27c:	1009883a 	mov	r4,r2
 400a280:	40118340 	call	4011834 <__mulsi3>
 400a284:	1007883a 	mov	r3,r2
 400a288:	e0bff117 	ldw	r2,-60(fp)
 400a28c:	1885883a 	add	r2,r3,r2
 400a290:	1085883a 	add	r2,r2,r2
 400a294:	1023883a 	mov	r17,r2
 400a298:	e13ff117 	ldw	r4,-60(fp)
 400a29c:	400d8600 	call	400d860 <check_col>
 400a2a0:	1007883a 	mov	r3,r2
 400a2a4:	8445883a 	add	r2,r16,r17
 400a2a8:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
				}
			}else if(shapeLayout == 3){
				for(int row = 0; row  < 3; row++){
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400a2ac:	e0bff117 	ldw	r2,-60(fp)
 400a2b0:	10800044 	addi	r2,r2,1
 400a2b4:	e0bff115 	stw	r2,-60(fp)
 400a2b8:	e0fff117 	ldw	r3,-60(fp)
 400a2bc:	e0bfbf17 	ldw	r2,-260(fp)
 400a2c0:	18bfdb16 	blt	r3,r2,400a230 <__alt_mem_onchip_memory2_0+0xfc005070>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
				}
			}else if(shapeLayout == 3){
				for(int row = 0; row  < 3; row++){
 400a2c4:	e0bff017 	ldw	r2,-64(fp)
 400a2c8:	10800044 	addi	r2,r2,1
 400a2cc:	e0bff015 	stw	r2,-64(fp)
 400a2d0:	e0bff017 	ldw	r2,-64(fp)
 400a2d4:	108000d0 	cmplti	r2,r2,3
 400a2d8:	103fd21e 	bne	r2,zero,400a224 <__alt_mem_onchip_memory2_0+0xfc005064>
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x76;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = check_col(j);
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++) {
 400a2dc:	e0bfbf17 	ldw	r2,-260(fp)
 400a2e0:	e0bff215 	stw	r2,-56(fp)
 400a2e4:	00002006 	br	400a368 <dropTBlock+0x2410>
	//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x76;
 400a2e8:	d4200317 	ldw	r16,-32756(gp)
 400a2ec:	e0bfc317 	ldw	r2,-244(fp)
 400a2f0:	10bfffc4 	addi	r2,r2,-1
 400a2f4:	01401404 	movi	r5,80
 400a2f8:	1009883a 	mov	r4,r2
 400a2fc:	40118340 	call	4011834 <__mulsi3>
 400a300:	1007883a 	mov	r3,r2
 400a304:	e0bff217 	ldw	r2,-56(fp)
 400a308:	1885883a 	add	r2,r3,r2
 400a30c:	1085883a 	add	r2,r2,r2
 400a310:	8085883a 	add	r2,r16,r2
 400a314:	00c01d84 	movi	r3,118
 400a318:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = check_col(j);
 400a31c:	d4200317 	ldw	r16,-32756(gp)
 400a320:	e0bfc317 	ldw	r2,-244(fp)
 400a324:	10bfffc4 	addi	r2,r2,-1
 400a328:	01401404 	movi	r5,80
 400a32c:	1009883a 	mov	r4,r2
 400a330:	40118340 	call	4011834 <__mulsi3>
 400a334:	1007883a 	mov	r3,r2
 400a338:	e0bff217 	ldw	r2,-56(fp)
 400a33c:	1885883a 	add	r2,r3,r2
 400a340:	1085883a 	add	r2,r2,r2
 400a344:	1023883a 	mov	r17,r2
 400a348:	e13ff217 	ldw	r4,-56(fp)
 400a34c:	400d8600 	call	400d860 <check_col>
 400a350:	1007883a 	mov	r3,r2
 400a354:	8445883a 	add	r2,r16,r17
 400a358:	10c00005 	stb	r3,0(r2)
		//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x76;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = check_col(j);
					}
				}
				for (int j = randomFirstEnd; j < randomEnd; j++) {
 400a35c:	e0bff217 	ldw	r2,-56(fp)
 400a360:	10800044 	addi	r2,r2,1
 400a364:	e0bff215 	stw	r2,-56(fp)
 400a368:	e0fff217 	ldw	r3,-56(fp)
 400a36c:	e0bfc017 	ldw	r2,-256(fp)
 400a370:	18bfdd16 	blt	r3,r2,400a2e8 <__alt_mem_onchip_memory2_0+0xfc005128>




        }
        count++;
 400a374:	e0bfbc17 	ldw	r2,-272(fp)
 400a378:	10800044 	addi	r2,r2,1
 400a37c:	e0bfbc15 	stw	r2,-272(fp)
        usleep (time);
 400a380:	e0bfc117 	ldw	r2,-252(fp)
 400a384:	1009883a 	mov	r4,r2
 400a388:	40230600 	call	4023060 <usleep>
	int randomFirstEnd = randomStart + 4;
	int randomEnd = randomStart + 6;
	int time = timer;
	int shapeLayout = 0;
	checkEndGame(randomStart, randomEnd, 2);
    for (int i = 2; i < 30; i++) {
 400a38c:	e0bfc317 	ldw	r2,-244(fp)
 400a390:	10800044 	addi	r2,r2,1
 400a394:	e0bfc315 	stw	r2,-244(fp)
 400a398:	e0bfc317 	ldw	r2,-244(fp)
 400a39c:	10800790 	cmplti	r2,r2,30
 400a3a0:	10371a1e 	bne	r2,zero,400800c <__alt_mem_onchip_memory2_0+0xfc002e4c>

        }
        count++;
        usleep (time);
    }
    if(shapeLayout == 0){
 400a3a4:	e0bfc217 	ldw	r2,-248(fp)
 400a3a8:	1000331e 	bne	r2,zero,400a478 <dropTBlock+0x2520>
		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400a3ac:	e0bfbe17 	ldw	r2,-264(fp)
 400a3b0:	e0bff315 	stw	r2,-52(fp)
 400a3b4:	00001306 	br	400a404 <dropTBlock+0x24ac>
        		grid[28][j] = 1;
 400a3b8:	008100f4 	movhi	r2,1027
 400a3bc:	10a62204 	addi	r2,r2,-26488
 400a3c0:	e0fff317 	ldw	r3,-52(fp)
 400a3c4:	18c10a04 	addi	r3,r3,1064
 400a3c8:	18c7883a 	add	r3,r3,r3
 400a3cc:	18c7883a 	add	r3,r3,r3
 400a3d0:	10c5883a 	add	r2,r2,r3
 400a3d4:	00c00044 	movi	r3,1
 400a3d8:	10c00015 	stw	r3,0(r2)
        		rowCount[28]++;
 400a3dc:	008100f4 	movhi	r2,1027
 400a3e0:	10a60404 	addi	r2,r2,-26608
 400a3e4:	10801c17 	ldw	r2,112(r2)
 400a3e8:	10c00044 	addi	r3,r2,1
 400a3ec:	008100f4 	movhi	r2,1027
 400a3f0:	10a60404 	addi	r2,r2,-26608
 400a3f4:	10c01c15 	stw	r3,112(r2)
        }
        count++;
        usleep (time);
    }
    if(shapeLayout == 0){
		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400a3f8:	e0bff317 	ldw	r2,-52(fp)
 400a3fc:	10800044 	addi	r2,r2,1
 400a400:	e0bff315 	stw	r2,-52(fp)
 400a404:	e0fff317 	ldw	r3,-52(fp)
 400a408:	e0bfbf17 	ldw	r2,-260(fp)
 400a40c:	18bfea16 	blt	r3,r2,400a3b8 <__alt_mem_onchip_memory2_0+0xfc0051f8>
        		grid[28][j] = 1;
        		rowCount[28]++;

		}

		for (int j = randomStart; j < randomEnd; j++) {
 400a410:	e0bfbd17 	ldw	r2,-268(fp)
 400a414:	e0bff415 	stw	r2,-48(fp)
 400a418:	00001306 	br	400a468 <dropTBlock+0x2510>
			grid[29][j] = 1;
 400a41c:	008100f4 	movhi	r2,1027
 400a420:	10a62204 	addi	r2,r2,-26488
 400a424:	e0fff417 	ldw	r3,-48(fp)
 400a428:	18c11384 	addi	r3,r3,1102
 400a42c:	18c7883a 	add	r3,r3,r3
 400a430:	18c7883a 	add	r3,r3,r3
 400a434:	10c5883a 	add	r2,r2,r3
 400a438:	00c00044 	movi	r3,1
 400a43c:	10c00015 	stw	r3,0(r2)
			rowCount[29]++;
 400a440:	008100f4 	movhi	r2,1027
 400a444:	10a60404 	addi	r2,r2,-26608
 400a448:	10801d17 	ldw	r2,116(r2)
 400a44c:	10c00044 	addi	r3,r2,1
 400a450:	008100f4 	movhi	r2,1027
 400a454:	10a60404 	addi	r2,r2,-26608
 400a458:	10c01d15 	stw	r3,116(r2)
        		grid[28][j] = 1;
        		rowCount[28]++;

		}

		for (int j = randomStart; j < randomEnd; j++) {
 400a45c:	e0bff417 	ldw	r2,-48(fp)
 400a460:	10800044 	addi	r2,r2,1
 400a464:	e0bff415 	stw	r2,-48(fp)
 400a468:	e0fff417 	ldw	r3,-48(fp)
 400a46c:	e0bfc017 	ldw	r2,-256(fp)
 400a470:	18bfea16 	blt	r3,r2,400a41c <__alt_mem_onchip_memory2_0+0xfc00525c>
 400a474:	0000d106 	br	400a7bc <dropTBlock+0x2864>
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
 400a478:	e0bfc217 	ldw	r2,-248(fp)
 400a47c:	10800058 	cmpnei	r2,r2,1
 400a480:	10004b1e 	bne	r2,zero,400a5b0 <dropTBlock+0x2658>
		for(int row = 0; row  < 3; row++){
 400a484:	e03ff515 	stw	zero,-44(fp)
 400a488:	00002c06 	br	400a53c <dropTBlock+0x25e4>
			for (int j = randomFirstStart; j < randomEnd; j++) {
 400a48c:	e0bfbe17 	ldw	r2,-264(fp)
 400a490:	e0bff615 	stw	r2,-40(fp)
 400a494:	00002306 	br	400a524 <dropTBlock+0x25cc>
        		grid[29 - row][j] = 1;
 400a498:	00c00744 	movi	r3,29
 400a49c:	e0bff517 	ldw	r2,-44(fp)
 400a4a0:	1885c83a 	sub	r2,r3,r2
 400a4a4:	040100f4 	movhi	r16,1027
 400a4a8:	84262204 	addi	r16,r16,-26488
 400a4ac:	01400984 	movi	r5,38
 400a4b0:	1009883a 	mov	r4,r2
 400a4b4:	40118340 	call	4011834 <__mulsi3>
 400a4b8:	1007883a 	mov	r3,r2
 400a4bc:	e0bff617 	ldw	r2,-40(fp)
 400a4c0:	1885883a 	add	r2,r3,r2
 400a4c4:	1085883a 	add	r2,r2,r2
 400a4c8:	1085883a 	add	r2,r2,r2
 400a4cc:	8085883a 	add	r2,r16,r2
 400a4d0:	00c00044 	movi	r3,1
 400a4d4:	10c00015 	stw	r3,0(r2)
        		rowCount[29 -row]++;
 400a4d8:	00c00744 	movi	r3,29
 400a4dc:	e0bff517 	ldw	r2,-44(fp)
 400a4e0:	1885c83a 	sub	r2,r3,r2
 400a4e4:	00c100f4 	movhi	r3,1027
 400a4e8:	18e60404 	addi	r3,r3,-26608
 400a4ec:	1089883a 	add	r4,r2,r2
 400a4f0:	2109883a 	add	r4,r4,r4
 400a4f4:	1907883a 	add	r3,r3,r4
 400a4f8:	18c00017 	ldw	r3,0(r3)
 400a4fc:	19000044 	addi	r4,r3,1
 400a500:	00c100f4 	movhi	r3,1027
 400a504:	18e60404 	addi	r3,r3,-26608
 400a508:	1085883a 	add	r2,r2,r2
 400a50c:	1085883a 	add	r2,r2,r2
 400a510:	1885883a 	add	r2,r3,r2
 400a514:	11000015 	stw	r4,0(r2)
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
		for(int row = 0; row  < 3; row++){
			for (int j = randomFirstStart; j < randomEnd; j++) {
 400a518:	e0bff617 	ldw	r2,-40(fp)
 400a51c:	10800044 	addi	r2,r2,1
 400a520:	e0bff615 	stw	r2,-40(fp)
 400a524:	e0fff617 	ldw	r3,-40(fp)
 400a528:	e0bfc017 	ldw	r2,-256(fp)
 400a52c:	18bfda16 	blt	r3,r2,400a498 <__alt_mem_onchip_memory2_0+0xfc0052d8>
		for (int j = randomStart; j < randomEnd; j++) {
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
		for(int row = 0; row  < 3; row++){
 400a530:	e0bff517 	ldw	r2,-44(fp)
 400a534:	10800044 	addi	r2,r2,1
 400a538:	e0bff515 	stw	r2,-44(fp)
 400a53c:	e0bff517 	ldw	r2,-44(fp)
 400a540:	108000d0 	cmplti	r2,r2,3
 400a544:	103fd11e 	bne	r2,zero,400a48c <__alt_mem_onchip_memory2_0+0xfc0052cc>
			for (int j = randomFirstStart; j < randomEnd; j++) {
        		grid[29 - row][j] = 1;
        		rowCount[29 -row]++;
			}
		}
		for (int j = randomStart; j < randomFirstStart; j++) {
 400a548:	e0bfbd17 	ldw	r2,-268(fp)
 400a54c:	e0bff715 	stw	r2,-36(fp)
 400a550:	00001306 	br	400a5a0 <dropTBlock+0x2648>
        	grid[28][j] = 1;
 400a554:	008100f4 	movhi	r2,1027
 400a558:	10a62204 	addi	r2,r2,-26488
 400a55c:	e0fff717 	ldw	r3,-36(fp)
 400a560:	18c10a04 	addi	r3,r3,1064
 400a564:	18c7883a 	add	r3,r3,r3
 400a568:	18c7883a 	add	r3,r3,r3
 400a56c:	10c5883a 	add	r2,r2,r3
 400a570:	00c00044 	movi	r3,1
 400a574:	10c00015 	stw	r3,0(r2)
        	rowCount[28]++;
 400a578:	008100f4 	movhi	r2,1027
 400a57c:	10a60404 	addi	r2,r2,-26608
 400a580:	10801c17 	ldw	r2,112(r2)
 400a584:	10c00044 	addi	r3,r2,1
 400a588:	008100f4 	movhi	r2,1027
 400a58c:	10a60404 	addi	r2,r2,-26608
 400a590:	10c01c15 	stw	r3,112(r2)
			for (int j = randomFirstStart; j < randomEnd; j++) {
        		grid[29 - row][j] = 1;
        		rowCount[29 -row]++;
			}
		}
		for (int j = randomStart; j < randomFirstStart; j++) {
 400a594:	e0bff717 	ldw	r2,-36(fp)
 400a598:	10800044 	addi	r2,r2,1
 400a59c:	e0bff715 	stw	r2,-36(fp)
 400a5a0:	e0fff717 	ldw	r3,-36(fp)
 400a5a4:	e0bfbe17 	ldw	r2,-264(fp)
 400a5a8:	18bfea16 	blt	r3,r2,400a554 <__alt_mem_onchip_memory2_0+0xfc005394>
 400a5ac:	00008306 	br	400a7bc <dropTBlock+0x2864>
        	grid[28][j] = 1;
        	rowCount[28]++;
		}
	}else if(shapeLayout == 2){
 400a5b0:	e0bfc217 	ldw	r2,-248(fp)
 400a5b4:	10800098 	cmpnei	r2,r2,2
 400a5b8:	1000331e 	bne	r2,zero,400a688 <dropTBlock+0x2730>
		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400a5bc:	e0bfbe17 	ldw	r2,-264(fp)
 400a5c0:	e0bff815 	stw	r2,-32(fp)
 400a5c4:	00001306 	br	400a614 <dropTBlock+0x26bc>
        	grid[29][j] = 1;
 400a5c8:	008100f4 	movhi	r2,1027
 400a5cc:	10a62204 	addi	r2,r2,-26488
 400a5d0:	e0fff817 	ldw	r3,-32(fp)
 400a5d4:	18c11384 	addi	r3,r3,1102
 400a5d8:	18c7883a 	add	r3,r3,r3
 400a5dc:	18c7883a 	add	r3,r3,r3
 400a5e0:	10c5883a 	add	r2,r2,r3
 400a5e4:	00c00044 	movi	r3,1
 400a5e8:	10c00015 	stw	r3,0(r2)
        	rowCount[29]++;
 400a5ec:	008100f4 	movhi	r2,1027
 400a5f0:	10a60404 	addi	r2,r2,-26608
 400a5f4:	10801d17 	ldw	r2,116(r2)
 400a5f8:	10c00044 	addi	r3,r2,1
 400a5fc:	008100f4 	movhi	r2,1027
 400a600:	10a60404 	addi	r2,r2,-26608
 400a604:	10c01d15 	stw	r3,116(r2)
		for (int j = randomStart; j < randomFirstStart; j++) {
        	grid[28][j] = 1;
        	rowCount[28]++;
		}
	}else if(shapeLayout == 2){
		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400a608:	e0bff817 	ldw	r2,-32(fp)
 400a60c:	10800044 	addi	r2,r2,1
 400a610:	e0bff815 	stw	r2,-32(fp)
 400a614:	e0fff817 	ldw	r3,-32(fp)
 400a618:	e0bfbf17 	ldw	r2,-260(fp)
 400a61c:	18bfea16 	blt	r3,r2,400a5c8 <__alt_mem_onchip_memory2_0+0xfc005408>
        	grid[29][j] = 1;
        	rowCount[29]++;
		}
		for (int j = randomStart; j < randomEnd; j++) {
 400a620:	e0bfbd17 	ldw	r2,-268(fp)
 400a624:	e0bff915 	stw	r2,-28(fp)
 400a628:	00001306 	br	400a678 <dropTBlock+0x2720>
        	grid[28][j] = 1;
 400a62c:	008100f4 	movhi	r2,1027
 400a630:	10a62204 	addi	r2,r2,-26488
 400a634:	e0fff917 	ldw	r3,-28(fp)
 400a638:	18c10a04 	addi	r3,r3,1064
 400a63c:	18c7883a 	add	r3,r3,r3
 400a640:	18c7883a 	add	r3,r3,r3
 400a644:	10c5883a 	add	r2,r2,r3
 400a648:	00c00044 	movi	r3,1
 400a64c:	10c00015 	stw	r3,0(r2)
        	rowCount[28]++;
 400a650:	008100f4 	movhi	r2,1027
 400a654:	10a60404 	addi	r2,r2,-26608
 400a658:	10801c17 	ldw	r2,112(r2)
 400a65c:	10c00044 	addi	r3,r2,1
 400a660:	008100f4 	movhi	r2,1027
 400a664:	10a60404 	addi	r2,r2,-26608
 400a668:	10c01c15 	stw	r3,112(r2)
	}else if(shapeLayout == 2){
		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
        	grid[29][j] = 1;
        	rowCount[29]++;
		}
		for (int j = randomStart; j < randomEnd; j++) {
 400a66c:	e0bff917 	ldw	r2,-28(fp)
 400a670:	10800044 	addi	r2,r2,1
 400a674:	e0bff915 	stw	r2,-28(fp)
 400a678:	e0fff917 	ldw	r3,-28(fp)
 400a67c:	e0bfc017 	ldw	r2,-256(fp)
 400a680:	18bfea16 	blt	r3,r2,400a62c <__alt_mem_onchip_memory2_0+0xfc00546c>
 400a684:	00004d06 	br	400a7bc <dropTBlock+0x2864>
        	grid[28][j] = 1;
        	rowCount[28]++;
		}
	}else if(shapeLayout == 3){
 400a688:	e0bfc217 	ldw	r2,-248(fp)
 400a68c:	108000d8 	cmpnei	r2,r2,3
 400a690:	10004a1e 	bne	r2,zero,400a7bc <dropTBlock+0x2864>
		for(int row = 0; row  < 3; row++){
 400a694:	e03ffa15 	stw	zero,-24(fp)
 400a698:	00002c06 	br	400a74c <dropTBlock+0x27f4>
			for (int j = randomStart; j < randomFirstEnd; j++) {
 400a69c:	e0bfbd17 	ldw	r2,-268(fp)
 400a6a0:	e0bffb15 	stw	r2,-20(fp)
 400a6a4:	00002306 	br	400a734 <dropTBlock+0x27dc>
        		grid[29 - row][j] = 1;
 400a6a8:	00c00744 	movi	r3,29
 400a6ac:	e0bffa17 	ldw	r2,-24(fp)
 400a6b0:	1885c83a 	sub	r2,r3,r2
 400a6b4:	040100f4 	movhi	r16,1027
 400a6b8:	84262204 	addi	r16,r16,-26488
 400a6bc:	01400984 	movi	r5,38
 400a6c0:	1009883a 	mov	r4,r2
 400a6c4:	40118340 	call	4011834 <__mulsi3>
 400a6c8:	1007883a 	mov	r3,r2
 400a6cc:	e0bffb17 	ldw	r2,-20(fp)
 400a6d0:	1885883a 	add	r2,r3,r2
 400a6d4:	1085883a 	add	r2,r2,r2
 400a6d8:	1085883a 	add	r2,r2,r2
 400a6dc:	8085883a 	add	r2,r16,r2
 400a6e0:	00c00044 	movi	r3,1
 400a6e4:	10c00015 	stw	r3,0(r2)
        		rowCount[29 - row]++;
 400a6e8:	00c00744 	movi	r3,29
 400a6ec:	e0bffa17 	ldw	r2,-24(fp)
 400a6f0:	1885c83a 	sub	r2,r3,r2
 400a6f4:	00c100f4 	movhi	r3,1027
 400a6f8:	18e60404 	addi	r3,r3,-26608
 400a6fc:	1089883a 	add	r4,r2,r2
 400a700:	2109883a 	add	r4,r4,r4
 400a704:	1907883a 	add	r3,r3,r4
 400a708:	18c00017 	ldw	r3,0(r3)
 400a70c:	19000044 	addi	r4,r3,1
 400a710:	00c100f4 	movhi	r3,1027
 400a714:	18e60404 	addi	r3,r3,-26608
 400a718:	1085883a 	add	r2,r2,r2
 400a71c:	1085883a 	add	r2,r2,r2
 400a720:	1885883a 	add	r2,r3,r2
 400a724:	11000015 	stw	r4,0(r2)
        	grid[28][j] = 1;
        	rowCount[28]++;
		}
	}else if(shapeLayout == 3){
		for(int row = 0; row  < 3; row++){
			for (int j = randomStart; j < randomFirstEnd; j++) {
 400a728:	e0bffb17 	ldw	r2,-20(fp)
 400a72c:	10800044 	addi	r2,r2,1
 400a730:	e0bffb15 	stw	r2,-20(fp)
 400a734:	e0fffb17 	ldw	r3,-20(fp)
 400a738:	e0bfbf17 	ldw	r2,-260(fp)
 400a73c:	18bfda16 	blt	r3,r2,400a6a8 <__alt_mem_onchip_memory2_0+0xfc0054e8>
		for (int j = randomStart; j < randomEnd; j++) {
        	grid[28][j] = 1;
        	rowCount[28]++;
		}
	}else if(shapeLayout == 3){
		for(int row = 0; row  < 3; row++){
 400a740:	e0bffa17 	ldw	r2,-24(fp)
 400a744:	10800044 	addi	r2,r2,1
 400a748:	e0bffa15 	stw	r2,-24(fp)
 400a74c:	e0bffa17 	ldw	r2,-24(fp)
 400a750:	108000d0 	cmplti	r2,r2,3
 400a754:	103fd11e 	bne	r2,zero,400a69c <__alt_mem_onchip_memory2_0+0xfc0054dc>
			for (int j = randomStart; j < randomFirstEnd; j++) {
        		grid[29 - row][j] = 1;
        		rowCount[29 - row]++;
			}
		}
		for (int j = randomFirstEnd; j < randomEnd; j++) {
 400a758:	e0bfbf17 	ldw	r2,-260(fp)
 400a75c:	e0bffc15 	stw	r2,-16(fp)
 400a760:	00001306 	br	400a7b0 <dropTBlock+0x2858>
//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[28][j] = 1;
 400a764:	008100f4 	movhi	r2,1027
 400a768:	10a62204 	addi	r2,r2,-26488
 400a76c:	e0fffc17 	ldw	r3,-16(fp)
 400a770:	18c10a04 	addi	r3,r3,1064
 400a774:	18c7883a 	add	r3,r3,r3
 400a778:	18c7883a 	add	r3,r3,r3
 400a77c:	10c5883a 	add	r2,r2,r3
 400a780:	00c00044 	movi	r3,1
 400a784:	10c00015 	stw	r3,0(r2)
			rowCount[28]++;
 400a788:	008100f4 	movhi	r2,1027
 400a78c:	10a60404 	addi	r2,r2,-26608
 400a790:	10801c17 	ldw	r2,112(r2)
 400a794:	10c00044 	addi	r3,r2,1
 400a798:	008100f4 	movhi	r2,1027
 400a79c:	10a60404 	addi	r2,r2,-26608
 400a7a0:	10c01c15 	stw	r3,112(r2)
			for (int j = randomStart; j < randomFirstEnd; j++) {
        		grid[29 - row][j] = 1;
        		rowCount[29 - row]++;
			}
		}
		for (int j = randomFirstEnd; j < randomEnd; j++) {
 400a7a4:	e0bffc17 	ldw	r2,-16(fp)
 400a7a8:	10800044 	addi	r2,r2,1
 400a7ac:	e0bffc15 	stw	r2,-16(fp)
 400a7b0:	e0fffc17 	ldw	r3,-16(fp)
 400a7b4:	e0bfc017 	ldw	r2,-256(fp)
 400a7b8:	18bfea16 	blt	r3,r2,400a764 <__alt_mem_onchip_memory2_0+0xfc0055a4>
//        		vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
			grid[28][j] = 1;
			rowCount[28]++;
		}
	}
}
 400a7bc:	e6fffe04 	addi	sp,fp,-8
 400a7c0:	dfc00317 	ldw	ra,12(sp)
 400a7c4:	df000217 	ldw	fp,8(sp)
 400a7c8:	dc400117 	ldw	r17,4(sp)
 400a7cc:	dc000017 	ldw	r16,0(sp)
 400a7d0:	dec00404 	addi	sp,sp,16
 400a7d4:	f800283a 	ret

0400a7d8 <dropSBlock>:

void dropSBlock() {
 400a7d8:	deffd404 	addi	sp,sp,-176
 400a7dc:	dfc02b15 	stw	ra,172(sp)
 400a7e0:	df002a15 	stw	fp,168(sp)
 400a7e4:	dc402915 	stw	r17,164(sp)
 400a7e8:	dc002815 	stw	r16,160(sp)
 400a7ec:	df002a04 	addi	fp,sp,168
    int count = 0;
 400a7f0:	e03fd615 	stw	zero,-168(fp)
    BYTE keycode;
    int randomStart = rand()%32+21;
 400a7f4:	40141e00 	call	40141e0 <rand>
 400a7f8:	1007883a 	mov	r3,r2
 400a7fc:	00a00034 	movhi	r2,32768
 400a800:	108007c4 	addi	r2,r2,31
 400a804:	1884703a 	and	r2,r3,r2
 400a808:	1000040e 	bge	r2,zero,400a81c <dropSBlock+0x44>
 400a80c:	10bfffc4 	addi	r2,r2,-1
 400a810:	00fff804 	movi	r3,-32
 400a814:	10c4b03a 	or	r2,r2,r3
 400a818:	10800044 	addi	r2,r2,1
 400a81c:	10800544 	addi	r2,r2,21
 400a820:	e0bfd715 	stw	r2,-164(fp)
    if(randomStart % 2 == 0){
 400a824:	e0bfd717 	ldw	r2,-164(fp)
 400a828:	1080004c 	andi	r2,r2,1
 400a82c:	10000a1e 	bne	r2,zero,400a858 <dropSBlock+0x80>
    	if(randomStart == 54){
 400a830:	e0bfd717 	ldw	r2,-164(fp)
 400a834:	10800d98 	cmpnei	r2,r2,54
 400a838:	1000041e 	bne	r2,zero,400a84c <dropSBlock+0x74>
    		randomStart--;
 400a83c:	e0bfd717 	ldw	r2,-164(fp)
 400a840:	10bfffc4 	addi	r2,r2,-1
 400a844:	e0bfd715 	stw	r2,-164(fp)
 400a848:	00000306 	br	400a858 <dropSBlock+0x80>
    	}else{
    		randomStart++;
 400a84c:	e0bfd717 	ldw	r2,-164(fp)
 400a850:	10800044 	addi	r2,r2,1
 400a854:	e0bfd715 	stw	r2,-164(fp)
    	}
    }
    int randomFirstStart = randomStart + 2;
 400a858:	e0bfd717 	ldw	r2,-164(fp)
 400a85c:	10800084 	addi	r2,r2,2
 400a860:	e0bfd815 	stw	r2,-160(fp)
	int randomFirstEnd = randomStart + 6;
 400a864:	e0bfd717 	ldw	r2,-164(fp)
 400a868:	10800184 	addi	r2,r2,6
 400a86c:	e0bfd915 	stw	r2,-156(fp)
	int randomEnd = randomStart + 4;
 400a870:	e0bfd717 	ldw	r2,-164(fp)
 400a874:	10800104 	addi	r2,r2,4
 400a878:	e0bfda15 	stw	r2,-152(fp)
	int time = timer;
 400a87c:	d0a80117 	ldw	r2,-24572(gp)
 400a880:	e0bfdb15 	stw	r2,-148(fp)
	int shapeLayout = 0;
 400a884:	e03fdc15 	stw	zero,-144(fp)
	checkEndGame(randomStart, randomFirstEnd, 2);
 400a888:	01800084 	movi	r6,2
 400a88c:	e17fd917 	ldw	r5,-156(fp)
 400a890:	e13fd717 	ldw	r4,-164(fp)
 400a894:	400dfd80 	call	400dfd8 <checkEndGame>
    for (int i = 2; i < 30; i++) {
 400a898:	00800084 	movi	r2,2
 400a89c:	e0bfdd15 	stw	r2,-140(fp)
 400a8a0:	0004e706 	br	400bc40 <dropSBlock+0x1468>
        if (count == 0) {
 400a8a4:	e0bfd617 	ldw	r2,-168(fp)
 400a8a8:	1000491e 	bne	r2,zero,400a9d0 <dropSBlock+0x1f8>

        	for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400a8ac:	e0bfd817 	ldw	r2,-160(fp)
 400a8b0:	e0bfde15 	stw	r2,-136(fp)
 400a8b4:	00002006 	br	400a938 <dropSBlock+0x160>
//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xED;
 400a8b8:	d4200317 	ldw	r16,-32756(gp)
 400a8bc:	e0bfdd17 	ldw	r2,-140(fp)
 400a8c0:	10bfffc4 	addi	r2,r2,-1
 400a8c4:	01401404 	movi	r5,80
 400a8c8:	1009883a 	mov	r4,r2
 400a8cc:	40118340 	call	4011834 <__mulsi3>
 400a8d0:	1007883a 	mov	r3,r2
 400a8d4:	e0bfde17 	ldw	r2,-136(fp)
 400a8d8:	1885883a 	add	r2,r3,r2
 400a8dc:	1085883a 	add	r2,r2,r2
 400a8e0:	8085883a 	add	r2,r16,r2
 400a8e4:	00fffb44 	movi	r3,-19
 400a8e8:	10c00005 	stb	r3,0(r2)
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400a8ec:	d4600317 	ldw	r17,-32756(gp)
 400a8f0:	e0bfdd17 	ldw	r2,-140(fp)
 400a8f4:	10bfffc4 	addi	r2,r2,-1
 400a8f8:	01401404 	movi	r5,80
 400a8fc:	1009883a 	mov	r4,r2
 400a900:	40118340 	call	4011834 <__mulsi3>
 400a904:	1007883a 	mov	r3,r2
 400a908:	e0bfde17 	ldw	r2,-136(fp)
 400a90c:	1885883a 	add	r2,r3,r2
 400a910:	1085883a 	add	r2,r2,r2
 400a914:	14000044 	addi	r16,r2,1
 400a918:	e13fde17 	ldw	r4,-136(fp)
 400a91c:	400d8600 	call	400d860 <check_col>
 400a920:	1007883a 	mov	r3,r2
 400a924:	8c05883a 	add	r2,r17,r16
 400a928:	10c00005 	stb	r3,0(r2)
	int shapeLayout = 0;
	checkEndGame(randomStart, randomFirstEnd, 2);
    for (int i = 2; i < 30; i++) {
        if (count == 0) {

        	for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400a92c:	e0bfde17 	ldw	r2,-136(fp)
 400a930:	10800044 	addi	r2,r2,1
 400a934:	e0bfde15 	stw	r2,-136(fp)
 400a938:	e0ffde17 	ldw	r3,-136(fp)
 400a93c:	e0bfd917 	ldw	r2,-156(fp)
 400a940:	18bfdd16 	blt	r3,r2,400a8b8 <__alt_mem_onchip_memory2_0+0xfc0056f8>
//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xED;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
        	}

			for (int j = randomStart; j < randomEnd; j++) {
 400a944:	e0bfd717 	ldw	r2,-164(fp)
 400a948:	e0bfdf15 	stw	r2,-132(fp)
 400a94c:	00001c06 	br	400a9c0 <dropSBlock+0x1e8>
//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
				vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xED;
 400a950:	d4200317 	ldw	r16,-32756(gp)
 400a954:	01401404 	movi	r5,80
 400a958:	e13fdd17 	ldw	r4,-140(fp)
 400a95c:	40118340 	call	4011834 <__mulsi3>
 400a960:	1007883a 	mov	r3,r2
 400a964:	e0bfdf17 	ldw	r2,-132(fp)
 400a968:	1885883a 	add	r2,r3,r2
 400a96c:	1085883a 	add	r2,r2,r2
 400a970:	8085883a 	add	r2,r16,r2
 400a974:	00fffb44 	movi	r3,-19
 400a978:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 400a97c:	d4600317 	ldw	r17,-32756(gp)
 400a980:	01401404 	movi	r5,80
 400a984:	e13fdd17 	ldw	r4,-140(fp)
 400a988:	40118340 	call	4011834 <__mulsi3>
 400a98c:	1007883a 	mov	r3,r2
 400a990:	e0bfdf17 	ldw	r2,-132(fp)
 400a994:	1885883a 	add	r2,r3,r2
 400a998:	1085883a 	add	r2,r2,r2
 400a99c:	14000044 	addi	r16,r2,1
 400a9a0:	e13fdf17 	ldw	r4,-132(fp)
 400a9a4:	400d8600 	call	400d860 <check_col>
 400a9a8:	1007883a 	mov	r3,r2
 400a9ac:	8c05883a 	add	r2,r17,r16
 400a9b0:	10c00005 	stb	r3,0(r2)
//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xED;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
        	}

			for (int j = randomStart; j < randomEnd; j++) {
 400a9b4:	e0bfdf17 	ldw	r2,-132(fp)
 400a9b8:	10800044 	addi	r2,r2,1
 400a9bc:	e0bfdf15 	stw	r2,-132(fp)
 400a9c0:	e0ffdf17 	ldw	r3,-132(fp)
 400a9c4:	e0bfda17 	ldw	r2,-152(fp)
 400a9c8:	18bfe116 	blt	r3,r2,400a950 <__alt_mem_onchip_memory2_0+0xfc005790>
 400a9cc:	00049306 	br	400bc1c <dropSBlock+0x1444>



        } else {

        	if(shapeLayout == 0){
 400a9d0:	e0bfdc17 	ldw	r2,-144(fp)
 400a9d4:	1000d01e 	bne	r2,zero,400ad18 <dropSBlock+0x540>
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400a9d8:	e0bfd817 	ldw	r2,-160(fp)
 400a9dc:	e0bfe015 	stw	r2,-128(fp)
 400a9e0:	00006206 	br	400ab6c <dropSBlock+0x394>
					if(grid[i - 1][j] == 1){
 400a9e4:	e0bfdd17 	ldw	r2,-140(fp)
 400a9e8:	10bfffc4 	addi	r2,r2,-1
 400a9ec:	040100f4 	movhi	r16,1027
 400a9f0:	84262204 	addi	r16,r16,-26488
 400a9f4:	01400984 	movi	r5,38
 400a9f8:	1009883a 	mov	r4,r2
 400a9fc:	40118340 	call	4011834 <__mulsi3>
 400aa00:	1007883a 	mov	r3,r2
 400aa04:	e0bfe017 	ldw	r2,-128(fp)
 400aa08:	1885883a 	add	r2,r3,r2
 400aa0c:	1085883a 	add	r2,r2,r2
 400aa10:	1085883a 	add	r2,r2,r2
 400aa14:	8085883a 	add	r2,r16,r2
 400aa18:	10800017 	ldw	r2,0(r2)
 400aa1c:	10800058 	cmpnei	r2,r2,1
 400aa20:	10004f1e 	bne	r2,zero,400ab60 <dropSBlock+0x388>
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400aa24:	e0bfd817 	ldw	r2,-160(fp)
 400aa28:	e0bfe115 	stw	r2,-124(fp)
 400aa2c:	00002106 	br	400aab4 <dropSBlock+0x2dc>
			        		grid[i - 2][j] = 1;
 400aa30:	e0bfdd17 	ldw	r2,-140(fp)
 400aa34:	10bfff84 	addi	r2,r2,-2
 400aa38:	040100f4 	movhi	r16,1027
 400aa3c:	84262204 	addi	r16,r16,-26488
 400aa40:	01400984 	movi	r5,38
 400aa44:	1009883a 	mov	r4,r2
 400aa48:	40118340 	call	4011834 <__mulsi3>
 400aa4c:	1007883a 	mov	r3,r2
 400aa50:	e0bfe117 	ldw	r2,-124(fp)
 400aa54:	1885883a 	add	r2,r3,r2
 400aa58:	1085883a 	add	r2,r2,r2
 400aa5c:	1085883a 	add	r2,r2,r2
 400aa60:	8085883a 	add	r2,r16,r2
 400aa64:	00c00044 	movi	r3,1
 400aa68:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 2]++;
 400aa6c:	e0bfdd17 	ldw	r2,-140(fp)
 400aa70:	10bfff84 	addi	r2,r2,-2
 400aa74:	00c100f4 	movhi	r3,1027
 400aa78:	18e60404 	addi	r3,r3,-26608
 400aa7c:	1089883a 	add	r4,r2,r2
 400aa80:	2109883a 	add	r4,r4,r4
 400aa84:	1907883a 	add	r3,r3,r4
 400aa88:	18c00017 	ldw	r3,0(r3)
 400aa8c:	19000044 	addi	r4,r3,1
 400aa90:	00c100f4 	movhi	r3,1027
 400aa94:	18e60404 	addi	r3,r3,-26608
 400aa98:	1085883a 	add	r2,r2,r2
 400aa9c:	1085883a 	add	r2,r2,r2
 400aaa0:	1885883a 	add	r2,r3,r2
 400aaa4:	11000015 	stw	r4,0(r2)
        } else {

        	if(shapeLayout == 0){
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
					if(grid[i - 1][j] == 1){
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400aaa8:	e0bfe117 	ldw	r2,-124(fp)
 400aaac:	10800044 	addi	r2,r2,1
 400aab0:	e0bfe115 	stw	r2,-124(fp)
 400aab4:	e0ffe117 	ldw	r3,-124(fp)
 400aab8:	e0bfd917 	ldw	r2,-156(fp)
 400aabc:	18bfdc16 	blt	r3,r2,400aa30 <__alt_mem_onchip_memory2_0+0xfc005870>
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}


						for (int j = randomStart; j < randomEnd; j++) {
 400aac0:	e0bfd717 	ldw	r2,-164(fp)
 400aac4:	e0bfe215 	stw	r2,-120(fp)
 400aac8:	00002106 	br	400ab50 <dropSBlock+0x378>
							grid[i - 1][j] = 1;
 400aacc:	e0bfdd17 	ldw	r2,-140(fp)
 400aad0:	10bfffc4 	addi	r2,r2,-1
 400aad4:	040100f4 	movhi	r16,1027
 400aad8:	84262204 	addi	r16,r16,-26488
 400aadc:	01400984 	movi	r5,38
 400aae0:	1009883a 	mov	r4,r2
 400aae4:	40118340 	call	4011834 <__mulsi3>
 400aae8:	1007883a 	mov	r3,r2
 400aaec:	e0bfe217 	ldw	r2,-120(fp)
 400aaf0:	1885883a 	add	r2,r3,r2
 400aaf4:	1085883a 	add	r2,r2,r2
 400aaf8:	1085883a 	add	r2,r2,r2
 400aafc:	8085883a 	add	r2,r16,r2
 400ab00:	00c00044 	movi	r3,1
 400ab04:	10c00015 	stw	r3,0(r2)
							rowCount[i - 1]++;
 400ab08:	e0bfdd17 	ldw	r2,-140(fp)
 400ab0c:	10bfffc4 	addi	r2,r2,-1
 400ab10:	00c100f4 	movhi	r3,1027
 400ab14:	18e60404 	addi	r3,r3,-26608
 400ab18:	1089883a 	add	r4,r2,r2
 400ab1c:	2109883a 	add	r4,r4,r4
 400ab20:	1907883a 	add	r3,r3,r4
 400ab24:	18c00017 	ldw	r3,0(r3)
 400ab28:	19000044 	addi	r4,r3,1
 400ab2c:	00c100f4 	movhi	r3,1027
 400ab30:	18e60404 	addi	r3,r3,-26608
 400ab34:	1085883a 	add	r2,r2,r2
 400ab38:	1085883a 	add	r2,r2,r2
 400ab3c:	1885883a 	add	r2,r3,r2
 400ab40:	11000015 	stw	r4,0(r2)
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}


						for (int j = randomStart; j < randomEnd; j++) {
 400ab44:	e0bfe217 	ldw	r2,-120(fp)
 400ab48:	10800044 	addi	r2,r2,1
 400ab4c:	e0bfe215 	stw	r2,-120(fp)
 400ab50:	e0ffe217 	ldw	r3,-120(fp)
 400ab54:	e0bfda17 	ldw	r2,-152(fp)
 400ab58:	18bfdc16 	blt	r3,r2,400aacc <__alt_mem_onchip_memory2_0+0xfc00590c>
							grid[i - 1][j] = 1;
							rowCount[i - 1]++;
						}
						return;
 400ab5c:	0004cd06 	br	400be94 <dropSBlock+0x16bc>


        } else {

        	if(shapeLayout == 0){
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400ab60:	e0bfe017 	ldw	r2,-128(fp)
 400ab64:	10800044 	addi	r2,r2,1
 400ab68:	e0bfe015 	stw	r2,-128(fp)
 400ab6c:	e0ffe017 	ldw	r3,-128(fp)
 400ab70:	e0bfd917 	ldw	r2,-156(fp)
 400ab74:	18bf9b16 	blt	r3,r2,400a9e4 <__alt_mem_onchip_memory2_0+0xfc005824>
						return;
					}
				}


				for (int j = randomStart; j < randomEnd; j++) {
 400ab78:	e0bfd717 	ldw	r2,-164(fp)
 400ab7c:	e0bfe315 	stw	r2,-116(fp)
 400ab80:	00006106 	br	400ad08 <dropSBlock+0x530>
					if(grid[i][j] == 1){
 400ab84:	040100f4 	movhi	r16,1027
 400ab88:	84262204 	addi	r16,r16,-26488
 400ab8c:	e0bfdd17 	ldw	r2,-140(fp)
 400ab90:	01400984 	movi	r5,38
 400ab94:	1009883a 	mov	r4,r2
 400ab98:	40118340 	call	4011834 <__mulsi3>
 400ab9c:	1007883a 	mov	r3,r2
 400aba0:	e0bfe317 	ldw	r2,-116(fp)
 400aba4:	1885883a 	add	r2,r3,r2
 400aba8:	1085883a 	add	r2,r2,r2
 400abac:	1085883a 	add	r2,r2,r2
 400abb0:	8085883a 	add	r2,r16,r2
 400abb4:	10800017 	ldw	r2,0(r2)
 400abb8:	10800058 	cmpnei	r2,r2,1
 400abbc:	10004f1e 	bne	r2,zero,400acfc <dropSBlock+0x524>
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400abc0:	e0bfd817 	ldw	r2,-160(fp)
 400abc4:	e0bfe415 	stw	r2,-112(fp)
 400abc8:	00002106 	br	400ac50 <dropSBlock+0x478>
							grid[i - 2][j] = 1;
 400abcc:	e0bfdd17 	ldw	r2,-140(fp)
 400abd0:	10bfff84 	addi	r2,r2,-2
 400abd4:	040100f4 	movhi	r16,1027
 400abd8:	84262204 	addi	r16,r16,-26488
 400abdc:	01400984 	movi	r5,38
 400abe0:	1009883a 	mov	r4,r2
 400abe4:	40118340 	call	4011834 <__mulsi3>
 400abe8:	1007883a 	mov	r3,r2
 400abec:	e0bfe417 	ldw	r2,-112(fp)
 400abf0:	1885883a 	add	r2,r3,r2
 400abf4:	1085883a 	add	r2,r2,r2
 400abf8:	1085883a 	add	r2,r2,r2
 400abfc:	8085883a 	add	r2,r16,r2
 400ac00:	00c00044 	movi	r3,1
 400ac04:	10c00015 	stw	r3,0(r2)
							rowCount[i - 2]++;
 400ac08:	e0bfdd17 	ldw	r2,-140(fp)
 400ac0c:	10bfff84 	addi	r2,r2,-2
 400ac10:	00c100f4 	movhi	r3,1027
 400ac14:	18e60404 	addi	r3,r3,-26608
 400ac18:	1089883a 	add	r4,r2,r2
 400ac1c:	2109883a 	add	r4,r4,r4
 400ac20:	1907883a 	add	r3,r3,r4
 400ac24:	18c00017 	ldw	r3,0(r3)
 400ac28:	19000044 	addi	r4,r3,1
 400ac2c:	00c100f4 	movhi	r3,1027
 400ac30:	18e60404 	addi	r3,r3,-26608
 400ac34:	1085883a 	add	r2,r2,r2
 400ac38:	1085883a 	add	r2,r2,r2
 400ac3c:	1885883a 	add	r2,r3,r2
 400ac40:	11000015 	stw	r4,0(r2)
				}


				for (int j = randomStart; j < randomEnd; j++) {
					if(grid[i][j] == 1){
						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400ac44:	e0bfe417 	ldw	r2,-112(fp)
 400ac48:	10800044 	addi	r2,r2,1
 400ac4c:	e0bfe415 	stw	r2,-112(fp)
 400ac50:	e0ffe417 	ldw	r3,-112(fp)
 400ac54:	e0bfd917 	ldw	r2,-156(fp)
 400ac58:	18bfdc16 	blt	r3,r2,400abcc <__alt_mem_onchip_memory2_0+0xfc005a0c>
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}


						for (int j = randomStart; j < randomEnd; j++) {
 400ac5c:	e0bfd717 	ldw	r2,-164(fp)
 400ac60:	e0bfe515 	stw	r2,-108(fp)
 400ac64:	00002106 	br	400acec <dropSBlock+0x514>
							grid[i - 1][j] = 1;
 400ac68:	e0bfdd17 	ldw	r2,-140(fp)
 400ac6c:	10bfffc4 	addi	r2,r2,-1
 400ac70:	040100f4 	movhi	r16,1027
 400ac74:	84262204 	addi	r16,r16,-26488
 400ac78:	01400984 	movi	r5,38
 400ac7c:	1009883a 	mov	r4,r2
 400ac80:	40118340 	call	4011834 <__mulsi3>
 400ac84:	1007883a 	mov	r3,r2
 400ac88:	e0bfe517 	ldw	r2,-108(fp)
 400ac8c:	1885883a 	add	r2,r3,r2
 400ac90:	1085883a 	add	r2,r2,r2
 400ac94:	1085883a 	add	r2,r2,r2
 400ac98:	8085883a 	add	r2,r16,r2
 400ac9c:	00c00044 	movi	r3,1
 400aca0:	10c00015 	stw	r3,0(r2)
							rowCount[i - 1]++;
 400aca4:	e0bfdd17 	ldw	r2,-140(fp)
 400aca8:	10bfffc4 	addi	r2,r2,-1
 400acac:	00c100f4 	movhi	r3,1027
 400acb0:	18e60404 	addi	r3,r3,-26608
 400acb4:	1089883a 	add	r4,r2,r2
 400acb8:	2109883a 	add	r4,r4,r4
 400acbc:	1907883a 	add	r3,r3,r4
 400acc0:	18c00017 	ldw	r3,0(r3)
 400acc4:	19000044 	addi	r4,r3,1
 400acc8:	00c100f4 	movhi	r3,1027
 400accc:	18e60404 	addi	r3,r3,-26608
 400acd0:	1085883a 	add	r2,r2,r2
 400acd4:	1085883a 	add	r2,r2,r2
 400acd8:	1885883a 	add	r2,r3,r2
 400acdc:	11000015 	stw	r4,0(r2)
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}


						for (int j = randomStart; j < randomEnd; j++) {
 400ace0:	e0bfe517 	ldw	r2,-108(fp)
 400ace4:	10800044 	addi	r2,r2,1
 400ace8:	e0bfe515 	stw	r2,-108(fp)
 400acec:	e0ffe517 	ldw	r3,-108(fp)
 400acf0:	e0bfda17 	ldw	r2,-152(fp)
 400acf4:	18bfdc16 	blt	r3,r2,400ac68 <__alt_mem_onchip_memory2_0+0xfc005aa8>
							grid[i - 1][j] = 1;
							rowCount[i - 1]++;
						}
						return;
 400acf8:	00046606 	br	400be94 <dropSBlock+0x16bc>
						return;
					}
				}


				for (int j = randomStart; j < randomEnd; j++) {
 400acfc:	e0bfe317 	ldw	r2,-116(fp)
 400ad00:	10800044 	addi	r2,r2,1
 400ad04:	e0bfe315 	stw	r2,-116(fp)
 400ad08:	e0ffe317 	ldw	r3,-116(fp)
 400ad0c:	e0bfda17 	ldw	r2,-152(fp)
 400ad10:	18bf9c16 	blt	r3,r2,400ab84 <__alt_mem_onchip_memory2_0+0xfc0059c4>
 400ad14:	0000f206 	br	400b0e0 <dropSBlock+0x908>
							rowCount[i - 1]++;
						}
						return;
					}
				}
			}else if(shapeLayout == 1){
 400ad18:	e0bfdc17 	ldw	r2,-144(fp)
 400ad1c:	10800058 	cmpnei	r2,r2,1
 400ad20:	1000ef1e 	bne	r2,zero,400b0e0 <dropSBlock+0x908>
				for (int j = randomStart; j < randomFirstEnd; j++) {
 400ad24:	e0bfd717 	ldw	r2,-164(fp)
 400ad28:	e0bfe615 	stw	r2,-104(fp)
 400ad2c:	00007206 	br	400aef8 <dropSBlock+0x720>
					if(grid[i - 1][j] == 1){
 400ad30:	e0bfdd17 	ldw	r2,-140(fp)
 400ad34:	10bfffc4 	addi	r2,r2,-1
 400ad38:	040100f4 	movhi	r16,1027
 400ad3c:	84262204 	addi	r16,r16,-26488
 400ad40:	01400984 	movi	r5,38
 400ad44:	1009883a 	mov	r4,r2
 400ad48:	40118340 	call	4011834 <__mulsi3>
 400ad4c:	1007883a 	mov	r3,r2
 400ad50:	e0bfe617 	ldw	r2,-104(fp)
 400ad54:	1885883a 	add	r2,r3,r2
 400ad58:	1085883a 	add	r2,r2,r2
 400ad5c:	1085883a 	add	r2,r2,r2
 400ad60:	8085883a 	add	r2,r16,r2
 400ad64:	10800017 	ldw	r2,0(r2)
 400ad68:	10800058 	cmpnei	r2,r2,1
 400ad6c:	10005f1e 	bne	r2,zero,400aeec <dropSBlock+0x714>
						for(int row = 0; row < 2; row++){
 400ad70:	e03fe715 	stw	zero,-100(fp)
 400ad74:	00005906 	br	400aedc <dropSBlock+0x704>
							for (int j = randomStart; j < randomFirstEnd; j++) {
 400ad78:	e0bfd717 	ldw	r2,-164(fp)
 400ad7c:	e0bfe815 	stw	r2,-96(fp)
 400ad80:	00002506 	br	400ae18 <dropSBlock+0x640>
				        		grid[i - 2 - row][j] = 1;
 400ad84:	e0bfdd17 	ldw	r2,-140(fp)
 400ad88:	10ffff84 	addi	r3,r2,-2
 400ad8c:	e0bfe717 	ldw	r2,-100(fp)
 400ad90:	1885c83a 	sub	r2,r3,r2
 400ad94:	040100f4 	movhi	r16,1027
 400ad98:	84262204 	addi	r16,r16,-26488
 400ad9c:	01400984 	movi	r5,38
 400ada0:	1009883a 	mov	r4,r2
 400ada4:	40118340 	call	4011834 <__mulsi3>
 400ada8:	1007883a 	mov	r3,r2
 400adac:	e0bfe817 	ldw	r2,-96(fp)
 400adb0:	1885883a 	add	r2,r3,r2
 400adb4:	1085883a 	add	r2,r2,r2
 400adb8:	1085883a 	add	r2,r2,r2
 400adbc:	8085883a 	add	r2,r16,r2
 400adc0:	00c00044 	movi	r3,1
 400adc4:	10c00015 	stw	r3,0(r2)
				        		rowCount[i - 2 - row]++;
 400adc8:	e0bfdd17 	ldw	r2,-140(fp)
 400adcc:	10ffff84 	addi	r3,r2,-2
 400add0:	e0bfe717 	ldw	r2,-100(fp)
 400add4:	1885c83a 	sub	r2,r3,r2
 400add8:	00c100f4 	movhi	r3,1027
 400addc:	18e60404 	addi	r3,r3,-26608
 400ade0:	1089883a 	add	r4,r2,r2
 400ade4:	2109883a 	add	r4,r4,r4
 400ade8:	1907883a 	add	r3,r3,r4
 400adec:	18c00017 	ldw	r3,0(r3)
 400adf0:	19000044 	addi	r4,r3,1
 400adf4:	00c100f4 	movhi	r3,1027
 400adf8:	18e60404 	addi	r3,r3,-26608
 400adfc:	1085883a 	add	r2,r2,r2
 400ae00:	1085883a 	add	r2,r2,r2
 400ae04:	1885883a 	add	r2,r3,r2
 400ae08:	11000015 	stw	r4,0(r2)
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomFirstEnd; j++) {
					if(grid[i - 1][j] == 1){
						for(int row = 0; row < 2; row++){
							for (int j = randomStart; j < randomFirstEnd; j++) {
 400ae0c:	e0bfe817 	ldw	r2,-96(fp)
 400ae10:	10800044 	addi	r2,r2,1
 400ae14:	e0bfe815 	stw	r2,-96(fp)
 400ae18:	e0ffe817 	ldw	r3,-96(fp)
 400ae1c:	e0bfd917 	ldw	r2,-156(fp)
 400ae20:	18bfd816 	blt	r3,r2,400ad84 <__alt_mem_onchip_memory2_0+0xfc005bc4>
				        		grid[i - 2 - row][j] = 1;
				        		rowCount[i - 2 - row]++;
							}


							for (int j = randomFirstStart; j < randomEnd; j++) {
 400ae24:	e0bfd817 	ldw	r2,-160(fp)
 400ae28:	e0bfe915 	stw	r2,-92(fp)
 400ae2c:	00002506 	br	400aec4 <dropSBlock+0x6ec>
								grid[i - 1 - row][j] = 1;
 400ae30:	e0bfdd17 	ldw	r2,-140(fp)
 400ae34:	10ffffc4 	addi	r3,r2,-1
 400ae38:	e0bfe717 	ldw	r2,-100(fp)
 400ae3c:	1885c83a 	sub	r2,r3,r2
 400ae40:	040100f4 	movhi	r16,1027
 400ae44:	84262204 	addi	r16,r16,-26488
 400ae48:	01400984 	movi	r5,38
 400ae4c:	1009883a 	mov	r4,r2
 400ae50:	40118340 	call	4011834 <__mulsi3>
 400ae54:	1007883a 	mov	r3,r2
 400ae58:	e0bfe917 	ldw	r2,-92(fp)
 400ae5c:	1885883a 	add	r2,r3,r2
 400ae60:	1085883a 	add	r2,r2,r2
 400ae64:	1085883a 	add	r2,r2,r2
 400ae68:	8085883a 	add	r2,r16,r2
 400ae6c:	00c00044 	movi	r3,1
 400ae70:	10c00015 	stw	r3,0(r2)
								rowCount[i - 1 - row]++;
 400ae74:	e0bfdd17 	ldw	r2,-140(fp)
 400ae78:	10ffffc4 	addi	r3,r2,-1
 400ae7c:	e0bfe717 	ldw	r2,-100(fp)
 400ae80:	1885c83a 	sub	r2,r3,r2
 400ae84:	00c100f4 	movhi	r3,1027
 400ae88:	18e60404 	addi	r3,r3,-26608
 400ae8c:	1089883a 	add	r4,r2,r2
 400ae90:	2109883a 	add	r4,r4,r4
 400ae94:	1907883a 	add	r3,r3,r4
 400ae98:	18c00017 	ldw	r3,0(r3)
 400ae9c:	19000044 	addi	r4,r3,1
 400aea0:	00c100f4 	movhi	r3,1027
 400aea4:	18e60404 	addi	r3,r3,-26608
 400aea8:	1085883a 	add	r2,r2,r2
 400aeac:	1085883a 	add	r2,r2,r2
 400aeb0:	1885883a 	add	r2,r3,r2
 400aeb4:	11000015 	stw	r4,0(r2)
				        		grid[i - 2 - row][j] = 1;
				        		rowCount[i - 2 - row]++;
							}


							for (int j = randomFirstStart; j < randomEnd; j++) {
 400aeb8:	e0bfe917 	ldw	r2,-92(fp)
 400aebc:	10800044 	addi	r2,r2,1
 400aec0:	e0bfe915 	stw	r2,-92(fp)
 400aec4:	e0ffe917 	ldw	r3,-92(fp)
 400aec8:	e0bfda17 	ldw	r2,-152(fp)
 400aecc:	18bfd816 	blt	r3,r2,400ae30 <__alt_mem_onchip_memory2_0+0xfc005c70>
					}
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomFirstEnd; j++) {
					if(grid[i - 1][j] == 1){
						for(int row = 0; row < 2; row++){
 400aed0:	e0bfe717 	ldw	r2,-100(fp)
 400aed4:	10800044 	addi	r2,r2,1
 400aed8:	e0bfe715 	stw	r2,-100(fp)
 400aedc:	e0bfe717 	ldw	r2,-100(fp)
 400aee0:	10800090 	cmplti	r2,r2,2
 400aee4:	103fa41e 	bne	r2,zero,400ad78 <__alt_mem_onchip_memory2_0+0xfc005bb8>
							for (int j = randomFirstStart; j < randomEnd; j++) {
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 - row]++;
							}
						}
						return;
 400aee8:	0003ea06 	br	400be94 <dropSBlock+0x16bc>
						}
						return;
					}
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomFirstEnd; j++) {
 400aeec:	e0bfe617 	ldw	r2,-104(fp)
 400aef0:	10800044 	addi	r2,r2,1
 400aef4:	e0bfe615 	stw	r2,-104(fp)
 400aef8:	e0ffe617 	ldw	r3,-104(fp)
 400aefc:	e0bfd917 	ldw	r2,-156(fp)
 400af00:	18bf8b16 	blt	r3,r2,400ad30 <__alt_mem_onchip_memory2_0+0xfc005b70>
						return;
					}
				}


				for (int j = randomFirstStart; j < randomEnd; j++) {
 400af04:	e0bfd817 	ldw	r2,-160(fp)
 400af08:	e0bfea15 	stw	r2,-88(fp)
 400af0c:	00007106 	br	400b0d4 <dropSBlock+0x8fc>
					if(grid[i][j] == 1){
 400af10:	040100f4 	movhi	r16,1027
 400af14:	84262204 	addi	r16,r16,-26488
 400af18:	e0bfdd17 	ldw	r2,-140(fp)
 400af1c:	01400984 	movi	r5,38
 400af20:	1009883a 	mov	r4,r2
 400af24:	40118340 	call	4011834 <__mulsi3>
 400af28:	1007883a 	mov	r3,r2
 400af2c:	e0bfea17 	ldw	r2,-88(fp)
 400af30:	1885883a 	add	r2,r3,r2
 400af34:	1085883a 	add	r2,r2,r2
 400af38:	1085883a 	add	r2,r2,r2
 400af3c:	8085883a 	add	r2,r16,r2
 400af40:	10800017 	ldw	r2,0(r2)
 400af44:	10800058 	cmpnei	r2,r2,1
 400af48:	10005f1e 	bne	r2,zero,400b0c8 <dropSBlock+0x8f0>
						for(int row = 0; row < 2; row++){
 400af4c:	e03feb15 	stw	zero,-84(fp)
 400af50:	00005906 	br	400b0b8 <dropSBlock+0x8e0>
							for (int j = randomStart; j < randomFirstEnd; j++) {
 400af54:	e0bfd717 	ldw	r2,-164(fp)
 400af58:	e0bfec15 	stw	r2,-80(fp)
 400af5c:	00002506 	br	400aff4 <dropSBlock+0x81c>
								grid[i - 2 - row][j] = 1;
 400af60:	e0bfdd17 	ldw	r2,-140(fp)
 400af64:	10ffff84 	addi	r3,r2,-2
 400af68:	e0bfeb17 	ldw	r2,-84(fp)
 400af6c:	1885c83a 	sub	r2,r3,r2
 400af70:	040100f4 	movhi	r16,1027
 400af74:	84262204 	addi	r16,r16,-26488
 400af78:	01400984 	movi	r5,38
 400af7c:	1009883a 	mov	r4,r2
 400af80:	40118340 	call	4011834 <__mulsi3>
 400af84:	1007883a 	mov	r3,r2
 400af88:	e0bfec17 	ldw	r2,-80(fp)
 400af8c:	1885883a 	add	r2,r3,r2
 400af90:	1085883a 	add	r2,r2,r2
 400af94:	1085883a 	add	r2,r2,r2
 400af98:	8085883a 	add	r2,r16,r2
 400af9c:	00c00044 	movi	r3,1
 400afa0:	10c00015 	stw	r3,0(r2)
								rowCount[i - 2 - row]++;
 400afa4:	e0bfdd17 	ldw	r2,-140(fp)
 400afa8:	10ffff84 	addi	r3,r2,-2
 400afac:	e0bfeb17 	ldw	r2,-84(fp)
 400afb0:	1885c83a 	sub	r2,r3,r2
 400afb4:	00c100f4 	movhi	r3,1027
 400afb8:	18e60404 	addi	r3,r3,-26608
 400afbc:	1089883a 	add	r4,r2,r2
 400afc0:	2109883a 	add	r4,r4,r4
 400afc4:	1907883a 	add	r3,r3,r4
 400afc8:	18c00017 	ldw	r3,0(r3)
 400afcc:	19000044 	addi	r4,r3,1
 400afd0:	00c100f4 	movhi	r3,1027
 400afd4:	18e60404 	addi	r3,r3,-26608
 400afd8:	1085883a 	add	r2,r2,r2
 400afdc:	1085883a 	add	r2,r2,r2
 400afe0:	1885883a 	add	r2,r3,r2
 400afe4:	11000015 	stw	r4,0(r2)


				for (int j = randomFirstStart; j < randomEnd; j++) {
					if(grid[i][j] == 1){
						for(int row = 0; row < 2; row++){
							for (int j = randomStart; j < randomFirstEnd; j++) {
 400afe8:	e0bfec17 	ldw	r2,-80(fp)
 400afec:	10800044 	addi	r2,r2,1
 400aff0:	e0bfec15 	stw	r2,-80(fp)
 400aff4:	e0ffec17 	ldw	r3,-80(fp)
 400aff8:	e0bfd917 	ldw	r2,-156(fp)
 400affc:	18bfd816 	blt	r3,r2,400af60 <__alt_mem_onchip_memory2_0+0xfc005da0>
								grid[i - 2 - row][j] = 1;
								rowCount[i - 2 - row]++;
							}


							for (int j = randomFirstStart; j < randomEnd; j++) {
 400b000:	e0bfd817 	ldw	r2,-160(fp)
 400b004:	e0bfed15 	stw	r2,-76(fp)
 400b008:	00002506 	br	400b0a0 <dropSBlock+0x8c8>
								grid[i - 1 - row][j] = 1;
 400b00c:	e0bfdd17 	ldw	r2,-140(fp)
 400b010:	10ffffc4 	addi	r3,r2,-1
 400b014:	e0bfeb17 	ldw	r2,-84(fp)
 400b018:	1885c83a 	sub	r2,r3,r2
 400b01c:	040100f4 	movhi	r16,1027
 400b020:	84262204 	addi	r16,r16,-26488
 400b024:	01400984 	movi	r5,38
 400b028:	1009883a 	mov	r4,r2
 400b02c:	40118340 	call	4011834 <__mulsi3>
 400b030:	1007883a 	mov	r3,r2
 400b034:	e0bfed17 	ldw	r2,-76(fp)
 400b038:	1885883a 	add	r2,r3,r2
 400b03c:	1085883a 	add	r2,r2,r2
 400b040:	1085883a 	add	r2,r2,r2
 400b044:	8085883a 	add	r2,r16,r2
 400b048:	00c00044 	movi	r3,1
 400b04c:	10c00015 	stw	r3,0(r2)
								rowCount[i - 1 - row]++;
 400b050:	e0bfdd17 	ldw	r2,-140(fp)
 400b054:	10ffffc4 	addi	r3,r2,-1
 400b058:	e0bfeb17 	ldw	r2,-84(fp)
 400b05c:	1885c83a 	sub	r2,r3,r2
 400b060:	00c100f4 	movhi	r3,1027
 400b064:	18e60404 	addi	r3,r3,-26608
 400b068:	1089883a 	add	r4,r2,r2
 400b06c:	2109883a 	add	r4,r4,r4
 400b070:	1907883a 	add	r3,r3,r4
 400b074:	18c00017 	ldw	r3,0(r3)
 400b078:	19000044 	addi	r4,r3,1
 400b07c:	00c100f4 	movhi	r3,1027
 400b080:	18e60404 	addi	r3,r3,-26608
 400b084:	1085883a 	add	r2,r2,r2
 400b088:	1085883a 	add	r2,r2,r2
 400b08c:	1885883a 	add	r2,r3,r2
 400b090:	11000015 	stw	r4,0(r2)
								grid[i - 2 - row][j] = 1;
								rowCount[i - 2 - row]++;
							}


							for (int j = randomFirstStart; j < randomEnd; j++) {
 400b094:	e0bfed17 	ldw	r2,-76(fp)
 400b098:	10800044 	addi	r2,r2,1
 400b09c:	e0bfed15 	stw	r2,-76(fp)
 400b0a0:	e0ffed17 	ldw	r3,-76(fp)
 400b0a4:	e0bfda17 	ldw	r2,-152(fp)
 400b0a8:	18bfd816 	blt	r3,r2,400b00c <__alt_mem_onchip_memory2_0+0xfc005e4c>
				}


				for (int j = randomFirstStart; j < randomEnd; j++) {
					if(grid[i][j] == 1){
						for(int row = 0; row < 2; row++){
 400b0ac:	e0bfeb17 	ldw	r2,-84(fp)
 400b0b0:	10800044 	addi	r2,r2,1
 400b0b4:	e0bfeb15 	stw	r2,-84(fp)
 400b0b8:	e0bfeb17 	ldw	r2,-84(fp)
 400b0bc:	10800090 	cmplti	r2,r2,2
 400b0c0:	103fa41e 	bne	r2,zero,400af54 <__alt_mem_onchip_memory2_0+0xfc005d94>
							for (int j = randomFirstStart; j < randomEnd; j++) {
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 - row]++;
							}
						}
						return;
 400b0c4:	00037306 	br	400be94 <dropSBlock+0x16bc>
						return;
					}
				}


				for (int j = randomFirstStart; j < randomEnd; j++) {
 400b0c8:	e0bfea17 	ldw	r2,-88(fp)
 400b0cc:	10800044 	addi	r2,r2,1
 400b0d0:	e0bfea15 	stw	r2,-88(fp)
 400b0d4:	e0ffea17 	ldw	r3,-88(fp)
 400b0d8:	e0bfda17 	ldw	r2,-152(fp)
 400b0dc:	18bf8c16 	blt	r3,r2,400af10 <__alt_mem_onchip_memory2_0+0xfc005d50>
						return;
					}
				}
			}

        	i--;
 400b0e0:	e0bfdd17 	ldw	r2,-140(fp)
 400b0e4:	10bfffc4 	addi	r2,r2,-1
 400b0e8:	e0bfdd15 	stw	r2,-140(fp)
			if(shapeLayout == 0){
 400b0ec:	e0bfdc17 	ldw	r2,-144(fp)
 400b0f0:	1000491e 	bne	r2,zero,400b218 <dropSBlock+0xa40>
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400b0f4:	e0bfd817 	ldw	r2,-160(fp)
 400b0f8:	e0bfee15 	stw	r2,-72(fp)
 400b0fc:	00002006 	br	400b180 <dropSBlock+0x9a8>
	//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 400b100:	d4200317 	ldw	r16,-32756(gp)
 400b104:	e0bfdd17 	ldw	r2,-140(fp)
 400b108:	10bfffc4 	addi	r2,r2,-1
 400b10c:	01401404 	movi	r5,80
 400b110:	1009883a 	mov	r4,r2
 400b114:	40118340 	call	4011834 <__mulsi3>
 400b118:	1007883a 	mov	r3,r2
 400b11c:	e0bfee17 	ldw	r2,-72(fp)
 400b120:	1885883a 	add	r2,r3,r2
 400b124:	1085883a 	add	r2,r2,r2
 400b128:	8085883a 	add	r2,r16,r2
 400b12c:	00c00404 	movi	r3,16
 400b130:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400b134:	d4600317 	ldw	r17,-32756(gp)
 400b138:	e0bfdd17 	ldw	r2,-140(fp)
 400b13c:	10bfffc4 	addi	r2,r2,-1
 400b140:	01401404 	movi	r5,80
 400b144:	1009883a 	mov	r4,r2
 400b148:	40118340 	call	4011834 <__mulsi3>
 400b14c:	1007883a 	mov	r3,r2
 400b150:	e0bfee17 	ldw	r2,-72(fp)
 400b154:	1885883a 	add	r2,r3,r2
 400b158:	1085883a 	add	r2,r2,r2
 400b15c:	14000044 	addi	r16,r2,1
 400b160:	e13fee17 	ldw	r4,-72(fp)
 400b164:	400d8600 	call	400d860 <check_col>
 400b168:	1007883a 	mov	r3,r2
 400b16c:	8c05883a 	add	r2,r17,r16
 400b170:	10c00005 	stb	r3,0(r2)
				}
			}

        	i--;
			if(shapeLayout == 0){
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400b174:	e0bfee17 	ldw	r2,-72(fp)
 400b178:	10800044 	addi	r2,r2,1
 400b17c:	e0bfee15 	stw	r2,-72(fp)
 400b180:	e0ffee17 	ldw	r3,-72(fp)
 400b184:	e0bfd917 	ldw	r2,-156(fp)
 400b188:	18bfdd16 	blt	r3,r2,400b100 <__alt_mem_onchip_memory2_0+0xfc005f40>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}


				for (int j = randomStart; j < randomEnd; j++) {
 400b18c:	e0bfd717 	ldw	r2,-164(fp)
 400b190:	e0bfef15 	stw	r2,-68(fp)
 400b194:	00001c06 	br	400b208 <dropSBlock+0xa30>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
 400b198:	d4200317 	ldw	r16,-32756(gp)
 400b19c:	01401404 	movi	r5,80
 400b1a0:	e13fdd17 	ldw	r4,-140(fp)
 400b1a4:	40118340 	call	4011834 <__mulsi3>
 400b1a8:	1007883a 	mov	r3,r2
 400b1ac:	e0bfef17 	ldw	r2,-68(fp)
 400b1b0:	1885883a 	add	r2,r3,r2
 400b1b4:	1085883a 	add	r2,r2,r2
 400b1b8:	8085883a 	add	r2,r16,r2
 400b1bc:	00c00404 	movi	r3,16
 400b1c0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 400b1c4:	d4600317 	ldw	r17,-32756(gp)
 400b1c8:	01401404 	movi	r5,80
 400b1cc:	e13fdd17 	ldw	r4,-140(fp)
 400b1d0:	40118340 	call	4011834 <__mulsi3>
 400b1d4:	1007883a 	mov	r3,r2
 400b1d8:	e0bfef17 	ldw	r2,-68(fp)
 400b1dc:	1885883a 	add	r2,r3,r2
 400b1e0:	1085883a 	add	r2,r2,r2
 400b1e4:	14000044 	addi	r16,r2,1
 400b1e8:	e13fef17 	ldw	r4,-68(fp)
 400b1ec:	400d8600 	call	400d860 <check_col>
 400b1f0:	1007883a 	mov	r3,r2
 400b1f4:	8c05883a 	add	r2,r17,r16
 400b1f8:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}


				for (int j = randomStart; j < randomEnd; j++) {
 400b1fc:	e0bfef17 	ldw	r2,-68(fp)
 400b200:	10800044 	addi	r2,r2,1
 400b204:	e0bfef15 	stw	r2,-68(fp)
 400b208:	e0ffef17 	ldw	r3,-68(fp)
 400b20c:	e0bfda17 	ldw	r2,-152(fp)
 400b210:	18bfe116 	blt	r3,r2,400b198 <__alt_mem_onchip_memory2_0+0xfc005fd8>
 400b214:	00005d06 	br	400b38c <dropSBlock+0xbb4>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
 400b218:	e0bfdc17 	ldw	r2,-144(fp)
 400b21c:	10800058 	cmpnei	r2,r2,1
 400b220:	10005a1e 	bne	r2,zero,400b38c <dropSBlock+0xbb4>
				for(int row = 0; row < 2; row++){
 400b224:	e03ff015 	stw	zero,-64(fp)
 400b228:	00005506 	br	400b380 <dropSBlock+0xba8>
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400b22c:	e0bfd717 	ldw	r2,-164(fp)
 400b230:	e0bff115 	stw	r2,-60(fp)
 400b234:	00002406 	br	400b2c8 <dropSBlock+0xaf0>
		//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0x10;
 400b238:	d4200317 	ldw	r16,-32756(gp)
 400b23c:	e0bfdd17 	ldw	r2,-140(fp)
 400b240:	10ffffc4 	addi	r3,r2,-1
 400b244:	e0bff017 	ldw	r2,-64(fp)
 400b248:	1885c83a 	sub	r2,r3,r2
 400b24c:	01401404 	movi	r5,80
 400b250:	1009883a 	mov	r4,r2
 400b254:	40118340 	call	4011834 <__mulsi3>
 400b258:	1007883a 	mov	r3,r2
 400b25c:	e0bff117 	ldw	r2,-60(fp)
 400b260:	1885883a 	add	r2,r3,r2
 400b264:	1085883a 	add	r2,r2,r2
 400b268:	8085883a 	add	r2,r16,r2
 400b26c:	00c00404 	movi	r3,16
 400b270:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
 400b274:	d4600317 	ldw	r17,-32756(gp)
 400b278:	e0bfdd17 	ldw	r2,-140(fp)
 400b27c:	10ffffc4 	addi	r3,r2,-1
 400b280:	e0bff017 	ldw	r2,-64(fp)
 400b284:	1885c83a 	sub	r2,r3,r2
 400b288:	01401404 	movi	r5,80
 400b28c:	1009883a 	mov	r4,r2
 400b290:	40118340 	call	4011834 <__mulsi3>
 400b294:	1007883a 	mov	r3,r2
 400b298:	e0bff117 	ldw	r2,-60(fp)
 400b29c:	1885883a 	add	r2,r3,r2
 400b2a0:	1085883a 	add	r2,r2,r2
 400b2a4:	14000044 	addi	r16,r2,1
 400b2a8:	e13ff117 	ldw	r4,-60(fp)
 400b2ac:	400d8600 	call	400d860 <check_col>
 400b2b0:	1007883a 	mov	r3,r2
 400b2b4:	8c05883a 	add	r2,r17,r16
 400b2b8:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400b2bc:	e0bff117 	ldw	r2,-60(fp)
 400b2c0:	10800044 	addi	r2,r2,1
 400b2c4:	e0bff115 	stw	r2,-60(fp)
 400b2c8:	e0fff117 	ldw	r3,-60(fp)
 400b2cc:	e0bfd917 	ldw	r2,-156(fp)
 400b2d0:	18bfd916 	blt	r3,r2,400b238 <__alt_mem_onchip_memory2_0+0xfc006078>
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
					}


					for (int j = randomFirstStart; j < randomEnd; j++) {
 400b2d4:	e0bfd817 	ldw	r2,-160(fp)
 400b2d8:	e0bff215 	stw	r2,-56(fp)
 400b2dc:	00002206 	br	400b368 <dropSBlock+0xb90>
		//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
 400b2e0:	d4200317 	ldw	r16,-32756(gp)
 400b2e4:	e0ffdd17 	ldw	r3,-140(fp)
 400b2e8:	e0bff017 	ldw	r2,-64(fp)
 400b2ec:	1885c83a 	sub	r2,r3,r2
 400b2f0:	01401404 	movi	r5,80
 400b2f4:	1009883a 	mov	r4,r2
 400b2f8:	40118340 	call	4011834 <__mulsi3>
 400b2fc:	1007883a 	mov	r3,r2
 400b300:	e0bff217 	ldw	r2,-56(fp)
 400b304:	1885883a 	add	r2,r3,r2
 400b308:	1085883a 	add	r2,r2,r2
 400b30c:	8085883a 	add	r2,r16,r2
 400b310:	00c00404 	movi	r3,16
 400b314:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 400b318:	d4600317 	ldw	r17,-32756(gp)
 400b31c:	e0ffdd17 	ldw	r3,-140(fp)
 400b320:	e0bff017 	ldw	r2,-64(fp)
 400b324:	1885c83a 	sub	r2,r3,r2
 400b328:	01401404 	movi	r5,80
 400b32c:	1009883a 	mov	r4,r2
 400b330:	40118340 	call	4011834 <__mulsi3>
 400b334:	1007883a 	mov	r3,r2
 400b338:	e0bff217 	ldw	r2,-56(fp)
 400b33c:	1885883a 	add	r2,r3,r2
 400b340:	1085883a 	add	r2,r2,r2
 400b344:	14000044 	addi	r16,r2,1
 400b348:	e13ff217 	ldw	r4,-56(fp)
 400b34c:	400d8600 	call	400d860 <check_col>
 400b350:	1007883a 	mov	r3,r2
 400b354:	8c05883a 	add	r2,r17,r16
 400b358:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
					}


					for (int j = randomFirstStart; j < randomEnd; j++) {
 400b35c:	e0bff217 	ldw	r2,-56(fp)
 400b360:	10800044 	addi	r2,r2,1
 400b364:	e0bff215 	stw	r2,-56(fp)
 400b368:	e0fff217 	ldw	r3,-56(fp)
 400b36c:	e0bfda17 	ldw	r2,-152(fp)
 400b370:	18bfdb16 	blt	r3,r2,400b2e0 <__alt_mem_onchip_memory2_0+0xfc006120>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
 400b374:	e0bff017 	ldw	r2,-64(fp)
 400b378:	10800044 	addi	r2,r2,1
 400b37c:	e0bff015 	stw	r2,-64(fp)
 400b380:	e0bff017 	ldw	r2,-64(fp)
 400b384:	10800090 	cmplti	r2,r2,2
 400b388:	103fa81e 	bne	r2,zero,400b22c <__alt_mem_onchip_memory2_0+0xfc00606c>
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}

        	i++;
 400b38c:	e0bfdd17 	ldw	r2,-140(fp)
 400b390:	10800044 	addi	r2,r2,1
 400b394:	e0bfdd15 	stw	r2,-140(fp)

        	keycode = keyboard_input();
 400b398:	40007d00 	call	40007d0 <keyboard_input>
 400b39c:	e0bffd05 	stb	r2,-12(fp)
        	time = timer;
 400b3a0:	d0a80117 	ldw	r2,-24572(gp)
 400b3a4:	e0bfdb15 	stw	r2,-148(fp)
			if(keycode == 0x51){
 400b3a8:	e0bffd03 	ldbu	r2,-12(fp)
 400b3ac:	10801458 	cmpnei	r2,r2,81
 400b3b0:	1000131e 	bne	r2,zero,400b400 <dropSBlock+0xc28>
				time = timer / 1.5;
 400b3b4:	d0a80117 	ldw	r2,-24572(gp)
 400b3b8:	1009883a 	mov	r4,r2
 400b3bc:	4013f180 	call	4013f18 <__floatsidf>
 400b3c0:	1011883a 	mov	r8,r2
 400b3c4:	1813883a 	mov	r9,r3
 400b3c8:	000d883a 	mov	r6,zero
 400b3cc:	01cffe34 	movhi	r7,16376
 400b3d0:	4009883a 	mov	r4,r8
 400b3d4:	480b883a 	mov	r5,r9
 400b3d8:	40121080 	call	4012108 <__divdf3>
 400b3dc:	1009883a 	mov	r4,r2
 400b3e0:	180b883a 	mov	r5,r3
 400b3e4:	2005883a 	mov	r2,r4
 400b3e8:	2807883a 	mov	r3,r5
 400b3ec:	1009883a 	mov	r4,r2
 400b3f0:	180b883a 	mov	r5,r3
 400b3f4:	4013e980 	call	4013e98 <__fixdfsi>
 400b3f8:	e0bfdb15 	stw	r2,-148(fp)
 400b3fc:	00015f06 	br	400b97c <dropSBlock+0x11a4>
			}
			else if(keycode == 0x4F){
 400b400:	e0bffd03 	ldbu	r2,-12(fp)
 400b404:	108013d8 	cmpnei	r2,r2,79
 400b408:	1000801e 	bne	r2,zero,400b60c <dropSBlock+0xe34>
				if((randomFirstEnd != 59 && shapeLayout == 0) || (randomEnd != 59 && shapeLayout == 1)){
 400b40c:	e0bfd917 	ldw	r2,-156(fp)
 400b410:	10800ee0 	cmpeqi	r2,r2,59
 400b414:	1000021e 	bne	r2,zero,400b420 <dropSBlock+0xc48>
 400b418:	e0bfdc17 	ldw	r2,-144(fp)
 400b41c:	10000626 	beq	r2,zero,400b438 <dropSBlock+0xc60>
 400b420:	e0bfda17 	ldw	r2,-152(fp)
 400b424:	10800ee0 	cmpeqi	r2,r2,59
 400b428:	1001541e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
 400b42c:	e0bfdc17 	ldw	r2,-144(fp)
 400b430:	10800058 	cmpnei	r2,r2,1
 400b434:	1001511e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
					if(shapeLayout == 0 && grid[i - 2][randomFirstEnd + 1] != 1 && grid[i - 1][randomEnd + 1] != 1){
 400b438:	e0bfdc17 	ldw	r2,-144(fp)
 400b43c:	1000301e 	bne	r2,zero,400b500 <dropSBlock+0xd28>
 400b440:	e0bfdd17 	ldw	r2,-140(fp)
 400b444:	10ffff84 	addi	r3,r2,-2
 400b448:	e0bfd917 	ldw	r2,-156(fp)
 400b44c:	14400044 	addi	r17,r2,1
 400b450:	040100f4 	movhi	r16,1027
 400b454:	84262204 	addi	r16,r16,-26488
 400b458:	01400984 	movi	r5,38
 400b45c:	1809883a 	mov	r4,r3
 400b460:	40118340 	call	4011834 <__mulsi3>
 400b464:	1445883a 	add	r2,r2,r17
 400b468:	1085883a 	add	r2,r2,r2
 400b46c:	1085883a 	add	r2,r2,r2
 400b470:	8085883a 	add	r2,r16,r2
 400b474:	10800017 	ldw	r2,0(r2)
 400b478:	10800060 	cmpeqi	r2,r2,1
 400b47c:	1000201e 	bne	r2,zero,400b500 <dropSBlock+0xd28>
 400b480:	e0bfdd17 	ldw	r2,-140(fp)
 400b484:	10ffffc4 	addi	r3,r2,-1
 400b488:	e0bfda17 	ldw	r2,-152(fp)
 400b48c:	14400044 	addi	r17,r2,1
 400b490:	040100f4 	movhi	r16,1027
 400b494:	84262204 	addi	r16,r16,-26488
 400b498:	01400984 	movi	r5,38
 400b49c:	1809883a 	mov	r4,r3
 400b4a0:	40118340 	call	4011834 <__mulsi3>
 400b4a4:	1445883a 	add	r2,r2,r17
 400b4a8:	1085883a 	add	r2,r2,r2
 400b4ac:	1085883a 	add	r2,r2,r2
 400b4b0:	8085883a 	add	r2,r16,r2
 400b4b4:	10800017 	ldw	r2,0(r2)
 400b4b8:	10800060 	cmpeqi	r2,r2,1
 400b4bc:	1000101e 	bne	r2,zero,400b500 <dropSBlock+0xd28>
						randomStart += 2;
 400b4c0:	e0bfd717 	ldw	r2,-164(fp)
 400b4c4:	10800084 	addi	r2,r2,2
 400b4c8:	e0bfd715 	stw	r2,-164(fp)
						randomEnd += 2;
 400b4cc:	e0bfda17 	ldw	r2,-152(fp)
 400b4d0:	10800084 	addi	r2,r2,2
 400b4d4:	e0bfda15 	stw	r2,-152(fp)
						randomFirstEnd += 2;
 400b4d8:	e0bfd917 	ldw	r2,-156(fp)
 400b4dc:	10800084 	addi	r2,r2,2
 400b4e0:	e0bfd915 	stw	r2,-156(fp)
						randomFirstStart += 2;
 400b4e4:	e0bfd817 	ldw	r2,-160(fp)
 400b4e8:	10800084 	addi	r2,r2,2
 400b4ec:	e0bfd815 	stw	r2,-160(fp)
						i--;
 400b4f0:	e0bfdd17 	ldw	r2,-140(fp)
 400b4f4:	10bfffc4 	addi	r2,r2,-1
 400b4f8:	e0bfdd15 	stw	r2,-140(fp)
 400b4fc:	00011f06 	br	400b97c <dropSBlock+0x11a4>
					}else if(shapeLayout == 1
 400b500:	e0bfdc17 	ldw	r2,-144(fp)
 400b504:	10800058 	cmpnei	r2,r2,1
 400b508:	10011c1e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
							&& grid[i - 1][randomEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1 && grid[i - 3][randomFirstEnd + 1] != 1){
 400b50c:	e0bfdd17 	ldw	r2,-140(fp)
 400b510:	10ffffc4 	addi	r3,r2,-1
 400b514:	e0bfda17 	ldw	r2,-152(fp)
 400b518:	14400044 	addi	r17,r2,1
 400b51c:	040100f4 	movhi	r16,1027
 400b520:	84262204 	addi	r16,r16,-26488
 400b524:	01400984 	movi	r5,38
 400b528:	1809883a 	mov	r4,r3
 400b52c:	40118340 	call	4011834 <__mulsi3>
 400b530:	1445883a 	add	r2,r2,r17
 400b534:	1085883a 	add	r2,r2,r2
 400b538:	1085883a 	add	r2,r2,r2
 400b53c:	8085883a 	add	r2,r16,r2
 400b540:	10800017 	ldw	r2,0(r2)
 400b544:	10800060 	cmpeqi	r2,r2,1
 400b548:	10010c1e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
 400b54c:	e0bfdd17 	ldw	r2,-140(fp)
 400b550:	10ffff84 	addi	r3,r2,-2
 400b554:	e0bfda17 	ldw	r2,-152(fp)
 400b558:	14400044 	addi	r17,r2,1
 400b55c:	040100f4 	movhi	r16,1027
 400b560:	84262204 	addi	r16,r16,-26488
 400b564:	01400984 	movi	r5,38
 400b568:	1809883a 	mov	r4,r3
 400b56c:	40118340 	call	4011834 <__mulsi3>
 400b570:	1445883a 	add	r2,r2,r17
 400b574:	1085883a 	add	r2,r2,r2
 400b578:	1085883a 	add	r2,r2,r2
 400b57c:	8085883a 	add	r2,r16,r2
 400b580:	10800017 	ldw	r2,0(r2)
 400b584:	10800060 	cmpeqi	r2,r2,1
 400b588:	1000fc1e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
 400b58c:	e0bfdd17 	ldw	r2,-140(fp)
 400b590:	10ffff44 	addi	r3,r2,-3
 400b594:	e0bfd917 	ldw	r2,-156(fp)
 400b598:	14400044 	addi	r17,r2,1
 400b59c:	040100f4 	movhi	r16,1027
 400b5a0:	84262204 	addi	r16,r16,-26488
 400b5a4:	01400984 	movi	r5,38
 400b5a8:	1809883a 	mov	r4,r3
 400b5ac:	40118340 	call	4011834 <__mulsi3>
 400b5b0:	1445883a 	add	r2,r2,r17
 400b5b4:	1085883a 	add	r2,r2,r2
 400b5b8:	1085883a 	add	r2,r2,r2
 400b5bc:	8085883a 	add	r2,r16,r2
 400b5c0:	10800017 	ldw	r2,0(r2)
 400b5c4:	10800060 	cmpeqi	r2,r2,1
 400b5c8:	1000ec1e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
						randomStart += 2;
 400b5cc:	e0bfd717 	ldw	r2,-164(fp)
 400b5d0:	10800084 	addi	r2,r2,2
 400b5d4:	e0bfd715 	stw	r2,-164(fp)
						randomEnd += 2;
 400b5d8:	e0bfda17 	ldw	r2,-152(fp)
 400b5dc:	10800084 	addi	r2,r2,2
 400b5e0:	e0bfda15 	stw	r2,-152(fp)
						randomFirstEnd += 2;
 400b5e4:	e0bfd917 	ldw	r2,-156(fp)
 400b5e8:	10800084 	addi	r2,r2,2
 400b5ec:	e0bfd915 	stw	r2,-156(fp)
						randomFirstStart += 2;
 400b5f0:	e0bfd817 	ldw	r2,-160(fp)
 400b5f4:	10800084 	addi	r2,r2,2
 400b5f8:	e0bfd815 	stw	r2,-160(fp)
						i--;
 400b5fc:	e0bfdd17 	ldw	r2,-140(fp)
 400b600:	10bfffc4 	addi	r2,r2,-1
 400b604:	e0bfdd15 	stw	r2,-140(fp)
 400b608:	0000dc06 	br	400b97c <dropSBlock+0x11a4>
					}
				}
			}else if(keycode == 0x50){
 400b60c:	e0bffd03 	ldbu	r2,-12(fp)
 400b610:	10801418 	cmpnei	r2,r2,80
 400b614:	1000781e 	bne	r2,zero,400b7f8 <dropSBlock+0x1020>
				if(randomStart != 21){
 400b618:	e0bfd717 	ldw	r2,-164(fp)
 400b61c:	10800560 	cmpeqi	r2,r2,21
 400b620:	1000d61e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
						if(shapeLayout == 0 && grid[i - 2][randomFirstStart - 1] != 1 && grid[i - 1][randomStart - 1] != 1){
 400b624:	e0bfdc17 	ldw	r2,-144(fp)
 400b628:	1000301e 	bne	r2,zero,400b6ec <dropSBlock+0xf14>
 400b62c:	e0bfdd17 	ldw	r2,-140(fp)
 400b630:	10ffff84 	addi	r3,r2,-2
 400b634:	e0bfd817 	ldw	r2,-160(fp)
 400b638:	147fffc4 	addi	r17,r2,-1
 400b63c:	040100f4 	movhi	r16,1027
 400b640:	84262204 	addi	r16,r16,-26488
 400b644:	01400984 	movi	r5,38
 400b648:	1809883a 	mov	r4,r3
 400b64c:	40118340 	call	4011834 <__mulsi3>
 400b650:	1445883a 	add	r2,r2,r17
 400b654:	1085883a 	add	r2,r2,r2
 400b658:	1085883a 	add	r2,r2,r2
 400b65c:	8085883a 	add	r2,r16,r2
 400b660:	10800017 	ldw	r2,0(r2)
 400b664:	10800060 	cmpeqi	r2,r2,1
 400b668:	1000201e 	bne	r2,zero,400b6ec <dropSBlock+0xf14>
 400b66c:	e0bfdd17 	ldw	r2,-140(fp)
 400b670:	10ffffc4 	addi	r3,r2,-1
 400b674:	e0bfd717 	ldw	r2,-164(fp)
 400b678:	147fffc4 	addi	r17,r2,-1
 400b67c:	040100f4 	movhi	r16,1027
 400b680:	84262204 	addi	r16,r16,-26488
 400b684:	01400984 	movi	r5,38
 400b688:	1809883a 	mov	r4,r3
 400b68c:	40118340 	call	4011834 <__mulsi3>
 400b690:	1445883a 	add	r2,r2,r17
 400b694:	1085883a 	add	r2,r2,r2
 400b698:	1085883a 	add	r2,r2,r2
 400b69c:	8085883a 	add	r2,r16,r2
 400b6a0:	10800017 	ldw	r2,0(r2)
 400b6a4:	10800060 	cmpeqi	r2,r2,1
 400b6a8:	1000101e 	bne	r2,zero,400b6ec <dropSBlock+0xf14>
							randomStart -= 2;
 400b6ac:	e0bfd717 	ldw	r2,-164(fp)
 400b6b0:	10bfff84 	addi	r2,r2,-2
 400b6b4:	e0bfd715 	stw	r2,-164(fp)
							randomEnd -= 2;
 400b6b8:	e0bfda17 	ldw	r2,-152(fp)
 400b6bc:	10bfff84 	addi	r2,r2,-2
 400b6c0:	e0bfda15 	stw	r2,-152(fp)
							randomFirstEnd -= 2;
 400b6c4:	e0bfd917 	ldw	r2,-156(fp)
 400b6c8:	10bfff84 	addi	r2,r2,-2
 400b6cc:	e0bfd915 	stw	r2,-156(fp)
							randomFirstStart -= 2;
 400b6d0:	e0bfd817 	ldw	r2,-160(fp)
 400b6d4:	10bfff84 	addi	r2,r2,-2
 400b6d8:	e0bfd815 	stw	r2,-160(fp)
							i--;
 400b6dc:	e0bfdd17 	ldw	r2,-140(fp)
 400b6e0:	10bfffc4 	addi	r2,r2,-1
 400b6e4:	e0bfdd15 	stw	r2,-140(fp)
 400b6e8:	0000a406 	br	400b97c <dropSBlock+0x11a4>
						}else if(shapeLayout == 1
 400b6ec:	e0bfdc17 	ldw	r2,-144(fp)
 400b6f0:	10800058 	cmpnei	r2,r2,1
 400b6f4:	1000a11e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
							&& grid[i - 1][randomFirstStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1 && grid[i - 3][randomStart - 1] != 1){
 400b6f8:	e0bfdd17 	ldw	r2,-140(fp)
 400b6fc:	10ffffc4 	addi	r3,r2,-1
 400b700:	e0bfd817 	ldw	r2,-160(fp)
 400b704:	147fffc4 	addi	r17,r2,-1
 400b708:	040100f4 	movhi	r16,1027
 400b70c:	84262204 	addi	r16,r16,-26488
 400b710:	01400984 	movi	r5,38
 400b714:	1809883a 	mov	r4,r3
 400b718:	40118340 	call	4011834 <__mulsi3>
 400b71c:	1445883a 	add	r2,r2,r17
 400b720:	1085883a 	add	r2,r2,r2
 400b724:	1085883a 	add	r2,r2,r2
 400b728:	8085883a 	add	r2,r16,r2
 400b72c:	10800017 	ldw	r2,0(r2)
 400b730:	10800060 	cmpeqi	r2,r2,1
 400b734:	1000911e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
 400b738:	e0bfdd17 	ldw	r2,-140(fp)
 400b73c:	10ffff84 	addi	r3,r2,-2
 400b740:	e0bfd717 	ldw	r2,-164(fp)
 400b744:	147fffc4 	addi	r17,r2,-1
 400b748:	040100f4 	movhi	r16,1027
 400b74c:	84262204 	addi	r16,r16,-26488
 400b750:	01400984 	movi	r5,38
 400b754:	1809883a 	mov	r4,r3
 400b758:	40118340 	call	4011834 <__mulsi3>
 400b75c:	1445883a 	add	r2,r2,r17
 400b760:	1085883a 	add	r2,r2,r2
 400b764:	1085883a 	add	r2,r2,r2
 400b768:	8085883a 	add	r2,r16,r2
 400b76c:	10800017 	ldw	r2,0(r2)
 400b770:	10800060 	cmpeqi	r2,r2,1
 400b774:	1000811e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
 400b778:	e0bfdd17 	ldw	r2,-140(fp)
 400b77c:	10ffff44 	addi	r3,r2,-3
 400b780:	e0bfd717 	ldw	r2,-164(fp)
 400b784:	147fffc4 	addi	r17,r2,-1
 400b788:	040100f4 	movhi	r16,1027
 400b78c:	84262204 	addi	r16,r16,-26488
 400b790:	01400984 	movi	r5,38
 400b794:	1809883a 	mov	r4,r3
 400b798:	40118340 	call	4011834 <__mulsi3>
 400b79c:	1445883a 	add	r2,r2,r17
 400b7a0:	1085883a 	add	r2,r2,r2
 400b7a4:	1085883a 	add	r2,r2,r2
 400b7a8:	8085883a 	add	r2,r16,r2
 400b7ac:	10800017 	ldw	r2,0(r2)
 400b7b0:	10800060 	cmpeqi	r2,r2,1
 400b7b4:	1000711e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
						randomStart -= 2;
 400b7b8:	e0bfd717 	ldw	r2,-164(fp)
 400b7bc:	10bfff84 	addi	r2,r2,-2
 400b7c0:	e0bfd715 	stw	r2,-164(fp)
						randomEnd -= 2;
 400b7c4:	e0bfda17 	ldw	r2,-152(fp)
 400b7c8:	10bfff84 	addi	r2,r2,-2
 400b7cc:	e0bfda15 	stw	r2,-152(fp)
						randomFirstEnd -= 2;
 400b7d0:	e0bfd917 	ldw	r2,-156(fp)
 400b7d4:	10bfff84 	addi	r2,r2,-2
 400b7d8:	e0bfd915 	stw	r2,-156(fp)
						randomFirstStart -= 2;
 400b7dc:	e0bfd817 	ldw	r2,-160(fp)
 400b7e0:	10bfff84 	addi	r2,r2,-2
 400b7e4:	e0bfd815 	stw	r2,-160(fp)
						i--;
 400b7e8:	e0bfdd17 	ldw	r2,-140(fp)
 400b7ec:	10bfffc4 	addi	r2,r2,-1
 400b7f0:	e0bfdd15 	stw	r2,-140(fp)
 400b7f4:	00006106 	br	400b97c <dropSBlock+0x11a4>
					}
				}
			}else if((keycode == 0x1D || keycode == 0x1B) && i > 2 && i < 29){
 400b7f8:	e0bffd03 	ldbu	r2,-12(fp)
 400b7fc:	10800760 	cmpeqi	r2,r2,29
 400b800:	1000031e 	bne	r2,zero,400b810 <dropSBlock+0x1038>
 400b804:	e0bffd03 	ldbu	r2,-12(fp)
 400b808:	108006d8 	cmpnei	r2,r2,27
 400b80c:	1000571e 	bne	r2,zero,400b96c <dropSBlock+0x1194>
 400b810:	e0bfdd17 	ldw	r2,-140(fp)
 400b814:	108000d0 	cmplti	r2,r2,3
 400b818:	1000541e 	bne	r2,zero,400b96c <dropSBlock+0x1194>
 400b81c:	e0bfdd17 	ldw	r2,-140(fp)
 400b820:	10800748 	cmpgei	r2,r2,29
 400b824:	1000511e 	bne	r2,zero,400b96c <dropSBlock+0x1194>
				i--;
 400b828:	e0bfdd17 	ldw	r2,-140(fp)
 400b82c:	10bfffc4 	addi	r2,r2,-1
 400b830:	e0bfdd15 	stw	r2,-140(fp)
				if(shapeLayout == 0 && i > 2 && grid[i - 1][randomStart] != 1 && grid[i - 2][randomStart] != 1){
 400b834:	e0bfdc17 	ldw	r2,-144(fp)
 400b838:	1000291e 	bne	r2,zero,400b8e0 <dropSBlock+0x1108>
 400b83c:	e0bfdd17 	ldw	r2,-140(fp)
 400b840:	108000d0 	cmplti	r2,r2,3
 400b844:	1000261e 	bne	r2,zero,400b8e0 <dropSBlock+0x1108>
 400b848:	e0bfdd17 	ldw	r2,-140(fp)
 400b84c:	10bfffc4 	addi	r2,r2,-1
 400b850:	040100f4 	movhi	r16,1027
 400b854:	84262204 	addi	r16,r16,-26488
 400b858:	01400984 	movi	r5,38
 400b85c:	1009883a 	mov	r4,r2
 400b860:	40118340 	call	4011834 <__mulsi3>
 400b864:	1007883a 	mov	r3,r2
 400b868:	e0bfd717 	ldw	r2,-164(fp)
 400b86c:	1885883a 	add	r2,r3,r2
 400b870:	1085883a 	add	r2,r2,r2
 400b874:	1085883a 	add	r2,r2,r2
 400b878:	8085883a 	add	r2,r16,r2
 400b87c:	10800017 	ldw	r2,0(r2)
 400b880:	10800060 	cmpeqi	r2,r2,1
 400b884:	1000161e 	bne	r2,zero,400b8e0 <dropSBlock+0x1108>
 400b888:	e0bfdd17 	ldw	r2,-140(fp)
 400b88c:	10bfff84 	addi	r2,r2,-2
 400b890:	040100f4 	movhi	r16,1027
 400b894:	84262204 	addi	r16,r16,-26488
 400b898:	01400984 	movi	r5,38
 400b89c:	1009883a 	mov	r4,r2
 400b8a0:	40118340 	call	4011834 <__mulsi3>
 400b8a4:	1007883a 	mov	r3,r2
 400b8a8:	e0bfd717 	ldw	r2,-164(fp)
 400b8ac:	1885883a 	add	r2,r3,r2
 400b8b0:	1085883a 	add	r2,r2,r2
 400b8b4:	1085883a 	add	r2,r2,r2
 400b8b8:	8085883a 	add	r2,r16,r2
 400b8bc:	10800017 	ldw	r2,0(r2)
 400b8c0:	10800060 	cmpeqi	r2,r2,1
 400b8c4:	1000061e 	bne	r2,zero,400b8e0 <dropSBlock+0x1108>
					shapeLayout = 1;
 400b8c8:	00800044 	movi	r2,1
 400b8cc:	e0bfdc15 	stw	r2,-144(fp)
					randomFirstEnd -= 4;
 400b8d0:	e0bfd917 	ldw	r2,-156(fp)
 400b8d4:	10bfff04 	addi	r2,r2,-4
 400b8d8:	e0bfd915 	stw	r2,-156(fp)
 400b8dc:	00002206 	br	400b968 <dropSBlock+0x1190>
				}else if(shapeLayout == 1 && grid[i - 1][randomEnd + 1] != 1
 400b8e0:	e0bfdc17 	ldw	r2,-144(fp)
 400b8e4:	10800058 	cmpnei	r2,r2,1
 400b8e8:	10001b1e 	bne	r2,zero,400b958 <dropSBlock+0x1180>
 400b8ec:	e0bfdd17 	ldw	r2,-140(fp)
 400b8f0:	10ffffc4 	addi	r3,r2,-1
 400b8f4:	e0bfda17 	ldw	r2,-152(fp)
 400b8f8:	14400044 	addi	r17,r2,1
 400b8fc:	040100f4 	movhi	r16,1027
 400b900:	84262204 	addi	r16,r16,-26488
 400b904:	01400984 	movi	r5,38
 400b908:	1809883a 	mov	r4,r3
 400b90c:	40118340 	call	4011834 <__mulsi3>
 400b910:	1445883a 	add	r2,r2,r17
 400b914:	1085883a 	add	r2,r2,r2
 400b918:	1085883a 	add	r2,r2,r2
 400b91c:	8085883a 	add	r2,r16,r2
 400b920:	10800017 	ldw	r2,0(r2)
 400b924:	10800060 	cmpeqi	r2,r2,1
 400b928:	10000b1e 	bne	r2,zero,400b958 <dropSBlock+0x1180>
						&& randomStart > 23 && randomEnd < 57){
 400b92c:	e0bfd717 	ldw	r2,-164(fp)
 400b930:	10800610 	cmplti	r2,r2,24
 400b934:	1000081e 	bne	r2,zero,400b958 <dropSBlock+0x1180>
 400b938:	e0bfda17 	ldw	r2,-152(fp)
 400b93c:	10800e48 	cmpgei	r2,r2,57
 400b940:	1000051e 	bne	r2,zero,400b958 <dropSBlock+0x1180>
					shapeLayout = 0;
 400b944:	e03fdc15 	stw	zero,-144(fp)
					randomFirstEnd += 4;
 400b948:	e0bfd917 	ldw	r2,-156(fp)
 400b94c:	10800104 	addi	r2,r2,4
 400b950:	e0bfd915 	stw	r2,-156(fp)
 400b954:	00000406 	br	400b968 <dropSBlock+0x1190>
				}else{
					i++;
 400b958:	e0bfdd17 	ldw	r2,-140(fp)
 400b95c:	10800044 	addi	r2,r2,1
 400b960:	e0bfdd15 	stw	r2,-140(fp)
						i--;
					}
				}
			}else if((keycode == 0x1D || keycode == 0x1B) && i > 2 && i < 29){
				i--;
				if(shapeLayout == 0 && i > 2 && grid[i - 1][randomStart] != 1 && grid[i - 2][randomStart] != 1){
 400b964:	00000506 	br	400b97c <dropSBlock+0x11a4>
 400b968:	00000406 	br	400b97c <dropSBlock+0x11a4>
					shapeLayout = 0;
					randomFirstEnd += 4;
				}else{
					i++;
				}
			}else if(keycode == 0x2C){
 400b96c:	e0bffd03 	ldbu	r2,-12(fp)
 400b970:	10800b18 	cmpnei	r2,r2,44
 400b974:	1000011e 	bne	r2,zero,400b97c <dropSBlock+0x11a4>
				time = 0;
 400b978:	e03fdb15 	stw	zero,-148(fp)
			}

			if(shapeLayout == 0){
 400b97c:	e0bfdc17 	ldw	r2,-144(fp)
 400b980:	1000491e 	bne	r2,zero,400baa8 <dropSBlock+0x12d0>
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400b984:	e0bfd817 	ldw	r2,-160(fp)
 400b988:	e0bff315 	stw	r2,-52(fp)
 400b98c:	00002006 	br	400ba10 <dropSBlock+0x1238>
	//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xED;
 400b990:	d4200317 	ldw	r16,-32756(gp)
 400b994:	e0bfdd17 	ldw	r2,-140(fp)
 400b998:	10bfffc4 	addi	r2,r2,-1
 400b99c:	01401404 	movi	r5,80
 400b9a0:	1009883a 	mov	r4,r2
 400b9a4:	40118340 	call	4011834 <__mulsi3>
 400b9a8:	1007883a 	mov	r3,r2
 400b9ac:	e0bff317 	ldw	r2,-52(fp)
 400b9b0:	1885883a 	add	r2,r3,r2
 400b9b4:	1085883a 	add	r2,r2,r2
 400b9b8:	8085883a 	add	r2,r16,r2
 400b9bc:	00fffb44 	movi	r3,-19
 400b9c0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400b9c4:	d4600317 	ldw	r17,-32756(gp)
 400b9c8:	e0bfdd17 	ldw	r2,-140(fp)
 400b9cc:	10bfffc4 	addi	r2,r2,-1
 400b9d0:	01401404 	movi	r5,80
 400b9d4:	1009883a 	mov	r4,r2
 400b9d8:	40118340 	call	4011834 <__mulsi3>
 400b9dc:	1007883a 	mov	r3,r2
 400b9e0:	e0bff317 	ldw	r2,-52(fp)
 400b9e4:	1885883a 	add	r2,r3,r2
 400b9e8:	1085883a 	add	r2,r2,r2
 400b9ec:	14000044 	addi	r16,r2,1
 400b9f0:	e13ff317 	ldw	r4,-52(fp)
 400b9f4:	400d8600 	call	400d860 <check_col>
 400b9f8:	1007883a 	mov	r3,r2
 400b9fc:	8c05883a 	add	r2,r17,r16
 400ba00:	10c00005 	stb	r3,0(r2)
			}else if(keycode == 0x2C){
				time = 0;
			}

			if(shapeLayout == 0){
				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400ba04:	e0bff317 	ldw	r2,-52(fp)
 400ba08:	10800044 	addi	r2,r2,1
 400ba0c:	e0bff315 	stw	r2,-52(fp)
 400ba10:	e0fff317 	ldw	r3,-52(fp)
 400ba14:	e0bfd917 	ldw	r2,-156(fp)
 400ba18:	18bfdd16 	blt	r3,r2,400b990 <__alt_mem_onchip_memory2_0+0xfc0067d0>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xED;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}


				for (int j = randomStart; j < randomEnd; j++) {
 400ba1c:	e0bfd717 	ldw	r2,-164(fp)
 400ba20:	e0bff415 	stw	r2,-48(fp)
 400ba24:	00001c06 	br	400ba98 <dropSBlock+0x12c0>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xED;
 400ba28:	d4200317 	ldw	r16,-32756(gp)
 400ba2c:	01401404 	movi	r5,80
 400ba30:	e13fdd17 	ldw	r4,-140(fp)
 400ba34:	40118340 	call	4011834 <__mulsi3>
 400ba38:	1007883a 	mov	r3,r2
 400ba3c:	e0bff417 	ldw	r2,-48(fp)
 400ba40:	1885883a 	add	r2,r3,r2
 400ba44:	1085883a 	add	r2,r2,r2
 400ba48:	8085883a 	add	r2,r16,r2
 400ba4c:	00fffb44 	movi	r3,-19
 400ba50:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 400ba54:	d4600317 	ldw	r17,-32756(gp)
 400ba58:	01401404 	movi	r5,80
 400ba5c:	e13fdd17 	ldw	r4,-140(fp)
 400ba60:	40118340 	call	4011834 <__mulsi3>
 400ba64:	1007883a 	mov	r3,r2
 400ba68:	e0bff417 	ldw	r2,-48(fp)
 400ba6c:	1885883a 	add	r2,r3,r2
 400ba70:	1085883a 	add	r2,r2,r2
 400ba74:	14000044 	addi	r16,r2,1
 400ba78:	e13ff417 	ldw	r4,-48(fp)
 400ba7c:	400d8600 	call	400d860 <check_col>
 400ba80:	1007883a 	mov	r3,r2
 400ba84:	8c05883a 	add	r2,r17,r16
 400ba88:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xED;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}


				for (int j = randomStart; j < randomEnd; j++) {
 400ba8c:	e0bff417 	ldw	r2,-48(fp)
 400ba90:	10800044 	addi	r2,r2,1
 400ba94:	e0bff415 	stw	r2,-48(fp)
 400ba98:	e0fff417 	ldw	r3,-48(fp)
 400ba9c:	e0bfda17 	ldw	r2,-152(fp)
 400baa0:	18bfe116 	blt	r3,r2,400ba28 <__alt_mem_onchip_memory2_0+0xfc006868>
 400baa4:	00005d06 	br	400bc1c <dropSBlock+0x1444>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xED;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
 400baa8:	e0bfdc17 	ldw	r2,-144(fp)
 400baac:	10800058 	cmpnei	r2,r2,1
 400bab0:	10005a1e 	bne	r2,zero,400bc1c <dropSBlock+0x1444>
				for(int row = 0; row < 2; row++){
 400bab4:	e03ff515 	stw	zero,-44(fp)
 400bab8:	00005506 	br	400bc10 <dropSBlock+0x1438>
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400babc:	e0bfd717 	ldw	r2,-164(fp)
 400bac0:	e0bff615 	stw	r2,-40(fp)
 400bac4:	00002406 	br	400bb58 <dropSBlock+0x1380>
		//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0xED;
 400bac8:	d4200317 	ldw	r16,-32756(gp)
 400bacc:	e0bfdd17 	ldw	r2,-140(fp)
 400bad0:	10ffffc4 	addi	r3,r2,-1
 400bad4:	e0bff517 	ldw	r2,-44(fp)
 400bad8:	1885c83a 	sub	r2,r3,r2
 400badc:	01401404 	movi	r5,80
 400bae0:	1009883a 	mov	r4,r2
 400bae4:	40118340 	call	4011834 <__mulsi3>
 400bae8:	1007883a 	mov	r3,r2
 400baec:	e0bff617 	ldw	r2,-40(fp)
 400baf0:	1885883a 	add	r2,r3,r2
 400baf4:	1085883a 	add	r2,r2,r2
 400baf8:	8085883a 	add	r2,r16,r2
 400bafc:	00fffb44 	movi	r3,-19
 400bb00:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
 400bb04:	d4600317 	ldw	r17,-32756(gp)
 400bb08:	e0bfdd17 	ldw	r2,-140(fp)
 400bb0c:	10ffffc4 	addi	r3,r2,-1
 400bb10:	e0bff517 	ldw	r2,-44(fp)
 400bb14:	1885c83a 	sub	r2,r3,r2
 400bb18:	01401404 	movi	r5,80
 400bb1c:	1009883a 	mov	r4,r2
 400bb20:	40118340 	call	4011834 <__mulsi3>
 400bb24:	1007883a 	mov	r3,r2
 400bb28:	e0bff617 	ldw	r2,-40(fp)
 400bb2c:	1885883a 	add	r2,r3,r2
 400bb30:	1085883a 	add	r2,r2,r2
 400bb34:	14000044 	addi	r16,r2,1
 400bb38:	e13ff617 	ldw	r4,-40(fp)
 400bb3c:	400d8600 	call	400d860 <check_col>
 400bb40:	1007883a 	mov	r3,r2
 400bb44:	8c05883a 	add	r2,r17,r16
 400bb48:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xED;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400bb4c:	e0bff617 	ldw	r2,-40(fp)
 400bb50:	10800044 	addi	r2,r2,1
 400bb54:	e0bff615 	stw	r2,-40(fp)
 400bb58:	e0fff617 	ldw	r3,-40(fp)
 400bb5c:	e0bfd917 	ldw	r2,-156(fp)
 400bb60:	18bfd916 	blt	r3,r2,400bac8 <__alt_mem_onchip_memory2_0+0xfc006908>
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0xED;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
					}


					for (int j = randomFirstStart; j < randomEnd; j++) {
 400bb64:	e0bfd817 	ldw	r2,-160(fp)
 400bb68:	e0bff715 	stw	r2,-36(fp)
 400bb6c:	00002206 	br	400bbf8 <dropSBlock+0x1420>
		//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xED;
 400bb70:	d4200317 	ldw	r16,-32756(gp)
 400bb74:	e0ffdd17 	ldw	r3,-140(fp)
 400bb78:	e0bff517 	ldw	r2,-44(fp)
 400bb7c:	1885c83a 	sub	r2,r3,r2
 400bb80:	01401404 	movi	r5,80
 400bb84:	1009883a 	mov	r4,r2
 400bb88:	40118340 	call	4011834 <__mulsi3>
 400bb8c:	1007883a 	mov	r3,r2
 400bb90:	e0bff717 	ldw	r2,-36(fp)
 400bb94:	1885883a 	add	r2,r3,r2
 400bb98:	1085883a 	add	r2,r2,r2
 400bb9c:	8085883a 	add	r2,r16,r2
 400bba0:	00fffb44 	movi	r3,-19
 400bba4:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 400bba8:	d4600317 	ldw	r17,-32756(gp)
 400bbac:	e0ffdd17 	ldw	r3,-140(fp)
 400bbb0:	e0bff517 	ldw	r2,-44(fp)
 400bbb4:	1885c83a 	sub	r2,r3,r2
 400bbb8:	01401404 	movi	r5,80
 400bbbc:	1009883a 	mov	r4,r2
 400bbc0:	40118340 	call	4011834 <__mulsi3>
 400bbc4:	1007883a 	mov	r3,r2
 400bbc8:	e0bff717 	ldw	r2,-36(fp)
 400bbcc:	1885883a 	add	r2,r3,r2
 400bbd0:	1085883a 	add	r2,r2,r2
 400bbd4:	14000044 	addi	r16,r2,1
 400bbd8:	e13ff717 	ldw	r4,-36(fp)
 400bbdc:	400d8600 	call	400d860 <check_col>
 400bbe0:	1007883a 	mov	r3,r2
 400bbe4:	8c05883a 	add	r2,r17,r16
 400bbe8:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0xED;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
					}


					for (int j = randomFirstStart; j < randomEnd; j++) {
 400bbec:	e0bff717 	ldw	r2,-36(fp)
 400bbf0:	10800044 	addi	r2,r2,1
 400bbf4:	e0bff715 	stw	r2,-36(fp)
 400bbf8:	e0fff717 	ldw	r3,-36(fp)
 400bbfc:	e0bfda17 	ldw	r2,-152(fp)
 400bc00:	18bfdb16 	blt	r3,r2,400bb70 <__alt_mem_onchip_memory2_0+0xfc0069b0>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xED;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
 400bc04:	e0bff517 	ldw	r2,-44(fp)
 400bc08:	10800044 	addi	r2,r2,1
 400bc0c:	e0bff515 	stw	r2,-44(fp)
 400bc10:	e0bff517 	ldw	r2,-44(fp)
 400bc14:	10800090 	cmplti	r2,r2,2
 400bc18:	103fa81e 	bne	r2,zero,400babc <__alt_mem_onchip_memory2_0+0xfc0068fc>
				}
			}


        }
        count++;
 400bc1c:	e0bfd617 	ldw	r2,-168(fp)
 400bc20:	10800044 	addi	r2,r2,1
 400bc24:	e0bfd615 	stw	r2,-168(fp)
        usleep (time);
 400bc28:	e0bfdb17 	ldw	r2,-148(fp)
 400bc2c:	1009883a 	mov	r4,r2
 400bc30:	40230600 	call	4023060 <usleep>
	int randomFirstEnd = randomStart + 6;
	int randomEnd = randomStart + 4;
	int time = timer;
	int shapeLayout = 0;
	checkEndGame(randomStart, randomFirstEnd, 2);
    for (int i = 2; i < 30; i++) {
 400bc34:	e0bfdd17 	ldw	r2,-140(fp)
 400bc38:	10800044 	addi	r2,r2,1
 400bc3c:	e0bfdd15 	stw	r2,-140(fp)
 400bc40:	e0bfdd17 	ldw	r2,-140(fp)
 400bc44:	10800790 	cmplti	r2,r2,30
 400bc48:	103b161e 	bne	r2,zero,400a8a4 <__alt_mem_onchip_memory2_0+0xfc0056e4>

        }
        count++;
        usleep (time);
    }
    if(shapeLayout == 0){
 400bc4c:	e0bfdc17 	ldw	r2,-144(fp)
 400bc50:	1000331e 	bne	r2,zero,400bd20 <dropSBlock+0x1548>
		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400bc54:	e0bfd817 	ldw	r2,-160(fp)
 400bc58:	e0bff815 	stw	r2,-32(fp)
 400bc5c:	00001306 	br	400bcac <dropSBlock+0x14d4>
        	grid[28][j] = 1;
 400bc60:	008100f4 	movhi	r2,1027
 400bc64:	10a62204 	addi	r2,r2,-26488
 400bc68:	e0fff817 	ldw	r3,-32(fp)
 400bc6c:	18c10a04 	addi	r3,r3,1064
 400bc70:	18c7883a 	add	r3,r3,r3
 400bc74:	18c7883a 	add	r3,r3,r3
 400bc78:	10c5883a 	add	r2,r2,r3
 400bc7c:	00c00044 	movi	r3,1
 400bc80:	10c00015 	stw	r3,0(r2)
        	rowCount[28]++;
 400bc84:	008100f4 	movhi	r2,1027
 400bc88:	10a60404 	addi	r2,r2,-26608
 400bc8c:	10801c17 	ldw	r2,112(r2)
 400bc90:	10c00044 	addi	r3,r2,1
 400bc94:	008100f4 	movhi	r2,1027
 400bc98:	10a60404 	addi	r2,r2,-26608
 400bc9c:	10c01c15 	stw	r3,112(r2)
        }
        count++;
        usleep (time);
    }
    if(shapeLayout == 0){
		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400bca0:	e0bff817 	ldw	r2,-32(fp)
 400bca4:	10800044 	addi	r2,r2,1
 400bca8:	e0bff815 	stw	r2,-32(fp)
 400bcac:	e0fff817 	ldw	r3,-32(fp)
 400bcb0:	e0bfd917 	ldw	r2,-156(fp)
 400bcb4:	18bfea16 	blt	r3,r2,400bc60 <__alt_mem_onchip_memory2_0+0xfc006aa0>
        	grid[28][j] = 1;
        	rowCount[28]++;
		}


		for (int j = randomStart; j < randomEnd; j++) {
 400bcb8:	e0bfd717 	ldw	r2,-164(fp)
 400bcbc:	e0bff915 	stw	r2,-28(fp)
 400bcc0:	00001306 	br	400bd10 <dropSBlock+0x1538>
			grid[29][j] = 1;
 400bcc4:	008100f4 	movhi	r2,1027
 400bcc8:	10a62204 	addi	r2,r2,-26488
 400bccc:	e0fff917 	ldw	r3,-28(fp)
 400bcd0:	18c11384 	addi	r3,r3,1102
 400bcd4:	18c7883a 	add	r3,r3,r3
 400bcd8:	18c7883a 	add	r3,r3,r3
 400bcdc:	10c5883a 	add	r2,r2,r3
 400bce0:	00c00044 	movi	r3,1
 400bce4:	10c00015 	stw	r3,0(r2)
			rowCount[29]++;
 400bce8:	008100f4 	movhi	r2,1027
 400bcec:	10a60404 	addi	r2,r2,-26608
 400bcf0:	10801d17 	ldw	r2,116(r2)
 400bcf4:	10c00044 	addi	r3,r2,1
 400bcf8:	008100f4 	movhi	r2,1027
 400bcfc:	10a60404 	addi	r2,r2,-26608
 400bd00:	10c01d15 	stw	r3,116(r2)
        	grid[28][j] = 1;
        	rowCount[28]++;
		}


		for (int j = randomStart; j < randomEnd; j++) {
 400bd04:	e0bff917 	ldw	r2,-28(fp)
 400bd08:	10800044 	addi	r2,r2,1
 400bd0c:	e0bff915 	stw	r2,-28(fp)
 400bd10:	e0fff917 	ldw	r3,-28(fp)
 400bd14:	e0bfda17 	ldw	r2,-152(fp)
 400bd18:	18bfea16 	blt	r3,r2,400bcc4 <__alt_mem_onchip_memory2_0+0xfc006b04>
 400bd1c:	00005d06 	br	400be94 <dropSBlock+0x16bc>
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
 400bd20:	e0bfdc17 	ldw	r2,-144(fp)
 400bd24:	10800058 	cmpnei	r2,r2,1
 400bd28:	10005a1e 	bne	r2,zero,400be94 <dropSBlock+0x16bc>
		for(int row = 0; row < 2; row++){
 400bd2c:	e03ffa15 	stw	zero,-24(fp)
 400bd30:	00005506 	br	400be88 <dropSBlock+0x16b0>
			for (int j = randomStart; j < randomFirstEnd; j++) {
 400bd34:	e0bfd717 	ldw	r2,-164(fp)
 400bd38:	e0bffb15 	stw	r2,-20(fp)
 400bd3c:	00002306 	br	400bdcc <dropSBlock+0x15f4>
        		grid[28 - row][j] = 1;
 400bd40:	00c00704 	movi	r3,28
 400bd44:	e0bffa17 	ldw	r2,-24(fp)
 400bd48:	1885c83a 	sub	r2,r3,r2
 400bd4c:	040100f4 	movhi	r16,1027
 400bd50:	84262204 	addi	r16,r16,-26488
 400bd54:	01400984 	movi	r5,38
 400bd58:	1009883a 	mov	r4,r2
 400bd5c:	40118340 	call	4011834 <__mulsi3>
 400bd60:	1007883a 	mov	r3,r2
 400bd64:	e0bffb17 	ldw	r2,-20(fp)
 400bd68:	1885883a 	add	r2,r3,r2
 400bd6c:	1085883a 	add	r2,r2,r2
 400bd70:	1085883a 	add	r2,r2,r2
 400bd74:	8085883a 	add	r2,r16,r2
 400bd78:	00c00044 	movi	r3,1
 400bd7c:	10c00015 	stw	r3,0(r2)
        		rowCount[28 - row]++;
 400bd80:	00c00704 	movi	r3,28
 400bd84:	e0bffa17 	ldw	r2,-24(fp)
 400bd88:	1885c83a 	sub	r2,r3,r2
 400bd8c:	00c100f4 	movhi	r3,1027
 400bd90:	18e60404 	addi	r3,r3,-26608
 400bd94:	1089883a 	add	r4,r2,r2
 400bd98:	2109883a 	add	r4,r4,r4
 400bd9c:	1907883a 	add	r3,r3,r4
 400bda0:	18c00017 	ldw	r3,0(r3)
 400bda4:	19000044 	addi	r4,r3,1
 400bda8:	00c100f4 	movhi	r3,1027
 400bdac:	18e60404 	addi	r3,r3,-26608
 400bdb0:	1085883a 	add	r2,r2,r2
 400bdb4:	1085883a 	add	r2,r2,r2
 400bdb8:	1885883a 	add	r2,r3,r2
 400bdbc:	11000015 	stw	r4,0(r2)
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
		for(int row = 0; row < 2; row++){
			for (int j = randomStart; j < randomFirstEnd; j++) {
 400bdc0:	e0bffb17 	ldw	r2,-20(fp)
 400bdc4:	10800044 	addi	r2,r2,1
 400bdc8:	e0bffb15 	stw	r2,-20(fp)
 400bdcc:	e0fffb17 	ldw	r3,-20(fp)
 400bdd0:	e0bfd917 	ldw	r2,-156(fp)
 400bdd4:	18bfda16 	blt	r3,r2,400bd40 <__alt_mem_onchip_memory2_0+0xfc006b80>
        		grid[28 - row][j] = 1;
        		rowCount[28 - row]++;
			}


			for (int j = randomFirstStart; j < randomEnd; j++) {
 400bdd8:	e0bfd817 	ldw	r2,-160(fp)
 400bddc:	e0bffc15 	stw	r2,-16(fp)
 400bde0:	00002306 	br	400be70 <dropSBlock+0x1698>
				grid[29 - row][j] = 1;
 400bde4:	00c00744 	movi	r3,29
 400bde8:	e0bffa17 	ldw	r2,-24(fp)
 400bdec:	1885c83a 	sub	r2,r3,r2
 400bdf0:	040100f4 	movhi	r16,1027
 400bdf4:	84262204 	addi	r16,r16,-26488
 400bdf8:	01400984 	movi	r5,38
 400bdfc:	1009883a 	mov	r4,r2
 400be00:	40118340 	call	4011834 <__mulsi3>
 400be04:	1007883a 	mov	r3,r2
 400be08:	e0bffc17 	ldw	r2,-16(fp)
 400be0c:	1885883a 	add	r2,r3,r2
 400be10:	1085883a 	add	r2,r2,r2
 400be14:	1085883a 	add	r2,r2,r2
 400be18:	8085883a 	add	r2,r16,r2
 400be1c:	00c00044 	movi	r3,1
 400be20:	10c00015 	stw	r3,0(r2)
				rowCount[29 - row]++;
 400be24:	00c00744 	movi	r3,29
 400be28:	e0bffa17 	ldw	r2,-24(fp)
 400be2c:	1885c83a 	sub	r2,r3,r2
 400be30:	00c100f4 	movhi	r3,1027
 400be34:	18e60404 	addi	r3,r3,-26608
 400be38:	1089883a 	add	r4,r2,r2
 400be3c:	2109883a 	add	r4,r4,r4
 400be40:	1907883a 	add	r3,r3,r4
 400be44:	18c00017 	ldw	r3,0(r3)
 400be48:	19000044 	addi	r4,r3,1
 400be4c:	00c100f4 	movhi	r3,1027
 400be50:	18e60404 	addi	r3,r3,-26608
 400be54:	1085883a 	add	r2,r2,r2
 400be58:	1085883a 	add	r2,r2,r2
 400be5c:	1885883a 	add	r2,r3,r2
 400be60:	11000015 	stw	r4,0(r2)
        		grid[28 - row][j] = 1;
        		rowCount[28 - row]++;
			}


			for (int j = randomFirstStart; j < randomEnd; j++) {
 400be64:	e0bffc17 	ldw	r2,-16(fp)
 400be68:	10800044 	addi	r2,r2,1
 400be6c:	e0bffc15 	stw	r2,-16(fp)
 400be70:	e0fffc17 	ldw	r3,-16(fp)
 400be74:	e0bfda17 	ldw	r2,-152(fp)
 400be78:	18bfda16 	blt	r3,r2,400bde4 <__alt_mem_onchip_memory2_0+0xfc006c24>
		for (int j = randomStart; j < randomEnd; j++) {
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
		for(int row = 0; row < 2; row++){
 400be7c:	e0bffa17 	ldw	r2,-24(fp)
 400be80:	10800044 	addi	r2,r2,1
 400be84:	e0bffa15 	stw	r2,-24(fp)
 400be88:	e0bffa17 	ldw	r2,-24(fp)
 400be8c:	10800090 	cmplti	r2,r2,2
 400be90:	103fa81e 	bne	r2,zero,400bd34 <__alt_mem_onchip_memory2_0+0xfc006b74>
				rowCount[29 - row]++;
			}
		}
	}

}
 400be94:	e6fffe04 	addi	sp,fp,-8
 400be98:	dfc00317 	ldw	ra,12(sp)
 400be9c:	df000217 	ldw	fp,8(sp)
 400bea0:	dc400117 	ldw	r17,4(sp)
 400bea4:	dc000017 	ldw	r16,0(sp)
 400bea8:	dec00404 	addi	sp,sp,16
 400beac:	f800283a 	ret

0400beb0 <dropZBlock>:

void dropZBlock() {
 400beb0:	deffd404 	addi	sp,sp,-176
 400beb4:	dfc02b15 	stw	ra,172(sp)
 400beb8:	df002a15 	stw	fp,168(sp)
 400bebc:	dc402915 	stw	r17,164(sp)
 400bec0:	dc002815 	stw	r16,160(sp)
 400bec4:	df002a04 	addi	fp,sp,168
    int count = 0;
 400bec8:	e03fd615 	stw	zero,-168(fp)
    BYTE keycode;
    int randomStart = rand()%32+21;
 400becc:	40141e00 	call	40141e0 <rand>
 400bed0:	1007883a 	mov	r3,r2
 400bed4:	00a00034 	movhi	r2,32768
 400bed8:	108007c4 	addi	r2,r2,31
 400bedc:	1884703a 	and	r2,r3,r2
 400bee0:	1000040e 	bge	r2,zero,400bef4 <dropZBlock+0x44>
 400bee4:	10bfffc4 	addi	r2,r2,-1
 400bee8:	00fff804 	movi	r3,-32
 400beec:	10c4b03a 	or	r2,r2,r3
 400bef0:	10800044 	addi	r2,r2,1
 400bef4:	10800544 	addi	r2,r2,21
 400bef8:	e0bfd715 	stw	r2,-164(fp)
    if(randomStart % 2 == 0){
 400befc:	e0bfd717 	ldw	r2,-164(fp)
 400bf00:	1080004c 	andi	r2,r2,1
 400bf04:	10000a1e 	bne	r2,zero,400bf30 <dropZBlock+0x80>
		if(randomStart == 54){
 400bf08:	e0bfd717 	ldw	r2,-164(fp)
 400bf0c:	10800d98 	cmpnei	r2,r2,54
 400bf10:	1000041e 	bne	r2,zero,400bf24 <dropZBlock+0x74>
			randomStart--;
 400bf14:	e0bfd717 	ldw	r2,-164(fp)
 400bf18:	10bfffc4 	addi	r2,r2,-1
 400bf1c:	e0bfd715 	stw	r2,-164(fp)
 400bf20:	00000306 	br	400bf30 <dropZBlock+0x80>
		}else{
			randomStart++;
 400bf24:	e0bfd717 	ldw	r2,-164(fp)
 400bf28:	10800044 	addi	r2,r2,1
 400bf2c:	e0bfd715 	stw	r2,-164(fp)
		}
	}
    int randomFirstStart = randomStart + 2;
 400bf30:	e0bfd717 	ldw	r2,-164(fp)
 400bf34:	10800084 	addi	r2,r2,2
 400bf38:	e0bfd815 	stw	r2,-160(fp)
	int randomFirstEnd = randomStart + 6;
 400bf3c:	e0bfd717 	ldw	r2,-164(fp)
 400bf40:	10800184 	addi	r2,r2,6
 400bf44:	e0bfd915 	stw	r2,-156(fp)
	int randomEnd = randomStart + 4;
 400bf48:	e0bfd717 	ldw	r2,-164(fp)
 400bf4c:	10800104 	addi	r2,r2,4
 400bf50:	e0bfda15 	stw	r2,-152(fp)
	int time = timer;
 400bf54:	d0a80117 	ldw	r2,-24572(gp)
 400bf58:	e0bfdb15 	stw	r2,-148(fp)
	int shapeLayout = 0;
 400bf5c:	e03fdc15 	stw	zero,-144(fp)
	checkEndGame(randomStart, randomFirstEnd, 2);
 400bf60:	01800084 	movi	r6,2
 400bf64:	e17fd917 	ldw	r5,-156(fp)
 400bf68:	e13fd717 	ldw	r4,-164(fp)
 400bf6c:	400dfd80 	call	400dfd8 <checkEndGame>
    for (int i = 2; i < 30; i++) {
 400bf70:	00800084 	movi	r2,2
 400bf74:	e0bfdd15 	stw	r2,-140(fp)
 400bf78:	0004d906 	br	400d2e0 <dropZBlock+0x1430>
        if (count == 0) {
 400bf7c:	e0bfd617 	ldw	r2,-168(fp)
 400bf80:	1000491e 	bne	r2,zero,400c0a8 <dropZBlock+0x1f8>
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;

        	for (int j = randomStart; j < randomEnd; j++) {
 400bf84:	e0bfd717 	ldw	r2,-164(fp)
 400bf88:	e0bfde15 	stw	r2,-136(fp)
 400bf8c:	00002006 	br	400c010 <dropZBlock+0x160>
//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xA9;
 400bf90:	d4200317 	ldw	r16,-32756(gp)
 400bf94:	e0bfdd17 	ldw	r2,-140(fp)
 400bf98:	10bfffc4 	addi	r2,r2,-1
 400bf9c:	01401404 	movi	r5,80
 400bfa0:	1009883a 	mov	r4,r2
 400bfa4:	40118340 	call	4011834 <__mulsi3>
 400bfa8:	1007883a 	mov	r3,r2
 400bfac:	e0bfde17 	ldw	r2,-136(fp)
 400bfb0:	1885883a 	add	r2,r3,r2
 400bfb4:	1085883a 	add	r2,r2,r2
 400bfb8:	8085883a 	add	r2,r16,r2
 400bfbc:	00ffea44 	movi	r3,-87
 400bfc0:	10c00005 	stb	r3,0(r2)
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400bfc4:	d4600317 	ldw	r17,-32756(gp)
 400bfc8:	e0bfdd17 	ldw	r2,-140(fp)
 400bfcc:	10bfffc4 	addi	r2,r2,-1
 400bfd0:	01401404 	movi	r5,80
 400bfd4:	1009883a 	mov	r4,r2
 400bfd8:	40118340 	call	4011834 <__mulsi3>
 400bfdc:	1007883a 	mov	r3,r2
 400bfe0:	e0bfde17 	ldw	r2,-136(fp)
 400bfe4:	1885883a 	add	r2,r3,r2
 400bfe8:	1085883a 	add	r2,r2,r2
 400bfec:	14000044 	addi	r16,r2,1
 400bff0:	e13fde17 	ldw	r4,-136(fp)
 400bff4:	400d8600 	call	400d860 <check_col>
 400bff8:	1007883a 	mov	r3,r2
 400bffc:	8c05883a 	add	r2,r17,r16
 400c000:	10c00005 	stb	r3,0(r2)
        if (count == 0) {
            //vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0x27F;
//            vga_ctrl->VRAM[(i * 80 + 6) * 2] = 0xFF;
//            vga_ctrl->VRAM[(i * 80 + 5) * 2] = 0xFF;

        	for (int j = randomStart; j < randomEnd; j++) {
 400c004:	e0bfde17 	ldw	r2,-136(fp)
 400c008:	10800044 	addi	r2,r2,1
 400c00c:	e0bfde15 	stw	r2,-136(fp)
 400c010:	e0ffde17 	ldw	r3,-136(fp)
 400c014:	e0bfda17 	ldw	r2,-152(fp)
 400c018:	18bfdd16 	blt	r3,r2,400bf90 <__alt_mem_onchip_memory2_0+0xfc006dd0>
//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xA9;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
        	}

			for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c01c:	e0bfd817 	ldw	r2,-160(fp)
 400c020:	e0bfdf15 	stw	r2,-132(fp)
 400c024:	00001c06 	br	400c098 <dropZBlock+0x1e8>
//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
				vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xA9;
 400c028:	d4200317 	ldw	r16,-32756(gp)
 400c02c:	01401404 	movi	r5,80
 400c030:	e13fdd17 	ldw	r4,-140(fp)
 400c034:	40118340 	call	4011834 <__mulsi3>
 400c038:	1007883a 	mov	r3,r2
 400c03c:	e0bfdf17 	ldw	r2,-132(fp)
 400c040:	1885883a 	add	r2,r3,r2
 400c044:	1085883a 	add	r2,r2,r2
 400c048:	8085883a 	add	r2,r16,r2
 400c04c:	00ffea44 	movi	r3,-87
 400c050:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 400c054:	d4600317 	ldw	r17,-32756(gp)
 400c058:	01401404 	movi	r5,80
 400c05c:	e13fdd17 	ldw	r4,-140(fp)
 400c060:	40118340 	call	4011834 <__mulsi3>
 400c064:	1007883a 	mov	r3,r2
 400c068:	e0bfdf17 	ldw	r2,-132(fp)
 400c06c:	1885883a 	add	r2,r3,r2
 400c070:	1085883a 	add	r2,r2,r2
 400c074:	14000044 	addi	r16,r2,1
 400c078:	e13fdf17 	ldw	r4,-132(fp)
 400c07c:	400d8600 	call	400d860 <check_col>
 400c080:	1007883a 	mov	r3,r2
 400c084:	8c05883a 	add	r2,r17,r16
 400c088:	10c00005 	stb	r3,0(r2)
//        		vga_ctrl->VRAM[(i * 80 + j) * 2] = 0xFF;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xA9;
        		vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
        	}

			for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c08c:	e0bfdf17 	ldw	r2,-132(fp)
 400c090:	10800044 	addi	r2,r2,1
 400c094:	e0bfdf15 	stw	r2,-132(fp)
 400c098:	e0ffdf17 	ldw	r3,-132(fp)
 400c09c:	e0bfd917 	ldw	r2,-156(fp)
 400c0a0:	18bfe116 	blt	r3,r2,400c028 <__alt_mem_onchip_memory2_0+0xfc006e68>
 400c0a4:	00048506 	br	400d2bc <dropZBlock+0x140c>



        } else {

        	if(shapeLayout == 0){
 400c0a8:	e0bfdc17 	ldw	r2,-144(fp)
 400c0ac:	1000d01e 	bne	r2,zero,400c3f0 <dropZBlock+0x540>
				for (int j = randomStart; j < randomEnd; j++) {
 400c0b0:	e0bfd717 	ldw	r2,-164(fp)
 400c0b4:	e0bfe015 	stw	r2,-128(fp)
 400c0b8:	00006206 	br	400c244 <dropZBlock+0x394>
					if(grid[i -1][j] == 1){
 400c0bc:	e0bfdd17 	ldw	r2,-140(fp)
 400c0c0:	10bfffc4 	addi	r2,r2,-1
 400c0c4:	040100f4 	movhi	r16,1027
 400c0c8:	84262204 	addi	r16,r16,-26488
 400c0cc:	01400984 	movi	r5,38
 400c0d0:	1009883a 	mov	r4,r2
 400c0d4:	40118340 	call	4011834 <__mulsi3>
 400c0d8:	1007883a 	mov	r3,r2
 400c0dc:	e0bfe017 	ldw	r2,-128(fp)
 400c0e0:	1885883a 	add	r2,r3,r2
 400c0e4:	1085883a 	add	r2,r2,r2
 400c0e8:	1085883a 	add	r2,r2,r2
 400c0ec:	8085883a 	add	r2,r16,r2
 400c0f0:	10800017 	ldw	r2,0(r2)
 400c0f4:	10800058 	cmpnei	r2,r2,1
 400c0f8:	10004f1e 	bne	r2,zero,400c238 <dropZBlock+0x388>
						for (int j = randomStart; j < randomEnd; j++) {
 400c0fc:	e0bfd717 	ldw	r2,-164(fp)
 400c100:	e0bfe115 	stw	r2,-124(fp)
 400c104:	00002106 	br	400c18c <dropZBlock+0x2dc>
			        		grid[i - 2][j] = 1;
 400c108:	e0bfdd17 	ldw	r2,-140(fp)
 400c10c:	10bfff84 	addi	r2,r2,-2
 400c110:	040100f4 	movhi	r16,1027
 400c114:	84262204 	addi	r16,r16,-26488
 400c118:	01400984 	movi	r5,38
 400c11c:	1009883a 	mov	r4,r2
 400c120:	40118340 	call	4011834 <__mulsi3>
 400c124:	1007883a 	mov	r3,r2
 400c128:	e0bfe117 	ldw	r2,-124(fp)
 400c12c:	1885883a 	add	r2,r3,r2
 400c130:	1085883a 	add	r2,r2,r2
 400c134:	1085883a 	add	r2,r2,r2
 400c138:	8085883a 	add	r2,r16,r2
 400c13c:	00c00044 	movi	r3,1
 400c140:	10c00015 	stw	r3,0(r2)
			        		rowCount[i - 2]++;
 400c144:	e0bfdd17 	ldw	r2,-140(fp)
 400c148:	10bfff84 	addi	r2,r2,-2
 400c14c:	00c100f4 	movhi	r3,1027
 400c150:	18e60404 	addi	r3,r3,-26608
 400c154:	1089883a 	add	r4,r2,r2
 400c158:	2109883a 	add	r4,r4,r4
 400c15c:	1907883a 	add	r3,r3,r4
 400c160:	18c00017 	ldw	r3,0(r3)
 400c164:	19000044 	addi	r4,r3,1
 400c168:	00c100f4 	movhi	r3,1027
 400c16c:	18e60404 	addi	r3,r3,-26608
 400c170:	1085883a 	add	r2,r2,r2
 400c174:	1085883a 	add	r2,r2,r2
 400c178:	1885883a 	add	r2,r3,r2
 400c17c:	11000015 	stw	r4,0(r2)
        } else {

        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
					if(grid[i -1][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
 400c180:	e0bfe117 	ldw	r2,-124(fp)
 400c184:	10800044 	addi	r2,r2,1
 400c188:	e0bfe115 	stw	r2,-124(fp)
 400c18c:	e0ffe117 	ldw	r3,-124(fp)
 400c190:	e0bfda17 	ldw	r2,-152(fp)
 400c194:	18bfdc16 	blt	r3,r2,400c108 <__alt_mem_onchip_memory2_0+0xfc006f48>
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}


						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c198:	e0bfd817 	ldw	r2,-160(fp)
 400c19c:	e0bfe215 	stw	r2,-120(fp)
 400c1a0:	00002106 	br	400c228 <dropZBlock+0x378>
							grid[i - 1][j] = 1;
 400c1a4:	e0bfdd17 	ldw	r2,-140(fp)
 400c1a8:	10bfffc4 	addi	r2,r2,-1
 400c1ac:	040100f4 	movhi	r16,1027
 400c1b0:	84262204 	addi	r16,r16,-26488
 400c1b4:	01400984 	movi	r5,38
 400c1b8:	1009883a 	mov	r4,r2
 400c1bc:	40118340 	call	4011834 <__mulsi3>
 400c1c0:	1007883a 	mov	r3,r2
 400c1c4:	e0bfe217 	ldw	r2,-120(fp)
 400c1c8:	1885883a 	add	r2,r3,r2
 400c1cc:	1085883a 	add	r2,r2,r2
 400c1d0:	1085883a 	add	r2,r2,r2
 400c1d4:	8085883a 	add	r2,r16,r2
 400c1d8:	00c00044 	movi	r3,1
 400c1dc:	10c00015 	stw	r3,0(r2)
							rowCount[i - 1]++;
 400c1e0:	e0bfdd17 	ldw	r2,-140(fp)
 400c1e4:	10bfffc4 	addi	r2,r2,-1
 400c1e8:	00c100f4 	movhi	r3,1027
 400c1ec:	18e60404 	addi	r3,r3,-26608
 400c1f0:	1089883a 	add	r4,r2,r2
 400c1f4:	2109883a 	add	r4,r4,r4
 400c1f8:	1907883a 	add	r3,r3,r4
 400c1fc:	18c00017 	ldw	r3,0(r3)
 400c200:	19000044 	addi	r4,r3,1
 400c204:	00c100f4 	movhi	r3,1027
 400c208:	18e60404 	addi	r3,r3,-26608
 400c20c:	1085883a 	add	r2,r2,r2
 400c210:	1085883a 	add	r2,r2,r2
 400c214:	1885883a 	add	r2,r3,r2
 400c218:	11000015 	stw	r4,0(r2)
			        		grid[i - 2][j] = 1;
			        		rowCount[i - 2]++;
						}


						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c21c:	e0bfe217 	ldw	r2,-120(fp)
 400c220:	10800044 	addi	r2,r2,1
 400c224:	e0bfe215 	stw	r2,-120(fp)
 400c228:	e0ffe217 	ldw	r3,-120(fp)
 400c22c:	e0bfd917 	ldw	r2,-156(fp)
 400c230:	18bfdc16 	blt	r3,r2,400c1a4 <__alt_mem_onchip_memory2_0+0xfc006fe4>
							grid[i - 1][j] = 1;
							rowCount[i - 1]++;
						}
						return;
 400c234:	0004bf06 	br	400d534 <dropZBlock+0x1684>


        } else {

        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
 400c238:	e0bfe017 	ldw	r2,-128(fp)
 400c23c:	10800044 	addi	r2,r2,1
 400c240:	e0bfe015 	stw	r2,-128(fp)
 400c244:	e0ffe017 	ldw	r3,-128(fp)
 400c248:	e0bfda17 	ldw	r2,-152(fp)
 400c24c:	18bf9b16 	blt	r3,r2,400c0bc <__alt_mem_onchip_memory2_0+0xfc006efc>
						return;
					}
				}


				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c250:	e0bfd817 	ldw	r2,-160(fp)
 400c254:	e0bfe315 	stw	r2,-116(fp)
 400c258:	00006106 	br	400c3e0 <dropZBlock+0x530>
					if(grid[i][j] == 1){
 400c25c:	040100f4 	movhi	r16,1027
 400c260:	84262204 	addi	r16,r16,-26488
 400c264:	e0bfdd17 	ldw	r2,-140(fp)
 400c268:	01400984 	movi	r5,38
 400c26c:	1009883a 	mov	r4,r2
 400c270:	40118340 	call	4011834 <__mulsi3>
 400c274:	1007883a 	mov	r3,r2
 400c278:	e0bfe317 	ldw	r2,-116(fp)
 400c27c:	1885883a 	add	r2,r3,r2
 400c280:	1085883a 	add	r2,r2,r2
 400c284:	1085883a 	add	r2,r2,r2
 400c288:	8085883a 	add	r2,r16,r2
 400c28c:	10800017 	ldw	r2,0(r2)
 400c290:	10800058 	cmpnei	r2,r2,1
 400c294:	10004f1e 	bne	r2,zero,400c3d4 <dropZBlock+0x524>
						for (int j = randomStart; j < randomEnd; j++) {
 400c298:	e0bfd717 	ldw	r2,-164(fp)
 400c29c:	e0bfe415 	stw	r2,-112(fp)
 400c2a0:	00002106 	br	400c328 <dropZBlock+0x478>
							grid[i - 2][j] = 1;
 400c2a4:	e0bfdd17 	ldw	r2,-140(fp)
 400c2a8:	10bfff84 	addi	r2,r2,-2
 400c2ac:	040100f4 	movhi	r16,1027
 400c2b0:	84262204 	addi	r16,r16,-26488
 400c2b4:	01400984 	movi	r5,38
 400c2b8:	1009883a 	mov	r4,r2
 400c2bc:	40118340 	call	4011834 <__mulsi3>
 400c2c0:	1007883a 	mov	r3,r2
 400c2c4:	e0bfe417 	ldw	r2,-112(fp)
 400c2c8:	1885883a 	add	r2,r3,r2
 400c2cc:	1085883a 	add	r2,r2,r2
 400c2d0:	1085883a 	add	r2,r2,r2
 400c2d4:	8085883a 	add	r2,r16,r2
 400c2d8:	00c00044 	movi	r3,1
 400c2dc:	10c00015 	stw	r3,0(r2)
							rowCount[i - 2]++;
 400c2e0:	e0bfdd17 	ldw	r2,-140(fp)
 400c2e4:	10bfff84 	addi	r2,r2,-2
 400c2e8:	00c100f4 	movhi	r3,1027
 400c2ec:	18e60404 	addi	r3,r3,-26608
 400c2f0:	1089883a 	add	r4,r2,r2
 400c2f4:	2109883a 	add	r4,r4,r4
 400c2f8:	1907883a 	add	r3,r3,r4
 400c2fc:	18c00017 	ldw	r3,0(r3)
 400c300:	19000044 	addi	r4,r3,1
 400c304:	00c100f4 	movhi	r3,1027
 400c308:	18e60404 	addi	r3,r3,-26608
 400c30c:	1085883a 	add	r2,r2,r2
 400c310:	1085883a 	add	r2,r2,r2
 400c314:	1885883a 	add	r2,r3,r2
 400c318:	11000015 	stw	r4,0(r2)
				}


				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
					if(grid[i][j] == 1){
						for (int j = randomStart; j < randomEnd; j++) {
 400c31c:	e0bfe417 	ldw	r2,-112(fp)
 400c320:	10800044 	addi	r2,r2,1
 400c324:	e0bfe415 	stw	r2,-112(fp)
 400c328:	e0ffe417 	ldw	r3,-112(fp)
 400c32c:	e0bfda17 	ldw	r2,-152(fp)
 400c330:	18bfdc16 	blt	r3,r2,400c2a4 <__alt_mem_onchip_memory2_0+0xfc0070e4>
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}


						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c334:	e0bfd817 	ldw	r2,-160(fp)
 400c338:	e0bfe515 	stw	r2,-108(fp)
 400c33c:	00002106 	br	400c3c4 <dropZBlock+0x514>
							grid[i - 1][j] = 1;
 400c340:	e0bfdd17 	ldw	r2,-140(fp)
 400c344:	10bfffc4 	addi	r2,r2,-1
 400c348:	040100f4 	movhi	r16,1027
 400c34c:	84262204 	addi	r16,r16,-26488
 400c350:	01400984 	movi	r5,38
 400c354:	1009883a 	mov	r4,r2
 400c358:	40118340 	call	4011834 <__mulsi3>
 400c35c:	1007883a 	mov	r3,r2
 400c360:	e0bfe517 	ldw	r2,-108(fp)
 400c364:	1885883a 	add	r2,r3,r2
 400c368:	1085883a 	add	r2,r2,r2
 400c36c:	1085883a 	add	r2,r2,r2
 400c370:	8085883a 	add	r2,r16,r2
 400c374:	00c00044 	movi	r3,1
 400c378:	10c00015 	stw	r3,0(r2)
							rowCount[i - 1]++;
 400c37c:	e0bfdd17 	ldw	r2,-140(fp)
 400c380:	10bfffc4 	addi	r2,r2,-1
 400c384:	00c100f4 	movhi	r3,1027
 400c388:	18e60404 	addi	r3,r3,-26608
 400c38c:	1089883a 	add	r4,r2,r2
 400c390:	2109883a 	add	r4,r4,r4
 400c394:	1907883a 	add	r3,r3,r4
 400c398:	18c00017 	ldw	r3,0(r3)
 400c39c:	19000044 	addi	r4,r3,1
 400c3a0:	00c100f4 	movhi	r3,1027
 400c3a4:	18e60404 	addi	r3,r3,-26608
 400c3a8:	1085883a 	add	r2,r2,r2
 400c3ac:	1085883a 	add	r2,r2,r2
 400c3b0:	1885883a 	add	r2,r3,r2
 400c3b4:	11000015 	stw	r4,0(r2)
							grid[i - 2][j] = 1;
							rowCount[i - 2]++;
						}


						for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c3b8:	e0bfe517 	ldw	r2,-108(fp)
 400c3bc:	10800044 	addi	r2,r2,1
 400c3c0:	e0bfe515 	stw	r2,-108(fp)
 400c3c4:	e0ffe517 	ldw	r3,-108(fp)
 400c3c8:	e0bfd917 	ldw	r2,-156(fp)
 400c3cc:	18bfdc16 	blt	r3,r2,400c340 <__alt_mem_onchip_memory2_0+0xfc007180>
							grid[i - 1][j] = 1;
							rowCount[i - 1]++;
						}
						return;
 400c3d0:	00045806 	br	400d534 <dropZBlock+0x1684>
						return;
					}
				}


				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c3d4:	e0bfe317 	ldw	r2,-116(fp)
 400c3d8:	10800044 	addi	r2,r2,1
 400c3dc:	e0bfe315 	stw	r2,-116(fp)
 400c3e0:	e0ffe317 	ldw	r3,-116(fp)
 400c3e4:	e0bfd917 	ldw	r2,-156(fp)
 400c3e8:	18bf9c16 	blt	r3,r2,400c25c <__alt_mem_onchip_memory2_0+0xfc00709c>
 400c3ec:	0000f206 	br	400c7b8 <dropZBlock+0x908>
							rowCount[i - 1]++;
						}
						return;
					}
				}
			}else if(shapeLayout == 1){
 400c3f0:	e0bfdc17 	ldw	r2,-144(fp)
 400c3f4:	10800058 	cmpnei	r2,r2,1
 400c3f8:	1000ef1e 	bne	r2,zero,400c7b8 <dropZBlock+0x908>
				for (int j = randomStart; j < randomFirstEnd; j++) {
 400c3fc:	e0bfd717 	ldw	r2,-164(fp)
 400c400:	e0bfe615 	stw	r2,-104(fp)
 400c404:	00007206 	br	400c5d0 <dropZBlock+0x720>
					if(grid[i -1][j] == 1){
 400c408:	e0bfdd17 	ldw	r2,-140(fp)
 400c40c:	10bfffc4 	addi	r2,r2,-1
 400c410:	040100f4 	movhi	r16,1027
 400c414:	84262204 	addi	r16,r16,-26488
 400c418:	01400984 	movi	r5,38
 400c41c:	1009883a 	mov	r4,r2
 400c420:	40118340 	call	4011834 <__mulsi3>
 400c424:	1007883a 	mov	r3,r2
 400c428:	e0bfe617 	ldw	r2,-104(fp)
 400c42c:	1885883a 	add	r2,r3,r2
 400c430:	1085883a 	add	r2,r2,r2
 400c434:	1085883a 	add	r2,r2,r2
 400c438:	8085883a 	add	r2,r16,r2
 400c43c:	10800017 	ldw	r2,0(r2)
 400c440:	10800058 	cmpnei	r2,r2,1
 400c444:	10005f1e 	bne	r2,zero,400c5c4 <dropZBlock+0x714>
						for(int row = 0; row < 2; row++){
 400c448:	e03fe715 	stw	zero,-100(fp)
 400c44c:	00005906 	br	400c5b4 <dropZBlock+0x704>
							for (int j = randomStart; j < randomFirstEnd; j++) {
 400c450:	e0bfd717 	ldw	r2,-164(fp)
 400c454:	e0bfe815 	stw	r2,-96(fp)
 400c458:	00002506 	br	400c4f0 <dropZBlock+0x640>
				        		grid[i - 2 - row][j] = 1;
 400c45c:	e0bfdd17 	ldw	r2,-140(fp)
 400c460:	10ffff84 	addi	r3,r2,-2
 400c464:	e0bfe717 	ldw	r2,-100(fp)
 400c468:	1885c83a 	sub	r2,r3,r2
 400c46c:	040100f4 	movhi	r16,1027
 400c470:	84262204 	addi	r16,r16,-26488
 400c474:	01400984 	movi	r5,38
 400c478:	1009883a 	mov	r4,r2
 400c47c:	40118340 	call	4011834 <__mulsi3>
 400c480:	1007883a 	mov	r3,r2
 400c484:	e0bfe817 	ldw	r2,-96(fp)
 400c488:	1885883a 	add	r2,r3,r2
 400c48c:	1085883a 	add	r2,r2,r2
 400c490:	1085883a 	add	r2,r2,r2
 400c494:	8085883a 	add	r2,r16,r2
 400c498:	00c00044 	movi	r3,1
 400c49c:	10c00015 	stw	r3,0(r2)
				        		rowCount[i - 2 - row]++;
 400c4a0:	e0bfdd17 	ldw	r2,-140(fp)
 400c4a4:	10ffff84 	addi	r3,r2,-2
 400c4a8:	e0bfe717 	ldw	r2,-100(fp)
 400c4ac:	1885c83a 	sub	r2,r3,r2
 400c4b0:	00c100f4 	movhi	r3,1027
 400c4b4:	18e60404 	addi	r3,r3,-26608
 400c4b8:	1089883a 	add	r4,r2,r2
 400c4bc:	2109883a 	add	r4,r4,r4
 400c4c0:	1907883a 	add	r3,r3,r4
 400c4c4:	18c00017 	ldw	r3,0(r3)
 400c4c8:	19000044 	addi	r4,r3,1
 400c4cc:	00c100f4 	movhi	r3,1027
 400c4d0:	18e60404 	addi	r3,r3,-26608
 400c4d4:	1085883a 	add	r2,r2,r2
 400c4d8:	1085883a 	add	r2,r2,r2
 400c4dc:	1885883a 	add	r2,r3,r2
 400c4e0:	11000015 	stw	r4,0(r2)
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomFirstEnd; j++) {
					if(grid[i -1][j] == 1){
						for(int row = 0; row < 2; row++){
							for (int j = randomStart; j < randomFirstEnd; j++) {
 400c4e4:	e0bfe817 	ldw	r2,-96(fp)
 400c4e8:	10800044 	addi	r2,r2,1
 400c4ec:	e0bfe815 	stw	r2,-96(fp)
 400c4f0:	e0ffe817 	ldw	r3,-96(fp)
 400c4f4:	e0bfd917 	ldw	r2,-156(fp)
 400c4f8:	18bfd816 	blt	r3,r2,400c45c <__alt_mem_onchip_memory2_0+0xfc00729c>
				        		grid[i - 2 - row][j] = 1;
				        		rowCount[i - 2 - row]++;
							}


							for (int j = randomFirstStart; j < randomEnd; j++) {
 400c4fc:	e0bfd817 	ldw	r2,-160(fp)
 400c500:	e0bfe915 	stw	r2,-92(fp)
 400c504:	00002506 	br	400c59c <dropZBlock+0x6ec>
								grid[i - 1 - row][j] = 1;
 400c508:	e0bfdd17 	ldw	r2,-140(fp)
 400c50c:	10ffffc4 	addi	r3,r2,-1
 400c510:	e0bfe717 	ldw	r2,-100(fp)
 400c514:	1885c83a 	sub	r2,r3,r2
 400c518:	040100f4 	movhi	r16,1027
 400c51c:	84262204 	addi	r16,r16,-26488
 400c520:	01400984 	movi	r5,38
 400c524:	1009883a 	mov	r4,r2
 400c528:	40118340 	call	4011834 <__mulsi3>
 400c52c:	1007883a 	mov	r3,r2
 400c530:	e0bfe917 	ldw	r2,-92(fp)
 400c534:	1885883a 	add	r2,r3,r2
 400c538:	1085883a 	add	r2,r2,r2
 400c53c:	1085883a 	add	r2,r2,r2
 400c540:	8085883a 	add	r2,r16,r2
 400c544:	00c00044 	movi	r3,1
 400c548:	10c00015 	stw	r3,0(r2)
								rowCount[i - 1 - row]++;
 400c54c:	e0bfdd17 	ldw	r2,-140(fp)
 400c550:	10ffffc4 	addi	r3,r2,-1
 400c554:	e0bfe717 	ldw	r2,-100(fp)
 400c558:	1885c83a 	sub	r2,r3,r2
 400c55c:	00c100f4 	movhi	r3,1027
 400c560:	18e60404 	addi	r3,r3,-26608
 400c564:	1089883a 	add	r4,r2,r2
 400c568:	2109883a 	add	r4,r4,r4
 400c56c:	1907883a 	add	r3,r3,r4
 400c570:	18c00017 	ldw	r3,0(r3)
 400c574:	19000044 	addi	r4,r3,1
 400c578:	00c100f4 	movhi	r3,1027
 400c57c:	18e60404 	addi	r3,r3,-26608
 400c580:	1085883a 	add	r2,r2,r2
 400c584:	1085883a 	add	r2,r2,r2
 400c588:	1885883a 	add	r2,r3,r2
 400c58c:	11000015 	stw	r4,0(r2)
				        		grid[i - 2 - row][j] = 1;
				        		rowCount[i - 2 - row]++;
							}


							for (int j = randomFirstStart; j < randomEnd; j++) {
 400c590:	e0bfe917 	ldw	r2,-92(fp)
 400c594:	10800044 	addi	r2,r2,1
 400c598:	e0bfe915 	stw	r2,-92(fp)
 400c59c:	e0ffe917 	ldw	r3,-92(fp)
 400c5a0:	e0bfda17 	ldw	r2,-152(fp)
 400c5a4:	18bfd816 	blt	r3,r2,400c508 <__alt_mem_onchip_memory2_0+0xfc007348>
					}
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomFirstEnd; j++) {
					if(grid[i -1][j] == 1){
						for(int row = 0; row < 2; row++){
 400c5a8:	e0bfe717 	ldw	r2,-100(fp)
 400c5ac:	10800044 	addi	r2,r2,1
 400c5b0:	e0bfe715 	stw	r2,-100(fp)
 400c5b4:	e0bfe717 	ldw	r2,-100(fp)
 400c5b8:	10800090 	cmplti	r2,r2,2
 400c5bc:	103fa41e 	bne	r2,zero,400c450 <__alt_mem_onchip_memory2_0+0xfc007290>
							for (int j = randomFirstStart; j < randomEnd; j++) {
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 - row]++;
							}
						}
						return;
 400c5c0:	0003dc06 	br	400d534 <dropZBlock+0x1684>
						}
						return;
					}
				}
			}else if(shapeLayout == 1){
				for (int j = randomStart; j < randomFirstEnd; j++) {
 400c5c4:	e0bfe617 	ldw	r2,-104(fp)
 400c5c8:	10800044 	addi	r2,r2,1
 400c5cc:	e0bfe615 	stw	r2,-104(fp)
 400c5d0:	e0ffe617 	ldw	r3,-104(fp)
 400c5d4:	e0bfd917 	ldw	r2,-156(fp)
 400c5d8:	18bf8b16 	blt	r3,r2,400c408 <__alt_mem_onchip_memory2_0+0xfc007248>

					}
				}


				for (int j = randomFirstStart; j < randomEnd; j++) {
 400c5dc:	e0bfd817 	ldw	r2,-160(fp)
 400c5e0:	e0bfea15 	stw	r2,-88(fp)
 400c5e4:	00007106 	br	400c7ac <dropZBlock+0x8fc>
					if(grid[i][j] == 1){
 400c5e8:	040100f4 	movhi	r16,1027
 400c5ec:	84262204 	addi	r16,r16,-26488
 400c5f0:	e0bfdd17 	ldw	r2,-140(fp)
 400c5f4:	01400984 	movi	r5,38
 400c5f8:	1009883a 	mov	r4,r2
 400c5fc:	40118340 	call	4011834 <__mulsi3>
 400c600:	1007883a 	mov	r3,r2
 400c604:	e0bfea17 	ldw	r2,-88(fp)
 400c608:	1885883a 	add	r2,r3,r2
 400c60c:	1085883a 	add	r2,r2,r2
 400c610:	1085883a 	add	r2,r2,r2
 400c614:	8085883a 	add	r2,r16,r2
 400c618:	10800017 	ldw	r2,0(r2)
 400c61c:	10800058 	cmpnei	r2,r2,1
 400c620:	10005f1e 	bne	r2,zero,400c7a0 <dropZBlock+0x8f0>
						for(int row = 0; row < 2; row++){
 400c624:	e03feb15 	stw	zero,-84(fp)
 400c628:	00005906 	br	400c790 <dropZBlock+0x8e0>
							for (int j = randomStart; j < randomFirstEnd; j++) {
 400c62c:	e0bfd717 	ldw	r2,-164(fp)
 400c630:	e0bfec15 	stw	r2,-80(fp)
 400c634:	00002506 	br	400c6cc <dropZBlock+0x81c>
								grid[i - 2 - row][j] = 1;
 400c638:	e0bfdd17 	ldw	r2,-140(fp)
 400c63c:	10ffff84 	addi	r3,r2,-2
 400c640:	e0bfeb17 	ldw	r2,-84(fp)
 400c644:	1885c83a 	sub	r2,r3,r2
 400c648:	040100f4 	movhi	r16,1027
 400c64c:	84262204 	addi	r16,r16,-26488
 400c650:	01400984 	movi	r5,38
 400c654:	1009883a 	mov	r4,r2
 400c658:	40118340 	call	4011834 <__mulsi3>
 400c65c:	1007883a 	mov	r3,r2
 400c660:	e0bfec17 	ldw	r2,-80(fp)
 400c664:	1885883a 	add	r2,r3,r2
 400c668:	1085883a 	add	r2,r2,r2
 400c66c:	1085883a 	add	r2,r2,r2
 400c670:	8085883a 	add	r2,r16,r2
 400c674:	00c00044 	movi	r3,1
 400c678:	10c00015 	stw	r3,0(r2)
								rowCount[i - 2 - row]++;
 400c67c:	e0bfdd17 	ldw	r2,-140(fp)
 400c680:	10ffff84 	addi	r3,r2,-2
 400c684:	e0bfeb17 	ldw	r2,-84(fp)
 400c688:	1885c83a 	sub	r2,r3,r2
 400c68c:	00c100f4 	movhi	r3,1027
 400c690:	18e60404 	addi	r3,r3,-26608
 400c694:	1089883a 	add	r4,r2,r2
 400c698:	2109883a 	add	r4,r4,r4
 400c69c:	1907883a 	add	r3,r3,r4
 400c6a0:	18c00017 	ldw	r3,0(r3)
 400c6a4:	19000044 	addi	r4,r3,1
 400c6a8:	00c100f4 	movhi	r3,1027
 400c6ac:	18e60404 	addi	r3,r3,-26608
 400c6b0:	1085883a 	add	r2,r2,r2
 400c6b4:	1085883a 	add	r2,r2,r2
 400c6b8:	1885883a 	add	r2,r3,r2
 400c6bc:	11000015 	stw	r4,0(r2)


				for (int j = randomFirstStart; j < randomEnd; j++) {
					if(grid[i][j] == 1){
						for(int row = 0; row < 2; row++){
							for (int j = randomStart; j < randomFirstEnd; j++) {
 400c6c0:	e0bfec17 	ldw	r2,-80(fp)
 400c6c4:	10800044 	addi	r2,r2,1
 400c6c8:	e0bfec15 	stw	r2,-80(fp)
 400c6cc:	e0ffec17 	ldw	r3,-80(fp)
 400c6d0:	e0bfd917 	ldw	r2,-156(fp)
 400c6d4:	18bfd816 	blt	r3,r2,400c638 <__alt_mem_onchip_memory2_0+0xfc007478>
								grid[i - 2 - row][j] = 1;
								rowCount[i - 2 - row]++;
							}


							for (int j = randomFirstStart; j < randomEnd; j++) {
 400c6d8:	e0bfd817 	ldw	r2,-160(fp)
 400c6dc:	e0bfed15 	stw	r2,-76(fp)
 400c6e0:	00002506 	br	400c778 <dropZBlock+0x8c8>
								grid[i - 1 - row][j] = 1;
 400c6e4:	e0bfdd17 	ldw	r2,-140(fp)
 400c6e8:	10ffffc4 	addi	r3,r2,-1
 400c6ec:	e0bfeb17 	ldw	r2,-84(fp)
 400c6f0:	1885c83a 	sub	r2,r3,r2
 400c6f4:	040100f4 	movhi	r16,1027
 400c6f8:	84262204 	addi	r16,r16,-26488
 400c6fc:	01400984 	movi	r5,38
 400c700:	1009883a 	mov	r4,r2
 400c704:	40118340 	call	4011834 <__mulsi3>
 400c708:	1007883a 	mov	r3,r2
 400c70c:	e0bfed17 	ldw	r2,-76(fp)
 400c710:	1885883a 	add	r2,r3,r2
 400c714:	1085883a 	add	r2,r2,r2
 400c718:	1085883a 	add	r2,r2,r2
 400c71c:	8085883a 	add	r2,r16,r2
 400c720:	00c00044 	movi	r3,1
 400c724:	10c00015 	stw	r3,0(r2)
								rowCount[i - 1 -row]++;
 400c728:	e0bfdd17 	ldw	r2,-140(fp)
 400c72c:	10ffffc4 	addi	r3,r2,-1
 400c730:	e0bfeb17 	ldw	r2,-84(fp)
 400c734:	1885c83a 	sub	r2,r3,r2
 400c738:	00c100f4 	movhi	r3,1027
 400c73c:	18e60404 	addi	r3,r3,-26608
 400c740:	1089883a 	add	r4,r2,r2
 400c744:	2109883a 	add	r4,r4,r4
 400c748:	1907883a 	add	r3,r3,r4
 400c74c:	18c00017 	ldw	r3,0(r3)
 400c750:	19000044 	addi	r4,r3,1
 400c754:	00c100f4 	movhi	r3,1027
 400c758:	18e60404 	addi	r3,r3,-26608
 400c75c:	1085883a 	add	r2,r2,r2
 400c760:	1085883a 	add	r2,r2,r2
 400c764:	1885883a 	add	r2,r3,r2
 400c768:	11000015 	stw	r4,0(r2)
								grid[i - 2 - row][j] = 1;
								rowCount[i - 2 - row]++;
							}


							for (int j = randomFirstStart; j < randomEnd; j++) {
 400c76c:	e0bfed17 	ldw	r2,-76(fp)
 400c770:	10800044 	addi	r2,r2,1
 400c774:	e0bfed15 	stw	r2,-76(fp)
 400c778:	e0ffed17 	ldw	r3,-76(fp)
 400c77c:	e0bfda17 	ldw	r2,-152(fp)
 400c780:	18bfd816 	blt	r3,r2,400c6e4 <__alt_mem_onchip_memory2_0+0xfc007524>
				}


				for (int j = randomFirstStart; j < randomEnd; j++) {
					if(grid[i][j] == 1){
						for(int row = 0; row < 2; row++){
 400c784:	e0bfeb17 	ldw	r2,-84(fp)
 400c788:	10800044 	addi	r2,r2,1
 400c78c:	e0bfeb15 	stw	r2,-84(fp)
 400c790:	e0bfeb17 	ldw	r2,-84(fp)
 400c794:	10800090 	cmplti	r2,r2,2
 400c798:	103fa41e 	bne	r2,zero,400c62c <__alt_mem_onchip_memory2_0+0xfc00746c>
							for (int j = randomFirstStart; j < randomEnd; j++) {
								grid[i - 1 - row][j] = 1;
								rowCount[i - 1 -row]++;
							}
						}
						return;
 400c79c:	00036506 	br	400d534 <dropZBlock+0x1684>

					}
				}


				for (int j = randomFirstStart; j < randomEnd; j++) {
 400c7a0:	e0bfea17 	ldw	r2,-88(fp)
 400c7a4:	10800044 	addi	r2,r2,1
 400c7a8:	e0bfea15 	stw	r2,-88(fp)
 400c7ac:	e0ffea17 	ldw	r3,-88(fp)
 400c7b0:	e0bfda17 	ldw	r2,-152(fp)
 400c7b4:	18bf8c16 	blt	r3,r2,400c5e8 <__alt_mem_onchip_memory2_0+0xfc007428>
						return;
					}
				}
			}

        	i--;
 400c7b8:	e0bfdd17 	ldw	r2,-140(fp)
 400c7bc:	10bfffc4 	addi	r2,r2,-1
 400c7c0:	e0bfdd15 	stw	r2,-140(fp)


        	if(shapeLayout == 0){
 400c7c4:	e0bfdc17 	ldw	r2,-144(fp)
 400c7c8:	1000491e 	bne	r2,zero,400c8f0 <dropZBlock+0xa40>
				for (int j = randomStart; j < randomEnd; j++) {
 400c7cc:	e0bfd717 	ldw	r2,-164(fp)
 400c7d0:	e0bfee15 	stw	r2,-72(fp)
 400c7d4:	00002006 	br	400c858 <dropZBlock+0x9a8>
	//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
 400c7d8:	d4200317 	ldw	r16,-32756(gp)
 400c7dc:	e0bfdd17 	ldw	r2,-140(fp)
 400c7e0:	10bfffc4 	addi	r2,r2,-1
 400c7e4:	01401404 	movi	r5,80
 400c7e8:	1009883a 	mov	r4,r2
 400c7ec:	40118340 	call	4011834 <__mulsi3>
 400c7f0:	1007883a 	mov	r3,r2
 400c7f4:	e0bfee17 	ldw	r2,-72(fp)
 400c7f8:	1885883a 	add	r2,r3,r2
 400c7fc:	1085883a 	add	r2,r2,r2
 400c800:	8085883a 	add	r2,r16,r2
 400c804:	00c00404 	movi	r3,16
 400c808:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400c80c:	d4600317 	ldw	r17,-32756(gp)
 400c810:	e0bfdd17 	ldw	r2,-140(fp)
 400c814:	10bfffc4 	addi	r2,r2,-1
 400c818:	01401404 	movi	r5,80
 400c81c:	1009883a 	mov	r4,r2
 400c820:	40118340 	call	4011834 <__mulsi3>
 400c824:	1007883a 	mov	r3,r2
 400c828:	e0bfee17 	ldw	r2,-72(fp)
 400c82c:	1885883a 	add	r2,r3,r2
 400c830:	1085883a 	add	r2,r2,r2
 400c834:	14000044 	addi	r16,r2,1
 400c838:	e13fee17 	ldw	r4,-72(fp)
 400c83c:	400d8600 	call	400d860 <check_col>
 400c840:	1007883a 	mov	r3,r2
 400c844:	8c05883a 	add	r2,r17,r16
 400c848:	10c00005 	stb	r3,0(r2)

        	i--;


        	if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
 400c84c:	e0bfee17 	ldw	r2,-72(fp)
 400c850:	10800044 	addi	r2,r2,1
 400c854:	e0bfee15 	stw	r2,-72(fp)
 400c858:	e0ffee17 	ldw	r3,-72(fp)
 400c85c:	e0bfda17 	ldw	r2,-152(fp)
 400c860:	18bfdd16 	blt	r3,r2,400c7d8 <__alt_mem_onchip_memory2_0+0xfc007618>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}


				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c864:	e0bfd817 	ldw	r2,-160(fp)
 400c868:	e0bfef15 	stw	r2,-68(fp)
 400c86c:	00001c06 	br	400c8e0 <dropZBlock+0xa30>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
 400c870:	d4200317 	ldw	r16,-32756(gp)
 400c874:	01401404 	movi	r5,80
 400c878:	e13fdd17 	ldw	r4,-140(fp)
 400c87c:	40118340 	call	4011834 <__mulsi3>
 400c880:	1007883a 	mov	r3,r2
 400c884:	e0bfef17 	ldw	r2,-68(fp)
 400c888:	1885883a 	add	r2,r3,r2
 400c88c:	1085883a 	add	r2,r2,r2
 400c890:	8085883a 	add	r2,r16,r2
 400c894:	00c00404 	movi	r3,16
 400c898:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 400c89c:	d4600317 	ldw	r17,-32756(gp)
 400c8a0:	01401404 	movi	r5,80
 400c8a4:	e13fdd17 	ldw	r4,-140(fp)
 400c8a8:	40118340 	call	4011834 <__mulsi3>
 400c8ac:	1007883a 	mov	r3,r2
 400c8b0:	e0bfef17 	ldw	r2,-68(fp)
 400c8b4:	1885883a 	add	r2,r3,r2
 400c8b8:	1085883a 	add	r2,r2,r2
 400c8bc:	14000044 	addi	r16,r2,1
 400c8c0:	e13fef17 	ldw	r4,-68(fp)
 400c8c4:	400d8600 	call	400d860 <check_col>
 400c8c8:	1007883a 	mov	r3,r2
 400c8cc:	8c05883a 	add	r2,r17,r16
 400c8d0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}


				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400c8d4:	e0bfef17 	ldw	r2,-68(fp)
 400c8d8:	10800044 	addi	r2,r2,1
 400c8dc:	e0bfef15 	stw	r2,-68(fp)
 400c8e0:	e0ffef17 	ldw	r3,-68(fp)
 400c8e4:	e0bfd917 	ldw	r2,-156(fp)
 400c8e8:	18bfe116 	blt	r3,r2,400c870 <__alt_mem_onchip_memory2_0+0xfc0076b0>
 400c8ec:	00005d06 	br	400ca64 <dropZBlock+0xbb4>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
 400c8f0:	e0bfdc17 	ldw	r2,-144(fp)
 400c8f4:	10800058 	cmpnei	r2,r2,1
 400c8f8:	10005a1e 	bne	r2,zero,400ca64 <dropZBlock+0xbb4>
				for(int row = 0; row < 2; row++){
 400c8fc:	e03ff015 	stw	zero,-64(fp)
 400c900:	00005506 	br	400ca58 <dropZBlock+0xba8>
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400c904:	e0bfd717 	ldw	r2,-164(fp)
 400c908:	e0bff115 	stw	r2,-60(fp)
 400c90c:	00002406 	br	400c9a0 <dropZBlock+0xaf0>
		//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0x10;
 400c910:	d4200317 	ldw	r16,-32756(gp)
 400c914:	e0bfdd17 	ldw	r2,-140(fp)
 400c918:	10ffffc4 	addi	r3,r2,-1
 400c91c:	e0bff017 	ldw	r2,-64(fp)
 400c920:	1885c83a 	sub	r2,r3,r2
 400c924:	01401404 	movi	r5,80
 400c928:	1009883a 	mov	r4,r2
 400c92c:	40118340 	call	4011834 <__mulsi3>
 400c930:	1007883a 	mov	r3,r2
 400c934:	e0bff117 	ldw	r2,-60(fp)
 400c938:	1885883a 	add	r2,r3,r2
 400c93c:	1085883a 	add	r2,r2,r2
 400c940:	8085883a 	add	r2,r16,r2
 400c944:	00c00404 	movi	r3,16
 400c948:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
 400c94c:	d4600317 	ldw	r17,-32756(gp)
 400c950:	e0bfdd17 	ldw	r2,-140(fp)
 400c954:	10ffffc4 	addi	r3,r2,-1
 400c958:	e0bff017 	ldw	r2,-64(fp)
 400c95c:	1885c83a 	sub	r2,r3,r2
 400c960:	01401404 	movi	r5,80
 400c964:	1009883a 	mov	r4,r2
 400c968:	40118340 	call	4011834 <__mulsi3>
 400c96c:	1007883a 	mov	r3,r2
 400c970:	e0bff117 	ldw	r2,-60(fp)
 400c974:	1885883a 	add	r2,r3,r2
 400c978:	1085883a 	add	r2,r2,r2
 400c97c:	14000044 	addi	r16,r2,1
 400c980:	e13ff117 	ldw	r4,-60(fp)
 400c984:	400d8600 	call	400d860 <check_col>
 400c988:	1007883a 	mov	r3,r2
 400c98c:	8c05883a 	add	r2,r17,r16
 400c990:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400c994:	e0bff117 	ldw	r2,-60(fp)
 400c998:	10800044 	addi	r2,r2,1
 400c99c:	e0bff115 	stw	r2,-60(fp)
 400c9a0:	e0fff117 	ldw	r3,-60(fp)
 400c9a4:	e0bfd917 	ldw	r2,-156(fp)
 400c9a8:	18bfd916 	blt	r3,r2,400c910 <__alt_mem_onchip_memory2_0+0xfc007750>
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
					}


					for (int j = randomFirstStart; j < randomEnd; j++) {
 400c9ac:	e0bfd817 	ldw	r2,-160(fp)
 400c9b0:	e0bff215 	stw	r2,-56(fp)
 400c9b4:	00002206 	br	400ca40 <dropZBlock+0xb90>
		//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0x10;
 400c9b8:	d4200317 	ldw	r16,-32756(gp)
 400c9bc:	e0ffdd17 	ldw	r3,-140(fp)
 400c9c0:	e0bff017 	ldw	r2,-64(fp)
 400c9c4:	1885c83a 	sub	r2,r3,r2
 400c9c8:	01401404 	movi	r5,80
 400c9cc:	1009883a 	mov	r4,r2
 400c9d0:	40118340 	call	4011834 <__mulsi3>
 400c9d4:	1007883a 	mov	r3,r2
 400c9d8:	e0bff217 	ldw	r2,-56(fp)
 400c9dc:	1885883a 	add	r2,r3,r2
 400c9e0:	1085883a 	add	r2,r2,r2
 400c9e4:	8085883a 	add	r2,r16,r2
 400c9e8:	00c00404 	movi	r3,16
 400c9ec:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 400c9f0:	d4600317 	ldw	r17,-32756(gp)
 400c9f4:	e0ffdd17 	ldw	r3,-140(fp)
 400c9f8:	e0bff017 	ldw	r2,-64(fp)
 400c9fc:	1885c83a 	sub	r2,r3,r2
 400ca00:	01401404 	movi	r5,80
 400ca04:	1009883a 	mov	r4,r2
 400ca08:	40118340 	call	4011834 <__mulsi3>
 400ca0c:	1007883a 	mov	r3,r2
 400ca10:	e0bff217 	ldw	r2,-56(fp)
 400ca14:	1885883a 	add	r2,r3,r2
 400ca18:	1085883a 	add	r2,r2,r2
 400ca1c:	14000044 	addi	r16,r2,1
 400ca20:	e13ff217 	ldw	r4,-56(fp)
 400ca24:	400d8600 	call	400d860 <check_col>
 400ca28:	1007883a 	mov	r3,r2
 400ca2c:	8c05883a 	add	r2,r17,r16
 400ca30:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0x10;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
					}


					for (int j = randomFirstStart; j < randomEnd; j++) {
 400ca34:	e0bff217 	ldw	r2,-56(fp)
 400ca38:	10800044 	addi	r2,r2,1
 400ca3c:	e0bff215 	stw	r2,-56(fp)
 400ca40:	e0fff217 	ldw	r3,-56(fp)
 400ca44:	e0bfda17 	ldw	r2,-152(fp)
 400ca48:	18bfdb16 	blt	r3,r2,400c9b8 <__alt_mem_onchip_memory2_0+0xfc0077f8>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0x10;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
 400ca4c:	e0bff017 	ldw	r2,-64(fp)
 400ca50:	10800044 	addi	r2,r2,1
 400ca54:	e0bff015 	stw	r2,-64(fp)
 400ca58:	e0bff017 	ldw	r2,-64(fp)
 400ca5c:	10800090 	cmplti	r2,r2,2
 400ca60:	103fa81e 	bne	r2,zero,400c904 <__alt_mem_onchip_memory2_0+0xfc007744>
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
					}
				}
			}

        	i++;
 400ca64:	e0bfdd17 	ldw	r2,-140(fp)
 400ca68:	10800044 	addi	r2,r2,1
 400ca6c:	e0bfdd15 	stw	r2,-140(fp)

        	keycode = keyboard_input();
 400ca70:	40007d00 	call	40007d0 <keyboard_input>
 400ca74:	e0bffd05 	stb	r2,-12(fp)
        	time = timer;
 400ca78:	d0a80117 	ldw	r2,-24572(gp)
 400ca7c:	e0bfdb15 	stw	r2,-148(fp)
			if(keycode == 0x51){
 400ca80:	e0bffd03 	ldbu	r2,-12(fp)
 400ca84:	10801458 	cmpnei	r2,r2,81
 400ca88:	1000131e 	bne	r2,zero,400cad8 <dropZBlock+0xc28>
				time = timer / 1.5;
 400ca8c:	d0a80117 	ldw	r2,-24572(gp)
 400ca90:	1009883a 	mov	r4,r2
 400ca94:	4013f180 	call	4013f18 <__floatsidf>
 400ca98:	1011883a 	mov	r8,r2
 400ca9c:	1813883a 	mov	r9,r3
 400caa0:	000d883a 	mov	r6,zero
 400caa4:	01cffe34 	movhi	r7,16376
 400caa8:	4009883a 	mov	r4,r8
 400caac:	480b883a 	mov	r5,r9
 400cab0:	40121080 	call	4012108 <__divdf3>
 400cab4:	1009883a 	mov	r4,r2
 400cab8:	180b883a 	mov	r5,r3
 400cabc:	2005883a 	mov	r2,r4
 400cac0:	2807883a 	mov	r3,r5
 400cac4:	1009883a 	mov	r4,r2
 400cac8:	180b883a 	mov	r5,r3
 400cacc:	4013e980 	call	4013e98 <__fixdfsi>
 400cad0:	e0bfdb15 	stw	r2,-148(fp)
 400cad4:	00015106 	br	400d01c <dropZBlock+0x116c>
			}
			else if(keycode == 0x4F){
 400cad8:	e0bffd03 	ldbu	r2,-12(fp)
 400cadc:	108013d8 	cmpnei	r2,r2,79
 400cae0:	1000781e 	bne	r2,zero,400ccc4 <dropZBlock+0xe14>
				if(randomEnd != 57){
 400cae4:	e0bfda17 	ldw	r2,-152(fp)
 400cae8:	10800e60 	cmpeqi	r2,r2,57
 400caec:	10014b1e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
					if(shapeLayout == 0 && grid[i - 1][randomFirstEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1){
 400caf0:	e0bfdc17 	ldw	r2,-144(fp)
 400caf4:	1000301e 	bne	r2,zero,400cbb8 <dropZBlock+0xd08>
 400caf8:	e0bfdd17 	ldw	r2,-140(fp)
 400cafc:	10ffffc4 	addi	r3,r2,-1
 400cb00:	e0bfd917 	ldw	r2,-156(fp)
 400cb04:	14400044 	addi	r17,r2,1
 400cb08:	040100f4 	movhi	r16,1027
 400cb0c:	84262204 	addi	r16,r16,-26488
 400cb10:	01400984 	movi	r5,38
 400cb14:	1809883a 	mov	r4,r3
 400cb18:	40118340 	call	4011834 <__mulsi3>
 400cb1c:	1445883a 	add	r2,r2,r17
 400cb20:	1085883a 	add	r2,r2,r2
 400cb24:	1085883a 	add	r2,r2,r2
 400cb28:	8085883a 	add	r2,r16,r2
 400cb2c:	10800017 	ldw	r2,0(r2)
 400cb30:	10800060 	cmpeqi	r2,r2,1
 400cb34:	1000201e 	bne	r2,zero,400cbb8 <dropZBlock+0xd08>
 400cb38:	e0bfdd17 	ldw	r2,-140(fp)
 400cb3c:	10ffff84 	addi	r3,r2,-2
 400cb40:	e0bfda17 	ldw	r2,-152(fp)
 400cb44:	14400044 	addi	r17,r2,1
 400cb48:	040100f4 	movhi	r16,1027
 400cb4c:	84262204 	addi	r16,r16,-26488
 400cb50:	01400984 	movi	r5,38
 400cb54:	1809883a 	mov	r4,r3
 400cb58:	40118340 	call	4011834 <__mulsi3>
 400cb5c:	1445883a 	add	r2,r2,r17
 400cb60:	1085883a 	add	r2,r2,r2
 400cb64:	1085883a 	add	r2,r2,r2
 400cb68:	8085883a 	add	r2,r16,r2
 400cb6c:	10800017 	ldw	r2,0(r2)
 400cb70:	10800060 	cmpeqi	r2,r2,1
 400cb74:	1000101e 	bne	r2,zero,400cbb8 <dropZBlock+0xd08>
						randomStart += 2;
 400cb78:	e0bfd717 	ldw	r2,-164(fp)
 400cb7c:	10800084 	addi	r2,r2,2
 400cb80:	e0bfd715 	stw	r2,-164(fp)
						randomEnd += 2;
 400cb84:	e0bfda17 	ldw	r2,-152(fp)
 400cb88:	10800084 	addi	r2,r2,2
 400cb8c:	e0bfda15 	stw	r2,-152(fp)
						randomFirstEnd += 2;
 400cb90:	e0bfd917 	ldw	r2,-156(fp)
 400cb94:	10800084 	addi	r2,r2,2
 400cb98:	e0bfd915 	stw	r2,-156(fp)
						randomFirstStart += 2;
 400cb9c:	e0bfd817 	ldw	r2,-160(fp)
 400cba0:	10800084 	addi	r2,r2,2
 400cba4:	e0bfd815 	stw	r2,-160(fp)
						i--;
 400cba8:	e0bfdd17 	ldw	r2,-140(fp)
 400cbac:	10bfffc4 	addi	r2,r2,-1
 400cbb0:	e0bfdd15 	stw	r2,-140(fp)
 400cbb4:	00011906 	br	400d01c <dropZBlock+0x116c>
					}else if(shapeLayout == 1
 400cbb8:	e0bfdc17 	ldw	r2,-144(fp)
 400cbbc:	10800058 	cmpnei	r2,r2,1
 400cbc0:	1001161e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
							&& grid[i - 3][randomFirstEnd + 1] != 1 && grid[i - 2][randomFirstEnd + 1] != 1 && grid[i - 1][randomEnd + 1] != 1){
 400cbc4:	e0bfdd17 	ldw	r2,-140(fp)
 400cbc8:	10ffff44 	addi	r3,r2,-3
 400cbcc:	e0bfd917 	ldw	r2,-156(fp)
 400cbd0:	14400044 	addi	r17,r2,1
 400cbd4:	040100f4 	movhi	r16,1027
 400cbd8:	84262204 	addi	r16,r16,-26488
 400cbdc:	01400984 	movi	r5,38
 400cbe0:	1809883a 	mov	r4,r3
 400cbe4:	40118340 	call	4011834 <__mulsi3>
 400cbe8:	1445883a 	add	r2,r2,r17
 400cbec:	1085883a 	add	r2,r2,r2
 400cbf0:	1085883a 	add	r2,r2,r2
 400cbf4:	8085883a 	add	r2,r16,r2
 400cbf8:	10800017 	ldw	r2,0(r2)
 400cbfc:	10800060 	cmpeqi	r2,r2,1
 400cc00:	1001061e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
 400cc04:	e0bfdd17 	ldw	r2,-140(fp)
 400cc08:	10ffff84 	addi	r3,r2,-2
 400cc0c:	e0bfd917 	ldw	r2,-156(fp)
 400cc10:	14400044 	addi	r17,r2,1
 400cc14:	040100f4 	movhi	r16,1027
 400cc18:	84262204 	addi	r16,r16,-26488
 400cc1c:	01400984 	movi	r5,38
 400cc20:	1809883a 	mov	r4,r3
 400cc24:	40118340 	call	4011834 <__mulsi3>
 400cc28:	1445883a 	add	r2,r2,r17
 400cc2c:	1085883a 	add	r2,r2,r2
 400cc30:	1085883a 	add	r2,r2,r2
 400cc34:	8085883a 	add	r2,r16,r2
 400cc38:	10800017 	ldw	r2,0(r2)
 400cc3c:	10800060 	cmpeqi	r2,r2,1
 400cc40:	1000f61e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
 400cc44:	e0bfdd17 	ldw	r2,-140(fp)
 400cc48:	10ffffc4 	addi	r3,r2,-1
 400cc4c:	e0bfda17 	ldw	r2,-152(fp)
 400cc50:	14400044 	addi	r17,r2,1
 400cc54:	040100f4 	movhi	r16,1027
 400cc58:	84262204 	addi	r16,r16,-26488
 400cc5c:	01400984 	movi	r5,38
 400cc60:	1809883a 	mov	r4,r3
 400cc64:	40118340 	call	4011834 <__mulsi3>
 400cc68:	1445883a 	add	r2,r2,r17
 400cc6c:	1085883a 	add	r2,r2,r2
 400cc70:	1085883a 	add	r2,r2,r2
 400cc74:	8085883a 	add	r2,r16,r2
 400cc78:	10800017 	ldw	r2,0(r2)
 400cc7c:	10800060 	cmpeqi	r2,r2,1
 400cc80:	1000e61e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
						randomStart += 2;
 400cc84:	e0bfd717 	ldw	r2,-164(fp)
 400cc88:	10800084 	addi	r2,r2,2
 400cc8c:	e0bfd715 	stw	r2,-164(fp)
						randomEnd += 2;
 400cc90:	e0bfda17 	ldw	r2,-152(fp)
 400cc94:	10800084 	addi	r2,r2,2
 400cc98:	e0bfda15 	stw	r2,-152(fp)
						randomFirstEnd += 2;
 400cc9c:	e0bfd917 	ldw	r2,-156(fp)
 400cca0:	10800084 	addi	r2,r2,2
 400cca4:	e0bfd915 	stw	r2,-156(fp)
						randomFirstStart += 2;
 400cca8:	e0bfd817 	ldw	r2,-160(fp)
 400ccac:	10800084 	addi	r2,r2,2
 400ccb0:	e0bfd815 	stw	r2,-160(fp)
						i--;
 400ccb4:	e0bfdd17 	ldw	r2,-140(fp)
 400ccb8:	10bfffc4 	addi	r2,r2,-1
 400ccbc:	e0bfdd15 	stw	r2,-140(fp)
 400ccc0:	0000d606 	br	400d01c <dropZBlock+0x116c>
					}

				}
			}
			else if(keycode == 0x50){
 400ccc4:	e0bffd03 	ldbu	r2,-12(fp)
 400ccc8:	10801418 	cmpnei	r2,r2,80
 400cccc:	10007b1e 	bne	r2,zero,400cebc <dropZBlock+0x100c>
				if(shapeLayout == 0 && grid[i - 1][randomFirstStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1 && randomStart > 21){
 400ccd0:	e0bfdc17 	ldw	r2,-144(fp)
 400ccd4:	1000331e 	bne	r2,zero,400cda4 <dropZBlock+0xef4>
 400ccd8:	e0bfdd17 	ldw	r2,-140(fp)
 400ccdc:	10ffffc4 	addi	r3,r2,-1
 400cce0:	e0bfd817 	ldw	r2,-160(fp)
 400cce4:	147fffc4 	addi	r17,r2,-1
 400cce8:	040100f4 	movhi	r16,1027
 400ccec:	84262204 	addi	r16,r16,-26488
 400ccf0:	01400984 	movi	r5,38
 400ccf4:	1809883a 	mov	r4,r3
 400ccf8:	40118340 	call	4011834 <__mulsi3>
 400ccfc:	1445883a 	add	r2,r2,r17
 400cd00:	1085883a 	add	r2,r2,r2
 400cd04:	1085883a 	add	r2,r2,r2
 400cd08:	8085883a 	add	r2,r16,r2
 400cd0c:	10800017 	ldw	r2,0(r2)
 400cd10:	10800060 	cmpeqi	r2,r2,1
 400cd14:	1000231e 	bne	r2,zero,400cda4 <dropZBlock+0xef4>
 400cd18:	e0bfdd17 	ldw	r2,-140(fp)
 400cd1c:	10ffff84 	addi	r3,r2,-2
 400cd20:	e0bfd717 	ldw	r2,-164(fp)
 400cd24:	147fffc4 	addi	r17,r2,-1
 400cd28:	040100f4 	movhi	r16,1027
 400cd2c:	84262204 	addi	r16,r16,-26488
 400cd30:	01400984 	movi	r5,38
 400cd34:	1809883a 	mov	r4,r3
 400cd38:	40118340 	call	4011834 <__mulsi3>
 400cd3c:	1445883a 	add	r2,r2,r17
 400cd40:	1085883a 	add	r2,r2,r2
 400cd44:	1085883a 	add	r2,r2,r2
 400cd48:	8085883a 	add	r2,r16,r2
 400cd4c:	10800017 	ldw	r2,0(r2)
 400cd50:	10800060 	cmpeqi	r2,r2,1
 400cd54:	1000131e 	bne	r2,zero,400cda4 <dropZBlock+0xef4>
 400cd58:	e0bfd717 	ldw	r2,-164(fp)
 400cd5c:	10800590 	cmplti	r2,r2,22
 400cd60:	1000101e 	bne	r2,zero,400cda4 <dropZBlock+0xef4>
					randomStart -= 2;
 400cd64:	e0bfd717 	ldw	r2,-164(fp)
 400cd68:	10bfff84 	addi	r2,r2,-2
 400cd6c:	e0bfd715 	stw	r2,-164(fp)
					randomEnd -= 2;
 400cd70:	e0bfda17 	ldw	r2,-152(fp)
 400cd74:	10bfff84 	addi	r2,r2,-2
 400cd78:	e0bfda15 	stw	r2,-152(fp)
					randomFirstEnd -= 2;
 400cd7c:	e0bfd917 	ldw	r2,-156(fp)
 400cd80:	10bfff84 	addi	r2,r2,-2
 400cd84:	e0bfd915 	stw	r2,-156(fp)
					randomFirstStart -= 2;
 400cd88:	e0bfd817 	ldw	r2,-160(fp)
 400cd8c:	10bfff84 	addi	r2,r2,-2
 400cd90:	e0bfd815 	stw	r2,-160(fp)
					i--;
 400cd94:	e0bfdd17 	ldw	r2,-140(fp)
 400cd98:	10bfffc4 	addi	r2,r2,-1
 400cd9c:	e0bfdd15 	stw	r2,-140(fp)
 400cda0:	00009e06 	br	400d01c <dropZBlock+0x116c>
				}else if(shapeLayout == 1
 400cda4:	e0bfdc17 	ldw	r2,-144(fp)
 400cda8:	10800058 	cmpnei	r2,r2,1
 400cdac:	10009b1e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
						&& grid[i - 3][randomStart - 1] != 1 && grid[i - 2][randomStart - 1] != 1 && grid[i - 1][randomFirstStart - 1] != 1 && randomStart > 23){
 400cdb0:	e0bfdd17 	ldw	r2,-140(fp)
 400cdb4:	10ffff44 	addi	r3,r2,-3
 400cdb8:	e0bfd717 	ldw	r2,-164(fp)
 400cdbc:	147fffc4 	addi	r17,r2,-1
 400cdc0:	040100f4 	movhi	r16,1027
 400cdc4:	84262204 	addi	r16,r16,-26488
 400cdc8:	01400984 	movi	r5,38
 400cdcc:	1809883a 	mov	r4,r3
 400cdd0:	40118340 	call	4011834 <__mulsi3>
 400cdd4:	1445883a 	add	r2,r2,r17
 400cdd8:	1085883a 	add	r2,r2,r2
 400cddc:	1085883a 	add	r2,r2,r2
 400cde0:	8085883a 	add	r2,r16,r2
 400cde4:	10800017 	ldw	r2,0(r2)
 400cde8:	10800060 	cmpeqi	r2,r2,1
 400cdec:	10008b1e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
 400cdf0:	e0bfdd17 	ldw	r2,-140(fp)
 400cdf4:	10ffff84 	addi	r3,r2,-2
 400cdf8:	e0bfd717 	ldw	r2,-164(fp)
 400cdfc:	147fffc4 	addi	r17,r2,-1
 400ce00:	040100f4 	movhi	r16,1027
 400ce04:	84262204 	addi	r16,r16,-26488
 400ce08:	01400984 	movi	r5,38
 400ce0c:	1809883a 	mov	r4,r3
 400ce10:	40118340 	call	4011834 <__mulsi3>
 400ce14:	1445883a 	add	r2,r2,r17
 400ce18:	1085883a 	add	r2,r2,r2
 400ce1c:	1085883a 	add	r2,r2,r2
 400ce20:	8085883a 	add	r2,r16,r2
 400ce24:	10800017 	ldw	r2,0(r2)
 400ce28:	10800060 	cmpeqi	r2,r2,1
 400ce2c:	10007b1e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
 400ce30:	e0bfdd17 	ldw	r2,-140(fp)
 400ce34:	10ffffc4 	addi	r3,r2,-1
 400ce38:	e0bfd817 	ldw	r2,-160(fp)
 400ce3c:	147fffc4 	addi	r17,r2,-1
 400ce40:	040100f4 	movhi	r16,1027
 400ce44:	84262204 	addi	r16,r16,-26488
 400ce48:	01400984 	movi	r5,38
 400ce4c:	1809883a 	mov	r4,r3
 400ce50:	40118340 	call	4011834 <__mulsi3>
 400ce54:	1445883a 	add	r2,r2,r17
 400ce58:	1085883a 	add	r2,r2,r2
 400ce5c:	1085883a 	add	r2,r2,r2
 400ce60:	8085883a 	add	r2,r16,r2
 400ce64:	10800017 	ldw	r2,0(r2)
 400ce68:	10800060 	cmpeqi	r2,r2,1
 400ce6c:	10006b1e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
 400ce70:	e0bfd717 	ldw	r2,-164(fp)
 400ce74:	10800610 	cmplti	r2,r2,24
 400ce78:	1000681e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
					randomStart -= 2;
 400ce7c:	e0bfd717 	ldw	r2,-164(fp)
 400ce80:	10bfff84 	addi	r2,r2,-2
 400ce84:	e0bfd715 	stw	r2,-164(fp)
					randomEnd -= 2;
 400ce88:	e0bfda17 	ldw	r2,-152(fp)
 400ce8c:	10bfff84 	addi	r2,r2,-2
 400ce90:	e0bfda15 	stw	r2,-152(fp)
					randomFirstEnd -= 2;
 400ce94:	e0bfd917 	ldw	r2,-156(fp)
 400ce98:	10bfff84 	addi	r2,r2,-2
 400ce9c:	e0bfd915 	stw	r2,-156(fp)
					randomFirstStart -= 2;
 400cea0:	e0bfd817 	ldw	r2,-160(fp)
 400cea4:	10bfff84 	addi	r2,r2,-2
 400cea8:	e0bfd815 	stw	r2,-160(fp)
					i--;
 400ceac:	e0bfdd17 	ldw	r2,-140(fp)
 400ceb0:	10bfffc4 	addi	r2,r2,-1
 400ceb4:	e0bfdd15 	stw	r2,-140(fp)
 400ceb8:	00005806 	br	400d01c <dropZBlock+0x116c>
				}
			}else if((keycode == 0x1D || keycode == 0x1B)){
 400cebc:	e0bffd03 	ldbu	r2,-12(fp)
 400cec0:	10800760 	cmpeqi	r2,r2,29
 400cec4:	1000031e 	bne	r2,zero,400ced4 <dropZBlock+0x1024>
 400cec8:	e0bffd03 	ldbu	r2,-12(fp)
 400cecc:	108006d8 	cmpnei	r2,r2,27
 400ced0:	10004e1e 	bne	r2,zero,400d00c <dropZBlock+0x115c>
				i--;
 400ced4:	e0bfdd17 	ldw	r2,-140(fp)
 400ced8:	10bfffc4 	addi	r2,r2,-1
 400cedc:	e0bfdd15 	stw	r2,-140(fp)
				if(shapeLayout == 0  && i > 2
 400cee0:	e0bfdc17 	ldw	r2,-144(fp)
 400cee4:	1000291e 	bne	r2,zero,400cf8c <dropZBlock+0x10dc>
 400cee8:	e0bfdd17 	ldw	r2,-140(fp)
 400ceec:	108000d0 	cmplti	r2,r2,3
 400cef0:	1000261e 	bne	r2,zero,400cf8c <dropZBlock+0x10dc>
						&& grid[i - 1][randomEnd + 1] != 1 && grid[i - 2][randomEnd + 1] != 1){
 400cef4:	e0bfdd17 	ldw	r2,-140(fp)
 400cef8:	10ffffc4 	addi	r3,r2,-1
 400cefc:	e0bfda17 	ldw	r2,-152(fp)
 400cf00:	14400044 	addi	r17,r2,1
 400cf04:	040100f4 	movhi	r16,1027
 400cf08:	84262204 	addi	r16,r16,-26488
 400cf0c:	01400984 	movi	r5,38
 400cf10:	1809883a 	mov	r4,r3
 400cf14:	40118340 	call	4011834 <__mulsi3>
 400cf18:	1445883a 	add	r2,r2,r17
 400cf1c:	1085883a 	add	r2,r2,r2
 400cf20:	1085883a 	add	r2,r2,r2
 400cf24:	8085883a 	add	r2,r16,r2
 400cf28:	10800017 	ldw	r2,0(r2)
 400cf2c:	10800060 	cmpeqi	r2,r2,1
 400cf30:	1000161e 	bne	r2,zero,400cf8c <dropZBlock+0x10dc>
 400cf34:	e0bfdd17 	ldw	r2,-140(fp)
 400cf38:	10ffff84 	addi	r3,r2,-2
 400cf3c:	e0bfda17 	ldw	r2,-152(fp)
 400cf40:	14400044 	addi	r17,r2,1
 400cf44:	040100f4 	movhi	r16,1027
 400cf48:	84262204 	addi	r16,r16,-26488
 400cf4c:	01400984 	movi	r5,38
 400cf50:	1809883a 	mov	r4,r3
 400cf54:	40118340 	call	4011834 <__mulsi3>
 400cf58:	1445883a 	add	r2,r2,r17
 400cf5c:	1085883a 	add	r2,r2,r2
 400cf60:	1085883a 	add	r2,r2,r2
 400cf64:	8085883a 	add	r2,r16,r2
 400cf68:	10800017 	ldw	r2,0(r2)
 400cf6c:	10800060 	cmpeqi	r2,r2,1
 400cf70:	1000061e 	bne	r2,zero,400cf8c <dropZBlock+0x10dc>
					shapeLayout = 1;
 400cf74:	00800044 	movi	r2,1
 400cf78:	e0bfdc15 	stw	r2,-144(fp)
					randomStart += 4;
 400cf7c:	e0bfd717 	ldw	r2,-164(fp)
 400cf80:	10800104 	addi	r2,r2,4
 400cf84:	e0bfd715 	stw	r2,-164(fp)
 400cf88:	00001f06 	br	400d008 <dropZBlock+0x1158>
				}else if(shapeLayout == 1
 400cf8c:	e0bfdc17 	ldw	r2,-144(fp)
 400cf90:	10800058 	cmpnei	r2,r2,1
 400cf94:	1000181e 	bne	r2,zero,400cff8 <dropZBlock+0x1148>
						&& grid[i - 1][randomFirstStart - 1] != 1 && randomStart > 23){
 400cf98:	e0bfdd17 	ldw	r2,-140(fp)
 400cf9c:	10ffffc4 	addi	r3,r2,-1
 400cfa0:	e0bfd817 	ldw	r2,-160(fp)
 400cfa4:	147fffc4 	addi	r17,r2,-1
 400cfa8:	040100f4 	movhi	r16,1027
 400cfac:	84262204 	addi	r16,r16,-26488
 400cfb0:	01400984 	movi	r5,38
 400cfb4:	1809883a 	mov	r4,r3
 400cfb8:	40118340 	call	4011834 <__mulsi3>
 400cfbc:	1445883a 	add	r2,r2,r17
 400cfc0:	1085883a 	add	r2,r2,r2
 400cfc4:	1085883a 	add	r2,r2,r2
 400cfc8:	8085883a 	add	r2,r16,r2
 400cfcc:	10800017 	ldw	r2,0(r2)
 400cfd0:	10800060 	cmpeqi	r2,r2,1
 400cfd4:	1000081e 	bne	r2,zero,400cff8 <dropZBlock+0x1148>
 400cfd8:	e0bfd717 	ldw	r2,-164(fp)
 400cfdc:	10800610 	cmplti	r2,r2,24
 400cfe0:	1000051e 	bne	r2,zero,400cff8 <dropZBlock+0x1148>
					shapeLayout = 0;
 400cfe4:	e03fdc15 	stw	zero,-144(fp)
					randomStart -= 4;
 400cfe8:	e0bfd717 	ldw	r2,-164(fp)
 400cfec:	10bfff04 	addi	r2,r2,-4
 400cff0:	e0bfd715 	stw	r2,-164(fp)
 400cff4:	00000406 	br	400d008 <dropZBlock+0x1158>
				}else{
					i++;
 400cff8:	e0bfdd17 	ldw	r2,-140(fp)
 400cffc:	10800044 	addi	r2,r2,1
 400d000:	e0bfdd15 	stw	r2,-140(fp)
					randomFirstStart -= 2;
					i--;
				}
			}else if((keycode == 0x1D || keycode == 0x1B)){
				i--;
				if(shapeLayout == 0  && i > 2
 400d004:	00000506 	br	400d01c <dropZBlock+0x116c>
 400d008:	00000406 	br	400d01c <dropZBlock+0x116c>
					shapeLayout = 0;
					randomStart -= 4;
				}else{
					i++;
				}
			}else if(keycode == 0x2C){
 400d00c:	e0bffd03 	ldbu	r2,-12(fp)
 400d010:	10800b18 	cmpnei	r2,r2,44
 400d014:	1000011e 	bne	r2,zero,400d01c <dropZBlock+0x116c>
				time = 0;
 400d018:	e03fdb15 	stw	zero,-148(fp)
			}

			if(shapeLayout == 0){
 400d01c:	e0bfdc17 	ldw	r2,-144(fp)
 400d020:	1000491e 	bne	r2,zero,400d148 <dropZBlock+0x1298>
				for (int j = randomStart; j < randomEnd; j++) {
 400d024:	e0bfd717 	ldw	r2,-164(fp)
 400d028:	e0bff315 	stw	r2,-52(fp)
 400d02c:	00002006 	br	400d0b0 <dropZBlock+0x1200>
	//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xA9;
 400d030:	d4200317 	ldw	r16,-32756(gp)
 400d034:	e0bfdd17 	ldw	r2,-140(fp)
 400d038:	10bfffc4 	addi	r2,r2,-1
 400d03c:	01401404 	movi	r5,80
 400d040:	1009883a 	mov	r4,r2
 400d044:	40118340 	call	4011834 <__mulsi3>
 400d048:	1007883a 	mov	r3,r2
 400d04c:	e0bff317 	ldw	r2,-52(fp)
 400d050:	1885883a 	add	r2,r3,r2
 400d054:	1085883a 	add	r2,r2,r2
 400d058:	8085883a 	add	r2,r16,r2
 400d05c:	00ffea44 	movi	r3,-87
 400d060:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
 400d064:	d4600317 	ldw	r17,-32756(gp)
 400d068:	e0bfdd17 	ldw	r2,-140(fp)
 400d06c:	10bfffc4 	addi	r2,r2,-1
 400d070:	01401404 	movi	r5,80
 400d074:	1009883a 	mov	r4,r2
 400d078:	40118340 	call	4011834 <__mulsi3>
 400d07c:	1007883a 	mov	r3,r2
 400d080:	e0bff317 	ldw	r2,-52(fp)
 400d084:	1885883a 	add	r2,r3,r2
 400d088:	1085883a 	add	r2,r2,r2
 400d08c:	14000044 	addi	r16,r2,1
 400d090:	e13ff317 	ldw	r4,-52(fp)
 400d094:	400d8600 	call	400d860 <check_col>
 400d098:	1007883a 	mov	r3,r2
 400d09c:	8c05883a 	add	r2,r17,r16
 400d0a0:	10c00005 	stb	r3,0(r2)
			}else if(keycode == 0x2C){
				time = 0;
			}

			if(shapeLayout == 0){
				for (int j = randomStart; j < randomEnd; j++) {
 400d0a4:	e0bff317 	ldw	r2,-52(fp)
 400d0a8:	10800044 	addi	r2,r2,1
 400d0ac:	e0bff315 	stw	r2,-52(fp)
 400d0b0:	e0fff317 	ldw	r3,-52(fp)
 400d0b4:	e0bfda17 	ldw	r2,-152(fp)
 400d0b8:	18bfdd16 	blt	r3,r2,400d030 <__alt_mem_onchip_memory2_0+0xfc007e70>
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xA9;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}


				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400d0bc:	e0bfd817 	ldw	r2,-160(fp)
 400d0c0:	e0bff415 	stw	r2,-48(fp)
 400d0c4:	00001c06 	br	400d138 <dropZBlock+0x1288>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xA9;
 400d0c8:	d4200317 	ldw	r16,-32756(gp)
 400d0cc:	01401404 	movi	r5,80
 400d0d0:	e13fdd17 	ldw	r4,-140(fp)
 400d0d4:	40118340 	call	4011834 <__mulsi3>
 400d0d8:	1007883a 	mov	r3,r2
 400d0dc:	e0bff417 	ldw	r2,-48(fp)
 400d0e0:	1885883a 	add	r2,r3,r2
 400d0e4:	1085883a 	add	r2,r2,r2
 400d0e8:	8085883a 	add	r2,r16,r2
 400d0ec:	00ffea44 	movi	r3,-87
 400d0f0:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
 400d0f4:	d4600317 	ldw	r17,-32756(gp)
 400d0f8:	01401404 	movi	r5,80
 400d0fc:	e13fdd17 	ldw	r4,-140(fp)
 400d100:	40118340 	call	4011834 <__mulsi3>
 400d104:	1007883a 	mov	r3,r2
 400d108:	e0bff417 	ldw	r2,-48(fp)
 400d10c:	1885883a 	add	r2,r3,r2
 400d110:	1085883a 	add	r2,r2,r2
 400d114:	14000044 	addi	r16,r2,1
 400d118:	e13ff417 	ldw	r4,-48(fp)
 400d11c:	400d8600 	call	400d860 <check_col>
 400d120:	1007883a 	mov	r3,r2
 400d124:	8c05883a 	add	r2,r17,r16
 400d128:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2] = 0xA9;
					vga_ctrl->VRAM[((i - 1) * 80 + j) * 2 + 1] = check_col(j);
				}


				for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400d12c:	e0bff417 	ldw	r2,-48(fp)
 400d130:	10800044 	addi	r2,r2,1
 400d134:	e0bff415 	stw	r2,-48(fp)
 400d138:	e0fff417 	ldw	r3,-48(fp)
 400d13c:	e0bfd917 	ldw	r2,-156(fp)
 400d140:	18bfe116 	blt	r3,r2,400d0c8 <__alt_mem_onchip_memory2_0+0xfc007f08>
 400d144:	00005d06 	br	400d2bc <dropZBlock+0x140c>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xA9;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
 400d148:	e0bfdc17 	ldw	r2,-144(fp)
 400d14c:	10800058 	cmpnei	r2,r2,1
 400d150:	10005a1e 	bne	r2,zero,400d2bc <dropZBlock+0x140c>
				for(int row = 0; row < 2; row++){
 400d154:	e03ff515 	stw	zero,-44(fp)
 400d158:	00005506 	br	400d2b0 <dropZBlock+0x1400>
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400d15c:	e0bfd717 	ldw	r2,-164(fp)
 400d160:	e0bff615 	stw	r2,-40(fp)
 400d164:	00002406 	br	400d1f8 <dropZBlock+0x1348>
		//        		vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0xA9;
 400d168:	d4200317 	ldw	r16,-32756(gp)
 400d16c:	e0bfdd17 	ldw	r2,-140(fp)
 400d170:	10ffffc4 	addi	r3,r2,-1
 400d174:	e0bff517 	ldw	r2,-44(fp)
 400d178:	1885c83a 	sub	r2,r3,r2
 400d17c:	01401404 	movi	r5,80
 400d180:	1009883a 	mov	r4,r2
 400d184:	40118340 	call	4011834 <__mulsi3>
 400d188:	1007883a 	mov	r3,r2
 400d18c:	e0bff617 	ldw	r2,-40(fp)
 400d190:	1885883a 	add	r2,r3,r2
 400d194:	1085883a 	add	r2,r2,r2
 400d198:	8085883a 	add	r2,r16,r2
 400d19c:	00ffea44 	movi	r3,-87
 400d1a0:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
 400d1a4:	d4600317 	ldw	r17,-32756(gp)
 400d1a8:	e0bfdd17 	ldw	r2,-140(fp)
 400d1ac:	10ffffc4 	addi	r3,r2,-1
 400d1b0:	e0bff517 	ldw	r2,-44(fp)
 400d1b4:	1885c83a 	sub	r2,r3,r2
 400d1b8:	01401404 	movi	r5,80
 400d1bc:	1009883a 	mov	r4,r2
 400d1c0:	40118340 	call	4011834 <__mulsi3>
 400d1c4:	1007883a 	mov	r3,r2
 400d1c8:	e0bff617 	ldw	r2,-40(fp)
 400d1cc:	1885883a 	add	r2,r3,r2
 400d1d0:	1085883a 	add	r2,r2,r2
 400d1d4:	14000044 	addi	r16,r2,1
 400d1d8:	e13ff617 	ldw	r4,-40(fp)
 400d1dc:	400d8600 	call	400d860 <check_col>
 400d1e0:	1007883a 	mov	r3,r2
 400d1e4:	8c05883a 	add	r2,r17,r16
 400d1e8:	10c00005 	stb	r3,0(r2)
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xA9;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
					for (int j = randomStart; j < randomFirstEnd; j++) {
 400d1ec:	e0bff617 	ldw	r2,-40(fp)
 400d1f0:	10800044 	addi	r2,r2,1
 400d1f4:	e0bff615 	stw	r2,-40(fp)
 400d1f8:	e0fff617 	ldw	r3,-40(fp)
 400d1fc:	e0bfd917 	ldw	r2,-156(fp)
 400d200:	18bfd916 	blt	r3,r2,400d168 <__alt_mem_onchip_memory2_0+0xfc007fa8>
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0xA9;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
					}


					for (int j = randomFirstStart; j < randomEnd; j++) {
 400d204:	e0bfd817 	ldw	r2,-160(fp)
 400d208:	e0bff715 	stw	r2,-36(fp)
 400d20c:	00002206 	br	400d298 <dropZBlock+0x13e8>
		//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2] = 0xA9;
 400d210:	d4200317 	ldw	r16,-32756(gp)
 400d214:	e0ffdd17 	ldw	r3,-140(fp)
 400d218:	e0bff517 	ldw	r2,-44(fp)
 400d21c:	1885c83a 	sub	r2,r3,r2
 400d220:	01401404 	movi	r5,80
 400d224:	1009883a 	mov	r4,r2
 400d228:	40118340 	call	4011834 <__mulsi3>
 400d22c:	1007883a 	mov	r3,r2
 400d230:	e0bff717 	ldw	r2,-36(fp)
 400d234:	1885883a 	add	r2,r3,r2
 400d238:	1085883a 	add	r2,r2,r2
 400d23c:	8085883a 	add	r2,r16,r2
 400d240:	00ffea44 	movi	r3,-87
 400d244:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - row) * 80 + j) * 2 + 1] = check_col(j);
 400d248:	d4600317 	ldw	r17,-32756(gp)
 400d24c:	e0ffdd17 	ldw	r3,-140(fp)
 400d250:	e0bff517 	ldw	r2,-44(fp)
 400d254:	1885c83a 	sub	r2,r3,r2
 400d258:	01401404 	movi	r5,80
 400d25c:	1009883a 	mov	r4,r2
 400d260:	40118340 	call	4011834 <__mulsi3>
 400d264:	1007883a 	mov	r3,r2
 400d268:	e0bff717 	ldw	r2,-36(fp)
 400d26c:	1885883a 	add	r2,r3,r2
 400d270:	1085883a 	add	r2,r2,r2
 400d274:	14000044 	addi	r16,r2,1
 400d278:	e13ff717 	ldw	r4,-36(fp)
 400d27c:	400d8600 	call	400d860 <check_col>
 400d280:	1007883a 	mov	r3,r2
 400d284:	8c05883a 	add	r2,r17,r16
 400d288:	10c00005 	stb	r3,0(r2)
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2] = 0xA9;
						vga_ctrl->VRAM[((i - 1 - row) * 80 + j) * 2 + 1] = check_col(j);
					}


					for (int j = randomFirstStart; j < randomEnd; j++) {
 400d28c:	e0bff717 	ldw	r2,-36(fp)
 400d290:	10800044 	addi	r2,r2,1
 400d294:	e0bff715 	stw	r2,-36(fp)
 400d298:	e0fff717 	ldw	r3,-36(fp)
 400d29c:	e0bfda17 	ldw	r2,-152(fp)
 400d2a0:	18bfdb16 	blt	r3,r2,400d210 <__alt_mem_onchip_memory2_0+0xfc008050>
	//				vga_ctrl->VRAM[((i + 1) * 80 + j) * 2] = 0xFF;
					vga_ctrl->VRAM[((i) * 80 + j) * 2] = 0xA9;
					vga_ctrl->VRAM[((i) * 80 + j) * 2 + 1] = check_col(j);
				}
			}else if(shapeLayout == 1){
				for(int row = 0; row < 2; row++){
 400d2a4:	e0bff517 	ldw	r2,-44(fp)
 400d2a8:	10800044 	addi	r2,r2,1
 400d2ac:	e0bff515 	stw	r2,-44(fp)
 400d2b0:	e0bff517 	ldw	r2,-44(fp)
 400d2b4:	10800090 	cmplti	r2,r2,2
 400d2b8:	103fa81e 	bne	r2,zero,400d15c <__alt_mem_onchip_memory2_0+0xfc007f9c>




        }
        count++;
 400d2bc:	e0bfd617 	ldw	r2,-168(fp)
 400d2c0:	10800044 	addi	r2,r2,1
 400d2c4:	e0bfd615 	stw	r2,-168(fp)
        usleep(time);
 400d2c8:	e0bfdb17 	ldw	r2,-148(fp)
 400d2cc:	1009883a 	mov	r4,r2
 400d2d0:	40230600 	call	4023060 <usleep>
	int randomFirstEnd = randomStart + 6;
	int randomEnd = randomStart + 4;
	int time = timer;
	int shapeLayout = 0;
	checkEndGame(randomStart, randomFirstEnd, 2);
    for (int i = 2; i < 30; i++) {
 400d2d4:	e0bfdd17 	ldw	r2,-140(fp)
 400d2d8:	10800044 	addi	r2,r2,1
 400d2dc:	e0bfdd15 	stw	r2,-140(fp)
 400d2e0:	e0bfdd17 	ldw	r2,-140(fp)
 400d2e4:	10800790 	cmplti	r2,r2,30
 400d2e8:	103b241e 	bne	r2,zero,400bf7c <__alt_mem_onchip_memory2_0+0xfc006dbc>

        }
        count++;
        usleep(time);
    }
    if(shapeLayout == 0){
 400d2ec:	e0bfdc17 	ldw	r2,-144(fp)
 400d2f0:	1000331e 	bne	r2,zero,400d3c0 <dropZBlock+0x1510>
		for (int j = randomStart; j < randomEnd; j++) {
 400d2f4:	e0bfd717 	ldw	r2,-164(fp)
 400d2f8:	e0bff815 	stw	r2,-32(fp)
 400d2fc:	00001306 	br	400d34c <dropZBlock+0x149c>
        	grid[28][j] = 1;
 400d300:	008100f4 	movhi	r2,1027
 400d304:	10a62204 	addi	r2,r2,-26488
 400d308:	e0fff817 	ldw	r3,-32(fp)
 400d30c:	18c10a04 	addi	r3,r3,1064
 400d310:	18c7883a 	add	r3,r3,r3
 400d314:	18c7883a 	add	r3,r3,r3
 400d318:	10c5883a 	add	r2,r2,r3
 400d31c:	00c00044 	movi	r3,1
 400d320:	10c00015 	stw	r3,0(r2)
        	rowCount[28]++;
 400d324:	008100f4 	movhi	r2,1027
 400d328:	10a60404 	addi	r2,r2,-26608
 400d32c:	10801c17 	ldw	r2,112(r2)
 400d330:	10c00044 	addi	r3,r2,1
 400d334:	008100f4 	movhi	r2,1027
 400d338:	10a60404 	addi	r2,r2,-26608
 400d33c:	10c01c15 	stw	r3,112(r2)
        }
        count++;
        usleep(time);
    }
    if(shapeLayout == 0){
		for (int j = randomStart; j < randomEnd; j++) {
 400d340:	e0bff817 	ldw	r2,-32(fp)
 400d344:	10800044 	addi	r2,r2,1
 400d348:	e0bff815 	stw	r2,-32(fp)
 400d34c:	e0fff817 	ldw	r3,-32(fp)
 400d350:	e0bfda17 	ldw	r2,-152(fp)
 400d354:	18bfea16 	blt	r3,r2,400d300 <__alt_mem_onchip_memory2_0+0xfc008140>
        	grid[28][j] = 1;
        	rowCount[28]++;
		}


		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400d358:	e0bfd817 	ldw	r2,-160(fp)
 400d35c:	e0bff915 	stw	r2,-28(fp)
 400d360:	00001306 	br	400d3b0 <dropZBlock+0x1500>
			grid[29][j] = 1;
 400d364:	008100f4 	movhi	r2,1027
 400d368:	10a62204 	addi	r2,r2,-26488
 400d36c:	e0fff917 	ldw	r3,-28(fp)
 400d370:	18c11384 	addi	r3,r3,1102
 400d374:	18c7883a 	add	r3,r3,r3
 400d378:	18c7883a 	add	r3,r3,r3
 400d37c:	10c5883a 	add	r2,r2,r3
 400d380:	00c00044 	movi	r3,1
 400d384:	10c00015 	stw	r3,0(r2)
			rowCount[29]++;
 400d388:	008100f4 	movhi	r2,1027
 400d38c:	10a60404 	addi	r2,r2,-26608
 400d390:	10801d17 	ldw	r2,116(r2)
 400d394:	10c00044 	addi	r3,r2,1
 400d398:	008100f4 	movhi	r2,1027
 400d39c:	10a60404 	addi	r2,r2,-26608
 400d3a0:	10c01d15 	stw	r3,116(r2)
        	grid[28][j] = 1;
        	rowCount[28]++;
		}


		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
 400d3a4:	e0bff917 	ldw	r2,-28(fp)
 400d3a8:	10800044 	addi	r2,r2,1
 400d3ac:	e0bff915 	stw	r2,-28(fp)
 400d3b0:	e0fff917 	ldw	r3,-28(fp)
 400d3b4:	e0bfd917 	ldw	r2,-156(fp)
 400d3b8:	18bfea16 	blt	r3,r2,400d364 <__alt_mem_onchip_memory2_0+0xfc0081a4>
 400d3bc:	00005d06 	br	400d534 <dropZBlock+0x1684>
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
 400d3c0:	e0bfdc17 	ldw	r2,-144(fp)
 400d3c4:	10800058 	cmpnei	r2,r2,1
 400d3c8:	10005a1e 	bne	r2,zero,400d534 <dropZBlock+0x1684>
		for(int row = 0; row < 2; row++){
 400d3cc:	e03ffa15 	stw	zero,-24(fp)
 400d3d0:	00005506 	br	400d528 <dropZBlock+0x1678>
			for (int j = randomStart; j < randomFirstEnd; j++) {
 400d3d4:	e0bfd717 	ldw	r2,-164(fp)
 400d3d8:	e0bffb15 	stw	r2,-20(fp)
 400d3dc:	00002306 	br	400d46c <dropZBlock+0x15bc>
				grid[28 - row][j] = 1;
 400d3e0:	00c00704 	movi	r3,28
 400d3e4:	e0bffa17 	ldw	r2,-24(fp)
 400d3e8:	1885c83a 	sub	r2,r3,r2
 400d3ec:	040100f4 	movhi	r16,1027
 400d3f0:	84262204 	addi	r16,r16,-26488
 400d3f4:	01400984 	movi	r5,38
 400d3f8:	1009883a 	mov	r4,r2
 400d3fc:	40118340 	call	4011834 <__mulsi3>
 400d400:	1007883a 	mov	r3,r2
 400d404:	e0bffb17 	ldw	r2,-20(fp)
 400d408:	1885883a 	add	r2,r3,r2
 400d40c:	1085883a 	add	r2,r2,r2
 400d410:	1085883a 	add	r2,r2,r2
 400d414:	8085883a 	add	r2,r16,r2
 400d418:	00c00044 	movi	r3,1
 400d41c:	10c00015 	stw	r3,0(r2)
				rowCount[28 - row]++;
 400d420:	00c00704 	movi	r3,28
 400d424:	e0bffa17 	ldw	r2,-24(fp)
 400d428:	1885c83a 	sub	r2,r3,r2
 400d42c:	00c100f4 	movhi	r3,1027
 400d430:	18e60404 	addi	r3,r3,-26608
 400d434:	1089883a 	add	r4,r2,r2
 400d438:	2109883a 	add	r4,r4,r4
 400d43c:	1907883a 	add	r3,r3,r4
 400d440:	18c00017 	ldw	r3,0(r3)
 400d444:	19000044 	addi	r4,r3,1
 400d448:	00c100f4 	movhi	r3,1027
 400d44c:	18e60404 	addi	r3,r3,-26608
 400d450:	1085883a 	add	r2,r2,r2
 400d454:	1085883a 	add	r2,r2,r2
 400d458:	1885883a 	add	r2,r3,r2
 400d45c:	11000015 	stw	r4,0(r2)
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
		for(int row = 0; row < 2; row++){
			for (int j = randomStart; j < randomFirstEnd; j++) {
 400d460:	e0bffb17 	ldw	r2,-20(fp)
 400d464:	10800044 	addi	r2,r2,1
 400d468:	e0bffb15 	stw	r2,-20(fp)
 400d46c:	e0fffb17 	ldw	r3,-20(fp)
 400d470:	e0bfd917 	ldw	r2,-156(fp)
 400d474:	18bfda16 	blt	r3,r2,400d3e0 <__alt_mem_onchip_memory2_0+0xfc008220>
				grid[28 - row][j] = 1;
				rowCount[28 - row]++;
			}


			for (int j = randomFirstStart; j < randomEnd; j++) {
 400d478:	e0bfd817 	ldw	r2,-160(fp)
 400d47c:	e0bffc15 	stw	r2,-16(fp)
 400d480:	00002306 	br	400d510 <dropZBlock+0x1660>
				grid[29 - row][j] = 1;
 400d484:	00c00744 	movi	r3,29
 400d488:	e0bffa17 	ldw	r2,-24(fp)
 400d48c:	1885c83a 	sub	r2,r3,r2
 400d490:	040100f4 	movhi	r16,1027
 400d494:	84262204 	addi	r16,r16,-26488
 400d498:	01400984 	movi	r5,38
 400d49c:	1009883a 	mov	r4,r2
 400d4a0:	40118340 	call	4011834 <__mulsi3>
 400d4a4:	1007883a 	mov	r3,r2
 400d4a8:	e0bffc17 	ldw	r2,-16(fp)
 400d4ac:	1885883a 	add	r2,r3,r2
 400d4b0:	1085883a 	add	r2,r2,r2
 400d4b4:	1085883a 	add	r2,r2,r2
 400d4b8:	8085883a 	add	r2,r16,r2
 400d4bc:	00c00044 	movi	r3,1
 400d4c0:	10c00015 	stw	r3,0(r2)
				rowCount[29 - row]++;
 400d4c4:	00c00744 	movi	r3,29
 400d4c8:	e0bffa17 	ldw	r2,-24(fp)
 400d4cc:	1885c83a 	sub	r2,r3,r2
 400d4d0:	00c100f4 	movhi	r3,1027
 400d4d4:	18e60404 	addi	r3,r3,-26608
 400d4d8:	1089883a 	add	r4,r2,r2
 400d4dc:	2109883a 	add	r4,r4,r4
 400d4e0:	1907883a 	add	r3,r3,r4
 400d4e4:	18c00017 	ldw	r3,0(r3)
 400d4e8:	19000044 	addi	r4,r3,1
 400d4ec:	00c100f4 	movhi	r3,1027
 400d4f0:	18e60404 	addi	r3,r3,-26608
 400d4f4:	1085883a 	add	r2,r2,r2
 400d4f8:	1085883a 	add	r2,r2,r2
 400d4fc:	1885883a 	add	r2,r3,r2
 400d500:	11000015 	stw	r4,0(r2)
				grid[28 - row][j] = 1;
				rowCount[28 - row]++;
			}


			for (int j = randomFirstStart; j < randomEnd; j++) {
 400d504:	e0bffc17 	ldw	r2,-16(fp)
 400d508:	10800044 	addi	r2,r2,1
 400d50c:	e0bffc15 	stw	r2,-16(fp)
 400d510:	e0fffc17 	ldw	r3,-16(fp)
 400d514:	e0bfda17 	ldw	r2,-152(fp)
 400d518:	18bfda16 	blt	r3,r2,400d484 <__alt_mem_onchip_memory2_0+0xfc0082c4>
		for (int j = randomFirstStart; j < randomFirstEnd; j++) {
			grid[29][j] = 1;
			rowCount[29]++;
		}
	}else if(shapeLayout == 1){
		for(int row = 0; row < 2; row++){
 400d51c:	e0bffa17 	ldw	r2,-24(fp)
 400d520:	10800044 	addi	r2,r2,1
 400d524:	e0bffa15 	stw	r2,-24(fp)
 400d528:	e0bffa17 	ldw	r2,-24(fp)
 400d52c:	10800090 	cmplti	r2,r2,2
 400d530:	103fa81e 	bne	r2,zero,400d3d4 <__alt_mem_onchip_memory2_0+0xfc008214>
				rowCount[29 - row]++;
			}
		}
	}

}
 400d534:	e6fffe04 	addi	sp,fp,-8
 400d538:	dfc00317 	ldw	ra,12(sp)
 400d53c:	df000217 	ldw	fp,8(sp)
 400d540:	dc400117 	ldw	r17,4(sp)
 400d544:	dc000017 	ldw	r16,0(sp)
 400d548:	dec00404 	addi	sp,sp,16
 400d54c:	f800283a 	ret

0400d550 <ContinueGame>:

void ContinueGame() {
 400d550:	defff904 	addi	sp,sp,-28
 400d554:	dfc00615 	stw	ra,24(sp)
 400d558:	df000515 	stw	fp,20(sp)
 400d55c:	df000504 	addi	fp,sp,20
	startGame();
 400d560:	400e22c0 	call	400e22c <startGame>
	create_background();
 400d564:	40012700 	call	4001270 <create_background>
	score = 0;
 400d568:	d0280215 	stw	zero,-24568(gp)
	int length = floor(log10(abs(score))) + 1;
 400d56c:	d0a80217 	ldw	r2,-24568(gp)
 400d570:	1000010e 	bge	r2,zero,400d578 <ContinueGame+0x28>
 400d574:	0085c83a 	sub	r2,zero,r2
 400d578:	1009883a 	mov	r4,r2
 400d57c:	4013f180 	call	4013f18 <__floatsidf>
 400d580:	100b883a 	mov	r5,r2
 400d584:	180d883a 	mov	r6,r3
 400d588:	2809883a 	mov	r4,r5
 400d58c:	300b883a 	mov	r5,r6
 400d590:	4010b700 	call	4010b70 <log10>
 400d594:	100b883a 	mov	r5,r2
 400d598:	180d883a 	mov	r6,r3
 400d59c:	2809883a 	mov	r4,r5
 400d5a0:	300b883a 	mov	r5,r6
 400d5a4:	40109840 	call	4010984 <floor>
 400d5a8:	1011883a 	mov	r8,r2
 400d5ac:	1813883a 	mov	r9,r3
 400d5b0:	000d883a 	mov	r6,zero
 400d5b4:	01cffc34 	movhi	r7,16368
 400d5b8:	4009883a 	mov	r4,r8
 400d5bc:	480b883a 	mov	r5,r9
 400d5c0:	401185c0 	call	401185c <__adddf3>
 400d5c4:	1009883a 	mov	r4,r2
 400d5c8:	180b883a 	mov	r5,r3
 400d5cc:	2005883a 	mov	r2,r4
 400d5d0:	2807883a 	mov	r3,r5
 400d5d4:	1009883a 	mov	r4,r2
 400d5d8:	180b883a 	mov	r5,r3
 400d5dc:	4013e980 	call	4013e98 <__fixdfsi>
 400d5e0:	e0bffe15 	stw	r2,-8(fp)
	printf("%d" ,length);
 400d5e4:	e17ffe17 	ldw	r5,-8(fp)
 400d5e8:	010100b4 	movhi	r4,1026
 400d5ec:	2114c904 	addi	r4,r4,21284
 400d5f0:	40140980 	call	4014098 <printf>
	int count = 0;
 400d5f4:	e03ffc15 	stw	zero,-16(fp)
	int waitCount = 10;
 400d5f8:	00800284 	movi	r2,10
 400d5fc:	e0bffd15 	stw	r2,-12(fp)

	if (highScore != 0) {
 400d600:	d0a80317 	ldw	r2,-24564(gp)
 400d604:	10000126 	beq	r2,zero,400d60c <ContinueGame+0xbc>
		updateHighScore();
 400d608:	400e7a40 	call	400e7a4 <updateHighScore>
	}

	textVGADrawColorText("Score",65, 10, 0xA9, 0x00);
 400d60c:	d8000015 	stw	zero,0(sp)
 400d610:	01c02a44 	movi	r7,169
 400d614:	01800284 	movi	r6,10
 400d618:	01401044 	movi	r5,65
 400d61c:	010100b4 	movhi	r4,1026
 400d620:	2114ca04 	addi	r4,r4,21288
 400d624:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("0",65,11, 0xA9, 0x00);
 400d628:	d8000015 	stw	zero,0(sp)
 400d62c:	01c02a44 	movi	r7,169
 400d630:	018002c4 	movi	r6,11
 400d634:	01401044 	movi	r5,65
 400d638:	010100b4 	movhi	r4,1026
 400d63c:	2114cc04 	addi	r4,r4,21296
 400d640:	4000d4c0 	call	4000d4c <textVGADrawColorText>


	textVGADrawColorText("Right Arrow = ", 1, 5, 0xA9, 0x00);
 400d644:	d8000015 	stw	zero,0(sp)
 400d648:	01c02a44 	movi	r7,169
 400d64c:	01800144 	movi	r6,5
 400d650:	01400044 	movi	r5,1
 400d654:	010100b4 	movhi	r4,1026
 400d658:	2114cd04 	addi	r4,r4,21300
 400d65c:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("move right", 1, 6, 0xA9, 0x00);
 400d660:	d8000015 	stw	zero,0(sp)
 400d664:	01c02a44 	movi	r7,169
 400d668:	01800184 	movi	r6,6
 400d66c:	01400044 	movi	r5,1
 400d670:	010100b4 	movhi	r4,1026
 400d674:	2114d104 	addi	r4,r4,21316
 400d678:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("Left Arrow = left", 1, 8, 0xA9, 0x00);
 400d67c:	d8000015 	stw	zero,0(sp)
 400d680:	01c02a44 	movi	r7,169
 400d684:	01800204 	movi	r6,8
 400d688:	01400044 	movi	r5,1
 400d68c:	010100b4 	movhi	r4,1026
 400d690:	2114d404 	addi	r4,r4,21328
 400d694:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("move left", 1, 9, 0xA9, 0x00);
 400d698:	d8000015 	stw	zero,0(sp)
 400d69c:	01c02a44 	movi	r7,169
 400d6a0:	01800244 	movi	r6,9
 400d6a4:	01400044 	movi	r5,1
 400d6a8:	010100b4 	movhi	r4,1026
 400d6ac:	2114d904 	addi	r4,r4,21348
 400d6b0:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("Down Arrow = ",1, 11, 0xA9, 0x00);
 400d6b4:	d8000015 	stw	zero,0(sp)
 400d6b8:	01c02a44 	movi	r7,169
 400d6bc:	018002c4 	movi	r6,11
 400d6c0:	01400044 	movi	r5,1
 400d6c4:	010100b4 	movhi	r4,1026
 400d6c8:	2114dc04 	addi	r4,r4,21360
 400d6cc:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("drop faster",1, 12, 0xA9, 0x00);
 400d6d0:	d8000015 	stw	zero,0(sp)
 400d6d4:	01c02a44 	movi	r7,169
 400d6d8:	01800304 	movi	r6,12
 400d6dc:	01400044 	movi	r5,1
 400d6e0:	010100b4 	movhi	r4,1026
 400d6e4:	2114e004 	addi	r4,r4,21376
 400d6e8:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("Z = rotate left",1, 14, 0xA9, 0x00);
 400d6ec:	d8000015 	stw	zero,0(sp)
 400d6f0:	01c02a44 	movi	r7,169
 400d6f4:	01800384 	movi	r6,14
 400d6f8:	01400044 	movi	r5,1
 400d6fc:	010100b4 	movhi	r4,1026
 400d700:	2114e304 	addi	r4,r4,21388
 400d704:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("X = rotate right",1, 15, 0xA9, 0x00);
 400d708:	d8000015 	stw	zero,0(sp)
 400d70c:	01c02a44 	movi	r7,169
 400d710:	018003c4 	movi	r6,15
 400d714:	01400044 	movi	r5,1
 400d718:	010100b4 	movhi	r4,1026
 400d71c:	2114e704 	addi	r4,r4,21404
 400d720:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("Have Fun!",1, 16, 0xA9, 0x00);
 400d724:	d8000015 	stw	zero,0(sp)
 400d728:	01c02a44 	movi	r7,169
 400d72c:	01800404 	movi	r6,16
 400d730:	01400044 	movi	r5,1
 400d734:	010100b4 	movhi	r4,1026
 400d738:	2114ec04 	addi	r4,r4,21424
 400d73c:	4000d4c0 	call	4000d4c <textVGADrawColorText>

	srand(time(0));
 400d740:	0009883a 	mov	r4,zero
 400d744:	401665c0 	call	401665c <time>
 400d748:	1009883a 	mov	r4,r2
 400d74c:	40141c80 	call	40141c8 <srand>
	while (1) {
		if(count == waitCount){
 400d750:	e0fffc17 	ldw	r3,-16(fp)
 400d754:	e0bffd17 	ldw	r2,-12(fp)
 400d758:	1880171e 	bne	r3,r2,400d7b8 <ContinueGame+0x268>
			waitCount += count;
 400d75c:	e0fffd17 	ldw	r3,-12(fp)
 400d760:	e0bffc17 	ldw	r2,-16(fp)
 400d764:	1885883a 	add	r2,r3,r2
 400d768:	e0bffd15 	stw	r2,-12(fp)
			count = 0;
 400d76c:	e03ffc15 	stw	zero,-16(fp)
			timer = timer/1.5;
 400d770:	d0a80117 	ldw	r2,-24572(gp)
 400d774:	1009883a 	mov	r4,r2
 400d778:	4013f180 	call	4013f18 <__floatsidf>
 400d77c:	1011883a 	mov	r8,r2
 400d780:	1813883a 	mov	r9,r3
 400d784:	000d883a 	mov	r6,zero
 400d788:	01cffe34 	movhi	r7,16376
 400d78c:	4009883a 	mov	r4,r8
 400d790:	480b883a 	mov	r5,r9
 400d794:	40121080 	call	4012108 <__divdf3>
 400d798:	1009883a 	mov	r4,r2
 400d79c:	180b883a 	mov	r5,r3
 400d7a0:	2005883a 	mov	r2,r4
 400d7a4:	2807883a 	mov	r3,r5
 400d7a8:	1009883a 	mov	r4,r2
 400d7ac:	180b883a 	mov	r5,r3
 400d7b0:	4013e980 	call	4013e98 <__fixdfsi>
 400d7b4:	d0a80115 	stw	r2,-24572(gp)
		}
		int randomNumber = rand()%7;
 400d7b8:	40141e00 	call	40141e0 <rand>
 400d7bc:	014001c4 	movi	r5,7
 400d7c0:	1009883a 	mov	r4,r2
 400d7c4:	40117040 	call	4011704 <__modsi3>
 400d7c8:	e0bfff15 	stw	r2,-4(fp)
//		int randomNumber = 5;
		switch (randomNumber) {
 400d7cc:	e0bfff17 	ldw	r2,-4(fp)
 400d7d0:	108001e8 	cmpgeui	r2,r2,7
 400d7d4:	10001c1e 	bne	r2,zero,400d848 <ContinueGame+0x2f8>
 400d7d8:	e0bfff17 	ldw	r2,-4(fp)
 400d7dc:	100690ba 	slli	r3,r2,2
 400d7e0:	00810074 	movhi	r2,1025
 400d7e4:	10b5fd04 	addi	r2,r2,-10252
 400d7e8:	1885883a 	add	r2,r3,r2
 400d7ec:	10800017 	ldw	r2,0(r2)
 400d7f0:	1000683a 	jmp	r2
 400d7f4:	0400d810 	cmplti	r16,zero,864
 400d7f8:	0400d818 	cmpnei	r16,zero,864
 400d7fc:	0400d820 	cmpeqi	r16,zero,864
 400d800:	0400d828 	cmpgeui	r16,zero,864
 400d804:	0400d830 	cmpltui	r16,zero,864
 400d808:	0400d838 	rdprs	r16,zero,864
 400d80c:	0400d840 	call	400d84 <__alt_mem_sdram-0x3bff27c>
			case 0:
				dropSquare();
 400d810:	400160c0 	call	400160c <dropSquare>
				break;
 400d814:	00000d06 	br	400d84c <ContinueGame+0x2fc>
			case 1:
				dropRectangle();
 400d818:	4001dc80 	call	4001dc8 <dropRectangle>
				break;
 400d81c:	00000b06 	br	400d84c <ContinueGame+0x2fc>
			case 2:
				dropJBlock();
 400d820:	4002ca40 	call	4002ca4 <dropJBlock>
				break;
 400d824:	00000906 	br	400d84c <ContinueGame+0x2fc>
			case 3:
				dropLBlock();
 400d828:	40055200 	call	4005520 <dropLBlock>
				break;
 400d82c:	00000706 	br	400d84c <ContinueGame+0x2fc>
			case 4:
				dropTBlock();
 400d830:	4007f580 	call	4007f58 <dropTBlock>
				break;
 400d834:	00000506 	br	400d84c <ContinueGame+0x2fc>
			case 5:
				dropZBlock();
 400d838:	400beb00 	call	400beb0 <dropZBlock>
				break;
 400d83c:	00000306 	br	400d84c <ContinueGame+0x2fc>
			case 6:
				dropSBlock();
 400d840:	400a7d80 	call	400a7d8 <dropSBlock>
				break;
 400d844:	00000106 	br	400d84c <ContinueGame+0x2fc>
			default:
				break;
 400d848:	0001883a 	nop
		}
		count++;
 400d84c:	e0bffc17 	ldw	r2,-16(fp)
 400d850:	10800044 	addi	r2,r2,1
 400d854:	e0bffc15 	stw	r2,-16(fp)
		check_rows();
 400d858:	400d8980 	call	400d898 <check_rows>
	}
 400d85c:	003fbc06 	br	400d750 <__alt_mem_onchip_memory2_0+0xfc008590>

0400d860 <check_col>:
}

char check_col(int col){
 400d860:	defffe04 	addi	sp,sp,-8
 400d864:	df000115 	stw	fp,4(sp)
 400d868:	df000104 	addi	fp,sp,4
 400d86c:	e13fff15 	stw	r4,-4(fp)
	if(col % 2 == 0){
 400d870:	e0bfff17 	ldw	r2,-4(fp)
 400d874:	1080004c 	andi	r2,r2,1
 400d878:	1000021e 	bne	r2,zero,400d884 <check_col+0x24>
		return ']';
 400d87c:	00801744 	movi	r2,93
 400d880:	00000106 	br	400d888 <check_col+0x28>
	}else{
		return '[';
 400d884:	008016c4 	movi	r2,91
	}
}
 400d888:	e037883a 	mov	sp,fp
 400d88c:	df000017 	ldw	fp,0(sp)
 400d890:	dec00104 	addi	sp,sp,4
 400d894:	f800283a 	ret

0400d898 <check_rows>:

void check_rows(){
 400d898:	defffd04 	addi	sp,sp,-12
 400d89c:	dfc00215 	stw	ra,8(sp)
 400d8a0:	df000115 	stw	fp,4(sp)
 400d8a4:	df000104 	addi	fp,sp,4
	rowCount[0] = 0;
 400d8a8:	008100f4 	movhi	r2,1027
 400d8ac:	10a60404 	addi	r2,r2,-26608
 400d8b0:	10000015 	stw	zero,0(r2)
	for(int i = 29; i > 0; i--){
 400d8b4:	00800744 	movi	r2,29
 400d8b8:	e0bfff15 	stw	r2,-4(fp)
 400d8bc:	00002206 	br	400d948 <check_rows+0xb0>
		printf("%d ", rowCount[i]);
 400d8c0:	008100f4 	movhi	r2,1027
 400d8c4:	10a60404 	addi	r2,r2,-26608
 400d8c8:	e0ffff17 	ldw	r3,-4(fp)
 400d8cc:	18c7883a 	add	r3,r3,r3
 400d8d0:	18c7883a 	add	r3,r3,r3
 400d8d4:	10c5883a 	add	r2,r2,r3
 400d8d8:	10800017 	ldw	r2,0(r2)
 400d8dc:	100b883a 	mov	r5,r2
 400d8e0:	010100b4 	movhi	r4,1026
 400d8e4:	2114ef04 	addi	r4,r4,21436
 400d8e8:	40140980 	call	4014098 <printf>
		if(rowCount[i] >= 38){
 400d8ec:	008100f4 	movhi	r2,1027
 400d8f0:	10a60404 	addi	r2,r2,-26608
 400d8f4:	e0ffff17 	ldw	r3,-4(fp)
 400d8f8:	18c7883a 	add	r3,r3,r3
 400d8fc:	18c7883a 	add	r3,r3,r3
 400d900:	10c5883a 	add	r2,r2,r3
 400d904:	10800017 	ldw	r2,0(r2)
 400d908:	10800990 	cmplti	r2,r2,38
 400d90c:	10000b1e 	bne	r2,zero,400d93c <check_rows+0xa4>
			clearRow(i);
 400d910:	e13fff17 	ldw	r4,-4(fp)
 400d914:	400d9680 	call	400d968 <clearRow>
			shiftGrid(i);
 400d918:	e13fff17 	ldw	r4,-4(fp)
 400d91c:	400db7c0 	call	400db7c <shiftGrid>
			score += 5;
 400d920:	d0a80217 	ldw	r2,-24568(gp)
 400d924:	10800144 	addi	r2,r2,5
 400d928:	d0a80215 	stw	r2,-24568(gp)
			updateScore();
 400d92c:	400ddb00 	call	400ddb0 <updateScore>
			i++;
 400d930:	e0bfff17 	ldw	r2,-4(fp)
 400d934:	10800044 	addi	r2,r2,1
 400d938:	e0bfff15 	stw	r2,-4(fp)
	}
}

void check_rows(){
	rowCount[0] = 0;
	for(int i = 29; i > 0; i--){
 400d93c:	e0bfff17 	ldw	r2,-4(fp)
 400d940:	10bfffc4 	addi	r2,r2,-1
 400d944:	e0bfff15 	stw	r2,-4(fp)
 400d948:	e0bfff17 	ldw	r2,-4(fp)
 400d94c:	00bfdc16 	blt	zero,r2,400d8c0 <__alt_mem_onchip_memory2_0+0xfc008700>
			score += 5;
			updateScore();
			i++;
		}
	}
}
 400d950:	0001883a 	nop
 400d954:	e037883a 	mov	sp,fp
 400d958:	dfc00117 	ldw	ra,4(sp)
 400d95c:	df000017 	ldw	fp,0(sp)
 400d960:	dec00204 	addi	sp,sp,8
 400d964:	f800283a 	ret

0400d968 <clearRow>:

void clearRow(int row){
 400d968:	defffa04 	addi	sp,sp,-24
 400d96c:	dfc00515 	stw	ra,20(sp)
 400d970:	df000415 	stw	fp,16(sp)
 400d974:	dc400315 	stw	r17,12(sp)
 400d978:	dc000215 	stw	r16,8(sp)
 400d97c:	df000404 	addi	fp,sp,16
 400d980:	e13ffd15 	stw	r4,-12(fp)
	rowCount[row] = rowCount[row - 1];
 400d984:	e0bffd17 	ldw	r2,-12(fp)
 400d988:	10ffffc4 	addi	r3,r2,-1
 400d98c:	008100f4 	movhi	r2,1027
 400d990:	10a60404 	addi	r2,r2,-26608
 400d994:	18c7883a 	add	r3,r3,r3
 400d998:	18c7883a 	add	r3,r3,r3
 400d99c:	10c5883a 	add	r2,r2,r3
 400d9a0:	11000017 	ldw	r4,0(r2)
 400d9a4:	008100f4 	movhi	r2,1027
 400d9a8:	10a60404 	addi	r2,r2,-26608
 400d9ac:	e0fffd17 	ldw	r3,-12(fp)
 400d9b0:	18c7883a 	add	r3,r3,r3
 400d9b4:	18c7883a 	add	r3,r3,r3
 400d9b8:	10c5883a 	add	r2,r2,r3
 400d9bc:	11000015 	stw	r4,0(r2)
	for(int j = 21; j < 59; j++){
 400d9c0:	00800544 	movi	r2,21
 400d9c4:	e0bffc15 	stw	r2,-16(fp)
 400d9c8:	00006106 	br	400db50 <clearRow+0x1e8>
		if(grid[row - 1][j] == 1){
 400d9cc:	e0bffd17 	ldw	r2,-12(fp)
 400d9d0:	10bfffc4 	addi	r2,r2,-1
 400d9d4:	040100f4 	movhi	r16,1027
 400d9d8:	84262204 	addi	r16,r16,-26488
 400d9dc:	01400984 	movi	r5,38
 400d9e0:	1009883a 	mov	r4,r2
 400d9e4:	40118340 	call	4011834 <__mulsi3>
 400d9e8:	1007883a 	mov	r3,r2
 400d9ec:	e0bffc17 	ldw	r2,-16(fp)
 400d9f0:	1885883a 	add	r2,r3,r2
 400d9f4:	1085883a 	add	r2,r2,r2
 400d9f8:	1085883a 	add	r2,r2,r2
 400d9fc:	8085883a 	add	r2,r16,r2
 400da00:	10800017 	ldw	r2,0(r2)
 400da04:	10800058 	cmpnei	r2,r2,1
 400da08:	10001a1e 	bne	r2,zero,400da74 <clearRow+0x10c>
			vga_ctrl->VRAM[((row * 80) + j) * 2] = 0xA9;
 400da0c:	d4200317 	ldw	r16,-32756(gp)
 400da10:	01401404 	movi	r5,80
 400da14:	e13ffd17 	ldw	r4,-12(fp)
 400da18:	40118340 	call	4011834 <__mulsi3>
 400da1c:	1007883a 	mov	r3,r2
 400da20:	e0bffc17 	ldw	r2,-16(fp)
 400da24:	1885883a 	add	r2,r3,r2
 400da28:	1085883a 	add	r2,r2,r2
 400da2c:	8085883a 	add	r2,r16,r2
 400da30:	00ffea44 	movi	r3,-87
 400da34:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[((row * 80) + j) * 2 + 1] = check_col(j);
 400da38:	d4600317 	ldw	r17,-32756(gp)
 400da3c:	01401404 	movi	r5,80
 400da40:	e13ffd17 	ldw	r4,-12(fp)
 400da44:	40118340 	call	4011834 <__mulsi3>
 400da48:	1007883a 	mov	r3,r2
 400da4c:	e0bffc17 	ldw	r2,-16(fp)
 400da50:	1885883a 	add	r2,r3,r2
 400da54:	1085883a 	add	r2,r2,r2
 400da58:	14000044 	addi	r16,r2,1
 400da5c:	e13ffc17 	ldw	r4,-16(fp)
 400da60:	400d8600 	call	400d860 <check_col>
 400da64:	1007883a 	mov	r3,r2
 400da68:	8c05883a 	add	r2,r17,r16
 400da6c:	10c00005 	stb	r3,0(r2)
 400da70:	00001906 	br	400dad8 <clearRow+0x170>
		}else{
			vga_ctrl->VRAM[((row * 80) + j) * 2] = 0x10;
 400da74:	d4200317 	ldw	r16,-32756(gp)
 400da78:	01401404 	movi	r5,80
 400da7c:	e13ffd17 	ldw	r4,-12(fp)
 400da80:	40118340 	call	4011834 <__mulsi3>
 400da84:	1007883a 	mov	r3,r2
 400da88:	e0bffc17 	ldw	r2,-16(fp)
 400da8c:	1885883a 	add	r2,r3,r2
 400da90:	1085883a 	add	r2,r2,r2
 400da94:	8085883a 	add	r2,r16,r2
 400da98:	00c00404 	movi	r3,16
 400da9c:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[((row * 80) + j) * 2 + 1] = check_col(j);
 400daa0:	d4600317 	ldw	r17,-32756(gp)
 400daa4:	01401404 	movi	r5,80
 400daa8:	e13ffd17 	ldw	r4,-12(fp)
 400daac:	40118340 	call	4011834 <__mulsi3>
 400dab0:	1007883a 	mov	r3,r2
 400dab4:	e0bffc17 	ldw	r2,-16(fp)
 400dab8:	1885883a 	add	r2,r3,r2
 400dabc:	1085883a 	add	r2,r2,r2
 400dac0:	14000044 	addi	r16,r2,1
 400dac4:	e13ffc17 	ldw	r4,-16(fp)
 400dac8:	400d8600 	call	400d860 <check_col>
 400dacc:	1007883a 	mov	r3,r2
 400dad0:	8c05883a 	add	r2,r17,r16
 400dad4:	10c00005 	stb	r3,0(r2)
		}
		grid[row][j] = grid[row - 1][j];
 400dad8:	e0bffd17 	ldw	r2,-12(fp)
 400dadc:	10bfffc4 	addi	r2,r2,-1
 400dae0:	040100f4 	movhi	r16,1027
 400dae4:	84262204 	addi	r16,r16,-26488
 400dae8:	01400984 	movi	r5,38
 400daec:	1009883a 	mov	r4,r2
 400daf0:	40118340 	call	4011834 <__mulsi3>
 400daf4:	1007883a 	mov	r3,r2
 400daf8:	e0bffc17 	ldw	r2,-16(fp)
 400dafc:	1885883a 	add	r2,r3,r2
 400db00:	1085883a 	add	r2,r2,r2
 400db04:	1085883a 	add	r2,r2,r2
 400db08:	8085883a 	add	r2,r16,r2
 400db0c:	14400017 	ldw	r17,0(r2)
 400db10:	040100f4 	movhi	r16,1027
 400db14:	84262204 	addi	r16,r16,-26488
 400db18:	e0bffd17 	ldw	r2,-12(fp)
 400db1c:	01400984 	movi	r5,38
 400db20:	1009883a 	mov	r4,r2
 400db24:	40118340 	call	4011834 <__mulsi3>
 400db28:	1007883a 	mov	r3,r2
 400db2c:	e0bffc17 	ldw	r2,-16(fp)
 400db30:	1885883a 	add	r2,r3,r2
 400db34:	1085883a 	add	r2,r2,r2
 400db38:	1085883a 	add	r2,r2,r2
 400db3c:	8085883a 	add	r2,r16,r2
 400db40:	14400015 	stw	r17,0(r2)
	}
}

void clearRow(int row){
	rowCount[row] = rowCount[row - 1];
	for(int j = 21; j < 59; j++){
 400db44:	e0bffc17 	ldw	r2,-16(fp)
 400db48:	10800044 	addi	r2,r2,1
 400db4c:	e0bffc15 	stw	r2,-16(fp)
 400db50:	e0bffc17 	ldw	r2,-16(fp)
 400db54:	10800ed0 	cmplti	r2,r2,59
 400db58:	103f9c1e 	bne	r2,zero,400d9cc <__alt_mem_onchip_memory2_0+0xfc00880c>
			vga_ctrl->VRAM[((row * 80) + j) * 2] = 0x10;
			vga_ctrl->VRAM[((row * 80) + j) * 2 + 1] = check_col(j);
		}
		grid[row][j] = grid[row - 1][j];
	}
}
 400db5c:	0001883a 	nop
 400db60:	e6fffe04 	addi	sp,fp,-8
 400db64:	dfc00317 	ldw	ra,12(sp)
 400db68:	df000217 	ldw	fp,8(sp)
 400db6c:	dc400117 	ldw	r17,4(sp)
 400db70:	dc000017 	ldw	r16,0(sp)
 400db74:	dec00404 	addi	sp,sp,16
 400db78:	f800283a 	ret

0400db7c <shiftGrid>:

void shiftGrid(int row){
 400db7c:	defff904 	addi	sp,sp,-28
 400db80:	dfc00615 	stw	ra,24(sp)
 400db84:	df000515 	stw	fp,20(sp)
 400db88:	dc400415 	stw	r17,16(sp)
 400db8c:	dc000315 	stw	r16,12(sp)
 400db90:	df000504 	addi	fp,sp,20
 400db94:	e13ffd15 	stw	r4,-12(fp)
	for(int i = row; i > 0; i--){
 400db98:	e0bffd17 	ldw	r2,-12(fp)
 400db9c:	e0bffb15 	stw	r2,-20(fp)
 400dba0:	00007906 	br	400dd88 <shiftGrid+0x20c>
		rowCount[i] = rowCount[i - 1];
 400dba4:	e0bffb17 	ldw	r2,-20(fp)
 400dba8:	10ffffc4 	addi	r3,r2,-1
 400dbac:	008100f4 	movhi	r2,1027
 400dbb0:	10a60404 	addi	r2,r2,-26608
 400dbb4:	18c7883a 	add	r3,r3,r3
 400dbb8:	18c7883a 	add	r3,r3,r3
 400dbbc:	10c5883a 	add	r2,r2,r3
 400dbc0:	11000017 	ldw	r4,0(r2)
 400dbc4:	008100f4 	movhi	r2,1027
 400dbc8:	10a60404 	addi	r2,r2,-26608
 400dbcc:	e0fffb17 	ldw	r3,-20(fp)
 400dbd0:	18c7883a 	add	r3,r3,r3
 400dbd4:	18c7883a 	add	r3,r3,r3
 400dbd8:	10c5883a 	add	r2,r2,r3
 400dbdc:	11000015 	stw	r4,0(r2)
		for(int j = 21; j < 59; j++){
 400dbe0:	00800544 	movi	r2,21
 400dbe4:	e0bffc15 	stw	r2,-16(fp)
 400dbe8:	00006106 	br	400dd70 <shiftGrid+0x1f4>
			if(grid[i - 1][j] == 1){
 400dbec:	e0bffb17 	ldw	r2,-20(fp)
 400dbf0:	10bfffc4 	addi	r2,r2,-1
 400dbf4:	040100f4 	movhi	r16,1027
 400dbf8:	84262204 	addi	r16,r16,-26488
 400dbfc:	01400984 	movi	r5,38
 400dc00:	1009883a 	mov	r4,r2
 400dc04:	40118340 	call	4011834 <__mulsi3>
 400dc08:	1007883a 	mov	r3,r2
 400dc0c:	e0bffc17 	ldw	r2,-16(fp)
 400dc10:	1885883a 	add	r2,r3,r2
 400dc14:	1085883a 	add	r2,r2,r2
 400dc18:	1085883a 	add	r2,r2,r2
 400dc1c:	8085883a 	add	r2,r16,r2
 400dc20:	10800017 	ldw	r2,0(r2)
 400dc24:	10800058 	cmpnei	r2,r2,1
 400dc28:	10001a1e 	bne	r2,zero,400dc94 <shiftGrid+0x118>
				vga_ctrl->VRAM[((i * 80) + j) * 2] = 0xA9;
 400dc2c:	d4200317 	ldw	r16,-32756(gp)
 400dc30:	01401404 	movi	r5,80
 400dc34:	e13ffb17 	ldw	r4,-20(fp)
 400dc38:	40118340 	call	4011834 <__mulsi3>
 400dc3c:	1007883a 	mov	r3,r2
 400dc40:	e0bffc17 	ldw	r2,-16(fp)
 400dc44:	1885883a 	add	r2,r3,r2
 400dc48:	1085883a 	add	r2,r2,r2
 400dc4c:	8085883a 	add	r2,r16,r2
 400dc50:	00ffea44 	movi	r3,-87
 400dc54:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[((i * 80) + j) * 2 + 1] = check_col(j);
 400dc58:	d4600317 	ldw	r17,-32756(gp)
 400dc5c:	01401404 	movi	r5,80
 400dc60:	e13ffb17 	ldw	r4,-20(fp)
 400dc64:	40118340 	call	4011834 <__mulsi3>
 400dc68:	1007883a 	mov	r3,r2
 400dc6c:	e0bffc17 	ldw	r2,-16(fp)
 400dc70:	1885883a 	add	r2,r3,r2
 400dc74:	1085883a 	add	r2,r2,r2
 400dc78:	14000044 	addi	r16,r2,1
 400dc7c:	e13ffc17 	ldw	r4,-16(fp)
 400dc80:	400d8600 	call	400d860 <check_col>
 400dc84:	1007883a 	mov	r3,r2
 400dc88:	8c05883a 	add	r2,r17,r16
 400dc8c:	10c00005 	stb	r3,0(r2)
 400dc90:	00001906 	br	400dcf8 <shiftGrid+0x17c>
			}else{
				vga_ctrl->VRAM[((i * 80) + j) * 2] = 0x10;
 400dc94:	d4200317 	ldw	r16,-32756(gp)
 400dc98:	01401404 	movi	r5,80
 400dc9c:	e13ffb17 	ldw	r4,-20(fp)
 400dca0:	40118340 	call	4011834 <__mulsi3>
 400dca4:	1007883a 	mov	r3,r2
 400dca8:	e0bffc17 	ldw	r2,-16(fp)
 400dcac:	1885883a 	add	r2,r3,r2
 400dcb0:	1085883a 	add	r2,r2,r2
 400dcb4:	8085883a 	add	r2,r16,r2
 400dcb8:	00c00404 	movi	r3,16
 400dcbc:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[((i * 80) + j) * 2 + 1] = check_col(j);
 400dcc0:	d4600317 	ldw	r17,-32756(gp)
 400dcc4:	01401404 	movi	r5,80
 400dcc8:	e13ffb17 	ldw	r4,-20(fp)
 400dccc:	40118340 	call	4011834 <__mulsi3>
 400dcd0:	1007883a 	mov	r3,r2
 400dcd4:	e0bffc17 	ldw	r2,-16(fp)
 400dcd8:	1885883a 	add	r2,r3,r2
 400dcdc:	1085883a 	add	r2,r2,r2
 400dce0:	14000044 	addi	r16,r2,1
 400dce4:	e13ffc17 	ldw	r4,-16(fp)
 400dce8:	400d8600 	call	400d860 <check_col>
 400dcec:	1007883a 	mov	r3,r2
 400dcf0:	8c05883a 	add	r2,r17,r16
 400dcf4:	10c00005 	stb	r3,0(r2)
			}

			grid[i][j] = grid[i - 1][j];
 400dcf8:	e0bffb17 	ldw	r2,-20(fp)
 400dcfc:	10bfffc4 	addi	r2,r2,-1
 400dd00:	040100f4 	movhi	r16,1027
 400dd04:	84262204 	addi	r16,r16,-26488
 400dd08:	01400984 	movi	r5,38
 400dd0c:	1009883a 	mov	r4,r2
 400dd10:	40118340 	call	4011834 <__mulsi3>
 400dd14:	1007883a 	mov	r3,r2
 400dd18:	e0bffc17 	ldw	r2,-16(fp)
 400dd1c:	1885883a 	add	r2,r3,r2
 400dd20:	1085883a 	add	r2,r2,r2
 400dd24:	1085883a 	add	r2,r2,r2
 400dd28:	8085883a 	add	r2,r16,r2
 400dd2c:	14400017 	ldw	r17,0(r2)
 400dd30:	040100f4 	movhi	r16,1027
 400dd34:	84262204 	addi	r16,r16,-26488
 400dd38:	e0bffb17 	ldw	r2,-20(fp)
 400dd3c:	01400984 	movi	r5,38
 400dd40:	1009883a 	mov	r4,r2
 400dd44:	40118340 	call	4011834 <__mulsi3>
 400dd48:	1007883a 	mov	r3,r2
 400dd4c:	e0bffc17 	ldw	r2,-16(fp)
 400dd50:	1885883a 	add	r2,r3,r2
 400dd54:	1085883a 	add	r2,r2,r2
 400dd58:	1085883a 	add	r2,r2,r2
 400dd5c:	8085883a 	add	r2,r16,r2
 400dd60:	14400015 	stw	r17,0(r2)
}

void shiftGrid(int row){
	for(int i = row; i > 0; i--){
		rowCount[i] = rowCount[i - 1];
		for(int j = 21; j < 59; j++){
 400dd64:	e0bffc17 	ldw	r2,-16(fp)
 400dd68:	10800044 	addi	r2,r2,1
 400dd6c:	e0bffc15 	stw	r2,-16(fp)
 400dd70:	e0bffc17 	ldw	r2,-16(fp)
 400dd74:	10800ed0 	cmplti	r2,r2,59
 400dd78:	103f9c1e 	bne	r2,zero,400dbec <__alt_mem_onchip_memory2_0+0xfc008a2c>
		grid[row][j] = grid[row - 1][j];
	}
}

void shiftGrid(int row){
	for(int i = row; i > 0; i--){
 400dd7c:	e0bffb17 	ldw	r2,-20(fp)
 400dd80:	10bfffc4 	addi	r2,r2,-1
 400dd84:	e0bffb15 	stw	r2,-20(fp)
 400dd88:	e0bffb17 	ldw	r2,-20(fp)
 400dd8c:	00bf8516 	blt	zero,r2,400dba4 <__alt_mem_onchip_memory2_0+0xfc0089e4>
			}

			grid[i][j] = grid[i - 1][j];
		}
	}
}
 400dd90:	0001883a 	nop
 400dd94:	e6fffe04 	addi	sp,fp,-8
 400dd98:	dfc00317 	ldw	ra,12(sp)
 400dd9c:	df000217 	ldw	fp,8(sp)
 400dda0:	dc400117 	ldw	r17,4(sp)
 400dda4:	dc000017 	ldw	r16,0(sp)
 400dda8:	dec00404 	addi	sp,sp,16
 400ddac:	f800283a 	ret

0400ddb0 <updateScore>:

void updateScore(){
 400ddb0:	deffed04 	addi	sp,sp,-76
 400ddb4:	dfc01215 	stw	ra,72(sp)
 400ddb8:	df001115 	stw	fp,68(sp)
 400ddbc:	ddc01015 	stw	r23,64(sp)
 400ddc0:	dd800f15 	stw	r22,60(sp)
 400ddc4:	dd400e15 	stw	r21,56(sp)
 400ddc8:	dd000d15 	stw	r20,52(sp)
 400ddcc:	dcc00c15 	stw	r19,48(sp)
 400ddd0:	dc800b15 	stw	r18,44(sp)
 400ddd4:	dc400a15 	stw	r17,40(sp)
 400ddd8:	dc000915 	stw	r16,36(sp)
 400dddc:	df001104 	addi	fp,sp,68
 400dde0:	d805883a 	mov	r2,sp
 400dde4:	e0bff715 	stw	r2,-36(fp)

	int length = floor(log10(abs(score))) + 1;
 400dde8:	d0a80217 	ldw	r2,-24568(gp)
 400ddec:	1000010e 	bge	r2,zero,400ddf4 <updateScore+0x44>
 400ddf0:	0085c83a 	sub	r2,zero,r2
 400ddf4:	1009883a 	mov	r4,r2
 400ddf8:	4013f180 	call	4013f18 <__floatsidf>
 400ddfc:	100b883a 	mov	r5,r2
 400de00:	180d883a 	mov	r6,r3
 400de04:	2809883a 	mov	r4,r5
 400de08:	300b883a 	mov	r5,r6
 400de0c:	4010b700 	call	4010b70 <log10>
 400de10:	100b883a 	mov	r5,r2
 400de14:	180d883a 	mov	r6,r3
 400de18:	2809883a 	mov	r4,r5
 400de1c:	300b883a 	mov	r5,r6
 400de20:	40109840 	call	4010984 <floor>
 400de24:	1011883a 	mov	r8,r2
 400de28:	1813883a 	mov	r9,r3
 400de2c:	000d883a 	mov	r6,zero
 400de30:	01cffc34 	movhi	r7,16368
 400de34:	4009883a 	mov	r4,r8
 400de38:	480b883a 	mov	r5,r9
 400de3c:	401185c0 	call	401185c <__adddf3>
 400de40:	1009883a 	mov	r4,r2
 400de44:	180b883a 	mov	r5,r3
 400de48:	2005883a 	mov	r2,r4
 400de4c:	2807883a 	mov	r3,r5
 400de50:	1009883a 	mov	r4,r2
 400de54:	180b883a 	mov	r5,r3
 400de58:	4013e980 	call	4013e98 <__fixdfsi>
 400de5c:	e0bff215 	stw	r2,-56(fp)
	int tempScore = score;
 400de60:	d0a80217 	ldw	r2,-24568(gp)
 400de64:	e0bff015 	stw	r2,-64(fp)
	char scoreToPrint[length + 1];
 400de68:	e0bff217 	ldw	r2,-56(fp)
 400de6c:	10800044 	addi	r2,r2,1
 400de70:	10ffffc4 	addi	r3,r2,-1
 400de74:	e0fff315 	stw	r3,-52(fp)
 400de78:	1007883a 	mov	r3,r2
 400de7c:	182d883a 	mov	r22,r3
 400de80:	002f883a 	mov	r23,zero
 400de84:	b006d77a 	srli	r3,r22,29
 400de88:	b82690fa 	slli	r19,r23,3
 400de8c:	1ce6b03a 	or	r19,r3,r19
 400de90:	b02490fa 	slli	r18,r22,3
 400de94:	1007883a 	mov	r3,r2
 400de98:	1829883a 	mov	r20,r3
 400de9c:	002b883a 	mov	r21,zero
 400dea0:	a006d77a 	srli	r3,r20,29
 400dea4:	a82290fa 	slli	r17,r21,3
 400dea8:	1c62b03a 	or	r17,r3,r17
 400deac:	a02090fa 	slli	r16,r20,3
 400deb0:	108000c4 	addi	r2,r2,3
 400deb4:	1004d0ba 	srli	r2,r2,2
 400deb8:	1085883a 	add	r2,r2,r2
 400debc:	1085883a 	add	r2,r2,r2
 400dec0:	d8b7c83a 	sub	sp,sp,r2
 400dec4:	d8800104 	addi	r2,sp,4
 400dec8:	1005883a 	mov	r2,r2
 400decc:	e0bff415 	stw	r2,-48(fp)
	int index = length;
 400ded0:	e0bff217 	ldw	r2,-56(fp)
 400ded4:	e0bff115 	stw	r2,-60(fp)
	scoreToPrint[length] = '\0';
 400ded8:	e0fff417 	ldw	r3,-48(fp)
 400dedc:	e0bff217 	ldw	r2,-56(fp)
 400dee0:	1885883a 	add	r2,r3,r2
 400dee4:	10000005 	stb	zero,0(r2)
	index-=1;
 400dee8:	e0bff117 	ldw	r2,-60(fp)
 400deec:	10bfffc4 	addi	r2,r2,-1
 400def0:	e0bff115 	stw	r2,-60(fp)

	while (tempScore > 0) {
 400def4:	00001506 	br	400df4c <updateScore+0x19c>
		int digit = tempScore % 10;
 400def8:	e0bff017 	ldw	r2,-64(fp)
 400defc:	01400284 	movi	r5,10
 400df00:	1009883a 	mov	r4,r2
 400df04:	40117040 	call	4011704 <__modsi3>
 400df08:	e0bff515 	stw	r2,-44(fp)
		char c = digit + '0';
 400df0c:	e0bff517 	ldw	r2,-44(fp)
 400df10:	10800c04 	addi	r2,r2,48
 400df14:	e0bff605 	stb	r2,-40(fp)
		scoreToPrint[index] = c;
 400df18:	e0fff417 	ldw	r3,-48(fp)
 400df1c:	e0bff117 	ldw	r2,-60(fp)
 400df20:	1885883a 	add	r2,r3,r2
 400df24:	e0fff603 	ldbu	r3,-40(fp)
 400df28:	10c00005 	stb	r3,0(r2)
		index-=1;
 400df2c:	e0bff117 	ldw	r2,-60(fp)
 400df30:	10bfffc4 	addi	r2,r2,-1
 400df34:	e0bff115 	stw	r2,-60(fp)
		tempScore /= 10;
 400df38:	e0bff017 	ldw	r2,-64(fp)
 400df3c:	01400284 	movi	r5,10
 400df40:	1009883a 	mov	r4,r2
 400df44:	40116800 	call	4011680 <__divsi3>
 400df48:	e0bff015 	stw	r2,-64(fp)
	char scoreToPrint[length + 1];
	int index = length;
	scoreToPrint[length] = '\0';
	index-=1;

	while (tempScore > 0) {
 400df4c:	e0bff017 	ldw	r2,-64(fp)
 400df50:	00bfe916 	blt	zero,r2,400def8 <__alt_mem_onchip_memory2_0+0xfc008d38>
		scoreToPrint[index] = c;
		index-=1;
		tempScore /= 10;
	}

	scoreToPrint[index] = '\0';
 400df54:	e0fff417 	ldw	r3,-48(fp)
 400df58:	e0bff117 	ldw	r2,-60(fp)
 400df5c:	1885883a 	add	r2,r3,r2
 400df60:	10000005 	stb	zero,0(r2)


	textVGADrawColorText("Score",65, 10, 0xA9, 0x00);
 400df64:	d8000015 	stw	zero,0(sp)
 400df68:	01c02a44 	movi	r7,169
 400df6c:	01800284 	movi	r6,10
 400df70:	01401044 	movi	r5,65
 400df74:	010100b4 	movhi	r4,1026
 400df78:	2114ca04 	addi	r4,r4,21288
 400df7c:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText(scoreToPrint,65,11, 0xA9, 0x00);
 400df80:	e0bff417 	ldw	r2,-48(fp)
 400df84:	d8000015 	stw	zero,0(sp)
 400df88:	01c02a44 	movi	r7,169
 400df8c:	018002c4 	movi	r6,11
 400df90:	01401044 	movi	r5,65
 400df94:	1009883a 	mov	r4,r2
 400df98:	4000d4c0 	call	4000d4c <textVGADrawColorText>
 400df9c:	e6fff717 	ldw	sp,-36(fp)
}
 400dfa0:	0001883a 	nop
 400dfa4:	e6fff804 	addi	sp,fp,-32
 400dfa8:	dfc00917 	ldw	ra,36(sp)
 400dfac:	df000817 	ldw	fp,32(sp)
 400dfb0:	ddc00717 	ldw	r23,28(sp)
 400dfb4:	dd800617 	ldw	r22,24(sp)
 400dfb8:	dd400517 	ldw	r21,20(sp)
 400dfbc:	dd000417 	ldw	r20,16(sp)
 400dfc0:	dcc00317 	ldw	r19,12(sp)
 400dfc4:	dc800217 	ldw	r18,8(sp)
 400dfc8:	dc400117 	ldw	r17,4(sp)
 400dfcc:	dc000017 	ldw	r16,0(sp)
 400dfd0:	dec00a04 	addi	sp,sp,40
 400dfd4:	f800283a 	ret

0400dfd8 <checkEndGame>:

int checkEndGame(int start, int end, int row){
 400dfd8:	defff804 	addi	sp,sp,-32
 400dfdc:	dfc00715 	stw	ra,28(sp)
 400dfe0:	df000615 	stw	fp,24(sp)
 400dfe4:	dc000515 	stw	r16,20(sp)
 400dfe8:	df000604 	addi	fp,sp,24
 400dfec:	e13ffc15 	stw	r4,-16(fp)
 400dff0:	e17ffd15 	stw	r5,-12(fp)
 400dff4:	e1bffe15 	stw	r6,-8(fp)
	if (rowCount[0] >= 1) {
 400dff8:	008100f4 	movhi	r2,1027
 400dffc:	10a60404 	addi	r2,r2,-26608
 400e000:	10800017 	ldw	r2,0(r2)
 400e004:	0080030e 	bge	zero,r2,400e014 <checkEndGame+0x3c>
		endScreen();
 400e008:	400e0b40 	call	400e0b4 <endScreen>
		return 0;
 400e00c:	0005883a 	mov	r2,zero
 400e010:	00002206 	br	400e09c <checkEndGame+0xc4>
	}
	for(int j = row; j > 0; j--){
 400e014:	e0bffe17 	ldw	r2,-8(fp)
 400e018:	e0bffa15 	stw	r2,-24(fp)
 400e01c:	00001c06 	br	400e090 <checkEndGame+0xb8>
		for(int i = start; i < end; i++){
 400e020:	e0bffc17 	ldw	r2,-16(fp)
 400e024:	e0bffb15 	stw	r2,-20(fp)
 400e028:	00001306 	br	400e078 <checkEndGame+0xa0>
			if(grid[j][i] == 1){
 400e02c:	040100f4 	movhi	r16,1027
 400e030:	84262204 	addi	r16,r16,-26488
 400e034:	e0bffa17 	ldw	r2,-24(fp)
 400e038:	01400984 	movi	r5,38
 400e03c:	1009883a 	mov	r4,r2
 400e040:	40118340 	call	4011834 <__mulsi3>
 400e044:	1007883a 	mov	r3,r2
 400e048:	e0bffb17 	ldw	r2,-20(fp)
 400e04c:	1885883a 	add	r2,r3,r2
 400e050:	1085883a 	add	r2,r2,r2
 400e054:	1085883a 	add	r2,r2,r2
 400e058:	8085883a 	add	r2,r16,r2
 400e05c:	10800017 	ldw	r2,0(r2)
 400e060:	10800058 	cmpnei	r2,r2,1
 400e064:	1000011e 	bne	r2,zero,400e06c <checkEndGame+0x94>
				endScreen();
 400e068:	400e0b40 	call	400e0b4 <endScreen>
	if (rowCount[0] >= 1) {
		endScreen();
		return 0;
	}
	for(int j = row; j > 0; j--){
		for(int i = start; i < end; i++){
 400e06c:	e0bffb17 	ldw	r2,-20(fp)
 400e070:	10800044 	addi	r2,r2,1
 400e074:	e0bffb15 	stw	r2,-20(fp)
 400e078:	e0fffb17 	ldw	r3,-20(fp)
 400e07c:	e0bffd17 	ldw	r2,-12(fp)
 400e080:	18bfea16 	blt	r3,r2,400e02c <__alt_mem_onchip_memory2_0+0xfc008e6c>
int checkEndGame(int start, int end, int row){
	if (rowCount[0] >= 1) {
		endScreen();
		return 0;
	}
	for(int j = row; j > 0; j--){
 400e084:	e0bffa17 	ldw	r2,-24(fp)
 400e088:	10bfffc4 	addi	r2,r2,-1
 400e08c:	e0bffa15 	stw	r2,-24(fp)
 400e090:	e0bffa17 	ldw	r2,-24(fp)
 400e094:	00bfe216 	blt	zero,r2,400e020 <__alt_mem_onchip_memory2_0+0xfc008e60>
			if(grid[j][i] == 1){
				endScreen();
			}
		}
	}
	return 0;
 400e098:	0005883a 	mov	r2,zero
}
 400e09c:	e6ffff04 	addi	sp,fp,-4
 400e0a0:	dfc00217 	ldw	ra,8(sp)
 400e0a4:	df000117 	ldw	fp,4(sp)
 400e0a8:	dc000017 	ldw	r16,0(sp)
 400e0ac:	dec00304 	addi	sp,sp,12
 400e0b0:	f800283a 	ret

0400e0b4 <endScreen>:

int endScreen(){
 400e0b4:	defff804 	addi	sp,sp,-32
 400e0b8:	dfc00715 	stw	ra,28(sp)
 400e0bc:	df000615 	stw	fp,24(sp)
 400e0c0:	dc000515 	stw	r16,20(sp)
 400e0c4:	df000604 	addi	fp,sp,24
	BYTE keyCode;
	textVGADrawColorText("Final Score",65, 10, 0xA9, 0x00);
 400e0c8:	d8000015 	stw	zero,0(sp)
 400e0cc:	01c02a44 	movi	r7,169
 400e0d0:	01800284 	movi	r6,10
 400e0d4:	01401044 	movi	r5,65
 400e0d8:	010100b4 	movhi	r4,1026
 400e0dc:	2114f004 	addi	r4,r4,21440
 400e0e0:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	if(highScore < score){
 400e0e4:	d0e80317 	ldw	r3,-24564(gp)
 400e0e8:	d0a80217 	ldw	r2,-24568(gp)
 400e0ec:	1880030e 	bge	r3,r2,400e0fc <endScreen+0x48>
		highScore = score;
 400e0f0:	d0a80217 	ldw	r2,-24568(gp)
 400e0f4:	d0a80315 	stw	r2,-24564(gp)
		updateHighScore();
 400e0f8:	400e7a40 	call	400e7a4 <updateHighScore>
	}
	while(1){
		textVGADrawColorText("Press R to",65, 12, 0xA9, 0x00);
 400e0fc:	d8000015 	stw	zero,0(sp)
 400e100:	01c02a44 	movi	r7,169
 400e104:	01800304 	movi	r6,12
 400e108:	01401044 	movi	r5,65
 400e10c:	010100b4 	movhi	r4,1026
 400e110:	2114f304 	addi	r4,r4,21452
 400e114:	4000d4c0 	call	4000d4c <textVGADrawColorText>
		textVGADrawColorText("Restart",65, 13, 0xA9, 0x00);
 400e118:	d8000015 	stw	zero,0(sp)
 400e11c:	01c02a44 	movi	r7,169
 400e120:	01800344 	movi	r6,13
 400e124:	01401044 	movi	r5,65
 400e128:	010100b4 	movhi	r4,1026
 400e12c:	2114f604 	addi	r4,r4,21464
 400e130:	4000d4c0 	call	4000d4c <textVGADrawColorText>
		keyCode = keyboard_input();
 400e134:	40007d00 	call	40007d0 <keyboard_input>
 400e138:	e0bffe05 	stb	r2,-8(fp)
		if (keyCode == 0x15) {
 400e13c:	e0bffe03 	ldbu	r2,-8(fp)
 400e140:	10800558 	cmpnei	r2,r2,21
 400e144:	10000126 	beq	r2,zero,400e14c <endScreen+0x98>
			break;
		}
	}
 400e148:	003fec06 	br	400e0fc <__alt_mem_onchip_memory2_0+0xfc008f3c>
	while(1){
		textVGADrawColorText("Press R to",65, 12, 0xA9, 0x00);
		textVGADrawColorText("Restart",65, 13, 0xA9, 0x00);
		keyCode = keyboard_input();
		if (keyCode == 0x15) {
			break;
 400e14c:	0001883a 	nop
		}
	}
	for (int i = 0; i < 33; i++) {
 400e150:	e03ffb15 	stw	zero,-20(fp)
 400e154:	00000a06 	br	400e180 <endScreen+0xcc>
		rowCount[i] = 0;
 400e158:	008100f4 	movhi	r2,1027
 400e15c:	10a60404 	addi	r2,r2,-26608
 400e160:	e0fffb17 	ldw	r3,-20(fp)
 400e164:	18c7883a 	add	r3,r3,r3
 400e168:	18c7883a 	add	r3,r3,r3
 400e16c:	10c5883a 	add	r2,r2,r3
 400e170:	10000015 	stw	zero,0(r2)
		keyCode = keyboard_input();
		if (keyCode == 0x15) {
			break;
		}
	}
	for (int i = 0; i < 33; i++) {
 400e174:	e0bffb17 	ldw	r2,-20(fp)
 400e178:	10800044 	addi	r2,r2,1
 400e17c:	e0bffb15 	stw	r2,-20(fp)
 400e180:	e0bffb17 	ldw	r2,-20(fp)
 400e184:	10800850 	cmplti	r2,r2,33
 400e188:	103ff31e 	bne	r2,zero,400e158 <__alt_mem_onchip_memory2_0+0xfc008f98>
		rowCount[i] = 0;
	}
	for (int i = 0; i < 31; i++) {
 400e18c:	e03ffc15 	stw	zero,-16(fp)
 400e190:	00001806 	br	400e1f4 <endScreen+0x140>
		for (int j = 0; j < 40; j++) {
 400e194:	e03ffd15 	stw	zero,-12(fp)
 400e198:	00001006 	br	400e1dc <endScreen+0x128>
			grid[i][j] = 0;
 400e19c:	040100f4 	movhi	r16,1027
 400e1a0:	84262204 	addi	r16,r16,-26488
 400e1a4:	e0bffc17 	ldw	r2,-16(fp)
 400e1a8:	01400984 	movi	r5,38
 400e1ac:	1009883a 	mov	r4,r2
 400e1b0:	40118340 	call	4011834 <__mulsi3>
 400e1b4:	1007883a 	mov	r3,r2
 400e1b8:	e0bffd17 	ldw	r2,-12(fp)
 400e1bc:	1885883a 	add	r2,r3,r2
 400e1c0:	1085883a 	add	r2,r2,r2
 400e1c4:	1085883a 	add	r2,r2,r2
 400e1c8:	8085883a 	add	r2,r16,r2
 400e1cc:	10000015 	stw	zero,0(r2)
	}
	for (int i = 0; i < 33; i++) {
		rowCount[i] = 0;
	}
	for (int i = 0; i < 31; i++) {
		for (int j = 0; j < 40; j++) {
 400e1d0:	e0bffd17 	ldw	r2,-12(fp)
 400e1d4:	10800044 	addi	r2,r2,1
 400e1d8:	e0bffd15 	stw	r2,-12(fp)
 400e1dc:	e0bffd17 	ldw	r2,-12(fp)
 400e1e0:	10800a10 	cmplti	r2,r2,40
 400e1e4:	103fed1e 	bne	r2,zero,400e19c <__alt_mem_onchip_memory2_0+0xfc008fdc>
		}
	}
	for (int i = 0; i < 33; i++) {
		rowCount[i] = 0;
	}
	for (int i = 0; i < 31; i++) {
 400e1e8:	e0bffc17 	ldw	r2,-16(fp)
 400e1ec:	10800044 	addi	r2,r2,1
 400e1f0:	e0bffc15 	stw	r2,-16(fp)
 400e1f4:	e0bffc17 	ldw	r2,-16(fp)
 400e1f8:	108007d0 	cmplti	r2,r2,31
 400e1fc:	103fe51e 	bne	r2,zero,400e194 <__alt_mem_onchip_memory2_0+0xfc008fd4>
		for (int j = 0; j < 40; j++) {
			grid[i][j] = 0;
		}
	}

	timer = 75000;
 400e200:	00800074 	movhi	r2,1
 400e204:	10893e04 	addi	r2,r2,9464
 400e208:	d0a80115 	stw	r2,-24572(gp)
	ContinueGame();
 400e20c:	400d5500 	call	400d550 <ContinueGame>
}
 400e210:	0001883a 	nop
 400e214:	e6ffff04 	addi	sp,fp,-4
 400e218:	dfc00217 	ldw	ra,8(sp)
 400e21c:	df000117 	ldw	fp,4(sp)
 400e220:	dc000017 	ldw	r16,0(sp)
 400e224:	dec00304 	addi	sp,sp,12
 400e228:	f800283a 	ret

0400e22c <startGame>:

void startGame() {
 400e22c:	defff904 	addi	sp,sp,-28
 400e230:	dfc00615 	stw	ra,24(sp)
 400e234:	df000515 	stw	fp,20(sp)
 400e238:	df000504 	addi	fp,sp,20
	BYTE keyCode;
	int col = 0;
 400e23c:	e03ffd15 	stw	zero,-12(fp)
	int row = 0;
 400e240:	e03ffe15 	stw	zero,-8(fp)
	for(int i = 0; i < 2400; i++){
 400e244:	e03ffc15 	stw	zero,-16(fp)
 400e248:	0000c606 	br	400e564 <startGame+0x338>
		col = i % 80;
 400e24c:	e0bffc17 	ldw	r2,-16(fp)
 400e250:	01401404 	movi	r5,80
 400e254:	1009883a 	mov	r4,r2
 400e258:	40117040 	call	4011704 <__modsi3>
 400e25c:	e0bffd15 	stw	r2,-12(fp)
		row = i / 80;
 400e260:	e0bffc17 	ldw	r2,-16(fp)
 400e264:	01401404 	movi	r5,80
 400e268:	1009883a 	mov	r4,r2
 400e26c:	40116800 	call	4011680 <__divsi3>
 400e270:	e0bffe15 	stw	r2,-8(fp)
		if(col == 20){
 400e274:	e0bffd17 	ldw	r2,-12(fp)
 400e278:	10800518 	cmpnei	r2,r2,20
 400e27c:	10000f1e 	bne	r2,zero,400e2bc <startGame+0x90>
//			vga_ctrl -> VRAM[i * 2] = 0x0F2F; //top right
			vga_ctrl->VRAM[i * 2] = 0x00;
 400e280:	d0e00317 	ldw	r3,-32756(gp)
 400e284:	e0bffc17 	ldw	r2,-16(fp)
 400e288:	1085883a 	add	r2,r2,r2
 400e28c:	1885883a 	add	r2,r3,r2
 400e290:	10000005 	stb	zero,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = 0x00;
 400e294:	d0e00317 	ldw	r3,-32756(gp)
 400e298:	e0bffc17 	ldw	r2,-16(fp)
 400e29c:	1085883a 	add	r2,r2,r2
 400e2a0:	10800044 	addi	r2,r2,1
 400e2a4:	1885883a 	add	r2,r3,r2
 400e2a8:	10000005 	stb	zero,0(r2)
			printf("top right");
 400e2ac:	010100b4 	movhi	r4,1026
 400e2b0:	2114c604 	addi	r4,r4,21272
 400e2b4:	40140980 	call	4014098 <printf>
 400e2b8:	0000a706 	br	400e558 <startGame+0x32c>
		}
		else if(col == 19){
 400e2bc:	e0bffd17 	ldw	r2,-12(fp)
 400e2c0:	108004d8 	cmpnei	r2,r2,19
 400e2c4:	10000f1e 	bne	r2,zero,400e304 <startGame+0xd8>
//			vga_ctrl -> VRAM[i * 2] = 0x012F; //top right
			vga_ctrl->VRAM[i * 2] = 0x00;
 400e2c8:	d0e00317 	ldw	r3,-32756(gp)
 400e2cc:	e0bffc17 	ldw	r2,-16(fp)
 400e2d0:	1085883a 	add	r2,r2,r2
 400e2d4:	1885883a 	add	r2,r3,r2
 400e2d8:	10000005 	stb	zero,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = 0x00;
 400e2dc:	d0e00317 	ldw	r3,-32756(gp)
 400e2e0:	e0bffc17 	ldw	r2,-16(fp)
 400e2e4:	1085883a 	add	r2,r2,r2
 400e2e8:	10800044 	addi	r2,r2,1
 400e2ec:	1885883a 	add	r2,r3,r2
 400e2f0:	10000005 	stb	zero,0(r2)
			printf("top right");
 400e2f4:	010100b4 	movhi	r4,1026
 400e2f8:	2114c604 	addi	r4,r4,21272
 400e2fc:	40140980 	call	4014098 <printf>
 400e300:	00009506 	br	400e558 <startGame+0x32c>
		}
		else if(col == 59){
 400e304:	e0bffd17 	ldw	r2,-12(fp)
 400e308:	10800ed8 	cmpnei	r2,r2,59
 400e30c:	10000f1e 	bne	r2,zero,400e34c <startGame+0x120>
//			vga_ctrl -> VRAM[i * 2] = 0x007F; //top right
			vga_ctrl->VRAM[i * 2] = 0x00;
 400e310:	d0e00317 	ldw	r3,-32756(gp)
 400e314:	e0bffc17 	ldw	r2,-16(fp)
 400e318:	1085883a 	add	r2,r2,r2
 400e31c:	1885883a 	add	r2,r3,r2
 400e320:	10000005 	stb	zero,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = 0x00;
 400e324:	d0e00317 	ldw	r3,-32756(gp)
 400e328:	e0bffc17 	ldw	r2,-16(fp)
 400e32c:	1085883a 	add	r2,r2,r2
 400e330:	10800044 	addi	r2,r2,1
 400e334:	1885883a 	add	r2,r3,r2
 400e338:	10000005 	stb	zero,0(r2)
			printf("top right");
 400e33c:	010100b4 	movhi	r4,1026
 400e340:	2114c604 	addi	r4,r4,21272
 400e344:	40140980 	call	4014098 <printf>
 400e348:	00008306 	br	400e558 <startGame+0x32c>
		}
		else if(col == 60){
 400e34c:	e0bffd17 	ldw	r2,-12(fp)
 400e350:	10800f18 	cmpnei	r2,r2,60
 400e354:	10000f1e 	bne	r2,zero,400e394 <startGame+0x168>
//			vga_ctrl -> VRAM[i * 2] = 0x017F; //top right
			vga_ctrl->VRAM[i * 2] = 0x00;
 400e358:	d0e00317 	ldw	r3,-32756(gp)
 400e35c:	e0bffc17 	ldw	r2,-16(fp)
 400e360:	1085883a 	add	r2,r2,r2
 400e364:	1885883a 	add	r2,r3,r2
 400e368:	10000005 	stb	zero,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = 0x00;
 400e36c:	d0e00317 	ldw	r3,-32756(gp)
 400e370:	e0bffc17 	ldw	r2,-16(fp)
 400e374:	1085883a 	add	r2,r2,r2
 400e378:	10800044 	addi	r2,r2,1
 400e37c:	1885883a 	add	r2,r3,r2
 400e380:	10000005 	stb	zero,0(r2)
			printf("top right");
 400e384:	010100b4 	movhi	r4,1026
 400e388:	2114c604 	addi	r4,r4,21272
 400e38c:	40140980 	call	4014098 <printf>
 400e390:	00007106 	br	400e558 <startGame+0x32c>
		}
		else if(row == 0 && (col > 20 && col < 59) && col % 2 == 0){
 400e394:	e0bffe17 	ldw	r2,-8(fp)
 400e398:	1000181e 	bne	r2,zero,400e3fc <startGame+0x1d0>
 400e39c:	e0bffd17 	ldw	r2,-12(fp)
 400e3a0:	10800550 	cmplti	r2,r2,21
 400e3a4:	1000151e 	bne	r2,zero,400e3fc <startGame+0x1d0>
 400e3a8:	e0bffd17 	ldw	r2,-12(fp)
 400e3ac:	10800ec8 	cmpgei	r2,r2,59
 400e3b0:	1000121e 	bne	r2,zero,400e3fc <startGame+0x1d0>
 400e3b4:	e0bffd17 	ldw	r2,-12(fp)
 400e3b8:	1080004c 	andi	r2,r2,1
 400e3bc:	10000f1e 	bne	r2,zero,400e3fc <startGame+0x1d0>
//			vga_ctrl -> VRAM[i * 2] = 0x007F; //top right
			vga_ctrl->VRAM[i * 2] = 0x00;
 400e3c0:	d0e00317 	ldw	r3,-32756(gp)
 400e3c4:	e0bffc17 	ldw	r2,-16(fp)
 400e3c8:	1085883a 	add	r2,r2,r2
 400e3cc:	1885883a 	add	r2,r3,r2
 400e3d0:	10000005 	stb	zero,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = 0x00;
 400e3d4:	d0e00317 	ldw	r3,-32756(gp)
 400e3d8:	e0bffc17 	ldw	r2,-16(fp)
 400e3dc:	1085883a 	add	r2,r2,r2
 400e3e0:	10800044 	addi	r2,r2,1
 400e3e4:	1885883a 	add	r2,r3,r2
 400e3e8:	10000005 	stb	zero,0(r2)
			printf("top right");
 400e3ec:	010100b4 	movhi	r4,1026
 400e3f0:	2114c604 	addi	r4,r4,21272
 400e3f4:	40140980 	call	4014098 <printf>
 400e3f8:	00005706 	br	400e558 <startGame+0x32c>
		}
		else if(row == 0 && (col > 20 && col < 59) && col % 2 == 1){
 400e3fc:	e0bffe17 	ldw	r2,-8(fp)
 400e400:	1000201e 	bne	r2,zero,400e484 <startGame+0x258>
 400e404:	e0bffd17 	ldw	r2,-12(fp)
 400e408:	10800550 	cmplti	r2,r2,21
 400e40c:	10001d1e 	bne	r2,zero,400e484 <startGame+0x258>
 400e410:	e0bffd17 	ldw	r2,-12(fp)
 400e414:	10800ec8 	cmpgei	r2,r2,59
 400e418:	10001a1e 	bne	r2,zero,400e484 <startGame+0x258>
 400e41c:	e0fffd17 	ldw	r3,-12(fp)
 400e420:	00a00034 	movhi	r2,32768
 400e424:	10800044 	addi	r2,r2,1
 400e428:	1884703a 	and	r2,r3,r2
 400e42c:	1000040e 	bge	r2,zero,400e440 <startGame+0x214>
 400e430:	10bfffc4 	addi	r2,r2,-1
 400e434:	00ffff84 	movi	r3,-2
 400e438:	10c4b03a 	or	r2,r2,r3
 400e43c:	10800044 	addi	r2,r2,1
 400e440:	10800058 	cmpnei	r2,r2,1
 400e444:	10000f1e 	bne	r2,zero,400e484 <startGame+0x258>
//			vga_ctrl -> VRAM[i * 2] = 0x007F; //top right
			vga_ctrl->VRAM[i * 2] = 0x00;
 400e448:	d0e00317 	ldw	r3,-32756(gp)
 400e44c:	e0bffc17 	ldw	r2,-16(fp)
 400e450:	1085883a 	add	r2,r2,r2
 400e454:	1885883a 	add	r2,r3,r2
 400e458:	10000005 	stb	zero,0(r2)
			vga_ctrl->VRAM[i * 2 + 1] = 0x00;
 400e45c:	d0e00317 	ldw	r3,-32756(gp)
 400e460:	e0bffc17 	ldw	r2,-16(fp)
 400e464:	1085883a 	add	r2,r2,r2
 400e468:	10800044 	addi	r2,r2,1
 400e46c:	1885883a 	add	r2,r3,r2
 400e470:	10000005 	stb	zero,0(r2)
			printf("top right");
 400e474:	010100b4 	movhi	r4,1026
 400e478:	2114c604 	addi	r4,r4,21272
 400e47c:	40140980 	call	4014098 <printf>
 400e480:	00003506 	br	400e558 <startGame+0x32c>
		}
		else if (col > 20 && col < 59 && row > 0 && row < 30){
 400e484:	e0bffd17 	ldw	r2,-12(fp)
 400e488:	10800550 	cmplti	r2,r2,21
 400e48c:	10002d1e 	bne	r2,zero,400e544 <startGame+0x318>
 400e490:	e0bffd17 	ldw	r2,-12(fp)
 400e494:	10800ec8 	cmpgei	r2,r2,59
 400e498:	10002a1e 	bne	r2,zero,400e544 <startGame+0x318>
 400e49c:	e0bffe17 	ldw	r2,-8(fp)
 400e4a0:	0080280e 	bge	zero,r2,400e544 <startGame+0x318>
 400e4a4:	e0bffe17 	ldw	r2,-8(fp)
 400e4a8:	10800788 	cmpgei	r2,r2,30
 400e4ac:	1000251e 	bne	r2,zero,400e544 <startGame+0x318>
			if(col % 2 == 0){
 400e4b0:	e0bffd17 	ldw	r2,-12(fp)
 400e4b4:	1080004c 	andi	r2,r2,1
 400e4b8:	10000b1e 	bne	r2,zero,400e4e8 <startGame+0x2bc>
				vga_ctrl->VRAM[i * 2] = 0x00;
 400e4bc:	d0e00317 	ldw	r3,-32756(gp)
 400e4c0:	e0bffc17 	ldw	r2,-16(fp)
 400e4c4:	1085883a 	add	r2,r2,r2
 400e4c8:	1885883a 	add	r2,r3,r2
 400e4cc:	10000005 	stb	zero,0(r2)
				vga_ctrl->VRAM[i * 2 + 1] = 0x00;
 400e4d0:	d0e00317 	ldw	r3,-32756(gp)
 400e4d4:	e0bffc17 	ldw	r2,-16(fp)
 400e4d8:	1085883a 	add	r2,r2,r2
 400e4dc:	10800044 	addi	r2,r2,1
 400e4e0:	1885883a 	add	r2,r3,r2
 400e4e4:	10000005 	stb	zero,0(r2)
			}
			if(col % 2 == 1){
 400e4e8:	e0fffd17 	ldw	r3,-12(fp)
 400e4ec:	00a00034 	movhi	r2,32768
 400e4f0:	10800044 	addi	r2,r2,1
 400e4f4:	1884703a 	and	r2,r3,r2
 400e4f8:	1000040e 	bge	r2,zero,400e50c <startGame+0x2e0>
 400e4fc:	10bfffc4 	addi	r2,r2,-1
 400e500:	00ffff84 	movi	r3,-2
 400e504:	10c4b03a 	or	r2,r2,r3
 400e508:	10800044 	addi	r2,r2,1
 400e50c:	10800058 	cmpnei	r2,r2,1
 400e510:	1000111e 	bne	r2,zero,400e558 <startGame+0x32c>
				vga_ctrl->VRAM[i * 2] = 0x00;
 400e514:	d0e00317 	ldw	r3,-32756(gp)
 400e518:	e0bffc17 	ldw	r2,-16(fp)
 400e51c:	1085883a 	add	r2,r2,r2
 400e520:	1885883a 	add	r2,r3,r2
 400e524:	10000005 	stb	zero,0(r2)
				vga_ctrl->VRAM[i * 2 + 1] = 0x00;
 400e528:	d0e00317 	ldw	r3,-32756(gp)
 400e52c:	e0bffc17 	ldw	r2,-16(fp)
 400e530:	1085883a 	add	r2,r2,r2
 400e534:	10800044 	addi	r2,r2,1
 400e538:	1885883a 	add	r2,r3,r2
 400e53c:	10000005 	stb	zero,0(r2)
		else if (col > 20 && col < 59 && row > 0 && row < 30){
			if(col % 2 == 0){
				vga_ctrl->VRAM[i * 2] = 0x00;
				vga_ctrl->VRAM[i * 2 + 1] = 0x00;
			}
			if(col % 2 == 1){
 400e540:	00000506 	br	400e558 <startGame+0x32c>
				vga_ctrl->VRAM[i * 2] = 0x00;
				vga_ctrl->VRAM[i * 2 + 1] = 0x00;
			}
		}
		else{
			vga_ctrl->VRAM[i * 2] = 0x00;
 400e544:	d0e00317 	ldw	r3,-32756(gp)
 400e548:	e0bffc17 	ldw	r2,-16(fp)
 400e54c:	1085883a 	add	r2,r2,r2
 400e550:	1885883a 	add	r2,r3,r2
 400e554:	10000005 	stb	zero,0(r2)

void startGame() {
	BYTE keyCode;
	int col = 0;
	int row = 0;
	for(int i = 0; i < 2400; i++){
 400e558:	e0bffc17 	ldw	r2,-16(fp)
 400e55c:	10800044 	addi	r2,r2,1
 400e560:	e0bffc15 	stw	r2,-16(fp)
 400e564:	e0bffc17 	ldw	r2,-16(fp)
 400e568:	10825810 	cmplti	r2,r2,2400
 400e56c:	103f371e 	bne	r2,zero,400e24c <__alt_mem_onchip_memory2_0+0xfc00908c>
	}




	textVGADrawColorText("Welcome To Tetris!",28, 5, 0xA9, 0x00);
 400e570:	d8000015 	stw	zero,0(sp)
 400e574:	01c02a44 	movi	r7,169
 400e578:	01800144 	movi	r6,5
 400e57c:	01400704 	movi	r5,28
 400e580:	010100b4 	movhi	r4,1026
 400e584:	2114f804 	addi	r4,r4,21472
 400e588:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText("Press Space To Continue!",25, 6, 0xA9, 0x00);
 400e58c:	d8000015 	stw	zero,0(sp)
 400e590:	01c02a44 	movi	r7,169
 400e594:	01800184 	movi	r6,6
 400e598:	01400644 	movi	r5,25
 400e59c:	010100b4 	movhi	r4,1026
 400e5a0:	2114fd04 	addi	r4,r4,21492
 400e5a4:	4000d4c0 	call	4000d4c <textVGADrawColorText>

	textVGADrawColorText("Choose Difficulty",28, 10, 0xA9, 0x00);
 400e5a8:	d8000015 	stw	zero,0(sp)
 400e5ac:	01c02a44 	movi	r7,169
 400e5b0:	01800284 	movi	r6,10
 400e5b4:	01400704 	movi	r5,28
 400e5b8:	010100b4 	movhi	r4,1026
 400e5bc:	21150404 	addi	r4,r4,21520
 400e5c0:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText(" 1 ",33, 11, 0xA9, 0xC4);
 400e5c4:	00803104 	movi	r2,196
 400e5c8:	d8800015 	stw	r2,0(sp)
 400e5cc:	01c02a44 	movi	r7,169
 400e5d0:	018002c4 	movi	r6,11
 400e5d4:	01400844 	movi	r5,33
 400e5d8:	010100b4 	movhi	r4,1026
 400e5dc:	21150904 	addi	r4,r4,21540
 400e5e0:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText(" 2 ",35, 11, 0xA9, 0x00);
 400e5e4:	d8000015 	stw	zero,0(sp)
 400e5e8:	01c02a44 	movi	r7,169
 400e5ec:	018002c4 	movi	r6,11
 400e5f0:	014008c4 	movi	r5,35
 400e5f4:	010100b4 	movhi	r4,1026
 400e5f8:	21150a04 	addi	r4,r4,21544
 400e5fc:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText(" 3 ",37, 11, 0xA9, 0x00);
 400e600:	d8000015 	stw	zero,0(sp)
 400e604:	01c02a44 	movi	r7,169
 400e608:	018002c4 	movi	r6,11
 400e60c:	01400944 	movi	r5,37
 400e610:	010100b4 	movhi	r4,1026
 400e614:	21150b04 	addi	r4,r4,21548
 400e618:	4000d4c0 	call	4000d4c <textVGADrawColorText>

	timer = 100000;
 400e61c:	008000b4 	movhi	r2,2
 400e620:	10a1a804 	addi	r2,r2,-31072
 400e624:	d0a80115 	stw	r2,-24572(gp)
	while (1) {
		keyCode = keyboard_input();
 400e628:	40007d00 	call	40007d0 <keyboard_input>
 400e62c:	e0bfff05 	stb	r2,-4(fp)
		if(keyCode == 0x1E) {
 400e630:	e0bfff03 	ldbu	r2,-4(fp)
 400e634:	10800798 	cmpnei	r2,r2,30
 400e638:	1000191e 	bne	r2,zero,400e6a0 <startGame+0x474>
			textVGADrawColorText(" 1 ",33, 11, 0xA9, 0xC4);
 400e63c:	00803104 	movi	r2,196
 400e640:	d8800015 	stw	r2,0(sp)
 400e644:	01c02a44 	movi	r7,169
 400e648:	018002c4 	movi	r6,11
 400e64c:	01400844 	movi	r5,33
 400e650:	010100b4 	movhi	r4,1026
 400e654:	21150904 	addi	r4,r4,21540
 400e658:	4000d4c0 	call	4000d4c <textVGADrawColorText>
			textVGADrawColorText(" 2 ",35, 11, 0xA9, 0x00);
 400e65c:	d8000015 	stw	zero,0(sp)
 400e660:	01c02a44 	movi	r7,169
 400e664:	018002c4 	movi	r6,11
 400e668:	014008c4 	movi	r5,35
 400e66c:	010100b4 	movhi	r4,1026
 400e670:	21150a04 	addi	r4,r4,21544
 400e674:	4000d4c0 	call	4000d4c <textVGADrawColorText>
			textVGADrawColorText(" 3 ",37, 11, 0xA9, 0x00);
 400e678:	d8000015 	stw	zero,0(sp)
 400e67c:	01c02a44 	movi	r7,169
 400e680:	018002c4 	movi	r6,11
 400e684:	01400944 	movi	r5,37
 400e688:	010100b4 	movhi	r4,1026
 400e68c:	21150b04 	addi	r4,r4,21548
 400e690:	4000d4c0 	call	4000d4c <textVGADrawColorText>
			timer = 75000;
 400e694:	00800074 	movhi	r2,1
 400e698:	10893e04 	addi	r2,r2,9464
 400e69c:	d0a80115 	stw	r2,-24572(gp)
		}
		if(keyCode == 0x1F) {
 400e6a0:	e0bfff03 	ldbu	r2,-4(fp)
 400e6a4:	108007d8 	cmpnei	r2,r2,31
 400e6a8:	1000181e 	bne	r2,zero,400e70c <startGame+0x4e0>
			textVGADrawColorText(" 1 ",33, 11, 0xA9, 0x00);
 400e6ac:	d8000015 	stw	zero,0(sp)
 400e6b0:	01c02a44 	movi	r7,169
 400e6b4:	018002c4 	movi	r6,11
 400e6b8:	01400844 	movi	r5,33
 400e6bc:	010100b4 	movhi	r4,1026
 400e6c0:	21150904 	addi	r4,r4,21540
 400e6c4:	4000d4c0 	call	4000d4c <textVGADrawColorText>
			textVGADrawColorText(" 2 ",35, 11, 0xA9, 0xC4);
 400e6c8:	00803104 	movi	r2,196
 400e6cc:	d8800015 	stw	r2,0(sp)
 400e6d0:	01c02a44 	movi	r7,169
 400e6d4:	018002c4 	movi	r6,11
 400e6d8:	014008c4 	movi	r5,35
 400e6dc:	010100b4 	movhi	r4,1026
 400e6e0:	21150a04 	addi	r4,r4,21544
 400e6e4:	4000d4c0 	call	4000d4c <textVGADrawColorText>
			textVGADrawColorText(" 3 ",37, 11, 0xA9, 0x00);
 400e6e8:	d8000015 	stw	zero,0(sp)
 400e6ec:	01c02a44 	movi	r7,169
 400e6f0:	018002c4 	movi	r6,11
 400e6f4:	01400944 	movi	r5,37
 400e6f8:	010100b4 	movhi	r4,1026
 400e6fc:	21150b04 	addi	r4,r4,21548
 400e700:	4000d4c0 	call	4000d4c <textVGADrawColorText>
			timer = 50000;
 400e704:	00b0d414 	movui	r2,50000
 400e708:	d0a80115 	stw	r2,-24572(gp)
		}
		if(keyCode == 0x20) {
 400e70c:	e0bfff03 	ldbu	r2,-4(fp)
 400e710:	10800818 	cmpnei	r2,r2,32
 400e714:	1000181e 	bne	r2,zero,400e778 <startGame+0x54c>
			textVGADrawColorText(" 1 ",33, 11, 0xA9, 0x00);
 400e718:	d8000015 	stw	zero,0(sp)
 400e71c:	01c02a44 	movi	r7,169
 400e720:	018002c4 	movi	r6,11
 400e724:	01400844 	movi	r5,33
 400e728:	010100b4 	movhi	r4,1026
 400e72c:	21150904 	addi	r4,r4,21540
 400e730:	4000d4c0 	call	4000d4c <textVGADrawColorText>
			textVGADrawColorText(" 2 ",35, 11, 0xA9, 0x00);
 400e734:	d8000015 	stw	zero,0(sp)
 400e738:	01c02a44 	movi	r7,169
 400e73c:	018002c4 	movi	r6,11
 400e740:	014008c4 	movi	r5,35
 400e744:	010100b4 	movhi	r4,1026
 400e748:	21150a04 	addi	r4,r4,21544
 400e74c:	4000d4c0 	call	4000d4c <textVGADrawColorText>
			textVGADrawColorText(" 3 ",37, 11, 0xA9, 0xC4);
 400e750:	00803104 	movi	r2,196
 400e754:	d8800015 	stw	r2,0(sp)
 400e758:	01c02a44 	movi	r7,169
 400e75c:	018002c4 	movi	r6,11
 400e760:	01400944 	movi	r5,37
 400e764:	010100b4 	movhi	r4,1026
 400e768:	21150b04 	addi	r4,r4,21548
 400e76c:	4000d4c0 	call	4000d4c <textVGADrawColorText>
			timer = 20000;
 400e770:	00938804 	movi	r2,20000
 400e774:	d0a80115 	stw	r2,-24572(gp)
		}
		if(keyCode == 0x2C) {
 400e778:	e0bfff03 	ldbu	r2,-4(fp)
 400e77c:	10800b18 	cmpnei	r2,r2,44
 400e780:	10000126 	beq	r2,zero,400e788 <startGame+0x55c>
			break;
		}
	}
 400e784:	003fa806 	br	400e628 <__alt_mem_onchip_memory2_0+0xfc009468>
			textVGADrawColorText(" 2 ",35, 11, 0xA9, 0x00);
			textVGADrawColorText(" 3 ",37, 11, 0xA9, 0xC4);
			timer = 20000;
		}
		if(keyCode == 0x2C) {
			break;
 400e788:	0001883a 	nop
		}
	}
}
 400e78c:	0001883a 	nop
 400e790:	e037883a 	mov	sp,fp
 400e794:	dfc00117 	ldw	ra,4(sp)
 400e798:	df000017 	ldw	fp,0(sp)
 400e79c:	dec00204 	addi	sp,sp,8
 400e7a0:	f800283a 	ret

0400e7a4 <updateHighScore>:

void updateHighScore(){
 400e7a4:	deffed04 	addi	sp,sp,-76
 400e7a8:	dfc01215 	stw	ra,72(sp)
 400e7ac:	df001115 	stw	fp,68(sp)
 400e7b0:	ddc01015 	stw	r23,64(sp)
 400e7b4:	dd800f15 	stw	r22,60(sp)
 400e7b8:	dd400e15 	stw	r21,56(sp)
 400e7bc:	dd000d15 	stw	r20,52(sp)
 400e7c0:	dcc00c15 	stw	r19,48(sp)
 400e7c4:	dc800b15 	stw	r18,44(sp)
 400e7c8:	dc400a15 	stw	r17,40(sp)
 400e7cc:	dc000915 	stw	r16,36(sp)
 400e7d0:	df001104 	addi	fp,sp,68
 400e7d4:	d805883a 	mov	r2,sp
 400e7d8:	e0bff715 	stw	r2,-36(fp)

	int length = floor(log10(abs(highScore))) + 1;
 400e7dc:	d0a80317 	ldw	r2,-24564(gp)
 400e7e0:	1000010e 	bge	r2,zero,400e7e8 <updateHighScore+0x44>
 400e7e4:	0085c83a 	sub	r2,zero,r2
 400e7e8:	1009883a 	mov	r4,r2
 400e7ec:	4013f180 	call	4013f18 <__floatsidf>
 400e7f0:	100b883a 	mov	r5,r2
 400e7f4:	180d883a 	mov	r6,r3
 400e7f8:	2809883a 	mov	r4,r5
 400e7fc:	300b883a 	mov	r5,r6
 400e800:	4010b700 	call	4010b70 <log10>
 400e804:	100b883a 	mov	r5,r2
 400e808:	180d883a 	mov	r6,r3
 400e80c:	2809883a 	mov	r4,r5
 400e810:	300b883a 	mov	r5,r6
 400e814:	40109840 	call	4010984 <floor>
 400e818:	1011883a 	mov	r8,r2
 400e81c:	1813883a 	mov	r9,r3
 400e820:	000d883a 	mov	r6,zero
 400e824:	01cffc34 	movhi	r7,16368
 400e828:	4009883a 	mov	r4,r8
 400e82c:	480b883a 	mov	r5,r9
 400e830:	401185c0 	call	401185c <__adddf3>
 400e834:	1009883a 	mov	r4,r2
 400e838:	180b883a 	mov	r5,r3
 400e83c:	2005883a 	mov	r2,r4
 400e840:	2807883a 	mov	r3,r5
 400e844:	1009883a 	mov	r4,r2
 400e848:	180b883a 	mov	r5,r3
 400e84c:	4013e980 	call	4013e98 <__fixdfsi>
 400e850:	e0bff215 	stw	r2,-56(fp)
	int tempScore = highScore;
 400e854:	d0a80317 	ldw	r2,-24564(gp)
 400e858:	e0bff015 	stw	r2,-64(fp)
	char scoreToPrint[length + 1];
 400e85c:	e0bff217 	ldw	r2,-56(fp)
 400e860:	10800044 	addi	r2,r2,1
 400e864:	10ffffc4 	addi	r3,r2,-1
 400e868:	e0fff315 	stw	r3,-52(fp)
 400e86c:	1007883a 	mov	r3,r2
 400e870:	182d883a 	mov	r22,r3
 400e874:	002f883a 	mov	r23,zero
 400e878:	b006d77a 	srli	r3,r22,29
 400e87c:	b82690fa 	slli	r19,r23,3
 400e880:	1ce6b03a 	or	r19,r3,r19
 400e884:	b02490fa 	slli	r18,r22,3
 400e888:	1007883a 	mov	r3,r2
 400e88c:	1829883a 	mov	r20,r3
 400e890:	002b883a 	mov	r21,zero
 400e894:	a006d77a 	srli	r3,r20,29
 400e898:	a82290fa 	slli	r17,r21,3
 400e89c:	1c62b03a 	or	r17,r3,r17
 400e8a0:	a02090fa 	slli	r16,r20,3
 400e8a4:	108000c4 	addi	r2,r2,3
 400e8a8:	1004d0ba 	srli	r2,r2,2
 400e8ac:	1085883a 	add	r2,r2,r2
 400e8b0:	1085883a 	add	r2,r2,r2
 400e8b4:	d8b7c83a 	sub	sp,sp,r2
 400e8b8:	d8800104 	addi	r2,sp,4
 400e8bc:	1005883a 	mov	r2,r2
 400e8c0:	e0bff415 	stw	r2,-48(fp)
	int index = length;
 400e8c4:	e0bff217 	ldw	r2,-56(fp)
 400e8c8:	e0bff115 	stw	r2,-60(fp)
	scoreToPrint[length] = '\0';
 400e8cc:	e0fff417 	ldw	r3,-48(fp)
 400e8d0:	e0bff217 	ldw	r2,-56(fp)
 400e8d4:	1885883a 	add	r2,r3,r2
 400e8d8:	10000005 	stb	zero,0(r2)
	index-=1;
 400e8dc:	e0bff117 	ldw	r2,-60(fp)
 400e8e0:	10bfffc4 	addi	r2,r2,-1
 400e8e4:	e0bff115 	stw	r2,-60(fp)

	while (tempScore > 0) {
 400e8e8:	00001506 	br	400e940 <updateHighScore+0x19c>
		int digit = tempScore % 10;
 400e8ec:	e0bff017 	ldw	r2,-64(fp)
 400e8f0:	01400284 	movi	r5,10
 400e8f4:	1009883a 	mov	r4,r2
 400e8f8:	40117040 	call	4011704 <__modsi3>
 400e8fc:	e0bff515 	stw	r2,-44(fp)
		char c = digit + '0';
 400e900:	e0bff517 	ldw	r2,-44(fp)
 400e904:	10800c04 	addi	r2,r2,48
 400e908:	e0bff605 	stb	r2,-40(fp)
		scoreToPrint[index] = c;
 400e90c:	e0fff417 	ldw	r3,-48(fp)
 400e910:	e0bff117 	ldw	r2,-60(fp)
 400e914:	1885883a 	add	r2,r3,r2
 400e918:	e0fff603 	ldbu	r3,-40(fp)
 400e91c:	10c00005 	stb	r3,0(r2)
		index-=1;
 400e920:	e0bff117 	ldw	r2,-60(fp)
 400e924:	10bfffc4 	addi	r2,r2,-1
 400e928:	e0bff115 	stw	r2,-60(fp)
		tempScore /= 10;
 400e92c:	e0bff017 	ldw	r2,-64(fp)
 400e930:	01400284 	movi	r5,10
 400e934:	1009883a 	mov	r4,r2
 400e938:	40116800 	call	4011680 <__divsi3>
 400e93c:	e0bff015 	stw	r2,-64(fp)
	char scoreToPrint[length + 1];
	int index = length;
	scoreToPrint[length] = '\0';
	index-=1;

	while (tempScore > 0) {
 400e940:	e0bff017 	ldw	r2,-64(fp)
 400e944:	00bfe916 	blt	zero,r2,400e8ec <__alt_mem_onchip_memory2_0+0xfc00972c>
		scoreToPrint[index] = c;
		index-=1;
		tempScore /= 10;
	}

	scoreToPrint[index] = '\0';
 400e948:	e0fff417 	ldw	r3,-48(fp)
 400e94c:	e0bff117 	ldw	r2,-60(fp)
 400e950:	1885883a 	add	r2,r3,r2
 400e954:	10000005 	stb	zero,0(r2)


	textVGADrawColorText("High Score",65, 20, 0xA9, 0x00);
 400e958:	d8000015 	stw	zero,0(sp)
 400e95c:	01c02a44 	movi	r7,169
 400e960:	01800504 	movi	r6,20
 400e964:	01401044 	movi	r5,65
 400e968:	010100b4 	movhi	r4,1026
 400e96c:	21150c04 	addi	r4,r4,21552
 400e970:	4000d4c0 	call	4000d4c <textVGADrawColorText>
	textVGADrawColorText(scoreToPrint,65,21, 0xA9, 0x00);
 400e974:	e0bff417 	ldw	r2,-48(fp)
 400e978:	d8000015 	stw	zero,0(sp)
 400e97c:	01c02a44 	movi	r7,169
 400e980:	01800544 	movi	r6,21
 400e984:	01401044 	movi	r5,65
 400e988:	1009883a 	mov	r4,r2
 400e98c:	4000d4c0 	call	4000d4c <textVGADrawColorText>
 400e990:	e6fff717 	ldw	sp,-36(fp)
}
 400e994:	0001883a 	nop
 400e998:	e6fff804 	addi	sp,fp,-32
 400e99c:	dfc00917 	ldw	ra,36(sp)
 400e9a0:	df000817 	ldw	fp,32(sp)
 400e9a4:	ddc00717 	ldw	r23,28(sp)
 400e9a8:	dd800617 	ldw	r22,24(sp)
 400e9ac:	dd400517 	ldw	r21,20(sp)
 400e9b0:	dd000417 	ldw	r20,16(sp)
 400e9b4:	dcc00317 	ldw	r19,12(sp)
 400e9b8:	dc800217 	ldw	r18,8(sp)
 400e9bc:	dc400117 	ldw	r17,4(sp)
 400e9c0:	dc000017 	ldw	r16,0(sp)
 400e9c4:	dec00a04 	addi	sp,sp,40
 400e9c8:	f800283a 	ret

0400e9cc <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 400e9cc:	defff204 	addi	sp,sp,-56
 400e9d0:	dfc00d15 	stw	ra,52(sp)
 400e9d4:	df000c15 	stw	fp,48(sp)
 400e9d8:	df000c04 	addi	fp,sp,48
 400e9dc:	2005883a 	mov	r2,r4
 400e9e0:	e17fff15 	stw	r5,-4(fp)
 400e9e4:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 400e9e8:	008100f4 	movhi	r2,1027
 400e9ec:	10aa7004 	addi	r2,r2,-22080
 400e9f0:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 400e9f4:	008100f4 	movhi	r2,1027
 400e9f8:	10aa7004 	addi	r2,r2,-22080
 400e9fc:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 400ea00:	e0fffe03 	ldbu	r3,-8(fp)
 400ea04:	008100f4 	movhi	r2,1027
 400ea08:	10aa7004 	addi	r2,r2,-22080
 400ea0c:	d8800415 	stw	r2,16(sp)
 400ea10:	00800244 	movi	r2,9
 400ea14:	d8800315 	stw	r2,12(sp)
 400ea18:	d8000215 	stw	zero,8(sp)
 400ea1c:	00800084 	movi	r2,2
 400ea20:	d8800115 	stw	r2,4(sp)
 400ea24:	d8000015 	stw	zero,0(sp)
 400ea28:	01c00184 	movi	r7,6
 400ea2c:	01802004 	movi	r6,128
 400ea30:	000b883a 	mov	r5,zero
 400ea34:	1809883a 	mov	r4,r3
 400ea38:	400fb4c0 	call	400fb4c <XferCtrlReq>
 400ea3c:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 400ea40:	e0bffc03 	ldbu	r2,-16(fp)
 400ea44:	10000226 	beq	r2,zero,400ea50 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 400ea48:	0005883a 	mov	r2,zero
 400ea4c:	0000dc06 	br	400edc0 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 400ea50:	e0bffa17 	ldw	r2,-24(fp)
 400ea54:	1080008b 	ldhu	r2,2(r2)
 400ea58:	10bfffcc 	andi	r2,r2,65535
 400ea5c:	10804070 	cmpltui	r2,r2,257
 400ea60:	1000031e 	bne	r2,zero,400ea70 <HIDMProbe+0xa4>
		total_length = 256;
 400ea64:	00804004 	movi	r2,256
 400ea68:	e0bff90d 	sth	r2,-28(fp)
 400ea6c:	00000306 	br	400ea7c <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 400ea70:	e0bffa17 	ldw	r2,-24(fp)
 400ea74:	1080008b 	ldhu	r2,2(r2)
 400ea78:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 400ea7c:	e13ffe03 	ldbu	r4,-8(fp)
 400ea80:	e0fff90b 	ldhu	r3,-28(fp)
 400ea84:	008100f4 	movhi	r2,1027
 400ea88:	10aa7004 	addi	r2,r2,-22080
 400ea8c:	d8800415 	stw	r2,16(sp)
 400ea90:	d8c00315 	stw	r3,12(sp)
 400ea94:	d8000215 	stw	zero,8(sp)
 400ea98:	00800084 	movi	r2,2
 400ea9c:	d8800115 	stw	r2,4(sp)
 400eaa0:	d8000015 	stw	zero,0(sp)
 400eaa4:	01c00184 	movi	r7,6
 400eaa8:	01802004 	movi	r6,128
 400eaac:	000b883a 	mov	r5,zero
 400eab0:	400fb4c0 	call	400fb4c <XferCtrlReq>
 400eab4:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 400eab8:	e0bffc03 	ldbu	r2,-16(fp)
 400eabc:	10000226 	beq	r2,zero,400eac8 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 400eac0:	0005883a 	mov	r2,zero
 400eac4:	0000be06 	br	400edc0 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 400eac8:	e0bffa17 	ldw	r2,-24(fp)
 400eacc:	10800143 	ldbu	r2,5(r2)
 400ead0:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 400ead4:	0000b306 	br	400eda4 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 400ead8:	e0bffa17 	ldw	r2,-24(fp)
 400eadc:	10800043 	ldbu	r2,1(r2)
 400eae0:	10803fcc 	andi	r2,r2,255
 400eae4:	10800120 	cmpeqi	r2,r2,4
 400eae8:	1000091e 	bne	r2,zero,400eb10 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400eaec:	e0bffa17 	ldw	r2,-24(fp)
 400eaf0:	10800003 	ldbu	r2,0(r2)
 400eaf4:	10803fcc 	andi	r2,r2,255
 400eaf8:	e0fffb17 	ldw	r3,-20(fp)
 400eafc:	1885883a 	add	r2,r3,r2
 400eb00:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 400eb04:	e0bffb17 	ldw	r2,-20(fp)
 400eb08:	e0bffa15 	stw	r2,-24(fp)
 400eb0c:	0000a506 	br	400eda4 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 400eb10:	e0bffa17 	ldw	r2,-24(fp)
 400eb14:	10800143 	ldbu	r2,5(r2)
 400eb18:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 400eb1c:	e0bffa17 	ldw	r2,-24(fp)
 400eb20:	10800183 	ldbu	r2,6(r2)
 400eb24:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 400eb28:	e0bffa17 	ldw	r2,-24(fp)
 400eb2c:	108001c3 	ldbu	r2,7(r2)
 400eb30:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400eb34:	e0bffc83 	ldbu	r2,-14(fp)
 400eb38:	108000d8 	cmpnei	r2,r2,3
 400eb3c:	1000971e 	bne	r2,zero,400ed9c <HIDMProbe+0x3d0>
 400eb40:	e0bffcc3 	ldbu	r2,-13(fp)
 400eb44:	10800058 	cmpnei	r2,r2,1
 400eb48:	1000941e 	bne	r2,zero,400ed9c <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 400eb4c:	e0bffd03 	ldbu	r2,-12(fp)
 400eb50:	10800098 	cmpnei	r2,r2,2
 400eb54:	1000911e 	bne	r2,zero,400ed9c <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 400eb58:	e0fffe03 	ldbu	r3,-8(fp)
 400eb5c:	008100f4 	movhi	r2,1027
 400eb60:	10aab004 	addi	r2,r2,-21824
 400eb64:	180690fa 	slli	r3,r3,3
 400eb68:	10c5883a 	add	r2,r2,r3
 400eb6c:	10800104 	addi	r2,r2,4
 400eb70:	00c00084 	movi	r3,2
 400eb74:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 400eb78:	e0fffe03 	ldbu	r3,-8(fp)
 400eb7c:	008100f4 	movhi	r2,1027
 400eb80:	10aab004 	addi	r2,r2,-21824
 400eb84:	180690fa 	slli	r3,r3,3
 400eb88:	10c5883a 	add	r2,r2,r3
 400eb8c:	10800017 	ldw	r2,0(r2)
 400eb90:	1080008b 	ldhu	r2,2(r2)
 400eb94:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 400eb98:	400f1dc0 	call	400f1dc <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 400eb9c:	e0fffe03 	ldbu	r3,-8(fp)
 400eba0:	008100f4 	movhi	r2,1027
 400eba4:	10aab004 	addi	r2,r2,-21824
 400eba8:	180690fa 	slli	r3,r3,3
 400ebac:	10c7883a 	add	r3,r2,r3
 400ebb0:	008100f4 	movhi	r2,1027
 400ebb4:	10a5f004 	addi	r2,r2,-26688
 400ebb8:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 400ebbc:	e0fffe03 	ldbu	r3,-8(fp)
 400ebc0:	008100f4 	movhi	r2,1027
 400ebc4:	10aab004 	addi	r2,r2,-21824
 400ebc8:	180690fa 	slli	r3,r3,3
 400ebcc:	10c5883a 	add	r2,r2,r3
 400ebd0:	10800017 	ldw	r2,0(r2)
 400ebd4:	e0fffd43 	ldbu	r3,-11(fp)
 400ebd8:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 400ebdc:	e0bffa17 	ldw	r2,-24(fp)
 400ebe0:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 400ebe4:	d0a80445 	stb	r2,-24559(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 400ebe8:	e0bffe03 	ldbu	r2,-8(fp)
 400ebec:	d0a80405 	stb	r2,-24560(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400ebf0:	e0bffa17 	ldw	r2,-24(fp)
 400ebf4:	10800003 	ldbu	r2,0(r2)
 400ebf8:	10803fcc 	andi	r2,r2,255
 400ebfc:	e0fffb17 	ldw	r3,-20(fp)
 400ec00:	1885883a 	add	r2,r3,r2
 400ec04:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 400ec08:	e0bffb17 	ldw	r2,-20(fp)
 400ec0c:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 400ec10:	00005b06 	br	400ed80 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 400ec14:	e0bffa17 	ldw	r2,-24(fp)
 400ec18:	10800043 	ldbu	r2,1(r2)
 400ec1c:	10803fcc 	andi	r2,r2,255
 400ec20:	10800160 	cmpeqi	r2,r2,5
 400ec24:	1000091e 	bne	r2,zero,400ec4c <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400ec28:	e0bffa17 	ldw	r2,-24(fp)
 400ec2c:	10800003 	ldbu	r2,0(r2)
 400ec30:	10803fcc 	andi	r2,r2,255
 400ec34:	e0fffb17 	ldw	r3,-20(fp)
 400ec38:	1885883a 	add	r2,r3,r2
 400ec3c:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 400ec40:	e0bffb17 	ldw	r2,-20(fp)
 400ec44:	e0bffa15 	stw	r2,-24(fp)
 400ec48:	00004d06 	br	400ed80 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 400ec4c:	e0fffe03 	ldbu	r3,-8(fp)
 400ec50:	008100f4 	movhi	r2,1027
 400ec54:	10aab004 	addi	r2,r2,-21824
 400ec58:	180690fa 	slli	r3,r3,3
 400ec5c:	10c5883a 	add	r2,r2,r3
 400ec60:	10800017 	ldw	r2,0(r2)
 400ec64:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 400ec68:	e0fffa17 	ldw	r3,-24(fp)
 400ec6c:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 400ec70:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 400ec74:	e0fffe03 	ldbu	r3,-8(fp)
 400ec78:	008100f4 	movhi	r2,1027
 400ec7c:	10aab004 	addi	r2,r2,-21824
 400ec80:	180690fa 	slli	r3,r3,3
 400ec84:	10c5883a 	add	r2,r2,r3
 400ec88:	10800017 	ldw	r2,0(r2)
 400ec8c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 400ec90:	e0fffa17 	ldw	r3,-24(fp)
 400ec94:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 400ec98:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 400ec9c:	e0fffe03 	ldbu	r3,-8(fp)
 400eca0:	008100f4 	movhi	r2,1027
 400eca4:	10aab004 	addi	r2,r2,-21824
 400eca8:	180690fa 	slli	r3,r3,3
 400ecac:	10c5883a 	add	r2,r2,r3
 400ecb0:	10800017 	ldw	r2,0(r2)
 400ecb4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 400ecb8:	e0fffa17 	ldw	r3,-24(fp)
 400ecbc:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 400ecc0:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400ecc4:	e0fffe03 	ldbu	r3,-8(fp)
 400ecc8:	008100f4 	movhi	r2,1027
 400eccc:	10aab004 	addi	r2,r2,-21824
 400ecd0:	180690fa 	slli	r3,r3,3
 400ecd4:	10c5883a 	add	r2,r2,r3
 400ecd8:	10800017 	ldw	r2,0(r2)
 400ecdc:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 400ece0:	e0fffa17 	ldw	r3,-24(fp)
 400ece4:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400ece8:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 400ecec:	e0fffe03 	ldbu	r3,-8(fp)
 400ecf0:	e0bffc43 	ldbu	r2,-15(fp)
 400ecf4:	d8000415 	stw	zero,16(sp)
 400ecf8:	d8000315 	stw	zero,12(sp)
 400ecfc:	d8000215 	stw	zero,8(sp)
 400ed00:	d8000115 	stw	zero,4(sp)
 400ed04:	d8800015 	stw	r2,0(sp)
 400ed08:	01c00244 	movi	r7,9
 400ed0c:	000d883a 	mov	r6,zero
 400ed10:	000b883a 	mov	r5,zero
 400ed14:	1809883a 	mov	r4,r3
 400ed18:	400fb4c0 	call	400fb4c <XferCtrlReq>
 400ed1c:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 400ed20:	e0bffc03 	ldbu	r2,-16(fp)
 400ed24:	10000226 	beq	r2,zero,400ed30 <HIDMProbe+0x364>
							return (FALSE);
 400ed28:	0005883a 	mov	r2,zero
 400ed2c:	00002406 	br	400edc0 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 400ed30:	e0fffe03 	ldbu	r3,-8(fp)
 400ed34:	d0a80443 	ldbu	r2,-24559(gp)
 400ed38:	10803fcc 	andi	r2,r2,255
 400ed3c:	d8000415 	stw	zero,16(sp)
 400ed40:	d8000315 	stw	zero,12(sp)
 400ed44:	d8800215 	stw	r2,8(sp)
 400ed48:	d8000115 	stw	zero,4(sp)
 400ed4c:	d8000015 	stw	zero,0(sp)
 400ed50:	01c002c4 	movi	r7,11
 400ed54:	01800844 	movi	r6,33
 400ed58:	000b883a 	mov	r5,zero
 400ed5c:	1809883a 	mov	r4,r3
 400ed60:	400fb4c0 	call	400fb4c <XferCtrlReq>
 400ed64:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 400ed68:	e0bffc03 	ldbu	r2,-16(fp)
 400ed6c:	10000226 	beq	r2,zero,400ed78 <HIDMProbe+0x3ac>
							return (FALSE);
 400ed70:	0005883a 	mov	r2,zero
 400ed74:	00001206 	br	400edc0 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 400ed78:	00800044 	movi	r2,1
 400ed7c:	00001006 	br	400edc0 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 400ed80:	e0fff90b 	ldhu	r3,-28(fp)
 400ed84:	008100f4 	movhi	r2,1027
 400ed88:	10aa7004 	addi	r2,r2,-22080
 400ed8c:	1885883a 	add	r2,r3,r2
 400ed90:	e0fffb17 	ldw	r3,-20(fp)
 400ed94:	18bf9f36 	bltu	r3,r2,400ec14 <__alt_mem_onchip_memory2_0+0xfc009a54>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400ed98:	00000206 	br	400eda4 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 400ed9c:	0005883a 	mov	r2,zero
 400eda0:	00000706 	br	400edc0 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 400eda4:	e0fff90b 	ldhu	r3,-28(fp)
 400eda8:	008100f4 	movhi	r2,1027
 400edac:	10aa7004 	addi	r2,r2,-22080
 400edb0:	1885883a 	add	r2,r3,r2
 400edb4:	e0fffb17 	ldw	r3,-20(fp)
 400edb8:	18bf4736 	bltu	r3,r2,400ead8 <__alt_mem_onchip_memory2_0+0xfc009918>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 400edbc:	0005883a 	mov	r2,zero
}
 400edc0:	e037883a 	mov	sp,fp
 400edc4:	dfc00117 	ldw	ra,4(sp)
 400edc8:	df000017 	ldw	fp,0(sp)
 400edcc:	dec00204 	addi	sp,sp,8
 400edd0:	f800283a 	ret

0400edd4 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 400edd4:	defff204 	addi	sp,sp,-56
 400edd8:	dfc00d15 	stw	ra,52(sp)
 400eddc:	df000c15 	stw	fp,48(sp)
 400ede0:	df000c04 	addi	fp,sp,48
 400ede4:	2005883a 	mov	r2,r4
 400ede8:	e17fff15 	stw	r5,-4(fp)
 400edec:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 400edf0:	008100f4 	movhi	r2,1027
 400edf4:	10aa7004 	addi	r2,r2,-22080
 400edf8:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 400edfc:	008100f4 	movhi	r2,1027
 400ee00:	10aa7004 	addi	r2,r2,-22080
 400ee04:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 400ee08:	e0fffe03 	ldbu	r3,-8(fp)
 400ee0c:	008100f4 	movhi	r2,1027
 400ee10:	10aa7004 	addi	r2,r2,-22080
 400ee14:	d8800415 	stw	r2,16(sp)
 400ee18:	00800244 	movi	r2,9
 400ee1c:	d8800315 	stw	r2,12(sp)
 400ee20:	d8000215 	stw	zero,8(sp)
 400ee24:	00800084 	movi	r2,2
 400ee28:	d8800115 	stw	r2,4(sp)
 400ee2c:	d8000015 	stw	zero,0(sp)
 400ee30:	01c00184 	movi	r7,6
 400ee34:	01802004 	movi	r6,128
 400ee38:	000b883a 	mov	r5,zero
 400ee3c:	1809883a 	mov	r4,r3
 400ee40:	400fb4c0 	call	400fb4c <XferCtrlReq>
 400ee44:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 400ee48:	e0bffc03 	ldbu	r2,-16(fp)
 400ee4c:	10000226 	beq	r2,zero,400ee58 <HIDKProbe+0x84>
		return (FALSE);
 400ee50:	0005883a 	mov	r2,zero
 400ee54:	0000dc06 	br	400f1c8 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 400ee58:	e0bffa17 	ldw	r2,-24(fp)
 400ee5c:	1080008b 	ldhu	r2,2(r2)
 400ee60:	10bfffcc 	andi	r2,r2,65535
 400ee64:	10804070 	cmpltui	r2,r2,257
 400ee68:	1000031e 	bne	r2,zero,400ee78 <HIDKProbe+0xa4>
		total_length = 256;
 400ee6c:	00804004 	movi	r2,256
 400ee70:	e0bff90d 	sth	r2,-28(fp)
 400ee74:	00000306 	br	400ee84 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 400ee78:	e0bffa17 	ldw	r2,-24(fp)
 400ee7c:	1080008b 	ldhu	r2,2(r2)
 400ee80:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 400ee84:	e13ffe03 	ldbu	r4,-8(fp)
 400ee88:	e0fff90b 	ldhu	r3,-28(fp)
 400ee8c:	008100f4 	movhi	r2,1027
 400ee90:	10aa7004 	addi	r2,r2,-22080
 400ee94:	d8800415 	stw	r2,16(sp)
 400ee98:	d8c00315 	stw	r3,12(sp)
 400ee9c:	d8000215 	stw	zero,8(sp)
 400eea0:	00800084 	movi	r2,2
 400eea4:	d8800115 	stw	r2,4(sp)
 400eea8:	d8000015 	stw	zero,0(sp)
 400eeac:	01c00184 	movi	r7,6
 400eeb0:	01802004 	movi	r6,128
 400eeb4:	000b883a 	mov	r5,zero
 400eeb8:	400fb4c0 	call	400fb4c <XferCtrlReq>
 400eebc:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 400eec0:	e0bffc03 	ldbu	r2,-16(fp)
 400eec4:	10000226 	beq	r2,zero,400eed0 <HIDKProbe+0xfc>
		return (FALSE);
 400eec8:	0005883a 	mov	r2,zero
 400eecc:	0000be06 	br	400f1c8 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 400eed0:	e0bffa17 	ldw	r2,-24(fp)
 400eed4:	10800143 	ldbu	r2,5(r2)
 400eed8:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 400eedc:	0000b306 	br	400f1ac <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 400eee0:	e0bffa17 	ldw	r2,-24(fp)
 400eee4:	10800043 	ldbu	r2,1(r2)
 400eee8:	10803fcc 	andi	r2,r2,255
 400eeec:	10800120 	cmpeqi	r2,r2,4
 400eef0:	1000091e 	bne	r2,zero,400ef18 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400eef4:	e0bffa17 	ldw	r2,-24(fp)
 400eef8:	10800003 	ldbu	r2,0(r2)
 400eefc:	10803fcc 	andi	r2,r2,255
 400ef00:	e0fffb17 	ldw	r3,-20(fp)
 400ef04:	1885883a 	add	r2,r3,r2
 400ef08:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 400ef0c:	e0bffb17 	ldw	r2,-20(fp)
 400ef10:	e0bffa15 	stw	r2,-24(fp)
 400ef14:	0000a506 	br	400f1ac <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 400ef18:	e0bffa17 	ldw	r2,-24(fp)
 400ef1c:	10800143 	ldbu	r2,5(r2)
 400ef20:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 400ef24:	e0bffa17 	ldw	r2,-24(fp)
 400ef28:	10800183 	ldbu	r2,6(r2)
 400ef2c:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 400ef30:	e0bffa17 	ldw	r2,-24(fp)
 400ef34:	108001c3 	ldbu	r2,7(r2)
 400ef38:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400ef3c:	e0bffc83 	ldbu	r2,-14(fp)
 400ef40:	108000d8 	cmpnei	r2,r2,3
 400ef44:	1000971e 	bne	r2,zero,400f1a4 <HIDKProbe+0x3d0>
 400ef48:	e0bffcc3 	ldbu	r2,-13(fp)
 400ef4c:	10800058 	cmpnei	r2,r2,1
 400ef50:	1000941e 	bne	r2,zero,400f1a4 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 400ef54:	e0bffd03 	ldbu	r2,-12(fp)
 400ef58:	10800058 	cmpnei	r2,r2,1
 400ef5c:	1000911e 	bne	r2,zero,400f1a4 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 400ef60:	e0fffe03 	ldbu	r3,-8(fp)
 400ef64:	008100f4 	movhi	r2,1027
 400ef68:	10aab004 	addi	r2,r2,-21824
 400ef6c:	180690fa 	slli	r3,r3,3
 400ef70:	10c5883a 	add	r2,r2,r3
 400ef74:	10800104 	addi	r2,r2,4
 400ef78:	00c00044 	movi	r3,1
 400ef7c:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 400ef80:	e0fffe03 	ldbu	r3,-8(fp)
 400ef84:	008100f4 	movhi	r2,1027
 400ef88:	10aab004 	addi	r2,r2,-21824
 400ef8c:	180690fa 	slli	r3,r3,3
 400ef90:	10c5883a 	add	r2,r2,r3
 400ef94:	10800017 	ldw	r2,0(r2)
 400ef98:	1080008b 	ldhu	r2,2(r2)
 400ef9c:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 400efa0:	400f1dc0 	call	400f1dc <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 400efa4:	e0fffe03 	ldbu	r3,-8(fp)
 400efa8:	008100f4 	movhi	r2,1027
 400efac:	10aab004 	addi	r2,r2,-21824
 400efb0:	180690fa 	slli	r3,r3,3
 400efb4:	10c7883a 	add	r3,r2,r3
 400efb8:	008100f4 	movhi	r2,1027
 400efbc:	10a5f004 	addi	r2,r2,-26688
 400efc0:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 400efc4:	e0fffe03 	ldbu	r3,-8(fp)
 400efc8:	008100f4 	movhi	r2,1027
 400efcc:	10aab004 	addi	r2,r2,-21824
 400efd0:	180690fa 	slli	r3,r3,3
 400efd4:	10c5883a 	add	r2,r2,r3
 400efd8:	10800017 	ldw	r2,0(r2)
 400efdc:	e0fffd43 	ldbu	r3,-11(fp)
 400efe0:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 400efe4:	e0bffa17 	ldw	r2,-24(fp)
 400efe8:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 400efec:	d0a80445 	stb	r2,-24559(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 400eff0:	e0bffe03 	ldbu	r2,-8(fp)
 400eff4:	d0a80405 	stb	r2,-24560(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 400eff8:	e0bffa17 	ldw	r2,-24(fp)
 400effc:	10800003 	ldbu	r2,0(r2)
 400f000:	10803fcc 	andi	r2,r2,255
 400f004:	e0fffb17 	ldw	r3,-20(fp)
 400f008:	1885883a 	add	r2,r3,r2
 400f00c:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 400f010:	e0bffb17 	ldw	r2,-20(fp)
 400f014:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 400f018:	00005b06 	br	400f188 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 400f01c:	e0bffa17 	ldw	r2,-24(fp)
 400f020:	10800043 	ldbu	r2,1(r2)
 400f024:	10803fcc 	andi	r2,r2,255
 400f028:	10800160 	cmpeqi	r2,r2,5
 400f02c:	1000091e 	bne	r2,zero,400f054 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400f030:	e0bffa17 	ldw	r2,-24(fp)
 400f034:	10800003 	ldbu	r2,0(r2)
 400f038:	10803fcc 	andi	r2,r2,255
 400f03c:	e0fffb17 	ldw	r3,-20(fp)
 400f040:	1885883a 	add	r2,r3,r2
 400f044:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 400f048:	e0bffb17 	ldw	r2,-20(fp)
 400f04c:	e0bffa15 	stw	r2,-24(fp)
 400f050:	00004d06 	br	400f188 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 400f054:	e0fffe03 	ldbu	r3,-8(fp)
 400f058:	008100f4 	movhi	r2,1027
 400f05c:	10aab004 	addi	r2,r2,-21824
 400f060:	180690fa 	slli	r3,r3,3
 400f064:	10c5883a 	add	r2,r2,r3
 400f068:	10800017 	ldw	r2,0(r2)
 400f06c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 400f070:	e0fffa17 	ldw	r3,-24(fp)
 400f074:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 400f078:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 400f07c:	e0fffe03 	ldbu	r3,-8(fp)
 400f080:	008100f4 	movhi	r2,1027
 400f084:	10aab004 	addi	r2,r2,-21824
 400f088:	180690fa 	slli	r3,r3,3
 400f08c:	10c5883a 	add	r2,r2,r3
 400f090:	10800017 	ldw	r2,0(r2)
 400f094:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 400f098:	e0fffa17 	ldw	r3,-24(fp)
 400f09c:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 400f0a0:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 400f0a4:	e0fffe03 	ldbu	r3,-8(fp)
 400f0a8:	008100f4 	movhi	r2,1027
 400f0ac:	10aab004 	addi	r2,r2,-21824
 400f0b0:	180690fa 	slli	r3,r3,3
 400f0b4:	10c5883a 	add	r2,r2,r3
 400f0b8:	10800017 	ldw	r2,0(r2)
 400f0bc:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 400f0c0:	e0fffa17 	ldw	r3,-24(fp)
 400f0c4:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 400f0c8:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400f0cc:	e0fffe03 	ldbu	r3,-8(fp)
 400f0d0:	008100f4 	movhi	r2,1027
 400f0d4:	10aab004 	addi	r2,r2,-21824
 400f0d8:	180690fa 	slli	r3,r3,3
 400f0dc:	10c5883a 	add	r2,r2,r3
 400f0e0:	10800017 	ldw	r2,0(r2)
 400f0e4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 400f0e8:	e0fffa17 	ldw	r3,-24(fp)
 400f0ec:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400f0f0:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 400f0f4:	e0fffe03 	ldbu	r3,-8(fp)
 400f0f8:	e0bffc43 	ldbu	r2,-15(fp)
 400f0fc:	d8000415 	stw	zero,16(sp)
 400f100:	d8000315 	stw	zero,12(sp)
 400f104:	d8000215 	stw	zero,8(sp)
 400f108:	d8000115 	stw	zero,4(sp)
 400f10c:	d8800015 	stw	r2,0(sp)
 400f110:	01c00244 	movi	r7,9
 400f114:	000d883a 	mov	r6,zero
 400f118:	000b883a 	mov	r5,zero
 400f11c:	1809883a 	mov	r4,r3
 400f120:	400fb4c0 	call	400fb4c <XferCtrlReq>
 400f124:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 400f128:	e0bffc03 	ldbu	r2,-16(fp)
 400f12c:	10000226 	beq	r2,zero,400f138 <HIDKProbe+0x364>
							return (FALSE);
 400f130:	0005883a 	mov	r2,zero
 400f134:	00002406 	br	400f1c8 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 400f138:	e0fffe03 	ldbu	r3,-8(fp)
 400f13c:	d0a80443 	ldbu	r2,-24559(gp)
 400f140:	10803fcc 	andi	r2,r2,255
 400f144:	d8000415 	stw	zero,16(sp)
 400f148:	d8000315 	stw	zero,12(sp)
 400f14c:	d8800215 	stw	r2,8(sp)
 400f150:	d8000115 	stw	zero,4(sp)
 400f154:	d8000015 	stw	zero,0(sp)
 400f158:	01c002c4 	movi	r7,11
 400f15c:	01800844 	movi	r6,33
 400f160:	000b883a 	mov	r5,zero
 400f164:	1809883a 	mov	r4,r3
 400f168:	400fb4c0 	call	400fb4c <XferCtrlReq>
 400f16c:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 400f170:	e0bffc03 	ldbu	r2,-16(fp)
 400f174:	10000226 	beq	r2,zero,400f180 <HIDKProbe+0x3ac>
							return (FALSE);
 400f178:	0005883a 	mov	r2,zero
 400f17c:	00001206 	br	400f1c8 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 400f180:	00800044 	movi	r2,1
 400f184:	00001006 	br	400f1c8 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 400f188:	e0fff90b 	ldhu	r3,-28(fp)
 400f18c:	008100f4 	movhi	r2,1027
 400f190:	10aa7004 	addi	r2,r2,-22080
 400f194:	1885883a 	add	r2,r3,r2
 400f198:	e0fffb17 	ldw	r3,-20(fp)
 400f19c:	18bf9f36 	bltu	r3,r2,400f01c <__alt_mem_onchip_memory2_0+0xfc009e5c>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400f1a0:	00000206 	br	400f1ac <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 400f1a4:	0005883a 	mov	r2,zero
 400f1a8:	00000706 	br	400f1c8 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 400f1ac:	e0fff90b 	ldhu	r3,-28(fp)
 400f1b0:	008100f4 	movhi	r2,1027
 400f1b4:	10aa7004 	addi	r2,r2,-22080
 400f1b8:	1885883a 	add	r2,r3,r2
 400f1bc:	e0fffb17 	ldw	r3,-20(fp)
 400f1c0:	18bf4736 	bltu	r3,r2,400eee0 <__alt_mem_onchip_memory2_0+0xfc009d20>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 400f1c4:	0005883a 	mov	r2,zero
}
 400f1c8:	e037883a 	mov	sp,fp
 400f1cc:	dfc00117 	ldw	ra,4(sp)
 400f1d0:	df000017 	ldw	fp,0(sp)
 400f1d4:	dec00204 	addi	sp,sp,8
 400f1d8:	f800283a 	ret

0400f1dc <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 400f1dc:	deffff04 	addi	sp,sp,-4
 400f1e0:	df000015 	stw	fp,0(sp)
 400f1e4:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 400f1e8:	008100f4 	movhi	r2,1027
 400f1ec:	10a5f004 	addi	r2,r2,-26688
 400f1f0:	00c01004 	movi	r3,64
 400f1f4:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 400f1f8:	008100f4 	movhi	r2,1027
 400f1fc:	10a5f004 	addi	r2,r2,-26688
 400f200:	00c00404 	movi	r3,16
 400f204:	10c00385 	stb	r3,14(r2)
}
 400f208:	0001883a 	nop
 400f20c:	e037883a 	mov	sp,fp
 400f210:	df000017 	ldw	fp,0(sp)
 400f214:	dec00104 	addi	sp,sp,4
 400f218:	f800283a 	ret

0400f21c <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 400f21c:	defffb04 	addi	sp,sp,-20
 400f220:	dfc00415 	stw	ra,16(sp)
 400f224:	df000315 	stw	fp,12(sp)
 400f228:	df000304 	addi	fp,sp,12
 400f22c:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 400f230:	d0a80403 	ldbu	r2,-24560(gp)
 400f234:	10803fcc 	andi	r2,r2,255
 400f238:	100b883a 	mov	r5,r2
 400f23c:	01003804 	movi	r4,224
 400f240:	400f3f80 	call	400f3f8 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 400f244:	d0a80403 	ldbu	r2,-24560(gp)
 400f248:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 400f24c:	d0a80403 	ldbu	r2,-24560(gp)
 400f250:	10c03fcc 	andi	r3,r2,255
 400f254:	008100f4 	movhi	r2,1027
 400f258:	10aab004 	addi	r2,r2,-21824
 400f25c:	180690fa 	slli	r3,r3,3
 400f260:	10c5883a 	add	r2,r2,r3
 400f264:	10800017 	ldw	r2,0(r2)
 400f268:	10800204 	addi	r2,r2,8
 400f26c:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 400f270:	10803fcc 	andi	r2,r2,255
 400f274:	d8800015 	stw	r2,0(sp)
 400f278:	e1ffff17 	ldw	r7,-4(fp)
 400f27c:	01800204 	movi	r6,8
 400f280:	01400044 	movi	r5,1
 400f284:	400ff100 	call	400ff10 <XferInTransfer>
 400f288:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 400f28c:	e0bffe03 	ldbu	r2,-8(fp)
}
 400f290:	e037883a 	mov	sp,fp
 400f294:	dfc00117 	ldw	ra,4(sp)
 400f298:	df000017 	ldw	fp,0(sp)
 400f29c:	dec00204 	addi	sp,sp,8
 400f2a0:	f800283a 	ret

0400f2a4 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 400f2a4:	defffb04 	addi	sp,sp,-20
 400f2a8:	dfc00415 	stw	ra,16(sp)
 400f2ac:	df000315 	stw	fp,12(sp)
 400f2b0:	df000304 	addi	fp,sp,12
 400f2b4:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 400f2b8:	d0a80403 	ldbu	r2,-24560(gp)
 400f2bc:	10803fcc 	andi	r2,r2,255
 400f2c0:	100b883a 	mov	r5,r2
 400f2c4:	01003804 	movi	r4,224
 400f2c8:	400f3f80 	call	400f3f8 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 400f2cc:	d0a80403 	ldbu	r2,-24560(gp)
 400f2d0:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 400f2d4:	d0a80403 	ldbu	r2,-24560(gp)
 400f2d8:	10c03fcc 	andi	r3,r2,255
 400f2dc:	008100f4 	movhi	r2,1027
 400f2e0:	10aab004 	addi	r2,r2,-21824
 400f2e4:	180690fa 	slli	r3,r3,3
 400f2e8:	10c5883a 	add	r2,r2,r3
 400f2ec:	10800017 	ldw	r2,0(r2)
 400f2f0:	10800204 	addi	r2,r2,8
 400f2f4:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 400f2f8:	10803fcc 	andi	r2,r2,255
 400f2fc:	d8800015 	stw	r2,0(sp)
 400f300:	e1ffff17 	ldw	r7,-4(fp)
 400f304:	01800204 	movi	r6,8
 400f308:	01400044 	movi	r5,1
 400f30c:	400ff100 	call	400ff10 <XferInTransfer>
 400f310:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 400f314:	e0bffe03 	ldbu	r2,-8(fp)
}
 400f318:	e037883a 	mov	sp,fp
 400f31c:	dfc00117 	ldw	ra,4(sp)
 400f320:	df000017 	ldw	fp,0(sp)
 400f324:	dec00204 	addi	sp,sp,8
 400f328:	f800283a 	ret

0400f32c <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 400f32c:	defffb04 	addi	sp,sp,-20
 400f330:	df000415 	stw	fp,16(sp)
 400f334:	df000404 	addi	fp,sp,16
 400f338:	2007883a 	mov	r3,r4
 400f33c:	2805883a 	mov	r2,r5
 400f340:	e1bffe15 	stw	r6,-8(fp)
 400f344:	e1ffff15 	stw	r7,-4(fp)
 400f348:	e0fffc05 	stb	r3,-16(fp)
 400f34c:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 400f350:	0005883a 	mov	r2,zero
}
 400f354:	e037883a 	mov	sp,fp
 400f358:	df000017 	ldw	fp,0(sp)
 400f35c:	dec00104 	addi	sp,sp,4
 400f360:	f800283a 	ret

0400f364 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 400f364:	defffb04 	addi	sp,sp,-20
 400f368:	df000415 	stw	fp,16(sp)
 400f36c:	df000404 	addi	fp,sp,16
 400f370:	2007883a 	mov	r3,r4
 400f374:	2805883a 	mov	r2,r5
 400f378:	e1bffe15 	stw	r6,-8(fp)
 400f37c:	e1ffff15 	stw	r7,-4(fp)
 400f380:	e0fffc05 	stb	r3,-16(fp)
 400f384:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 400f388:	0005883a 	mov	r2,zero
}
 400f38c:	e037883a 	mov	sp,fp
 400f390:	df000017 	ldw	fp,0(sp)
 400f394:	dec00104 	addi	sp,sp,4
 400f398:	f800283a 	ret

0400f39c <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 400f39c:	defffc04 	addi	sp,sp,-16
 400f3a0:	df000315 	stw	fp,12(sp)
 400f3a4:	df000304 	addi	fp,sp,12
 400f3a8:	2807883a 	mov	r3,r5
 400f3ac:	3005883a 	mov	r2,r6
 400f3b0:	e13ffd05 	stb	r4,-12(fp)
 400f3b4:	e0fffe05 	stb	r3,-8(fp)
 400f3b8:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 400f3bc:	0001883a 	nop
 400f3c0:	e037883a 	mov	sp,fp
 400f3c4:	df000017 	ldw	fp,0(sp)
 400f3c8:	dec00104 	addi	sp,sp,4
 400f3cc:	f800283a 	ret

0400f3d0 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 400f3d0:	defffe04 	addi	sp,sp,-8
 400f3d4:	df000115 	stw	fp,4(sp)
 400f3d8:	df000104 	addi	fp,sp,4
 400f3dc:	2005883a 	mov	r2,r4
 400f3e0:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 400f3e4:	0001883a 	nop
 400f3e8:	e037883a 	mov	sp,fp
 400f3ec:	df000017 	ldw	fp,0(sp)
 400f3f0:	dec00104 	addi	sp,sp,4
 400f3f4:	f800283a 	ret

0400f3f8 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 400f3f8:	defff704 	addi	sp,sp,-36
 400f3fc:	dfc00815 	stw	ra,32(sp)
 400f400:	df000715 	stw	fp,28(sp)
 400f404:	df000704 	addi	fp,sp,28
 400f408:	2007883a 	mov	r3,r4
 400f40c:	2805883a 	mov	r2,r5
 400f410:	e0fffe05 	stb	r3,-8(fp)
 400f414:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE dataTransfer[2];
	dataTransfer[0] = reg+2;
 400f418:	e0bffe03 	ldbu	r2,-8(fp)
 400f41c:	10800084 	addi	r2,r2,2
 400f420:	e0bffd05 	stb	r2,-12(fp)
	dataTransfer[1] = val;
 400f424:	e0bfff03 	ldbu	r2,-4(fp)
 400f428:	e0bffd45 	stb	r2,-11(fp)
	int returncode = alt_avalon_spi_command(SPI_0_BASE,0,2,dataTransfer,0,0,0);
 400f42c:	e0bffd04 	addi	r2,fp,-12
 400f430:	d8000215 	stw	zero,8(sp)
 400f434:	d8000115 	stw	zero,4(sp)
 400f438:	d8000015 	stw	zero,0(sp)
 400f43c:	100f883a 	mov	r7,r2
 400f440:	01800084 	movi	r6,2
 400f444:	000b883a 	mov	r5,zero
 400f448:	01020034 	movhi	r4,2048
 400f44c:	21142804 	addi	r4,r4,20640
 400f450:	4023d080 	call	4023d08 <alt_avalon_spi_command>
 400f454:	e0bffc15 	stw	r2,-16(fp)
	if(returncode<0){
 400f458:	e0bffc17 	ldw	r2,-16(fp)
 400f45c:	1000030e 	bge	r2,zero,400f46c <MAXreg_wr+0x74>
		alt_printf("Error");
 400f460:	010100b4 	movhi	r4,1026
 400f464:	21150f04 	addi	r4,r4,21564
 400f468:	40229e00 	call	40229e0 <alt_printf>
	}
}
 400f46c:	0001883a 	nop
 400f470:	e037883a 	mov	sp,fp
 400f474:	dfc00117 	ldw	ra,4(sp)
 400f478:	df000017 	ldw	fp,0(sp)
 400f47c:	dec00204 	addi	sp,sp,8
 400f480:	f800283a 	ret

0400f484 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 400f484:	defff304 	addi	sp,sp,-52
 400f488:	dfc00c15 	stw	ra,48(sp)
 400f48c:	df000b15 	stw	fp,44(sp)
 400f490:	dc000a15 	stw	r16,40(sp)
 400f494:	df000b04 	addi	fp,sp,44
 400f498:	201b883a 	mov	r13,r4
 400f49c:	2809883a 	mov	r4,r5
 400f4a0:	e1bffe15 	stw	r6,-8(fp)
 400f4a4:	e37ffc05 	stb	r13,-16(fp)
 400f4a8:	e13ffd05 	stb	r4,-12(fp)
 400f4ac:	d809883a 	mov	r4,sp
 400f4b0:	2021883a 	mov	r16,r4
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE dataTransfer[nbytes+1];
 400f4b4:	e13ffd03 	ldbu	r4,-12(fp)
 400f4b8:	21000044 	addi	r4,r4,1
 400f4bc:	217fffc4 	addi	r5,r4,-1
 400f4c0:	e17ff915 	stw	r5,-28(fp)
 400f4c4:	200b883a 	mov	r5,r4
 400f4c8:	2817883a 	mov	r11,r5
 400f4cc:	0019883a 	mov	r12,zero
 400f4d0:	580ad77a 	srli	r5,r11,29
 400f4d4:	601090fa 	slli	r8,r12,3
 400f4d8:	2a10b03a 	or	r8,r5,r8
 400f4dc:	580e90fa 	slli	r7,r11,3
 400f4e0:	200b883a 	mov	r5,r4
 400f4e4:	2813883a 	mov	r9,r5
 400f4e8:	0015883a 	mov	r10,zero
 400f4ec:	480ad77a 	srli	r5,r9,29
 400f4f0:	500690fa 	slli	r3,r10,3
 400f4f4:	28c6b03a 	or	r3,r5,r3
 400f4f8:	480490fa 	slli	r2,r9,3
 400f4fc:	2005883a 	mov	r2,r4
 400f500:	108000c4 	addi	r2,r2,3
 400f504:	1004d0ba 	srli	r2,r2,2
 400f508:	1085883a 	add	r2,r2,r2
 400f50c:	1085883a 	add	r2,r2,r2
 400f510:	d8b7c83a 	sub	sp,sp,r2
 400f514:	d8800304 	addi	r2,sp,12
 400f518:	1005883a 	mov	r2,r2
 400f51c:	e0bffa15 	stw	r2,-24(fp)
	dataTransfer[0] = reg+2;
 400f520:	e0bffc03 	ldbu	r2,-16(fp)
 400f524:	10800084 	addi	r2,r2,2
 400f528:	1007883a 	mov	r3,r2
 400f52c:	e0bffa17 	ldw	r2,-24(fp)
 400f530:	10c00005 	stb	r3,0(r2)
	for(int i = 1; i<nbytes+1; i++){
 400f534:	00800044 	movi	r2,1
 400f538:	e0bff815 	stw	r2,-32(fp)
 400f53c:	00000c06 	br	400f570 <MAXbytes_wr+0xec>
		dataTransfer[i] = data[i-1];
 400f540:	e0bff817 	ldw	r2,-32(fp)
 400f544:	10bfffc4 	addi	r2,r2,-1
 400f548:	e0fffe17 	ldw	r3,-8(fp)
 400f54c:	1885883a 	add	r2,r3,r2
 400f550:	10c00003 	ldbu	r3,0(r2)
 400f554:	e13ffa17 	ldw	r4,-24(fp)
 400f558:	e0bff817 	ldw	r2,-32(fp)
 400f55c:	2085883a 	add	r2,r4,r2
 400f560:	10c00005 	stb	r3,0(r2)
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE dataTransfer[nbytes+1];
	dataTransfer[0] = reg+2;
	for(int i = 1; i<nbytes+1; i++){
 400f564:	e0bff817 	ldw	r2,-32(fp)
 400f568:	10800044 	addi	r2,r2,1
 400f56c:	e0bff815 	stw	r2,-32(fp)
 400f570:	e0bffd03 	ldbu	r2,-12(fp)
 400f574:	10800044 	addi	r2,r2,1
 400f578:	e0fff817 	ldw	r3,-32(fp)
 400f57c:	18bff016 	blt	r3,r2,400f540 <__alt_mem_onchip_memory2_0+0xfc00a380>
		dataTransfer[i] = data[i-1];
	}
	int returncode = alt_avalon_spi_command(SPI_0_BASE,0,nbytes+1,dataTransfer,0,0,0);
 400f580:	e0bffd03 	ldbu	r2,-12(fp)
 400f584:	10800044 	addi	r2,r2,1
 400f588:	1007883a 	mov	r3,r2
 400f58c:	e0bffa17 	ldw	r2,-24(fp)
 400f590:	d8000215 	stw	zero,8(sp)
 400f594:	d8000115 	stw	zero,4(sp)
 400f598:	d8000015 	stw	zero,0(sp)
 400f59c:	100f883a 	mov	r7,r2
 400f5a0:	180d883a 	mov	r6,r3
 400f5a4:	000b883a 	mov	r5,zero
 400f5a8:	01020034 	movhi	r4,2048
 400f5ac:	21142804 	addi	r4,r4,20640
 400f5b0:	4023d080 	call	4023d08 <alt_avalon_spi_command>
 400f5b4:	e0bffb15 	stw	r2,-20(fp)
	if(returncode<0){
 400f5b8:	e0bffb17 	ldw	r2,-20(fp)
 400f5bc:	1000030e 	bge	r2,zero,400f5cc <MAXbytes_wr+0x148>
		alt_printf("Error");
 400f5c0:	010100b4 	movhi	r4,1026
 400f5c4:	21150f04 	addi	r4,r4,21564
 400f5c8:	40229e00 	call	40229e0 <alt_printf>
	}
	return (data+nbytes);
 400f5cc:	e0bffd03 	ldbu	r2,-12(fp)
 400f5d0:	e0fffe17 	ldw	r3,-8(fp)
 400f5d4:	1885883a 	add	r2,r3,r2
 400f5d8:	8037883a 	mov	sp,r16
}
 400f5dc:	e6ffff04 	addi	sp,fp,-4
 400f5e0:	dfc00217 	ldw	ra,8(sp)
 400f5e4:	df000117 	ldw	fp,4(sp)
 400f5e8:	dc000017 	ldw	r16,0(sp)
 400f5ec:	dec00304 	addi	sp,sp,12
 400f5f0:	f800283a 	ret

0400f5f4 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 400f5f4:	defff804 	addi	sp,sp,-32
 400f5f8:	dfc00715 	stw	ra,28(sp)
 400f5fc:	df000615 	stw	fp,24(sp)
 400f600:	df000604 	addi	fp,sp,24
 400f604:	2005883a 	mov	r2,r4
 400f608:	e0bfff05 	stb	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	BYTE val;
	int returncode = alt_avalon_spi_command(SPI_0_BASE,0,1,&reg,1,&val,0);
 400f60c:	e0ffff04 	addi	r3,fp,-4
 400f610:	d8000215 	stw	zero,8(sp)
 400f614:	e0bffe04 	addi	r2,fp,-8
 400f618:	d8800115 	stw	r2,4(sp)
 400f61c:	00800044 	movi	r2,1
 400f620:	d8800015 	stw	r2,0(sp)
 400f624:	180f883a 	mov	r7,r3
 400f628:	01800044 	movi	r6,1
 400f62c:	000b883a 	mov	r5,zero
 400f630:	01020034 	movhi	r4,2048
 400f634:	21142804 	addi	r4,r4,20640
 400f638:	4023d080 	call	4023d08 <alt_avalon_spi_command>
 400f63c:	e0bffd15 	stw	r2,-12(fp)
//	alt_printf("keyboard input success");
	if(returncode<0){
 400f640:	e0bffd17 	ldw	r2,-12(fp)
 400f644:	1000030e 	bge	r2,zero,400f654 <MAXreg_rd+0x60>
		alt_printf("Error");
 400f648:	010100b4 	movhi	r4,1026
 400f64c:	21150f04 	addi	r4,r4,21564
 400f650:	40229e00 	call	40229e0 <alt_printf>
	}
	return val;
 400f654:	e0bffe03 	ldbu	r2,-8(fp)
}
 400f658:	e037883a 	mov	sp,fp
 400f65c:	dfc00117 	ldw	ra,4(sp)
 400f660:	df000017 	ldw	fp,0(sp)
 400f664:	dec00204 	addi	sp,sp,8
 400f668:	f800283a 	ret

0400f66c <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 400f66c:	defff704 	addi	sp,sp,-36
 400f670:	dfc00815 	stw	ra,32(sp)
 400f674:	df000715 	stw	fp,28(sp)
 400f678:	df000704 	addi	fp,sp,28
 400f67c:	2007883a 	mov	r3,r4
 400f680:	2805883a 	mov	r2,r5
 400f684:	e1bfff15 	stw	r6,-4(fp)
 400f688:	e0fffd05 	stb	r3,-12(fp)
 400f68c:	e0bffe05 	stb	r2,-8(fp)
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	int returncode = alt_avalon_spi_command(SPI_0_BASE,0,1,&reg,nbytes,data,0);
 400f690:	e0bffe03 	ldbu	r2,-8(fp)
 400f694:	e13ffd04 	addi	r4,fp,-12
 400f698:	d8000215 	stw	zero,8(sp)
 400f69c:	e0ffff17 	ldw	r3,-4(fp)
 400f6a0:	d8c00115 	stw	r3,4(sp)
 400f6a4:	d8800015 	stw	r2,0(sp)
 400f6a8:	200f883a 	mov	r7,r4
 400f6ac:	01800044 	movi	r6,1
 400f6b0:	000b883a 	mov	r5,zero
 400f6b4:	01020034 	movhi	r4,2048
 400f6b8:	21142804 	addi	r4,r4,20640
 400f6bc:	4023d080 	call	4023d08 <alt_avalon_spi_command>
 400f6c0:	e0bffc15 	stw	r2,-16(fp)
		if(returncode<0){
 400f6c4:	e0bffc17 	ldw	r2,-16(fp)
 400f6c8:	1000030e 	bge	r2,zero,400f6d8 <MAXbytes_rd+0x6c>
			alt_printf("Error");
 400f6cc:	010100b4 	movhi	r4,1026
 400f6d0:	21150f04 	addi	r4,r4,21564
 400f6d4:	40229e00 	call	40229e0 <alt_printf>
		}

	return (data +nbytes);
 400f6d8:	e0bffe03 	ldbu	r2,-8(fp)
 400f6dc:	e0ffff17 	ldw	r3,-4(fp)
 400f6e0:	1885883a 	add	r2,r3,r2

}
 400f6e4:	e037883a 	mov	sp,fp
 400f6e8:	dfc00117 	ldw	ra,4(sp)
 400f6ec:	df000017 	ldw	fp,0(sp)
 400f6f0:	dec00204 	addi	sp,sp,8
 400f6f4:	f800283a 	ret

0400f6f8 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 400f6f8:	defffd04 	addi	sp,sp,-12
 400f6fc:	dfc00215 	stw	ra,8(sp)
 400f700:	df000115 	stw	fp,4(sp)
 400f704:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 400f708:	0007883a 	mov	r3,zero
 400f70c:	00820034 	movhi	r2,2048
 400f710:	10945c04 	addi	r2,r2,20848
 400f714:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 400f718:	010003f4 	movhi	r4,15
 400f71c:	21109004 	addi	r4,r4,16960
 400f720:	40230600 	call	4023060 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 400f724:	00c00044 	movi	r3,1
 400f728:	00820034 	movhi	r2,2048
 400f72c:	10945c04 	addi	r2,r2,20848
 400f730:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 400f734:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 400f738:	01400804 	movi	r5,32
 400f73c:	01001e04 	movi	r4,120
 400f740:	400f3f80 	call	400f3f8 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 400f744:	000b883a 	mov	r5,zero
 400f748:	01001e04 	movi	r4,120
 400f74c:	400f3f80 	call	400f3f8 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 400f750:	00000806 	br	400f774 <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
 400f754:	e0bfff03 	ldbu	r2,-4(fp)
 400f758:	10800044 	addi	r2,r2,1
 400f75c:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 400f760:	e0bfff03 	ldbu	r2,-4(fp)
 400f764:	1000031e 	bne	r2,zero,400f774 <MAX3421E_reset+0x7c>
			printf("reset timeout!");
 400f768:	010100b4 	movhi	r4,1026
 400f76c:	21151104 	addi	r4,r4,21572
 400f770:	40140980 	call	4014098 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 400f774:	01001a04 	movi	r4,104
 400f778:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400f77c:	10803fcc 	andi	r2,r2,255
 400f780:	1080004c 	andi	r2,r2,1
 400f784:	103ff326 	beq	r2,zero,400f754 <__alt_mem_onchip_memory2_0+0xfc00a594>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 400f788:	0001883a 	nop
 400f78c:	e037883a 	mov	sp,fp
 400f790:	dfc00117 	ldw	ra,4(sp)
 400f794:	df000017 	ldw	fp,0(sp)
 400f798:	dec00204 	addi	sp,sp,8
 400f79c:	f800283a 	ret

0400f7a0 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 400f7a0:	defffe04 	addi	sp,sp,-8
 400f7a4:	df000115 	stw	fp,4(sp)
 400f7a8:	df000104 	addi	fp,sp,4
 400f7ac:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 400f7b0:	00800044 	movi	r2,1
}
 400f7b4:	e037883a 	mov	sp,fp
 400f7b8:	df000017 	ldw	fp,0(sp)
 400f7bc:	dec00104 	addi	sp,sp,4
 400f7c0:	f800283a 	ret

0400f7c4 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 400f7c4:	defffd04 	addi	sp,sp,-12
 400f7c8:	dfc00215 	stw	ra,8(sp)
 400f7cc:	df000115 	stw	fp,4(sp)
 400f7d0:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 400f7d4:	01003e04 	movi	r4,248
 400f7d8:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400f7dc:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 400f7e0:	e0ffff03 	ldbu	r3,-4(fp)
 400f7e4:	00bff004 	movi	r2,-64
 400f7e8:	1884703a 	and	r2,r3,r2
 400f7ec:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 400f7f0:	e0bfff03 	ldbu	r2,-4(fp)
 400f7f4:	10c01020 	cmpeqi	r3,r2,64
 400f7f8:	1800221e 	bne	r3,zero,400f884 <MAX_busprobe+0xc0>
 400f7fc:	10c01048 	cmpgei	r3,r2,65
 400f800:	1800021e 	bne	r3,zero,400f80c <MAX_busprobe+0x48>
 400f804:	10003b26 	beq	r2,zero,400f8f4 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 400f808:	00004a06 	br	400f934 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 400f80c:	10c02020 	cmpeqi	r3,r2,128
 400f810:	1800031e 	bne	r3,zero,400f820 <MAX_busprobe+0x5c>
 400f814:	10803020 	cmpeqi	r2,r2,192
 400f818:	1000331e 	bne	r2,zero,400f8e8 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 400f81c:	00004506 	br	400f934 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 400f820:	d0a00603 	ldbu	r2,-32744(gp)
 400f824:	10803fcc 	andi	r2,r2,255
 400f828:	108004e0 	cmpeqi	r2,r2,19
 400f82c:	10003e1e 	bne	r2,zero,400f928 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 400f830:	01003604 	movi	r4,216
 400f834:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400f838:	10803fcc 	andi	r2,r2,255
 400f83c:	1080008c 	andi	r2,r2,2
 400f840:	1000071e 	bne	r2,zero,400f860 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 400f844:	01403244 	movi	r5,201
 400f848:	01003604 	movi	r4,216
 400f84c:	400f3f80 	call	400f3f8 <MAXreg_wr>
				printf("Starting in full speed\n");
 400f850:	010100b4 	movhi	r4,1026
 400f854:	21151504 	addi	r4,r4,21588
 400f858:	40141b40 	call	40141b4 <puts>
 400f85c:	00000606 	br	400f878 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 400f860:	014032c4 	movi	r5,203
 400f864:	01003604 	movi	r4,216
 400f868:	400f3f80 	call	400f3f8 <MAXreg_wr>
				printf("Starting in low speed\n");
 400f86c:	010100b4 	movhi	r4,1026
 400f870:	21151b04 	addi	r4,r4,21612
 400f874:	40141b40 	call	40141b4 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 400f878:	00800404 	movi	r2,16
 400f87c:	d0a00605 	stb	r2,-32744(gp)
		}
		break;
 400f880:	00002906 	br	400f928 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 400f884:	d0a00603 	ldbu	r2,-32744(gp)
 400f888:	10803fcc 	andi	r2,r2,255
 400f88c:	108004e0 	cmpeqi	r2,r2,19
 400f890:	1000271e 	bne	r2,zero,400f930 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 400f894:	01003604 	movi	r4,216
 400f898:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400f89c:	10803fcc 	andi	r2,r2,255
 400f8a0:	1080008c 	andi	r2,r2,2
 400f8a4:	1000071e 	bne	r2,zero,400f8c4 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 400f8a8:	014032c4 	movi	r5,203
 400f8ac:	01003604 	movi	r4,216
 400f8b0:	400f3f80 	call	400f3f8 <MAXreg_wr>
				printf("Starting in low speed\n");
 400f8b4:	010100b4 	movhi	r4,1026
 400f8b8:	21151b04 	addi	r4,r4,21612
 400f8bc:	40141b40 	call	40141b4 <puts>
 400f8c0:	00000606 	br	400f8dc <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 400f8c4:	01403244 	movi	r5,201
 400f8c8:	01003604 	movi	r4,216
 400f8cc:	400f3f80 	call	400f3f8 <MAXreg_wr>
				printf("Starting in full speed\n");
 400f8d0:	010100b4 	movhi	r4,1026
 400f8d4:	21151504 	addi	r4,r4,21588
 400f8d8:	40141b40 	call	40141b4 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 400f8dc:	00800404 	movi	r2,16
 400f8e0:	d0a00605 	stb	r2,-32744(gp)
		}
		break;
 400f8e4:	00001206 	br	400f930 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 400f8e8:	00800104 	movi	r2,4
 400f8ec:	d0a00605 	stb	r2,-32744(gp)
		break;
 400f8f0:	00001006 	br	400f934 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 400f8f4:	d0a00603 	ldbu	r2,-32744(gp)
 400f8f8:	10803fcc 	andi	r2,r2,255
 400f8fc:	10803c0c 	andi	r2,r2,240
 400f900:	10000326 	beq	r2,zero,400f910 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 400f904:	00800044 	movi	r2,1
 400f908:	d0a00605 	stb	r2,-32744(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 400f90c:	00000906 	br	400f934 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 400f910:	01403244 	movi	r5,201
 400f914:	01003604 	movi	r4,216
 400f918:	400f3f80 	call	400f3f8 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 400f91c:	008000c4 	movi	r2,3
 400f920:	d0a00605 	stb	r2,-32744(gp)
		}
		break;
 400f924:	00000306 	br	400f934 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 400f928:	0001883a 	nop
 400f92c:	00000106 	br	400f934 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 400f930:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 400f934:	0001883a 	nop
 400f938:	e037883a 	mov	sp,fp
 400f93c:	dfc00117 	ldw	ra,4(sp)
 400f940:	df000017 	ldw	fp,0(sp)
 400f944:	dec00204 	addi	sp,sp,8
 400f948:	f800283a 	ret

0400f94c <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 400f94c:	defffe04 	addi	sp,sp,-8
 400f950:	dfc00115 	stw	ra,4(sp)
 400f954:	df000015 	stw	fp,0(sp)
 400f958:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 400f95c:	01400684 	movi	r5,26
 400f960:	01002204 	movi	r4,136
 400f964:	400f3f80 	call	400f3f8 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 400f968:	400f6f80 	call	400f6f8 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 400f96c:	0009883a 	mov	r4,zero
 400f970:	400f7a00 	call	400f7a0 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 400f974:	01402004 	movi	r5,128
 400f978:	01002e04 	movi	r4,184
 400f97c:	400f3f80 	call	400f3f8 <MAXreg_wr>
	Vbus_power( ON);
 400f980:	01000044 	movi	r4,1
 400f984:	400f7a00 	call	400f7a0 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 400f988:	01403444 	movi	r5,209
 400f98c:	01003604 	movi	r4,216
 400f990:	400f3f80 	call	400f3f8 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 400f994:	01400804 	movi	r5,32
 400f998:	01003404 	movi	r4,208
 400f99c:	400f3f80 	call	400f3f8 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 400f9a0:	01400104 	movi	r5,4
 400f9a4:	01003a04 	movi	r4,232
 400f9a8:	400f3f80 	call	400f3f8 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 400f9ac:	400f7c40 	call	400f7c4 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 400f9b0:	01400804 	movi	r5,32
 400f9b4:	01003204 	movi	r4,200
 400f9b8:	400f3f80 	call	400f3f8 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 400f9bc:	01400044 	movi	r5,1
 400f9c0:	01002004 	movi	r4,128
 400f9c4:	400f3f80 	call	400f3f8 <MAXreg_wr>
}
 400f9c8:	0001883a 	nop
 400f9cc:	e037883a 	mov	sp,fp
 400f9d0:	dfc00117 	ldw	ra,4(sp)
 400f9d4:	df000017 	ldw	fp,0(sp)
 400f9d8:	dec00204 	addi	sp,sp,8
 400f9dc:	f800283a 	ret

0400f9e0 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 400f9e0:	defffe04 	addi	sp,sp,-8
 400f9e4:	dfc00115 	stw	ra,4(sp)
 400f9e8:	df000015 	stw	fp,0(sp)
 400f9ec:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 400f9f0:	00820034 	movhi	r2,2048
 400f9f4:	10946404 	addi	r2,r2,20880
 400f9f8:	10800037 	ldwio	r2,0(r2)
 400f9fc:	1000041e 	bne	r2,zero,400fa10 <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
 400fa00:	010100b4 	movhi	r4,1026
 400fa04:	21152104 	addi	r4,r4,21636
 400fa08:	40140980 	call	4014098 <printf>
		MaxIntHandler();
 400fa0c:	400fa4c0 	call	400fa4c <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 400fa10:	00820034 	movhi	r2,2048
 400fa14:	10946004 	addi	r2,r2,20864
 400fa18:	10800037 	ldwio	r2,0(r2)
 400fa1c:	10800058 	cmpnei	r2,r2,1
 400fa20:	1000041e 	bne	r2,zero,400fa34 <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
 400fa24:	010100b4 	movhi	r4,1026
 400fa28:	21152504 	addi	r4,r4,21652
 400fa2c:	40140980 	call	4014098 <printf>
		MaxGpxHandler();
 400fa30:	400fb180 	call	400fb18 <MaxGpxHandler>
	}
}
 400fa34:	0001883a 	nop
 400fa38:	e037883a 	mov	sp,fp
 400fa3c:	dfc00117 	ldw	ra,4(sp)
 400fa40:	df000017 	ldw	fp,0(sp)
 400fa44:	dec00204 	addi	sp,sp,8
 400fa48:	f800283a 	ret

0400fa4c <MaxIntHandler>:

void MaxIntHandler(void) {
 400fa4c:	defffd04 	addi	sp,sp,-12
 400fa50:	dfc00215 	stw	ra,8(sp)
 400fa54:	df000115 	stw	fp,4(sp)
 400fa58:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 400fa5c:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 400fa60:	01003204 	movi	r4,200
 400fa64:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400fa68:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 400fa6c:	e0bfff43 	ldbu	r2,-3(fp)
 400fa70:	100b883a 	mov	r5,r2
 400fa74:	010100b4 	movhi	r4,1026
 400fa78:	21152904 	addi	r4,r4,21668
 400fa7c:	40140980 	call	4014098 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 400fa80:	e0bfff43 	ldbu	r2,-3(fp)
 400fa84:	1080100c 	andi	r2,r2,64
 400fa88:	10000326 	beq	r2,zero,400fa98 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 400fa8c:	e0bfff03 	ldbu	r2,-4(fp)
 400fa90:	10801014 	ori	r2,r2,64
 400fa94:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 400fa98:	e0bfff43 	ldbu	r2,-3(fp)
 400fa9c:	1080080c 	andi	r2,r2,32
 400faa0:	10000426 	beq	r2,zero,400fab4 <MaxIntHandler+0x68>
		MAX_busprobe();
 400faa4:	400f7c40 	call	400f7c4 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 400faa8:	e0bfff03 	ldbu	r2,-4(fp)
 400faac:	10800814 	ori	r2,r2,32
 400fab0:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 400fab4:	e0bfff43 	ldbu	r2,-3(fp)
 400fab8:	1080020c 	andi	r2,r2,8
 400fabc:	10000326 	beq	r2,zero,400facc <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 400fac0:	000b883a 	mov	r5,zero
 400fac4:	01000e04 	movi	r4,56
 400fac8:	400f3f80 	call	400f3f8 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 400facc:	e0bfff43 	ldbu	r2,-3(fp)
 400fad0:	1080004c 	andi	r2,r2,1
 400fad4:	10000626 	beq	r2,zero,400faf0 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 400fad8:	d0a00603 	ldbu	r2,-32744(gp)
 400fadc:	10800044 	addi	r2,r2,1
 400fae0:	d0a00605 	stb	r2,-32744(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 400fae4:	e0bfff03 	ldbu	r2,-4(fp)
 400fae8:	10800054 	ori	r2,r2,1
 400faec:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 400faf0:	e0bfff03 	ldbu	r2,-4(fp)
 400faf4:	100b883a 	mov	r5,r2
 400faf8:	01003204 	movi	r4,200
 400fafc:	400f3f80 	call	400f3f8 <MAXreg_wr>
}
 400fb00:	0001883a 	nop
 400fb04:	e037883a 	mov	sp,fp
 400fb08:	dfc00117 	ldw	ra,4(sp)
 400fb0c:	df000017 	ldw	fp,0(sp)
 400fb10:	dec00204 	addi	sp,sp,8
 400fb14:	f800283a 	ret

0400fb18 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 400fb18:	defffd04 	addi	sp,sp,-12
 400fb1c:	dfc00215 	stw	ra,8(sp)
 400fb20:	df000115 	stw	fp,4(sp)
 400fb24:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 400fb28:	01002c04 	movi	r4,176
 400fb2c:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400fb30:	e0bfff05 	stb	r2,-4(fp)
}
 400fb34:	0001883a 	nop
 400fb38:	e037883a 	mov	sp,fp
 400fb3c:	dfc00117 	ldw	ra,4(sp)
 400fb40:	df000017 	ldw	fp,0(sp)
 400fb44:	dec00204 	addi	sp,sp,8
 400fb48:	f800283a 	ret

0400fb4c <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 400fb4c:	defff104 	addi	sp,sp,-60
 400fb50:	dfc00e15 	stw	ra,56(sp)
 400fb54:	df000d15 	stw	fp,52(sp)
 400fb58:	df000d04 	addi	fp,sp,52
 400fb5c:	2015883a 	mov	r10,r4
 400fb60:	2813883a 	mov	r9,r5
 400fb64:	3011883a 	mov	r8,r6
 400fb68:	380d883a 	mov	r6,r7
 400fb6c:	e1400217 	ldw	r5,8(fp)
 400fb70:	e1000317 	ldw	r4,12(fp)
 400fb74:	e0c00417 	ldw	r3,16(fp)
 400fb78:	e0800517 	ldw	r2,20(fp)
 400fb7c:	e2bff805 	stb	r10,-32(fp)
 400fb80:	e27ff905 	stb	r9,-28(fp)
 400fb84:	e23ffa05 	stb	r8,-24(fp)
 400fb88:	e1bffb05 	stb	r6,-20(fp)
 400fb8c:	e17ffc05 	stb	r5,-16(fp)
 400fb90:	e13ffd05 	stb	r4,-12(fp)
 400fb94:	e0fffe0d 	sth	r3,-8(fp)
 400fb98:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 400fb9c:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 400fba0:	00800044 	movi	r2,1
 400fba4:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 400fba8:	e0800617 	ldw	r2,24(fp)
 400fbac:	1000011e 	bne	r2,zero,400fbb4 <XferCtrlReq+0x68>
        datastage = 0;
 400fbb0:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 400fbb4:	e0bff803 	ldbu	r2,-32(fp)
 400fbb8:	100b883a 	mov	r5,r2
 400fbbc:	01003804 	movi	r4,224
 400fbc0:	400f3f80 	call	400f3f8 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 400fbc4:	e0bffa03 	ldbu	r2,-24(fp)
 400fbc8:	10803fcc 	andi	r2,r2,255
 400fbcc:	1080201c 	xori	r2,r2,128
 400fbd0:	10bfe004 	addi	r2,r2,-128
 400fbd4:	1000020e 	bge	r2,zero,400fbe0 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 400fbd8:	00800044 	movi	r2,1
 400fbdc:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 400fbe0:	e0bffa03 	ldbu	r2,-24(fp)
 400fbe4:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 400fbe8:	e0bffb03 	ldbu	r2,-20(fp)
 400fbec:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 400fbf0:	e0bffc03 	ldbu	r2,-16(fp)
 400fbf4:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 400fbf8:	e0bffd03 	ldbu	r2,-12(fp)
 400fbfc:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 400fc00:	e0bffe0b 	ldhu	r2,-8(fp)
 400fc04:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 400fc08:	e0bfff0b 	ldhu	r2,-4(fp)
 400fc0c:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 400fc10:	e0bff584 	addi	r2,fp,-42
 400fc14:	100d883a 	mov	r6,r2
 400fc18:	01400204 	movi	r5,8
 400fc1c:	01000804 	movi	r4,32
 400fc20:	400f4840 	call	400f484 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 400fc24:	e0bff903 	ldbu	r2,-28(fp)
 400fc28:	100b883a 	mov	r5,r2
 400fc2c:	01000404 	movi	r4,16
 400fc30:	400fdf40 	call	400fdf4 <XferDispatchPkt>
 400fc34:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 400fc38:	e0bff543 	ldbu	r2,-43(fp)
 400fc3c:	10000226 	beq	r2,zero,400fc48 <XferCtrlReq+0xfc>
        return( rcode );
 400fc40:	e0bff543 	ldbu	r2,-43(fp)
 400fc44:	00000f06 	br	400fc84 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 400fc48:	e0bff503 	ldbu	r2,-44(fp)
 400fc4c:	1085883a 	add	r2,r2,r2
 400fc50:	1087883a 	add	r3,r2,r2
 400fc54:	d0a00404 	addi	r2,gp,-32752
 400fc58:	1885883a 	add	r2,r3,r2
 400fc5c:	10800017 	ldw	r2,0(r2)
 400fc60:	e13ff803 	ldbu	r4,-32(fp)
 400fc64:	e17ff903 	ldbu	r5,-28(fp)
 400fc68:	e1bfff0b 	ldhu	r6,-4(fp)
 400fc6c:	e0fff417 	ldw	r3,-48(fp)
 400fc70:	d8c00015 	stw	r3,0(sp)
 400fc74:	e1c00617 	ldw	r7,24(fp)
 400fc78:	103ee83a 	callr	r2
 400fc7c:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 400fc80:	e0bff543 	ldbu	r2,-43(fp)
}
 400fc84:	e037883a 	mov	sp,fp
 400fc88:	dfc00117 	ldw	ra,4(sp)
 400fc8c:	df000017 	ldw	fp,0(sp)
 400fc90:	dec00204 	addi	sp,sp,8
 400fc94:	f800283a 	ret

0400fc98 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 400fc98:	defff804 	addi	sp,sp,-32
 400fc9c:	dfc00715 	stw	ra,28(sp)
 400fca0:	df000615 	stw	fp,24(sp)
 400fca4:	df000604 	addi	fp,sp,24
 400fca8:	2807883a 	mov	r3,r5
 400fcac:	3005883a 	mov	r2,r6
 400fcb0:	e1ffff15 	stw	r7,-4(fp)
 400fcb4:	e13ffc05 	stb	r4,-16(fp)
 400fcb8:	e0fffd05 	stb	r3,-12(fp)
 400fcbc:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 400fcc0:	e0800217 	ldw	r2,8(fp)
 400fcc4:	10002826 	beq	r2,zero,400fd68 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 400fcc8:	e0fffc03 	ldbu	r3,-16(fp)
 400fccc:	008100f4 	movhi	r2,1027
 400fcd0:	10aab004 	addi	r2,r2,-21824
 400fcd4:	180690fa 	slli	r3,r3,3
 400fcd8:	10c5883a 	add	r2,r2,r3
 400fcdc:	10c00017 	ldw	r3,0(r2)
 400fce0:	e0bffd03 	ldbu	r2,-12(fp)
 400fce4:	100490fa 	slli	r2,r2,3
 400fce8:	1885883a 	add	r2,r3,r2
 400fcec:	00c00804 	movi	r3,32
 400fcf0:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 400fcf4:	e13ffc03 	ldbu	r4,-16(fp)
 400fcf8:	e17ffd03 	ldbu	r5,-12(fp)
 400fcfc:	e1bffe0b 	ldhu	r6,-8(fp)
 400fd00:	e0fffc03 	ldbu	r3,-16(fp)
 400fd04:	008100f4 	movhi	r2,1027
 400fd08:	10aab004 	addi	r2,r2,-21824
 400fd0c:	180690fa 	slli	r3,r3,3
 400fd10:	10c5883a 	add	r2,r2,r3
 400fd14:	10c00017 	ldw	r3,0(r2)
 400fd18:	e0bffd03 	ldbu	r2,-12(fp)
 400fd1c:	100490fa 	slli	r2,r2,3
 400fd20:	1885883a 	add	r2,r3,r2
 400fd24:	1080008b 	ldhu	r2,2(r2)
 400fd28:	10803fcc 	andi	r2,r2,255
 400fd2c:	d8800015 	stw	r2,0(sp)
 400fd30:	e1ffff17 	ldw	r7,-4(fp)
 400fd34:	400ff100 	call	400ff10 <XferInTransfer>
 400fd38:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 400fd3c:	e0bffb03 	ldbu	r2,-20(fp)
 400fd40:	10000226 	beq	r2,zero,400fd4c <XferCtrlData+0xb4>
        return( rcode );
 400fd44:	e0bffb03 	ldbu	r2,-20(fp)
 400fd48:	00000806 	br	400fd6c <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 400fd4c:	e0bffd03 	ldbu	r2,-12(fp)
 400fd50:	100b883a 	mov	r5,r2
 400fd54:	01002804 	movi	r4,160
 400fd58:	400fdf40 	call	400fdf4 <XferDispatchPkt>
 400fd5c:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 400fd60:	e0bffb03 	ldbu	r2,-20(fp)
 400fd64:	00000106 	br	400fd6c <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 400fd68:	00bfffc4 	movi	r2,-1
    }
}
 400fd6c:	e037883a 	mov	sp,fp
 400fd70:	dfc00117 	ldw	ra,4(sp)
 400fd74:	df000017 	ldw	fp,0(sp)
 400fd78:	dec00204 	addi	sp,sp,8
 400fd7c:	f800283a 	ret

0400fd80 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 400fd80:	defff904 	addi	sp,sp,-28
 400fd84:	dfc00615 	stw	ra,24(sp)
 400fd88:	df000515 	stw	fp,20(sp)
 400fd8c:	df000504 	addi	fp,sp,20
 400fd90:	2807883a 	mov	r3,r5
 400fd94:	3005883a 	mov	r2,r6
 400fd98:	e1ffff15 	stw	r7,-4(fp)
 400fd9c:	e13ffc05 	stb	r4,-16(fp)
 400fda0:	e0fffd05 	stb	r3,-12(fp)
 400fda4:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 400fda8:	e0800217 	ldw	r2,8(fp)
 400fdac:	10000626 	beq	r2,zero,400fdc8 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 400fdb0:	e0bffd03 	ldbu	r2,-12(fp)
 400fdb4:	100b883a 	mov	r5,r2
 400fdb8:	01002804 	movi	r4,160
 400fdbc:	400fdf40 	call	400fdf4 <XferDispatchPkt>
 400fdc0:	e0bffb05 	stb	r2,-20(fp)
 400fdc4:	00000506 	br	400fddc <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 400fdc8:	e0bffd03 	ldbu	r2,-12(fp)
 400fdcc:	100b883a 	mov	r5,r2
 400fdd0:	01002004 	movi	r4,128
 400fdd4:	400fdf40 	call	400fdf4 <XferDispatchPkt>
 400fdd8:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 400fddc:	e0bffb03 	ldbu	r2,-20(fp)
}
 400fde0:	e037883a 	mov	sp,fp
 400fde4:	dfc00117 	ldw	ra,4(sp)
 400fde8:	df000017 	ldw	fp,0(sp)
 400fdec:	dec00204 	addi	sp,sp,8
 400fdf0:	f800283a 	ret

0400fdf4 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 400fdf4:	defff704 	addi	sp,sp,-36
 400fdf8:	dfc00815 	stw	ra,32(sp)
 400fdfc:	df000715 	stw	fp,28(sp)
 400fe00:	df000704 	addi	fp,sp,28
 400fe04:	2007883a 	mov	r3,r4
 400fe08:	2805883a 	mov	r2,r5
 400fe0c:	e0fffc05 	stb	r3,-16(fp)
 400fe10:	e0bffd05 	stb	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400fe14:	d0a81917 	ldw	r2,-24476(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 400fe18:	0140fa04 	movi	r5,1000
 400fe1c:	1009883a 	mov	r4,r2
 400fe20:	40118340 	call	4011834 <__mulsi3>
 400fe24:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400fe28:	d0a81817 	ldw	r2,-24480(gp)
 400fe2c:	100b883a 	mov	r5,r2
 400fe30:	1809883a 	mov	r4,r3
 400fe34:	40117780 	call	4011778 <__udivsi3>
 400fe38:	1084e204 	addi	r2,r2,5000
 400fe3c:	e0bffa15 	stw	r2,-24(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 400fe40:	e03ffb05 	stb	zero,-20(fp)
 BYTE nak_count = 0;
 400fe44:	e03ffb45 	stb	zero,-19(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 400fe48:	e0fffc03 	ldbu	r3,-16(fp)
 400fe4c:	e0bffd03 	ldbu	r2,-12(fp)
 400fe50:	1884b03a 	or	r2,r3,r2
 400fe54:	10803fcc 	andi	r2,r2,255
 400fe58:	100b883a 	mov	r5,r2
 400fe5c:	01003c04 	movi	r4,240
 400fe60:	400f3f80 	call	400f3f8 <MAXreg_wr>
        rcode = 0xff;
 400fe64:	00bfffc4 	movi	r2,-1
 400fe68:	e0bff905 	stb	r2,-28(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 400fe6c:	00000d06 	br	400fea4 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 400fe70:	01003204 	movi	r4,200
 400fe74:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400fe78:	e0bffb85 	stb	r2,-18(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 400fe7c:	e0bffb83 	ldbu	r2,-18(fp)
 400fe80:	10803fcc 	andi	r2,r2,255
 400fe84:	1080201c 	xori	r2,r2,128
 400fe88:	10bfe004 	addi	r2,r2,-128
 400fe8c:	1000050e 	bge	r2,zero,400fea4 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 400fe90:	01402004 	movi	r5,128
 400fe94:	01003204 	movi	r4,200
 400fe98:	400f3f80 	call	400f3f8 <MAXreg_wr>
                rcode = 0x00;
 400fe9c:	e03ff905 	stb	zero,-28(fp)
                break;
 400fea0:	00000c06 	br	400fed4 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400fea4:	d0a81917 	ldw	r2,-24476(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 400fea8:	0140fa04 	movi	r5,1000
 400feac:	1009883a 	mov	r4,r2
 400feb0:	40118340 	call	4011834 <__mulsi3>
 400feb4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400feb8:	d0a81817 	ldw	r2,-24480(gp)
 400febc:	100b883a 	mov	r5,r2
 400fec0:	1809883a 	mov	r4,r3
 400fec4:	40117780 	call	4011778 <__udivsi3>
 400fec8:	1007883a 	mov	r3,r2
 400fecc:	e0bffa17 	ldw	r2,-24(fp)
 400fed0:	18bfe736 	bltu	r3,r2,400fe70 <__alt_mem_onchip_memory2_0+0xfc00acb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 400fed4:	e0bff903 	ldbu	r2,-28(fp)
 400fed8:	10000226 	beq	r2,zero,400fee4 <XferDispatchPkt+0xf0>
            return( rcode );
 400fedc:	e0bff903 	ldbu	r2,-28(fp)
 400fee0:	00000606 	br	400fefc <XferDispatchPkt+0x108>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 400fee4:	01003e04 	movi	r4,248
 400fee8:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400feec:	108003cc 	andi	r2,r2,15
 400fef0:	e0bff905 	stb	r2,-28(fp)
//                break;
//            }
//            else {
//                continue;
//            }
        	break;
 400fef4:	0001883a 	nop
//            }
        	break;
        }
        else break;
    }//while( 1 )
    return( rcode );
 400fef8:	e0bff903 	ldbu	r2,-28(fp)
}
 400fefc:	e037883a 	mov	sp,fp
 400ff00:	dfc00117 	ldw	ra,4(sp)
 400ff04:	df000017 	ldw	fp,0(sp)
 400ff08:	dec00204 	addi	sp,sp,8
 400ff0c:	f800283a 	ret

0400ff10 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 400ff10:	defff804 	addi	sp,sp,-32
 400ff14:	dfc00715 	stw	ra,28(sp)
 400ff18:	df000615 	stw	fp,24(sp)
 400ff1c:	df000604 	addi	fp,sp,24
 400ff20:	2011883a 	mov	r8,r4
 400ff24:	2809883a 	mov	r4,r5
 400ff28:	3007883a 	mov	r3,r6
 400ff2c:	e1fffe15 	stw	r7,-8(fp)
 400ff30:	e0800217 	ldw	r2,8(fp)
 400ff34:	e23ffb05 	stb	r8,-20(fp)
 400ff38:	e13ffc05 	stb	r4,-16(fp)
 400ff3c:	e0fffd0d 	sth	r3,-12(fp)
 400ff40:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 400ff44:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 400ff48:	e0fffb03 	ldbu	r3,-20(fp)
 400ff4c:	008100f4 	movhi	r2,1027
 400ff50:	10aab004 	addi	r2,r2,-21824
 400ff54:	180690fa 	slli	r3,r3,3
 400ff58:	10c5883a 	add	r2,r2,r3
 400ff5c:	10c00017 	ldw	r3,0(r2)
 400ff60:	e0bffc03 	ldbu	r2,-16(fp)
 400ff64:	100490fa 	slli	r2,r2,3
 400ff68:	1885883a 	add	r2,r3,r2
 400ff6c:	10800183 	ldbu	r2,6(r2)
 400ff70:	10803fcc 	andi	r2,r2,255
 400ff74:	100b883a 	mov	r5,r2
 400ff78:	01003a04 	movi	r4,232
 400ff7c:	400f3f80 	call	400f3f8 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 400ff80:	e0bffc03 	ldbu	r2,-16(fp)
 400ff84:	100b883a 	mov	r5,r2
 400ff88:	0009883a 	mov	r4,zero
 400ff8c:	400fdf40 	call	400fdf4 <XferDispatchPkt>
 400ff90:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 400ff94:	e0bffa83 	ldbu	r2,-22(fp)
 400ff98:	10000226 	beq	r2,zero,400ffa4 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 400ff9c:	e0bffa83 	ldbu	r2,-22(fp)
 400ffa0:	00003a06 	br	401008c <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 400ffa4:	01003204 	movi	r4,200
 400ffa8:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400ffac:	10803fcc 	andi	r2,r2,255
 400ffb0:	1080010c 	andi	r2,r2,4
 400ffb4:	1000021e 	bne	r2,zero,400ffc0 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 400ffb8:	00bffc04 	movi	r2,-16
 400ffbc:	00003306 	br	401008c <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 400ffc0:	01000c04 	movi	r4,48
 400ffc4:	400f5f40 	call	400f5f4 <MAXreg_rd>
 400ffc8:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 400ffcc:	e0bffac3 	ldbu	r2,-21(fp)
 400ffd0:	e1bffe17 	ldw	r6,-8(fp)
 400ffd4:	100b883a 	mov	r5,r2
 400ffd8:	01000204 	movi	r4,8
 400ffdc:	400f66c0 	call	400f66c <MAXbytes_rd>
 400ffe0:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 400ffe4:	01400104 	movi	r5,4
 400ffe8:	01003204 	movi	r4,200
 400ffec:	400f3f80 	call	400f3f8 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 400fff0:	e0fffac3 	ldbu	r3,-21(fp)
 400fff4:	e0bffa0b 	ldhu	r2,-24(fp)
 400fff8:	1885883a 	add	r2,r3,r2
 400fffc:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 4010000:	e0fffac3 	ldbu	r3,-21(fp)
 4010004:	e0bfff03 	ldbu	r2,-4(fp)
 4010008:	18800336 	bltu	r3,r2,4010018 <XferInTransfer+0x108>
 401000c:	e0fffa0b 	ldhu	r3,-24(fp)
 4010010:	e0bffd0b 	ldhu	r2,-12(fp)
 4010014:	18bfda36 	bltu	r3,r2,400ff80 <__alt_mem_onchip_memory2_0+0xfc00adc0>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 4010018:	01003e04 	movi	r4,248
 401001c:	400f5f40 	call	400f5f4 <MAXreg_rd>
 4010020:	10803fcc 	andi	r2,r2,255
 4010024:	1080040c 	andi	r2,r2,16
 4010028:	10000c26 	beq	r2,zero,401005c <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 401002c:	e0fffb03 	ldbu	r3,-20(fp)
 4010030:	008100f4 	movhi	r2,1027
 4010034:	10aab004 	addi	r2,r2,-21824
 4010038:	180690fa 	slli	r3,r3,3
 401003c:	10c5883a 	add	r2,r2,r3
 4010040:	10c00017 	ldw	r3,0(r2)
 4010044:	e0bffc03 	ldbu	r2,-16(fp)
 4010048:	100490fa 	slli	r2,r2,3
 401004c:	1885883a 	add	r2,r3,r2
 4010050:	00c00804 	movi	r3,32
 4010054:	10c00185 	stb	r3,6(r2)
 4010058:	00000b06 	br	4010088 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 401005c:	e0fffb03 	ldbu	r3,-20(fp)
 4010060:	008100f4 	movhi	r2,1027
 4010064:	10aab004 	addi	r2,r2,-21824
 4010068:	180690fa 	slli	r3,r3,3
 401006c:	10c5883a 	add	r2,r2,r3
 4010070:	10c00017 	ldw	r3,0(r2)
 4010074:	e0bffc03 	ldbu	r2,-16(fp)
 4010078:	100490fa 	slli	r2,r2,3
 401007c:	1885883a 	add	r2,r3,r2
 4010080:	00c00404 	movi	r3,16
 4010084:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 4010088:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 401008c:	e037883a 	mov	sp,fp
 4010090:	dfc00117 	ldw	ra,4(sp)
 4010094:	df000017 	ldw	fp,0(sp)
 4010098:	dec00204 	addi	sp,sp,8
 401009c:	f800283a 	ret

040100a0 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 40100a0:	defffe04 	addi	sp,sp,-8
 40100a4:	df000115 	stw	fp,4(sp)
 40100a8:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 40100ac:	e03fff05 	stb	zero,-4(fp)
 40100b0:	00001006 	br	40100f4 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 40100b4:	e0ffff03 	ldbu	r3,-4(fp)
 40100b8:	008100f4 	movhi	r2,1027
 40100bc:	10aab004 	addi	r2,r2,-21824
 40100c0:	180690fa 	slli	r3,r3,3
 40100c4:	10c5883a 	add	r2,r2,r3
 40100c8:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 40100cc:	e0ffff03 	ldbu	r3,-4(fp)
 40100d0:	008100f4 	movhi	r2,1027
 40100d4:	10aab004 	addi	r2,r2,-21824
 40100d8:	180690fa 	slli	r3,r3,3
 40100dc:	10c5883a 	add	r2,r2,r3
 40100e0:	10800104 	addi	r2,r2,4
 40100e4:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 40100e8:	e0bfff03 	ldbu	r2,-4(fp)
 40100ec:	10800044 	addi	r2,r2,1
 40100f0:	e0bfff05 	stb	r2,-4(fp)
 40100f4:	e0bfff03 	ldbu	r2,-4(fp)
 40100f8:	10800270 	cmpltui	r2,r2,9
 40100fc:	103fed1e 	bne	r2,zero,40100b4 <__alt_mem_onchip_memory2_0+0xfc00aef4>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 4010100:	008100f4 	movhi	r2,1027
 4010104:	10aab004 	addi	r2,r2,-21824
 4010108:	d0e80504 	addi	r3,gp,-24556
 401010c:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 4010110:	d028058d 	sth	zero,-24554(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 4010114:	00801004 	movi	r2,64
 4010118:	d0a80645 	stb	r2,-24551(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 401011c:	00800404 	movi	r2,16
 4010120:	d0a80685 	stb	r2,-24550(gp)
}
 4010124:	0001883a 	nop
 4010128:	e037883a 	mov	sp,fp
 401012c:	df000017 	ldw	fp,0(sp)
 4010130:	dec00104 	addi	sp,sp,4
 4010134:	f800283a 	ret

04010138 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 4010138:	deffb204 	addi	sp,sp,-312
 401013c:	dfc04d15 	stw	ra,308(sp)
 4010140:	df004c15 	stw	fp,304(sp)
 4010144:	dc004b15 	stw	r16,300(sp)
 4010148:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 401014c:	d0a00603 	ldbu	r2,-32744(gp)
 4010150:	10803fcc 	andi	r2,r2,255
 4010154:	10803c0c 	andi	r2,r2,240
 4010158:	10c00820 	cmpeqi	r3,r2,32
 401015c:	1801121e 	bne	r3,zero,40105a8 <USB_Task+0x470>
 4010160:	10c00848 	cmpgei	r3,r2,33
 4010164:	1800041e 	bne	r3,zero,4010178 <USB_Task+0x40>
 4010168:	10000a26 	beq	r2,zero,4010194 <USB_Task+0x5c>
 401016c:	10800420 	cmpeqi	r2,r2,16
 4010170:	10001b1e 	bne	r2,zero,40101e0 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 4010174:	00017a06 	br	4010760 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 4010178:	10c01020 	cmpeqi	r3,r2,64
 401017c:	18016f1e 	bne	r3,zero,401073c <USB_Task+0x604>
 4010180:	10c03fe0 	cmpeqi	r3,r2,255
 4010184:	18016f1e 	bne	r3,zero,4010744 <USB_Task+0x60c>
 4010188:	10800c20 	cmpeqi	r2,r2,48
 401018c:	1001441e 	bne	r2,zero,40106a0 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 4010190:	00017306 	br	4010760 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 4010194:	d0a00603 	ldbu	r2,-32744(gp)
 4010198:	10803fcc 	andi	r2,r2,255
 401019c:	10c000e0 	cmpeqi	r3,r2,3
 40101a0:	1800091e 	bne	r3,zero,40101c8 <USB_Task+0x90>
 40101a4:	10c00120 	cmpeqi	r3,r2,4
 40101a8:	18000b1e 	bne	r3,zero,40101d8 <USB_Task+0xa0>
 40101ac:	10800060 	cmpeqi	r2,r2,1
 40101b0:	1000011e 	bne	r2,zero,40101b8 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 40101b4:	00016a06 	br	4010760 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 40101b8:	40100a00 	call	40100a0 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 40101bc:	008000c4 	movi	r2,3
 40101c0:	d0a00605 	stb	r2,-32744(gp)
                    break;
 40101c4:	00000506 	br	40101dc <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 40101c8:	01400104 	movi	r5,4
 40101cc:	01003a04 	movi	r4,232
 40101d0:	400f3f80 	call	400f3f8 <MAXreg_wr>
                    break;
 40101d4:	00000106 	br	40101dc <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 40101d8:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 40101dc:	00016006 	br	4010760 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 40101e0:	d0a00603 	ldbu	r2,-32744(gp)
 40101e4:	10803fcc 	andi	r2,r2,255
 40101e8:	10bffc04 	addi	r2,r2,-16
 40101ec:	10c001a8 	cmpgeui	r3,r2,6
 40101f0:	1801561e 	bne	r3,zero,401074c <USB_Task+0x614>
 40101f4:	100690ba 	slli	r3,r2,2
 40101f8:	00810074 	movhi	r2,1025
 40101fc:	10808304 	addi	r2,r2,524
 4010200:	1885883a 	add	r2,r3,r2
 4010204:	10800017 	ldw	r2,0(r2)
 4010208:	1000683a 	jmp	r2
 401020c:	04010224 	muli	r16,zero,1032
 4010210:	0401025c 	xori	r16,zero,1033
 4010214:	04010298 	cmpnei	r16,zero,1034
 4010218:	040102bc 	xorhi	r16,zero,1034
 401021c:	040102fc 	xorhi	r16,zero,1035
 4010220:	04010310 	cmplti	r16,zero,1036
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4010224:	d0a81917 	ldw	r2,-24476(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 4010228:	0140fa04 	movi	r5,1000
 401022c:	1009883a 	mov	r4,r2
 4010230:	40118340 	call	4011834 <__mulsi3>
 4010234:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4010238:	d0a81817 	ldw	r2,-24480(gp)
 401023c:	100b883a 	mov	r5,r2
 4010240:	1809883a 	mov	r4,r3
 4010244:	40117780 	call	4011778 <__udivsi3>
 4010248:	10803204 	addi	r2,r2,200
 401024c:	d0a80815 	stw	r2,-24544(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 4010250:	00800444 	movi	r2,17
 4010254:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_STATE_ATTACHED )
 4010258:	0000d206 	br	40105a4 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401025c:	d0a81917 	ldw	r2,-24476(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 4010260:	0140fa04 	movi	r5,1000
 4010264:	1009883a 	mov	r4,r2
 4010268:	40118340 	call	4011834 <__mulsi3>
 401026c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4010270:	d0a81817 	ldw	r2,-24480(gp)
 4010274:	100b883a 	mov	r5,r2
 4010278:	1809883a 	mov	r4,r3
 401027c:	40117780 	call	4011778 <__udivsi3>
 4010280:	1007883a 	mov	r3,r2
 4010284:	d0a80817 	ldw	r2,-24544(gp)
 4010288:	10c0c32e 	bgeu	r2,r3,4010598 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 401028c:	00800484 	movi	r2,18
 4010290:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 4010294:	0000c006 	br	4010598 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 4010298:	01400044 	movi	r5,1
 401029c:	01003204 	movi	r4,200
 40102a0:	400f3f80 	call	400f3f8 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 40102a4:	01400044 	movi	r5,1
 40102a8:	01003a04 	movi	r4,232
 40102ac:	400f3f80 	call	400f3f8 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 40102b0:	008004c4 	movi	r2,19
 40102b4:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 40102b8:	0000ba06 	br	40105a4 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 40102bc:	01003a04 	movi	r4,232
 40102c0:	400f5f40 	call	400f5f4 <MAXreg_rd>
 40102c4:	10803fcc 	andi	r2,r2,255
 40102c8:	1080004c 	andi	r2,r2,1
 40102cc:	1000b41e 	bne	r2,zero,40105a0 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 40102d0:	01003604 	movi	r4,216
 40102d4:	400f5f40 	call	400f5f4 <MAXreg_rd>
 40102d8:	10800214 	ori	r2,r2,8
 40102dc:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 40102e0:	e0bfb943 	ldbu	r2,-283(fp)
 40102e4:	100b883a 	mov	r5,r2
 40102e8:	01003604 	movi	r4,216
 40102ec:	400f3f80 	call	400f3f8 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 40102f0:	00800504 	movi	r2,20
 40102f4:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 40102f8:	0000a906 	br	40105a0 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 40102fc:	01003204 	movi	r4,200
 4010300:	400f5f40 	call	400f5f4 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 4010304:	00800544 	movi	r2,21
 4010308:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 401030c:	0000a506 	br	40105a4 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 4010310:	008100f4 	movhi	r2,1027
 4010314:	10aab004 	addi	r2,r2,-21824
 4010318:	10800017 	ldw	r2,0(r2)
 401031c:	00c00204 	movi	r3,8
 4010320:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 4010324:	e0bfba04 	addi	r2,fp,-280
 4010328:	d8800415 	stw	r2,16(sp)
 401032c:	00800204 	movi	r2,8
 4010330:	d8800315 	stw	r2,12(sp)
 4010334:	d8000215 	stw	zero,8(sp)
 4010338:	00800044 	movi	r2,1
 401033c:	d8800115 	stw	r2,4(sp)
 4010340:	d8000015 	stw	zero,0(sp)
 4010344:	01c00184 	movi	r7,6
 4010348:	01802004 	movi	r6,128
 401034c:	000b883a 	mov	r5,zero
 4010350:	0009883a 	mov	r4,zero
 4010354:	400fb4c0 	call	400fb4c <XferCtrlReq>
 4010358:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 401035c:	e0bfb983 	ldbu	r2,-282(fp)
 4010360:	1000861e 	bne	r2,zero,401057c <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 4010364:	008100f4 	movhi	r2,1027
 4010368:	10aab004 	addi	r2,r2,-21824
 401036c:	10800017 	ldw	r2,0(r2)
 4010370:	e0ffbbc3 	ldbu	r3,-273(fp)
 4010374:	18c03fcc 	andi	r3,r3,255
 4010378:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 401037c:	e0bfba03 	ldbu	r2,-280(fp)
 4010380:	10803fcc 	andi	r2,r2,255
 4010384:	e0ffba04 	addi	r3,fp,-280
 4010388:	d8c00415 	stw	r3,16(sp)
 401038c:	d8800315 	stw	r2,12(sp)
 4010390:	d8000215 	stw	zero,8(sp)
 4010394:	00800044 	movi	r2,1
 4010398:	d8800115 	stw	r2,4(sp)
 401039c:	d8000015 	stw	zero,0(sp)
 40103a0:	01c00184 	movi	r7,6
 40103a4:	01802004 	movi	r6,128
 40103a8:	000b883a 	mov	r5,zero
 40103ac:	0009883a 	mov	r4,zero
 40103b0:	400fb4c0 	call	400fb4c <XferCtrlReq>
 40103b4:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 40103b8:	e0bfbd83 	ldbu	r2,-266(fp)
 40103bc:	10803fcc 	andi	r2,r2,255
 40103c0:	10003426 	beq	r2,zero,4010494 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 40103c4:	e0bfbd83 	ldbu	r2,-266(fp)
 40103c8:	10803fcc 	andi	r2,r2,255
 40103cc:	e0ffbe84 	addi	r3,fp,-262
 40103d0:	d8c00415 	stw	r3,16(sp)
 40103d4:	00c00084 	movi	r3,2
 40103d8:	d8c00315 	stw	r3,12(sp)
 40103dc:	00c10244 	movi	r3,1033
 40103e0:	d8c00215 	stw	r3,8(sp)
 40103e4:	00c000c4 	movi	r3,3
 40103e8:	d8c00115 	stw	r3,4(sp)
 40103ec:	d8800015 	stw	r2,0(sp)
 40103f0:	01c00184 	movi	r7,6
 40103f4:	01802004 	movi	r6,128
 40103f8:	000b883a 	mov	r5,zero
 40103fc:	0009883a 	mov	r4,zero
 4010400:	400fb4c0 	call	400fb4c <XferCtrlReq>
 4010404:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 4010408:	e0bfbd83 	ldbu	r2,-266(fp)
 401040c:	10803fcc 	andi	r2,r2,255
 4010410:	e0ffbe83 	ldbu	r3,-262(fp)
 4010414:	18c03fcc 	andi	r3,r3,255
 4010418:	e13fbe84 	addi	r4,fp,-262
 401041c:	d9000415 	stw	r4,16(sp)
 4010420:	d8c00315 	stw	r3,12(sp)
 4010424:	00c10244 	movi	r3,1033
 4010428:	d8c00215 	stw	r3,8(sp)
 401042c:	00c000c4 	movi	r3,3
 4010430:	d8c00115 	stw	r3,4(sp)
 4010434:	d8800015 	stw	r2,0(sp)
 4010438:	01c00184 	movi	r7,6
 401043c:	01802004 	movi	r6,128
 4010440:	000b883a 	mov	r5,zero
 4010444:	0009883a 	mov	r4,zero
 4010448:	400fb4c0 	call	400fb4c <XferCtrlReq>
 401044c:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 4010450:	e0bfbd83 	ldbu	r2,-266(fp)
 4010454:	14003fcc 	andi	r16,r2,255
 4010458:	e0bfbe83 	ldbu	r2,-262(fp)
 401045c:	10803fcc 	andi	r2,r2,255
 4010460:	1004d07a 	srli	r2,r2,1
 4010464:	10bfffc4 	addi	r2,r2,-1
 4010468:	10c03fcc 	andi	r3,r2,255
 401046c:	e0bfbe84 	addi	r2,fp,-262
 4010470:	10800084 	addi	r2,r2,2
 4010474:	180b883a 	mov	r5,r3
 4010478:	1009883a 	mov	r4,r2
 401047c:	40109000 	call	4010900 <ConvUTF8ToStr>
 4010480:	100d883a 	mov	r6,r2
 4010484:	800b883a 	mov	r5,r16
 4010488:	010100b4 	movhi	r4,1026
 401048c:	21152c04 	addi	r4,r4,21680
 4010490:	40140980 	call	4014098 <printf>
                		}
                		if (buf.iProduct != 0)
 4010494:	e0bfbdc3 	ldbu	r2,-265(fp)
 4010498:	10803fcc 	andi	r2,r2,255
 401049c:	10003426 	beq	r2,zero,4010570 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 40104a0:	e0bfbdc3 	ldbu	r2,-265(fp)
 40104a4:	10803fcc 	andi	r2,r2,255
 40104a8:	e0ffbe84 	addi	r3,fp,-262
 40104ac:	d8c00415 	stw	r3,16(sp)
 40104b0:	00c00084 	movi	r3,2
 40104b4:	d8c00315 	stw	r3,12(sp)
 40104b8:	00c10244 	movi	r3,1033
 40104bc:	d8c00215 	stw	r3,8(sp)
 40104c0:	00c000c4 	movi	r3,3
 40104c4:	d8c00115 	stw	r3,4(sp)
 40104c8:	d8800015 	stw	r2,0(sp)
 40104cc:	01c00184 	movi	r7,6
 40104d0:	01802004 	movi	r6,128
 40104d4:	000b883a 	mov	r5,zero
 40104d8:	0009883a 	mov	r4,zero
 40104dc:	400fb4c0 	call	400fb4c <XferCtrlReq>
 40104e0:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 40104e4:	e0bfbdc3 	ldbu	r2,-265(fp)
 40104e8:	10803fcc 	andi	r2,r2,255
 40104ec:	e0ffbe83 	ldbu	r3,-262(fp)
 40104f0:	18c03fcc 	andi	r3,r3,255
 40104f4:	e13fbe84 	addi	r4,fp,-262
 40104f8:	d9000415 	stw	r4,16(sp)
 40104fc:	d8c00315 	stw	r3,12(sp)
 4010500:	00c10244 	movi	r3,1033
 4010504:	d8c00215 	stw	r3,8(sp)
 4010508:	00c000c4 	movi	r3,3
 401050c:	d8c00115 	stw	r3,4(sp)
 4010510:	d8800015 	stw	r2,0(sp)
 4010514:	01c00184 	movi	r7,6
 4010518:	01802004 	movi	r6,128
 401051c:	000b883a 	mov	r5,zero
 4010520:	0009883a 	mov	r4,zero
 4010524:	400fb4c0 	call	400fb4c <XferCtrlReq>
 4010528:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 401052c:	e0bfbdc3 	ldbu	r2,-265(fp)
 4010530:	14003fcc 	andi	r16,r2,255
 4010534:	e0bfbe83 	ldbu	r2,-262(fp)
 4010538:	10803fcc 	andi	r2,r2,255
 401053c:	1004d07a 	srli	r2,r2,1
 4010540:	10bfffc4 	addi	r2,r2,-1
 4010544:	10c03fcc 	andi	r3,r2,255
 4010548:	e0bfbe84 	addi	r2,fp,-262
 401054c:	10800084 	addi	r2,r2,2
 4010550:	180b883a 	mov	r5,r3
 4010554:	1009883a 	mov	r4,r2
 4010558:	40109000 	call	4010900 <ConvUTF8ToStr>
 401055c:	100d883a 	mov	r6,r2
 4010560:	800b883a 	mov	r5,r16
 4010564:	010100b4 	movhi	r4,1026
 4010568:	21153204 	addi	r4,r4,21704
 401056c:	40140980 	call	4014098 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 4010570:	00800804 	movi	r2,32
 4010574:	d0a00605 	stb	r2,-32744(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 4010578:	00000a06 	br	40105a4 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 401057c:	e0bfb983 	ldbu	r2,-282(fp)
 4010580:	d0a80945 	stb	r2,-24539(gp)
                        last_usb_task_state = usb_task_state;
 4010584:	d0a00603 	ldbu	r2,-32744(gp)
 4010588:	d0a80705 	stb	r2,-24548(gp)
                        usb_task_state = USB_STATE_ERROR;
 401058c:	00bfffc4 	movi	r2,-1
 4010590:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 4010594:	00000306 	br	40105a4 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 4010598:	0001883a 	nop
 401059c:	00006b06 	br	401074c <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 40105a0:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 40105a4:	00006906 	br	401074c <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 40105a8:	00800044 	movi	r2,1
 40105ac:	e0bfb905 	stb	r2,-284(fp)
 40105b0:	00002d06 	br	4010668 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 40105b4:	e0ffb903 	ldbu	r3,-284(fp)
 40105b8:	008100f4 	movhi	r2,1027
 40105bc:	10aab004 	addi	r2,r2,-21824
 40105c0:	180690fa 	slli	r3,r3,3
 40105c4:	10c5883a 	add	r2,r2,r3
 40105c8:	10800017 	ldw	r2,0(r2)
 40105cc:	1000231e 	bne	r2,zero,401065c <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 40105d0:	e13fb903 	ldbu	r4,-284(fp)
 40105d4:	008100f4 	movhi	r2,1027
 40105d8:	10aab004 	addi	r2,r2,-21824
 40105dc:	10c00017 	ldw	r3,0(r2)
 40105e0:	008100f4 	movhi	r2,1027
 40105e4:	10aab004 	addi	r2,r2,-21824
 40105e8:	200890fa 	slli	r4,r4,3
 40105ec:	1105883a 	add	r2,r2,r4
 40105f0:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 40105f4:	e0bfb903 	ldbu	r2,-284(fp)
 40105f8:	d8000415 	stw	zero,16(sp)
 40105fc:	d8000315 	stw	zero,12(sp)
 4010600:	d8000215 	stw	zero,8(sp)
 4010604:	d8000115 	stw	zero,4(sp)
 4010608:	d8800015 	stw	r2,0(sp)
 401060c:	01c00144 	movi	r7,5
 4010610:	000d883a 	mov	r6,zero
 4010614:	000b883a 	mov	r5,zero
 4010618:	0009883a 	mov	r4,zero
 401061c:	400fb4c0 	call	400fb4c <XferCtrlReq>
 4010620:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 4010624:	e0bfb983 	ldbu	r2,-282(fp)
 4010628:	1000051e 	bne	r2,zero,4010640 <USB_Task+0x508>
                        tmp_addr = i;
 401062c:	e0bfb903 	ldbu	r2,-284(fp)
 4010630:	d0a80905 	stb	r2,-24540(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 4010634:	00800c04 	movi	r2,48
 4010638:	d0a00605 	stb	r2,-32744(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 401063c:	00000d06 	br	4010674 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 4010640:	e0bfb983 	ldbu	r2,-282(fp)
 4010644:	d0a80945 	stb	r2,-24539(gp)
                        last_usb_task_state = usb_task_state;
 4010648:	d0a00603 	ldbu	r2,-32744(gp)
 401064c:	d0a80705 	stb	r2,-24548(gp)
                        usb_task_state = USB_STATE_ERROR;
 4010650:	00bfffc4 	movi	r2,-1
 4010654:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 4010658:	00000606 	br	4010674 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 401065c:	e0bfb903 	ldbu	r2,-284(fp)
 4010660:	10800044 	addi	r2,r2,1
 4010664:	e0bfb905 	stb	r2,-284(fp)
 4010668:	e0bfb903 	ldbu	r2,-284(fp)
 401066c:	10800230 	cmpltui	r2,r2,8
 4010670:	103fd01e 	bne	r2,zero,40105b4 <__alt_mem_onchip_memory2_0+0xfc00b3f4>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 4010674:	d0a00603 	ldbu	r2,-32744(gp)
 4010678:	10803fcc 	andi	r2,r2,255
 401067c:	10800818 	cmpnei	r2,r2,32
 4010680:	1000341e 	bne	r2,zero,4010754 <USB_Task+0x61c>
                usb_error = 0xfe;
 4010684:	00bfff84 	movi	r2,-2
 4010688:	d0a80945 	stb	r2,-24539(gp)
                last_usb_task_state = usb_task_state;
 401068c:	d0a00603 	ldbu	r2,-32744(gp)
 4010690:	d0a80705 	stb	r2,-24548(gp)
                usb_task_state = USB_STATE_ERROR;
 4010694:	00bfffc4 	movi	r2,-1
 4010698:	d0a00605 	stb	r2,-32744(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 401069c:	00002d06 	br	4010754 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 40106a0:	e03fb905 	stb	zero,-284(fp)
 40106a4:	00001706 	br	4010704 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 40106a8:	e0bfb903 	ldbu	r2,-284(fp)
 40106ac:	040100b4 	movhi	r16,1026
 40106b0:	84171d04 	addi	r16,r16,23668
 40106b4:	01400304 	movi	r5,12
 40106b8:	1009883a 	mov	r4,r2
 40106bc:	40118340 	call	4011834 <__mulsi3>
 40106c0:	8085883a 	add	r2,r16,r2
 40106c4:	10800017 	ldw	r2,0(r2)
 40106c8:	d0e80903 	ldbu	r3,-24540(gp)
 40106cc:	18c03fcc 	andi	r3,r3,255
 40106d0:	000b883a 	mov	r5,zero
 40106d4:	1809883a 	mov	r4,r3
 40106d8:	103ee83a 	callr	r2
 40106dc:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 40106e0:	e0bfb983 	ldbu	r2,-282(fp)
 40106e4:	10800058 	cmpnei	r2,r2,1
 40106e8:	1000031e 	bne	r2,zero,40106f8 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 40106ec:	00801004 	movi	r2,64
 40106f0:	d0a00605 	stb	r2,-32744(gp)
                    break;
 40106f4:	00000606 	br	4010710 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 40106f8:	e0bfb903 	ldbu	r2,-284(fp)
 40106fc:	10800044 	addi	r2,r2,1
 4010700:	e0bfb905 	stb	r2,-284(fp)
 4010704:	e0bfb903 	ldbu	r2,-284(fp)
 4010708:	10800130 	cmpltui	r2,r2,4
 401070c:	103fe61e 	bne	r2,zero,40106a8 <__alt_mem_onchip_memory2_0+0xfc00b4e8>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 4010710:	d0a00603 	ldbu	r2,-32744(gp)
 4010714:	10803fcc 	andi	r2,r2,255
 4010718:	10800c18 	cmpnei	r2,r2,48
 401071c:	10000f1e 	bne	r2,zero,401075c <USB_Task+0x624>
                usb_error = 0xfd;
 4010720:	00bfff44 	movi	r2,-3
 4010724:	d0a80945 	stb	r2,-24539(gp)
                last_usb_task_state = usb_task_state;
 4010728:	d0a00603 	ldbu	r2,-32744(gp)
 401072c:	d0a80705 	stb	r2,-24548(gp)
                usb_task_state = USB_STATE_ERROR;
 4010730:	00bfffc4 	movi	r2,-1
 4010734:	d0a00605 	stb	r2,-32744(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 4010738:	00000806 	br	401075c <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 401073c:	0001883a 	nop
 4010740:	00000706 	br	4010760 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 4010744:	0001883a 	nop
 4010748:	00000506 	br	4010760 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 401074c:	0001883a 	nop
 4010750:	00000306 	br	4010760 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 4010754:	0001883a 	nop
 4010758:	00000106 	br	4010760 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 401075c:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 4010760:	0001883a 	nop
 4010764:	e6ffff04 	addi	sp,fp,-4
 4010768:	dfc00217 	ldw	ra,8(sp)
 401076c:	df000117 	ldw	fp,4(sp)
 4010770:	dc000017 	ldw	r16,0(sp)
 4010774:	dec00304 	addi	sp,sp,12
 4010778:	f800283a 	ret

0401077c <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 401077c:	defffd04 	addi	sp,sp,-12
 4010780:	df000215 	stw	fp,8(sp)
 4010784:	df000204 	addi	fp,sp,8
 4010788:	2005883a 	mov	r2,r4
 401078c:	e17fff15 	stw	r5,-4(fp)
 4010790:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 4010794:	0005883a 	mov	r2,zero
}
 4010798:	e037883a 	mov	sp,fp
 401079c:	df000017 	ldw	fp,0(sp)
 40107a0:	dec00104 	addi	sp,sp,4
 40107a4:	f800283a 	ret

040107a8 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 40107a8:	defffb04 	addi	sp,sp,-20
 40107ac:	df000415 	stw	fp,16(sp)
 40107b0:	df000404 	addi	fp,sp,16
 40107b4:	2007883a 	mov	r3,r4
 40107b8:	2805883a 	mov	r2,r5
 40107bc:	e1bffe15 	stw	r6,-8(fp)
 40107c0:	e1ffff15 	stw	r7,-4(fp)
 40107c4:	e0fffc05 	stb	r3,-16(fp)
 40107c8:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 40107cc:	0005883a 	mov	r2,zero

}
 40107d0:	e037883a 	mov	sp,fp
 40107d4:	df000017 	ldw	fp,0(sp)
 40107d8:	dec00104 	addi	sp,sp,4
 40107dc:	f800283a 	ret

040107e0 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 40107e0:	defffd04 	addi	sp,sp,-12
 40107e4:	df000215 	stw	fp,8(sp)
 40107e8:	df000204 	addi	fp,sp,8
 40107ec:	2005883a 	mov	r2,r4
 40107f0:	e17fff15 	stw	r5,-4(fp)
 40107f4:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 40107f8:	0005883a 	mov	r2,zero

}
 40107fc:	e037883a 	mov	sp,fp
 4010800:	df000017 	ldw	fp,0(sp)
 4010804:	dec00104 	addi	sp,sp,4
 4010808:	f800283a 	ret

0401080c <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 401080c:	defffb04 	addi	sp,sp,-20
 4010810:	df000415 	stw	fp,16(sp)
 4010814:	df000404 	addi	fp,sp,16
 4010818:	2007883a 	mov	r3,r4
 401081c:	2805883a 	mov	r2,r5
 4010820:	e1bffe15 	stw	r6,-8(fp)
 4010824:	e1ffff15 	stw	r7,-4(fp)
 4010828:	e0fffc05 	stb	r3,-16(fp)
 401082c:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 4010830:	0005883a 	mov	r2,zero
}
 4010834:	e037883a 	mov	sp,fp
 4010838:	df000017 	ldw	fp,0(sp)
 401083c:	dec00104 	addi	sp,sp,4
 4010840:	f800283a 	ret

04010844 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 4010844:	defffd04 	addi	sp,sp,-12
 4010848:	df000215 	stw	fp,8(sp)
 401084c:	df000204 	addi	fp,sp,8
 4010850:	2005883a 	mov	r2,r4
 4010854:	e17fff15 	stw	r5,-4(fp)
 4010858:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 401085c:	0005883a 	mov	r2,zero
}
 4010860:	e037883a 	mov	sp,fp
 4010864:	df000017 	ldw	fp,0(sp)
 4010868:	dec00104 	addi	sp,sp,4
 401086c:	f800283a 	ret

04010870 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 4010870:	defffb04 	addi	sp,sp,-20
 4010874:	df000415 	stw	fp,16(sp)
 4010878:	df000404 	addi	fp,sp,16
 401087c:	2007883a 	mov	r3,r4
 4010880:	2805883a 	mov	r2,r5
 4010884:	e1bffe15 	stw	r6,-8(fp)
 4010888:	e1ffff15 	stw	r7,-4(fp)
 401088c:	e0fffc05 	stb	r3,-16(fp)
 4010890:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 4010894:	0005883a 	mov	r2,zero
}
 4010898:	e037883a 	mov	sp,fp
 401089c:	df000017 	ldw	fp,0(sp)
 40108a0:	dec00104 	addi	sp,sp,4
 40108a4:	f800283a 	ret

040108a8 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 40108a8:	deffff04 	addi	sp,sp,-4
 40108ac:	df000015 	stw	fp,0(sp)
 40108b0:	d839883a 	mov	fp,sp
    return( usb_task_state );
 40108b4:	d0a00603 	ldbu	r2,-32744(gp)
}
 40108b8:	e037883a 	mov	sp,fp
 40108bc:	df000017 	ldw	fp,0(sp)
 40108c0:	dec00104 	addi	sp,sp,4
 40108c4:	f800283a 	ret

040108c8 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 40108c8:	defffe04 	addi	sp,sp,-8
 40108cc:	df000115 	stw	fp,4(sp)
 40108d0:	df000104 	addi	fp,sp,4
 40108d4:	2005883a 	mov	r2,r4
 40108d8:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 40108dc:	e0bfff03 	ldbu	r2,-4(fp)
 40108e0:	100690fa 	slli	r3,r2,3
 40108e4:	008100f4 	movhi	r2,1027
 40108e8:	10aab004 	addi	r2,r2,-21824
 40108ec:	1885883a 	add	r2,r3,r2
}
 40108f0:	e037883a 	mov	sp,fp
 40108f4:	df000017 	ldw	fp,0(sp)
 40108f8:	dec00104 	addi	sp,sp,4
 40108fc:	f800283a 	ret

04010900 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 4010900:	defffc04 	addi	sp,sp,-16
 4010904:	df000315 	stw	fp,12(sp)
 4010908:	df000304 	addi	fp,sp,12
 401090c:	e13ffe15 	stw	r4,-8(fp)
 4010910:	2805883a 	mov	r2,r5
 4010914:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 4010918:	e03ffd05 	stb	zero,-12(fp)
 401091c:	00000d06 	br	4010954 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 4010920:	e0bffd03 	ldbu	r2,-12(fp)
 4010924:	e0fffe17 	ldw	r3,-8(fp)
 4010928:	1887883a 	add	r3,r3,r2
 401092c:	e0bffd03 	ldbu	r2,-12(fp)
 4010930:	1085883a 	add	r2,r2,r2
 4010934:	1009883a 	mov	r4,r2
 4010938:	e0bffe17 	ldw	r2,-8(fp)
 401093c:	1105883a 	add	r2,r2,r4
 4010940:	10800003 	ldbu	r2,0(r2)
 4010944:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 4010948:	e0bffd03 	ldbu	r2,-12(fp)
 401094c:	10800044 	addi	r2,r2,1
 4010950:	e0bffd05 	stb	r2,-12(fp)
 4010954:	e0fffd03 	ldbu	r3,-12(fp)
 4010958:	e0bfff03 	ldbu	r2,-4(fp)
 401095c:	18bff036 	bltu	r3,r2,4010920 <__alt_mem_onchip_memory2_0+0xfc00b760>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 4010960:	e0bfff03 	ldbu	r2,-4(fp)
 4010964:	e0fffe17 	ldw	r3,-8(fp)
 4010968:	1885883a 	add	r2,r3,r2
 401096c:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 4010970:	e0bffe17 	ldw	r2,-8(fp)
}
 4010974:	e037883a 	mov	sp,fp
 4010978:	df000017 	ldw	fp,0(sp)
 401097c:	dec00104 	addi	sp,sp,4
 4010980:	f800283a 	ret

04010984 <floor>:
 4010984:	2811d53a 	srai	r8,r5,20
 4010988:	defffa04 	addi	sp,sp,-24
 401098c:	dcc00315 	stw	r19,12(sp)
 4010990:	4201ffcc 	andi	r8,r8,2047
 4010994:	dc800215 	stw	r18,8(sp)
 4010998:	dc400115 	stw	r17,4(sp)
 401099c:	dc000015 	stw	r16,0(sp)
 40109a0:	dfc00515 	stw	ra,20(sp)
 40109a4:	dd000415 	stw	r20,16(sp)
 40109a8:	44bf0044 	addi	r18,r8,-1023
 40109ac:	018004c4 	movi	r6,19
 40109b0:	2821883a 	mov	r16,r5
 40109b4:	2005883a 	mov	r2,r4
 40109b8:	280f883a 	mov	r7,r5
 40109bc:	2827883a 	mov	r19,r5
 40109c0:	2023883a 	mov	r17,r4
 40109c4:	34801916 	blt	r6,r18,4010a2c <floor+0xa8>
 40109c8:	90003c16 	blt	r18,zero,4010abc <floor+0x138>
 40109cc:	05000434 	movhi	r20,16
 40109d0:	a53fffc4 	addi	r20,r20,-1
 40109d4:	a4a9d83a 	sra	r20,r20,r18
 40109d8:	2d0c703a 	and	r6,r5,r20
 40109dc:	310cb03a 	or	r6,r6,r4
 40109e0:	30001626 	beq	r6,zero,4010a3c <floor+0xb8>
 40109e4:	01a20034 	movhi	r6,34816
 40109e8:	01df8e34 	movhi	r7,32312
 40109ec:	319d6704 	addi	r6,r6,30108
 40109f0:	39f90f04 	addi	r7,r7,-7108
 40109f4:	401185c0 	call	401185c <__adddf3>
 40109f8:	000d883a 	mov	r6,zero
 40109fc:	000f883a 	mov	r7,zero
 4010a00:	1009883a 	mov	r4,r2
 4010a04:	180b883a 	mov	r5,r3
 4010a08:	4012b600 	call	4012b60 <__gedf2>
 4010a0c:	0080040e 	bge	zero,r2,4010a20 <floor+0x9c>
 4010a10:	80003c16 	blt	r16,zero,4010b04 <floor+0x180>
 4010a14:	0520303a 	nor	r16,zero,r20
 4010a18:	84e0703a 	and	r16,r16,r19
 4010a1c:	0023883a 	mov	r17,zero
 4010a20:	8805883a 	mov	r2,r17
 4010a24:	8007883a 	mov	r3,r16
 4010a28:	00000506 	br	4010a40 <floor+0xbc>
 4010a2c:	01800cc4 	movi	r6,51
 4010a30:	34800b0e 	bge	r6,r18,4010a60 <floor+0xdc>
 4010a34:	01810004 	movi	r6,1024
 4010a38:	91802f26 	beq	r18,r6,4010af8 <floor+0x174>
 4010a3c:	3807883a 	mov	r3,r7
 4010a40:	dfc00517 	ldw	ra,20(sp)
 4010a44:	dd000417 	ldw	r20,16(sp)
 4010a48:	dcc00317 	ldw	r19,12(sp)
 4010a4c:	dc800217 	ldw	r18,8(sp)
 4010a50:	dc400117 	ldw	r17,4(sp)
 4010a54:	dc000017 	ldw	r16,0(sp)
 4010a58:	dec00604 	addi	sp,sp,24
 4010a5c:	f800283a 	ret
 4010a60:	423efb44 	addi	r8,r8,-1043
 4010a64:	053fffc4 	movi	r20,-1
 4010a68:	a228d83a 	srl	r20,r20,r8
 4010a6c:	250c703a 	and	r6,r4,r20
 4010a70:	303ff226 	beq	r6,zero,4010a3c <__alt_mem_onchip_memory2_0+0xfc00b87c>
 4010a74:	01a20034 	movhi	r6,34816
 4010a78:	01df8e34 	movhi	r7,32312
 4010a7c:	319d6704 	addi	r6,r6,30108
 4010a80:	39f90f04 	addi	r7,r7,-7108
 4010a84:	401185c0 	call	401185c <__adddf3>
 4010a88:	000d883a 	mov	r6,zero
 4010a8c:	000f883a 	mov	r7,zero
 4010a90:	1009883a 	mov	r4,r2
 4010a94:	180b883a 	mov	r5,r3
 4010a98:	4012b600 	call	4012b60 <__gedf2>
 4010a9c:	00bfe00e 	bge	zero,r2,4010a20 <__alt_mem_onchip_memory2_0+0xfc00b860>
 4010aa0:	80001c16 	blt	r16,zero,4010b14 <floor+0x190>
 4010aa4:	0510303a 	nor	r8,zero,r20
 4010aa8:	9821883a 	mov	r16,r19
 4010aac:	8a22703a 	and	r17,r17,r8
 4010ab0:	8805883a 	mov	r2,r17
 4010ab4:	8007883a 	mov	r3,r16
 4010ab8:	003fe106 	br	4010a40 <__alt_mem_onchip_memory2_0+0xfc00b880>
 4010abc:	01a20034 	movhi	r6,34816
 4010ac0:	01df8e34 	movhi	r7,32312
 4010ac4:	319d6704 	addi	r6,r6,30108
 4010ac8:	39f90f04 	addi	r7,r7,-7108
 4010acc:	401185c0 	call	401185c <__adddf3>
 4010ad0:	000d883a 	mov	r6,zero
 4010ad4:	000f883a 	mov	r7,zero
 4010ad8:	1009883a 	mov	r4,r2
 4010adc:	180b883a 	mov	r5,r3
 4010ae0:	4012b600 	call	4012b60 <__gedf2>
 4010ae4:	00bfce0e 	bge	zero,r2,4010a20 <__alt_mem_onchip_memory2_0+0xfc00b860>
 4010ae8:	80001516 	blt	r16,zero,4010b40 <floor+0x1bc>
 4010aec:	0023883a 	mov	r17,zero
 4010af0:	0021883a 	mov	r16,zero
 4010af4:	003fca06 	br	4010a20 <__alt_mem_onchip_memory2_0+0xfc00b860>
 4010af8:	200d883a 	mov	r6,r4
 4010afc:	401185c0 	call	401185c <__adddf3>
 4010b00:	003fcf06 	br	4010a40 <__alt_mem_onchip_memory2_0+0xfc00b880>
 4010b04:	00800434 	movhi	r2,16
 4010b08:	14a5d83a 	sra	r18,r2,r18
 4010b0c:	84a7883a 	add	r19,r16,r18
 4010b10:	003fc006 	br	4010a14 <__alt_mem_onchip_memory2_0+0xfc00b854>
 4010b14:	00800504 	movi	r2,20
 4010b18:	90801326 	beq	r18,r2,4010b68 <floor+0x1e4>
 4010b1c:	00800d04 	movi	r2,52
 4010b20:	14a5c83a 	sub	r18,r2,r18
 4010b24:	00800044 	movi	r2,1
 4010b28:	1484983a 	sll	r2,r2,r18
 4010b2c:	1445883a 	add	r2,r2,r17
 4010b30:	14400b2e 	bgeu	r2,r17,4010b60 <floor+0x1dc>
 4010b34:	84c00044 	addi	r19,r16,1
 4010b38:	1023883a 	mov	r17,r2
 4010b3c:	003fd906 	br	4010aa4 <__alt_mem_onchip_memory2_0+0xfc00b8e4>
 4010b40:	00a00034 	movhi	r2,32768
 4010b44:	10bfffc4 	addi	r2,r2,-1
 4010b48:	8084703a 	and	r2,r16,r2
 4010b4c:	1462b03a 	or	r17,r2,r17
 4010b50:	883fb326 	beq	r17,zero,4010a20 <__alt_mem_onchip_memory2_0+0xfc00b860>
 4010b54:	0023883a 	mov	r17,zero
 4010b58:	042ffc34 	movhi	r16,49136
 4010b5c:	003fb006 	br	4010a20 <__alt_mem_onchip_memory2_0+0xfc00b860>
 4010b60:	1023883a 	mov	r17,r2
 4010b64:	003fcf06 	br	4010aa4 <__alt_mem_onchip_memory2_0+0xfc00b8e4>
 4010b68:	84c00044 	addi	r19,r16,1
 4010b6c:	003fcd06 	br	4010aa4 <__alt_mem_onchip_memory2_0+0xfc00b8e4>

04010b70 <log10>:
 4010b70:	defff104 	addi	sp,sp,-60
 4010b74:	dd000d15 	stw	r20,52(sp)
 4010b78:	050100b4 	movhi	r20,1026
 4010b7c:	dcc00c15 	stw	r19,48(sp)
 4010b80:	dc800b15 	stw	r18,44(sp)
 4010b84:	dc400a15 	stw	r17,40(sp)
 4010b88:	dc000915 	stw	r16,36(sp)
 4010b8c:	dfc00e15 	stw	ra,56(sp)
 4010b90:	a51ddb04 	addi	r20,r20,30572
 4010b94:	2027883a 	mov	r19,r4
 4010b98:	2825883a 	mov	r18,r5
 4010b9c:	4010d0c0 	call	4010d0c <__ieee754_log10>
 4010ba0:	1821883a 	mov	r16,r3
 4010ba4:	a0c00017 	ldw	r3,0(r20)
 4010ba8:	1023883a 	mov	r17,r2
 4010bac:	00bfffc4 	movi	r2,-1
 4010bb0:	18800a26 	beq	r3,r2,4010bdc <log10+0x6c>
 4010bb4:	9809883a 	mov	r4,r19
 4010bb8:	900b883a 	mov	r5,r18
 4010bbc:	4010edc0 	call	4010edc <__fpclassifyd>
 4010bc0:	10000626 	beq	r2,zero,4010bdc <log10+0x6c>
 4010bc4:	000d883a 	mov	r6,zero
 4010bc8:	000f883a 	mov	r7,zero
 4010bcc:	9809883a 	mov	r4,r19
 4010bd0:	900b883a 	mov	r5,r18
 4010bd4:	4012c3c0 	call	4012c3c <__ledf2>
 4010bd8:	00800a0e 	bge	zero,r2,4010c04 <log10+0x94>
 4010bdc:	8805883a 	mov	r2,r17
 4010be0:	8007883a 	mov	r3,r16
 4010be4:	dfc00e17 	ldw	ra,56(sp)
 4010be8:	dd000d17 	ldw	r20,52(sp)
 4010bec:	dcc00c17 	ldw	r19,48(sp)
 4010bf0:	dc800b17 	ldw	r18,44(sp)
 4010bf4:	dc400a17 	ldw	r17,40(sp)
 4010bf8:	dc000917 	ldw	r16,36(sp)
 4010bfc:	dec00f04 	addi	sp,sp,60
 4010c00:	f800283a 	ret
 4010c04:	008100b4 	movhi	r2,1026
 4010c08:	a4000017 	ldw	r16,0(r20)
 4010c0c:	10953804 	addi	r2,r2,21728
 4010c10:	d8000815 	stw	zero,32(sp)
 4010c14:	d8800115 	stw	r2,4(sp)
 4010c18:	dcc00215 	stw	r19,8(sp)
 4010c1c:	dc800315 	stw	r18,12(sp)
 4010c20:	dcc00415 	stw	r19,16(sp)
 4010c24:	dc800515 	stw	r18,20(sp)
 4010c28:	000d883a 	mov	r6,zero
 4010c2c:	000f883a 	mov	r7,zero
 4010c30:	9809883a 	mov	r4,r19
 4010c34:	900b883a 	mov	r5,r18
 4010c38:	8000101e 	bne	r16,zero,4010c7c <log10+0x10c>
 4010c3c:	00b80034 	movhi	r2,57344
 4010c40:	d8800615 	stw	r2,24(sp)
 4010c44:	00b1fc34 	movhi	r2,51184
 4010c48:	10bfffc4 	addi	r2,r2,-1
 4010c4c:	d8800715 	stw	r2,28(sp)
 4010c50:	4012ad80 	call	4012ad8 <__eqdf2>
 4010c54:	10001f1e 	bne	r2,zero,4010cd4 <log10+0x164>
 4010c58:	00800084 	movi	r2,2
 4010c5c:	d8800015 	stw	r2,0(sp)
 4010c60:	d809883a 	mov	r4,sp
 4010c64:	4010f500 	call	4010f50 <matherr>
 4010c68:	1000151e 	bne	r2,zero,4010cc0 <log10+0x150>
 4010c6c:	40140580 	call	4014058 <__errno>
 4010c70:	00c00884 	movi	r3,34
 4010c74:	10c00015 	stw	r3,0(r2)
 4010c78:	00001106 	br	4010cc0 <log10+0x150>
 4010c7c:	00bffc34 	movhi	r2,65520
 4010c80:	d8000615 	stw	zero,24(sp)
 4010c84:	d8800715 	stw	r2,28(sp)
 4010c88:	4012ad80 	call	4012ad8 <__eqdf2>
 4010c8c:	10001726 	beq	r2,zero,4010cec <log10+0x17c>
 4010c90:	00800044 	movi	r2,1
 4010c94:	d8800015 	stw	r2,0(sp)
 4010c98:	00800084 	movi	r2,2
 4010c9c:	80800f1e 	bne	r16,r2,4010cdc <log10+0x16c>
 4010ca0:	40140580 	call	4014058 <__errno>
 4010ca4:	00c00844 	movi	r3,33
 4010ca8:	10c00015 	stw	r3,0(r2)
 4010cac:	010100b4 	movhi	r4,1026
 4010cb0:	21158404 	addi	r4,r4,22032
 4010cb4:	4010f580 	call	4010f58 <nan>
 4010cb8:	d8800615 	stw	r2,24(sp)
 4010cbc:	d8c00715 	stw	r3,28(sp)
 4010cc0:	d8800817 	ldw	r2,32(sp)
 4010cc4:	10000d1e 	bne	r2,zero,4010cfc <log10+0x18c>
 4010cc8:	d8800617 	ldw	r2,24(sp)
 4010ccc:	d8c00717 	ldw	r3,28(sp)
 4010cd0:	003fc406 	br	4010be4 <__alt_mem_onchip_memory2_0+0xfc00ba24>
 4010cd4:	00800044 	movi	r2,1
 4010cd8:	d8800015 	stw	r2,0(sp)
 4010cdc:	d809883a 	mov	r4,sp
 4010ce0:	4010f500 	call	4010f50 <matherr>
 4010ce4:	103ff11e 	bne	r2,zero,4010cac <__alt_mem_onchip_memory2_0+0xfc00baec>
 4010ce8:	003fed06 	br	4010ca0 <__alt_mem_onchip_memory2_0+0xfc00bae0>
 4010cec:	00800084 	movi	r2,2
 4010cf0:	d8800015 	stw	r2,0(sp)
 4010cf4:	80bfdd26 	beq	r16,r2,4010c6c <__alt_mem_onchip_memory2_0+0xfc00baac>
 4010cf8:	003fd906 	br	4010c60 <__alt_mem_onchip_memory2_0+0xfc00baa0>
 4010cfc:	40140580 	call	4014058 <__errno>
 4010d00:	d8c00817 	ldw	r3,32(sp)
 4010d04:	10c00015 	stw	r3,0(r2)
 4010d08:	003fef06 	br	4010cc8 <__alt_mem_onchip_memory2_0+0xfc00bb08>

04010d0c <__ieee754_log10>:
 4010d0c:	defff904 	addi	sp,sp,-28
 4010d10:	00c00434 	movhi	r3,16
 4010d14:	dc000015 	stw	r16,0(sp)
 4010d18:	dfc00615 	stw	ra,24(sp)
 4010d1c:	dd400515 	stw	r21,20(sp)
 4010d20:	dd000415 	stw	r20,16(sp)
 4010d24:	dcc00315 	stw	r19,12(sp)
 4010d28:	dc800215 	stw	r18,8(sp)
 4010d2c:	dc400115 	stw	r17,4(sp)
 4010d30:	18ffffc4 	addi	r3,r3,-1
 4010d34:	280f883a 	mov	r7,r5
 4010d38:	2021883a 	mov	r16,r4
 4010d3c:	19401d16 	blt	r3,r5,4010db4 <__ieee754_log10+0xa8>
 4010d40:	00a00034 	movhi	r2,32768
 4010d44:	10bfffc4 	addi	r2,r2,-1
 4010d48:	2884703a 	and	r2,r5,r2
 4010d4c:	1104b03a 	or	r2,r2,r4
 4010d50:	10005426 	beq	r2,zero,4010ea4 <__ieee754_log10+0x198>
 4010d54:	28005916 	blt	r5,zero,4010ebc <__ieee754_log10+0x1b0>
 4010d58:	01d0d434 	movhi	r7,17232
 4010d5c:	000d883a 	mov	r6,zero
 4010d60:	4012d300 	call	4012d30 <__muldf3>
 4010d64:	011ffc34 	movhi	r4,32752
 4010d68:	1021883a 	mov	r16,r2
 4010d6c:	213fffc4 	addi	r4,r4,-1
 4010d70:	1805883a 	mov	r2,r3
 4010d74:	180f883a 	mov	r7,r3
 4010d78:	00fff284 	movi	r3,-54
 4010d7c:	2080120e 	bge	r4,r2,4010dc8 <__ieee754_log10+0xbc>
 4010d80:	800d883a 	mov	r6,r16
 4010d84:	8009883a 	mov	r4,r16
 4010d88:	380b883a 	mov	r5,r7
 4010d8c:	401185c0 	call	401185c <__adddf3>
 4010d90:	dfc00617 	ldw	ra,24(sp)
 4010d94:	dd400517 	ldw	r21,20(sp)
 4010d98:	dd000417 	ldw	r20,16(sp)
 4010d9c:	dcc00317 	ldw	r19,12(sp)
 4010da0:	dc800217 	ldw	r18,8(sp)
 4010da4:	dc400117 	ldw	r17,4(sp)
 4010da8:	dc000017 	ldw	r16,0(sp)
 4010dac:	dec00704 	addi	sp,sp,28
 4010db0:	f800283a 	ret
 4010db4:	011ffc34 	movhi	r4,32752
 4010db8:	2805883a 	mov	r2,r5
 4010dbc:	213fffc4 	addi	r4,r4,-1
 4010dc0:	0007883a 	mov	r3,zero
 4010dc4:	20bfee16 	blt	r4,r2,4010d80 <__alt_mem_onchip_memory2_0+0xfc00bbc0>
 4010dc8:	1009d53a 	srai	r4,r2,20
 4010dcc:	04400434 	movhi	r17,16
 4010dd0:	8c7fffc4 	addi	r17,r17,-1
 4010dd4:	213f0044 	addi	r4,r4,-1023
 4010dd8:	20c9883a 	add	r4,r4,r3
 4010ddc:	2028d7fa 	srli	r20,r4,31
 4010de0:	1462703a 	and	r17,r2,r17
 4010de4:	2509883a 	add	r4,r4,r20
 4010de8:	4013f180 	call	4013f18 <__floatsidf>
 4010dec:	1027883a 	mov	r19,r2
 4010df0:	0080ffc4 	movi	r2,1023
 4010df4:	1505c83a 	sub	r2,r2,r20
 4010df8:	100a953a 	slli	r5,r2,20
 4010dfc:	8009883a 	mov	r4,r16
 4010e00:	1825883a 	mov	r18,r3
 4010e04:	2c4ab03a 	or	r5,r5,r17
 4010e08:	4010f640 	call	4010f64 <__ieee754_log>
 4010e0c:	01847c74 	movhi	r6,4593
 4010e10:	01cf56b4 	movhi	r7,15706
 4010e14:	9809883a 	mov	r4,r19
 4010e18:	900b883a 	mov	r5,r18
 4010e1c:	318acd84 	addi	r6,r6,11062
 4010e20:	39ffbcc4 	addi	r7,r7,-269
 4010e24:	102b883a 	mov	r21,r2
 4010e28:	1829883a 	mov	r20,r3
 4010e2c:	4012d300 	call	4012d30 <__muldf3>
 4010e30:	018549f4 	movhi	r6,5415
 4010e34:	01cff734 	movhi	r7,16348
 4010e38:	a809883a 	mov	r4,r21
 4010e3c:	a00b883a 	mov	r5,r20
 4010e40:	31b94384 	addi	r6,r6,-6898
 4010e44:	39f2dec4 	addi	r7,r7,-13445
 4010e48:	1023883a 	mov	r17,r2
 4010e4c:	1821883a 	mov	r16,r3
 4010e50:	4012d300 	call	4012d30 <__muldf3>
 4010e54:	8809883a 	mov	r4,r17
 4010e58:	800b883a 	mov	r5,r16
 4010e5c:	100d883a 	mov	r6,r2
 4010e60:	180f883a 	mov	r7,r3
 4010e64:	401185c0 	call	401185c <__adddf3>
 4010e68:	019427f4 	movhi	r6,20639
 4010e6c:	01cff4f4 	movhi	r7,16339
 4010e70:	9809883a 	mov	r4,r19
 4010e74:	900b883a 	mov	r5,r18
 4010e78:	31980004 	addi	r6,r6,24576
 4010e7c:	39d104c4 	addi	r7,r7,17427
 4010e80:	1023883a 	mov	r17,r2
 4010e84:	1821883a 	mov	r16,r3
 4010e88:	4012d300 	call	4012d30 <__muldf3>
 4010e8c:	100d883a 	mov	r6,r2
 4010e90:	180f883a 	mov	r7,r3
 4010e94:	8809883a 	mov	r4,r17
 4010e98:	800b883a 	mov	r5,r16
 4010e9c:	401185c0 	call	401185c <__adddf3>
 4010ea0:	003fbb06 	br	4010d90 <__alt_mem_onchip_memory2_0+0xfc00bbd0>
 4010ea4:	000d883a 	mov	r6,zero
 4010ea8:	000f883a 	mov	r7,zero
 4010eac:	0009883a 	mov	r4,zero
 4010eb0:	0170d434 	movhi	r5,50000
 4010eb4:	40121080 	call	4012108 <__divdf3>
 4010eb8:	003fb506 	br	4010d90 <__alt_mem_onchip_memory2_0+0xfc00bbd0>
 4010ebc:	200d883a 	mov	r6,r4
 4010ec0:	401359c0 	call	401359c <__subdf3>
 4010ec4:	000d883a 	mov	r6,zero
 4010ec8:	000f883a 	mov	r7,zero
 4010ecc:	1009883a 	mov	r4,r2
 4010ed0:	180b883a 	mov	r5,r3
 4010ed4:	40121080 	call	4012108 <__divdf3>
 4010ed8:	003fad06 	br	4010d90 <__alt_mem_onchip_memory2_0+0xfc00bbd0>

04010edc <__fpclassifyd>:
 4010edc:	00a00034 	movhi	r2,32768
 4010ee0:	10bfffc4 	addi	r2,r2,-1
 4010ee4:	2884703a 	and	r2,r5,r2
 4010ee8:	10000726 	beq	r2,zero,4010f08 <__fpclassifyd+0x2c>
 4010eec:	00fffc34 	movhi	r3,65520
 4010ef0:	019ff834 	movhi	r6,32736
 4010ef4:	28c7883a 	add	r3,r5,r3
 4010ef8:	31bfffc4 	addi	r6,r6,-1
 4010efc:	30c00536 	bltu	r6,r3,4010f14 <__fpclassifyd+0x38>
 4010f00:	00800104 	movi	r2,4
 4010f04:	f800283a 	ret
 4010f08:	2000021e 	bne	r4,zero,4010f14 <__fpclassifyd+0x38>
 4010f0c:	00800084 	movi	r2,2
 4010f10:	f800283a 	ret
 4010f14:	00dffc34 	movhi	r3,32752
 4010f18:	019ff834 	movhi	r6,32736
 4010f1c:	28cb883a 	add	r5,r5,r3
 4010f20:	31bfffc4 	addi	r6,r6,-1
 4010f24:	317ff62e 	bgeu	r6,r5,4010f00 <__alt_mem_onchip_memory2_0+0xfc00bd40>
 4010f28:	01400434 	movhi	r5,16
 4010f2c:	297fffc4 	addi	r5,r5,-1
 4010f30:	28800236 	bltu	r5,r2,4010f3c <__fpclassifyd+0x60>
 4010f34:	008000c4 	movi	r2,3
 4010f38:	f800283a 	ret
 4010f3c:	10c00226 	beq	r2,r3,4010f48 <__fpclassifyd+0x6c>
 4010f40:	0005883a 	mov	r2,zero
 4010f44:	f800283a 	ret
 4010f48:	2005003a 	cmpeq	r2,r4,zero
 4010f4c:	f800283a 	ret

04010f50 <matherr>:
 4010f50:	0005883a 	mov	r2,zero
 4010f54:	f800283a 	ret

04010f58 <nan>:
 4010f58:	0005883a 	mov	r2,zero
 4010f5c:	00dffe34 	movhi	r3,32760
 4010f60:	f800283a 	ret

04010f64 <__ieee754_log>:
 4010f64:	defff204 	addi	sp,sp,-56
 4010f68:	01800434 	movhi	r6,16
 4010f6c:	dfc00d15 	stw	ra,52(sp)
 4010f70:	df000c15 	stw	fp,48(sp)
 4010f74:	ddc00b15 	stw	r23,44(sp)
 4010f78:	dd800a15 	stw	r22,40(sp)
 4010f7c:	dd400915 	stw	r21,36(sp)
 4010f80:	dd000815 	stw	r20,32(sp)
 4010f84:	dcc00715 	stw	r19,28(sp)
 4010f88:	dc800615 	stw	r18,24(sp)
 4010f8c:	dc400515 	stw	r17,20(sp)
 4010f90:	dc000415 	stw	r16,16(sp)
 4010f94:	31bfffc4 	addi	r6,r6,-1
 4010f98:	280f883a 	mov	r7,r5
 4010f9c:	2005883a 	mov	r2,r4
 4010fa0:	31404616 	blt	r6,r5,40110bc <__ieee754_log+0x158>
 4010fa4:	00e00034 	movhi	r3,32768
 4010fa8:	18ffffc4 	addi	r3,r3,-1
 4010fac:	28c6703a 	and	r3,r5,r3
 4010fb0:	1906b03a 	or	r3,r3,r4
 4010fb4:	1800f426 	beq	r3,zero,4011388 <__ieee754_log+0x424>
 4010fb8:	28017816 	blt	r5,zero,401159c <__ieee754_log+0x638>
 4010fbc:	01d0d434 	movhi	r7,17232
 4010fc0:	000d883a 	mov	r6,zero
 4010fc4:	4012d300 	call	4012d30 <__muldf3>
 4010fc8:	015ffc34 	movhi	r5,32752
 4010fcc:	297fffc4 	addi	r5,r5,-1
 4010fd0:	180f883a 	mov	r7,r3
 4010fd4:	013ff284 	movi	r4,-54
 4010fd8:	28c03d16 	blt	r5,r3,40110d0 <__ieee754_log+0x16c>
 4010fdc:	04c00434 	movhi	r19,16
 4010fe0:	9cffffc4 	addi	r19,r19,-1
 4010fe4:	01400274 	movhi	r5,9
 4010fe8:	1cf8703a 	and	fp,r3,r19
 4010fec:	2957d904 	addi	r5,r5,24420
 4010ff0:	1821d53a 	srai	r16,r3,20
 4010ff4:	e14b883a 	add	r5,fp,r5
 4010ff8:	2940042c 	andhi	r5,r5,16
 4010ffc:	2807d53a 	srai	r3,r5,20
 4011000:	843f0044 	addi	r16,r16,-1023
 4011004:	294ffc3c 	xorhi	r5,r5,16368
 4011008:	8121883a 	add	r16,r16,r4
 401100c:	000d883a 	mov	r6,zero
 4011010:	01cffc34 	movhi	r7,16368
 4011014:	1009883a 	mov	r4,r2
 4011018:	2f0ab03a 	or	r5,r5,fp
 401101c:	1c21883a 	add	r16,r3,r16
 4011020:	401359c0 	call	401359c <__subdf3>
 4011024:	1025883a 	mov	r18,r2
 4011028:	e0800084 	addi	r2,fp,2
 401102c:	14e6703a 	and	r19,r2,r19
 4011030:	00800084 	movi	r2,2
 4011034:	1823883a 	mov	r17,r3
 4011038:	000d883a 	mov	r6,zero
 401103c:	14c03416 	blt	r2,r19,4011110 <__ieee754_log+0x1ac>
 4011040:	000f883a 	mov	r7,zero
 4011044:	9009883a 	mov	r4,r18
 4011048:	180b883a 	mov	r5,r3
 401104c:	4012ad80 	call	4012ad8 <__eqdf2>
 4011050:	1000d31e 	bne	r2,zero,40113a0 <__ieee754_log+0x43c>
 4011054:	80015926 	beq	r16,zero,40115bc <__ieee754_log+0x658>
 4011058:	8009883a 	mov	r4,r16
 401105c:	4013f180 	call	4013f18 <__floatsidf>
 4011060:	01cff9b4 	movhi	r7,16358
 4011064:	39cb9084 	addi	r7,r7,11842
 4011068:	01bfb834 	movhi	r6,65248
 401106c:	1009883a 	mov	r4,r2
 4011070:	180b883a 	mov	r5,r3
 4011074:	1023883a 	mov	r17,r2
 4011078:	1821883a 	mov	r16,r3
 401107c:	4012d300 	call	4012d30 <__muldf3>
 4011080:	018d5e74 	movhi	r6,13689
 4011084:	01cf7ab4 	movhi	r7,15850
 4011088:	8809883a 	mov	r4,r17
 401108c:	800b883a 	mov	r5,r16
 4011090:	318f1d84 	addi	r6,r6,15478
 4011094:	39ce7bc4 	addi	r7,r7,14831
 4011098:	1027883a 	mov	r19,r2
 401109c:	1825883a 	mov	r18,r3
 40110a0:	4012d300 	call	4012d30 <__muldf3>
 40110a4:	100d883a 	mov	r6,r2
 40110a8:	180f883a 	mov	r7,r3
 40110ac:	9809883a 	mov	r4,r19
 40110b0:	900b883a 	mov	r5,r18
 40110b4:	401185c0 	call	401185c <__adddf3>
 40110b8:	00000906 	br	40110e0 <__ieee754_log+0x17c>
 40110bc:	2807883a 	mov	r3,r5
 40110c0:	015ffc34 	movhi	r5,32752
 40110c4:	297fffc4 	addi	r5,r5,-1
 40110c8:	0009883a 	mov	r4,zero
 40110cc:	28ffc30e 	bge	r5,r3,4010fdc <__alt_mem_onchip_memory2_0+0xfc00be1c>
 40110d0:	100d883a 	mov	r6,r2
 40110d4:	1009883a 	mov	r4,r2
 40110d8:	380b883a 	mov	r5,r7
 40110dc:	401185c0 	call	401185c <__adddf3>
 40110e0:	dfc00d17 	ldw	ra,52(sp)
 40110e4:	df000c17 	ldw	fp,48(sp)
 40110e8:	ddc00b17 	ldw	r23,44(sp)
 40110ec:	dd800a17 	ldw	r22,40(sp)
 40110f0:	dd400917 	ldw	r21,36(sp)
 40110f4:	dd000817 	ldw	r20,32(sp)
 40110f8:	dcc00717 	ldw	r19,28(sp)
 40110fc:	dc800617 	ldw	r18,24(sp)
 4011100:	dc400517 	ldw	r17,20(sp)
 4011104:	dc000417 	ldw	r16,16(sp)
 4011108:	dec00e04 	addi	sp,sp,56
 401110c:	f800283a 	ret
 4011110:	01d00034 	movhi	r7,16384
 4011114:	9009883a 	mov	r4,r18
 4011118:	180b883a 	mov	r5,r3
 401111c:	401185c0 	call	401185c <__adddf3>
 4011120:	100d883a 	mov	r6,r2
 4011124:	180f883a 	mov	r7,r3
 4011128:	880b883a 	mov	r5,r17
 401112c:	9009883a 	mov	r4,r18
 4011130:	40121080 	call	4012108 <__divdf3>
 4011134:	8009883a 	mov	r4,r16
 4011138:	102d883a 	mov	r22,r2
 401113c:	182b883a 	mov	r21,r3
 4011140:	4013f180 	call	4013f18 <__floatsidf>
 4011144:	b00d883a 	mov	r6,r22
 4011148:	a80f883a 	mov	r7,r21
 401114c:	b009883a 	mov	r4,r22
 4011150:	a80b883a 	mov	r5,r21
 4011154:	d8800015 	stw	r2,0(sp)
 4011158:	d8c00115 	stw	r3,4(sp)
 401115c:	4012d300 	call	4012d30 <__muldf3>
 4011160:	027ffeb4 	movhi	r9,65530
 4011164:	4a7ae184 	addi	r9,r9,-5242
 4011168:	100d883a 	mov	r6,r2
 401116c:	180f883a 	mov	r7,r3
 4011170:	1009883a 	mov	r4,r2
 4011174:	180b883a 	mov	r5,r3
 4011178:	e26f883a 	add	r23,fp,r9
 401117c:	d8c00315 	stw	r3,12(sp)
 4011180:	d8800215 	stw	r2,8(sp)
 4011184:	4012d300 	call	4012d30 <__muldf3>
 4011188:	01b7cfb4 	movhi	r6,57150
 401118c:	01cff0f4 	movhi	r7,16323
 4011190:	31949104 	addi	r6,r6,21060
 4011194:	39fc4484 	addi	r7,r7,-3822
 4011198:	1009883a 	mov	r4,r2
 401119c:	180b883a 	mov	r5,r3
 40111a0:	1029883a 	mov	r20,r2
 40111a4:	1827883a 	mov	r19,r3
 40111a8:	4012d300 	call	4012d30 <__muldf3>
 40111ac:	01a5b2f4 	movhi	r6,38603
 40111b0:	01cff1f4 	movhi	r7,16327
 40111b4:	3180f784 	addi	r6,r6,990
 40111b8:	39d19904 	addi	r7,r7,18020
 40111bc:	1009883a 	mov	r4,r2
 40111c0:	180b883a 	mov	r5,r3
 40111c4:	401185c0 	call	401185c <__adddf3>
 40111c8:	a00d883a 	mov	r6,r20
 40111cc:	980f883a 	mov	r7,r19
 40111d0:	1009883a 	mov	r4,r2
 40111d4:	180b883a 	mov	r5,r3
 40111d8:	4012d300 	call	4012d30 <__muldf3>
 40111dc:	01a508f4 	movhi	r6,37923
 40111e0:	01cff4b4 	movhi	r7,16338
 40111e4:	31a4d644 	addi	r6,r6,-27815
 40111e8:	39d24904 	addi	r7,r7,18724
 40111ec:	1009883a 	mov	r4,r2
 40111f0:	180b883a 	mov	r5,r3
 40111f4:	401185c0 	call	401185c <__adddf3>
 40111f8:	a00d883a 	mov	r6,r20
 40111fc:	980f883a 	mov	r7,r19
 4011200:	1009883a 	mov	r4,r2
 4011204:	180b883a 	mov	r5,r3
 4011208:	4012d300 	call	4012d30 <__muldf3>
 401120c:	01955574 	movhi	r6,21845
 4011210:	01cff974 	movhi	r7,16357
 4011214:	319564c4 	addi	r6,r6,21907
 4011218:	39d55544 	addi	r7,r7,21845
 401121c:	1009883a 	mov	r4,r2
 4011220:	180b883a 	mov	r5,r3
 4011224:	401185c0 	call	401185c <__adddf3>
 4011228:	dac00217 	ldw	r11,8(sp)
 401122c:	da800317 	ldw	r10,12(sp)
 4011230:	1009883a 	mov	r4,r2
 4011234:	580d883a 	mov	r6,r11
 4011238:	500f883a 	mov	r7,r10
 401123c:	180b883a 	mov	r5,r3
 4011240:	4012d300 	call	4012d30 <__muldf3>
 4011244:	01b41e74 	movhi	r6,53369
 4011248:	01cff134 	movhi	r7,16324
 401124c:	a009883a 	mov	r4,r20
 4011250:	980b883a 	mov	r5,r19
 4011254:	31b1a7c4 	addi	r6,r6,-14689
 4011258:	39e68244 	addi	r7,r7,-26103
 401125c:	d8c00315 	stw	r3,12(sp)
 4011260:	d8800215 	stw	r2,8(sp)
 4011264:	4012d300 	call	4012d30 <__muldf3>
 4011268:	018763b4 	movhi	r6,7566
 401126c:	01cff334 	movhi	r7,16332
 4011270:	319e2bc4 	addi	r6,r6,30895
 4011274:	39dc7144 	addi	r7,r7,29125
 4011278:	1009883a 	mov	r4,r2
 401127c:	180b883a 	mov	r5,r3
 4011280:	401185c0 	call	401185c <__adddf3>
 4011284:	a00d883a 	mov	r6,r20
 4011288:	980f883a 	mov	r7,r19
 401128c:	1009883a 	mov	r4,r2
 4011290:	180b883a 	mov	r5,r3
 4011294:	4012d300 	call	4012d30 <__muldf3>
 4011298:	01a66634 	movhi	r6,39320
 401129c:	01cff6b4 	movhi	r7,16346
 40112a0:	31be8104 	addi	r6,r6,-1532
 40112a4:	39e66644 	addi	r7,r7,-26215
 40112a8:	1009883a 	mov	r4,r2
 40112ac:	180b883a 	mov	r5,r3
 40112b0:	401185c0 	call	401185c <__adddf3>
 40112b4:	a00d883a 	mov	r6,r20
 40112b8:	980f883a 	mov	r7,r19
 40112bc:	1009883a 	mov	r4,r2
 40112c0:	180b883a 	mov	r5,r3
 40112c4:	4012d300 	call	4012d30 <__muldf3>
 40112c8:	dac00217 	ldw	r11,8(sp)
 40112cc:	da800317 	ldw	r10,12(sp)
 40112d0:	100d883a 	mov	r6,r2
 40112d4:	180f883a 	mov	r7,r3
 40112d8:	5809883a 	mov	r4,r11
 40112dc:	500b883a 	mov	r5,r10
 40112e0:	401185c0 	call	401185c <__adddf3>
 40112e4:	1827883a 	mov	r19,r3
 40112e8:	00c001f4 	movhi	r3,7
 40112ec:	18ee1444 	addi	r3,r3,-18351
 40112f0:	1f07c83a 	sub	r3,r3,fp
 40112f4:	1dd2b03a 	or	r9,r3,r23
 40112f8:	1029883a 	mov	r20,r2
 40112fc:	0240490e 	bge	zero,r9,4011424 <__ieee754_log+0x4c0>
 4011300:	000d883a 	mov	r6,zero
 4011304:	01cff834 	movhi	r7,16352
 4011308:	9009883a 	mov	r4,r18
 401130c:	880b883a 	mov	r5,r17
 4011310:	4012d300 	call	4012d30 <__muldf3>
 4011314:	900d883a 	mov	r6,r18
 4011318:	880f883a 	mov	r7,r17
 401131c:	1009883a 	mov	r4,r2
 4011320:	180b883a 	mov	r5,r3
 4011324:	4012d300 	call	4012d30 <__muldf3>
 4011328:	1039883a 	mov	fp,r2
 401132c:	182f883a 	mov	r23,r3
 4011330:	8000691e 	bne	r16,zero,40114d8 <__ieee754_log+0x574>
 4011334:	100d883a 	mov	r6,r2
 4011338:	180f883a 	mov	r7,r3
 401133c:	a009883a 	mov	r4,r20
 4011340:	980b883a 	mov	r5,r19
 4011344:	401185c0 	call	401185c <__adddf3>
 4011348:	b00d883a 	mov	r6,r22
 401134c:	a80f883a 	mov	r7,r21
 4011350:	1009883a 	mov	r4,r2
 4011354:	180b883a 	mov	r5,r3
 4011358:	4012d300 	call	4012d30 <__muldf3>
 401135c:	100d883a 	mov	r6,r2
 4011360:	180f883a 	mov	r7,r3
 4011364:	e009883a 	mov	r4,fp
 4011368:	b80b883a 	mov	r5,r23
 401136c:	401359c0 	call	401359c <__subdf3>
 4011370:	100d883a 	mov	r6,r2
 4011374:	180f883a 	mov	r7,r3
 4011378:	9009883a 	mov	r4,r18
 401137c:	880b883a 	mov	r5,r17
 4011380:	401359c0 	call	401359c <__subdf3>
 4011384:	003f5606 	br	40110e0 <__alt_mem_onchip_memory2_0+0xfc00bf20>
 4011388:	000d883a 	mov	r6,zero
 401138c:	000f883a 	mov	r7,zero
 4011390:	0009883a 	mov	r4,zero
 4011394:	0170d434 	movhi	r5,50000
 4011398:	40121080 	call	4012108 <__divdf3>
 401139c:	003f5006 	br	40110e0 <__alt_mem_onchip_memory2_0+0xfc00bf20>
 40113a0:	01955574 	movhi	r6,21845
 40113a4:	01cff574 	movhi	r7,16341
 40113a8:	31955544 	addi	r6,r6,21845
 40113ac:	39d55544 	addi	r7,r7,21845
 40113b0:	9009883a 	mov	r4,r18
 40113b4:	880b883a 	mov	r5,r17
 40113b8:	4012d300 	call	4012d30 <__muldf3>
 40113bc:	100d883a 	mov	r6,r2
 40113c0:	180f883a 	mov	r7,r3
 40113c4:	0009883a 	mov	r4,zero
 40113c8:	014ff834 	movhi	r5,16352
 40113cc:	401359c0 	call	401359c <__subdf3>
 40113d0:	900d883a 	mov	r6,r18
 40113d4:	880f883a 	mov	r7,r17
 40113d8:	9009883a 	mov	r4,r18
 40113dc:	880b883a 	mov	r5,r17
 40113e0:	1029883a 	mov	r20,r2
 40113e4:	1827883a 	mov	r19,r3
 40113e8:	4012d300 	call	4012d30 <__muldf3>
 40113ec:	a009883a 	mov	r4,r20
 40113f0:	980b883a 	mov	r5,r19
 40113f4:	100d883a 	mov	r6,r2
 40113f8:	180f883a 	mov	r7,r3
 40113fc:	4012d300 	call	4012d30 <__muldf3>
 4011400:	1029883a 	mov	r20,r2
 4011404:	1827883a 	mov	r19,r3
 4011408:	80006f1e 	bne	r16,zero,40115c8 <__ieee754_log+0x664>
 401140c:	100d883a 	mov	r6,r2
 4011410:	180f883a 	mov	r7,r3
 4011414:	9009883a 	mov	r4,r18
 4011418:	880b883a 	mov	r5,r17
 401141c:	401359c0 	call	401359c <__subdf3>
 4011420:	003f2f06 	br	40110e0 <__alt_mem_onchip_memory2_0+0xfc00bf20>
 4011424:	80008b26 	beq	r16,zero,4011654 <__ieee754_log+0x6f0>
 4011428:	d9000017 	ldw	r4,0(sp)
 401142c:	d9400117 	ldw	r5,4(sp)
 4011430:	01cff9b4 	movhi	r7,16358
 4011434:	39cb9084 	addi	r7,r7,11842
 4011438:	01bfb834 	movhi	r6,65248
 401143c:	4012d300 	call	4012d30 <__muldf3>
 4011440:	a00d883a 	mov	r6,r20
 4011444:	980f883a 	mov	r7,r19
 4011448:	9009883a 	mov	r4,r18
 401144c:	880b883a 	mov	r5,r17
 4011450:	1821883a 	mov	r16,r3
 4011454:	d8800215 	stw	r2,8(sp)
 4011458:	401359c0 	call	401359c <__subdf3>
 401145c:	b00d883a 	mov	r6,r22
 4011460:	a80f883a 	mov	r7,r21
 4011464:	1009883a 	mov	r4,r2
 4011468:	180b883a 	mov	r5,r3
 401146c:	4012d300 	call	4012d30 <__muldf3>
 4011470:	d9000017 	ldw	r4,0(sp)
 4011474:	d9400117 	ldw	r5,4(sp)
 4011478:	018d5e74 	movhi	r6,13689
 401147c:	01cf7ab4 	movhi	r7,15850
 4011480:	318f1d84 	addi	r6,r6,15478
 4011484:	39ce7bc4 	addi	r7,r7,14831
 4011488:	1029883a 	mov	r20,r2
 401148c:	1827883a 	mov	r19,r3
 4011490:	4012d300 	call	4012d30 <__muldf3>
 4011494:	a009883a 	mov	r4,r20
 4011498:	980b883a 	mov	r5,r19
 401149c:	100d883a 	mov	r6,r2
 40114a0:	180f883a 	mov	r7,r3
 40114a4:	401359c0 	call	401359c <__subdf3>
 40114a8:	900d883a 	mov	r6,r18
 40114ac:	880f883a 	mov	r7,r17
 40114b0:	1009883a 	mov	r4,r2
 40114b4:	180b883a 	mov	r5,r3
 40114b8:	401359c0 	call	401359c <__subdf3>
 40114bc:	da000217 	ldw	r8,8(sp)
 40114c0:	100d883a 	mov	r6,r2
 40114c4:	180f883a 	mov	r7,r3
 40114c8:	4009883a 	mov	r4,r8
 40114cc:	800b883a 	mov	r5,r16
 40114d0:	401359c0 	call	401359c <__subdf3>
 40114d4:	003f0206 	br	40110e0 <__alt_mem_onchip_memory2_0+0xfc00bf20>
 40114d8:	d9000017 	ldw	r4,0(sp)
 40114dc:	d9400117 	ldw	r5,4(sp)
 40114e0:	01cff9b4 	movhi	r7,16358
 40114e4:	39cb9084 	addi	r7,r7,11842
 40114e8:	01bfb834 	movhi	r6,65248
 40114ec:	4012d300 	call	4012d30 <__muldf3>
 40114f0:	e00d883a 	mov	r6,fp
 40114f4:	b80f883a 	mov	r7,r23
 40114f8:	a009883a 	mov	r4,r20
 40114fc:	980b883a 	mov	r5,r19
 4011500:	1821883a 	mov	r16,r3
 4011504:	d8800315 	stw	r2,12(sp)
 4011508:	401185c0 	call	401185c <__adddf3>
 401150c:	b00d883a 	mov	r6,r22
 4011510:	a80f883a 	mov	r7,r21
 4011514:	1009883a 	mov	r4,r2
 4011518:	180b883a 	mov	r5,r3
 401151c:	4012d300 	call	4012d30 <__muldf3>
 4011520:	d9000017 	ldw	r4,0(sp)
 4011524:	d9400117 	ldw	r5,4(sp)
 4011528:	018d5e74 	movhi	r6,13689
 401152c:	01cf7ab4 	movhi	r7,15850
 4011530:	318f1d84 	addi	r6,r6,15478
 4011534:	39ce7bc4 	addi	r7,r7,14831
 4011538:	1029883a 	mov	r20,r2
 401153c:	1827883a 	mov	r19,r3
 4011540:	4012d300 	call	4012d30 <__muldf3>
 4011544:	a009883a 	mov	r4,r20
 4011548:	980b883a 	mov	r5,r19
 401154c:	100d883a 	mov	r6,r2
 4011550:	180f883a 	mov	r7,r3
 4011554:	401185c0 	call	401185c <__adddf3>
 4011558:	e009883a 	mov	r4,fp
 401155c:	b80b883a 	mov	r5,r23
 4011560:	100d883a 	mov	r6,r2
 4011564:	180f883a 	mov	r7,r3
 4011568:	401359c0 	call	401359c <__subdf3>
 401156c:	900d883a 	mov	r6,r18
 4011570:	880f883a 	mov	r7,r17
 4011574:	1009883a 	mov	r4,r2
 4011578:	180b883a 	mov	r5,r3
 401157c:	401359c0 	call	401359c <__subdf3>
 4011580:	da800317 	ldw	r10,12(sp)
 4011584:	100d883a 	mov	r6,r2
 4011588:	180f883a 	mov	r7,r3
 401158c:	5009883a 	mov	r4,r10
 4011590:	800b883a 	mov	r5,r16
 4011594:	401359c0 	call	401359c <__subdf3>
 4011598:	003ed106 	br	40110e0 <__alt_mem_onchip_memory2_0+0xfc00bf20>
 401159c:	200d883a 	mov	r6,r4
 40115a0:	401359c0 	call	401359c <__subdf3>
 40115a4:	000d883a 	mov	r6,zero
 40115a8:	000f883a 	mov	r7,zero
 40115ac:	1009883a 	mov	r4,r2
 40115b0:	180b883a 	mov	r5,r3
 40115b4:	40121080 	call	4012108 <__divdf3>
 40115b8:	003ec906 	br	40110e0 <__alt_mem_onchip_memory2_0+0xfc00bf20>
 40115bc:	0005883a 	mov	r2,zero
 40115c0:	0007883a 	mov	r3,zero
 40115c4:	003ec606 	br	40110e0 <__alt_mem_onchip_memory2_0+0xfc00bf20>
 40115c8:	8009883a 	mov	r4,r16
 40115cc:	4013f180 	call	4013f18 <__floatsidf>
 40115d0:	01cff9b4 	movhi	r7,16358
 40115d4:	39cb9084 	addi	r7,r7,11842
 40115d8:	01bfb834 	movhi	r6,65248
 40115dc:	1009883a 	mov	r4,r2
 40115e0:	180b883a 	mov	r5,r3
 40115e4:	102b883a 	mov	r21,r2
 40115e8:	1821883a 	mov	r16,r3
 40115ec:	4012d300 	call	4012d30 <__muldf3>
 40115f0:	018d5e74 	movhi	r6,13689
 40115f4:	01cf7ab4 	movhi	r7,15850
 40115f8:	a809883a 	mov	r4,r21
 40115fc:	800b883a 	mov	r5,r16
 4011600:	318f1d84 	addi	r6,r6,15478
 4011604:	39ce7bc4 	addi	r7,r7,14831
 4011608:	102f883a 	mov	r23,r2
 401160c:	182d883a 	mov	r22,r3
 4011610:	4012d300 	call	4012d30 <__muldf3>
 4011614:	a009883a 	mov	r4,r20
 4011618:	980b883a 	mov	r5,r19
 401161c:	100d883a 	mov	r6,r2
 4011620:	180f883a 	mov	r7,r3
 4011624:	401359c0 	call	401359c <__subdf3>
 4011628:	900d883a 	mov	r6,r18
 401162c:	880f883a 	mov	r7,r17
 4011630:	1009883a 	mov	r4,r2
 4011634:	180b883a 	mov	r5,r3
 4011638:	401359c0 	call	401359c <__subdf3>
 401163c:	100d883a 	mov	r6,r2
 4011640:	180f883a 	mov	r7,r3
 4011644:	b809883a 	mov	r4,r23
 4011648:	b00b883a 	mov	r5,r22
 401164c:	401359c0 	call	401359c <__subdf3>
 4011650:	003ea306 	br	40110e0 <__alt_mem_onchip_memory2_0+0xfc00bf20>
 4011654:	a00d883a 	mov	r6,r20
 4011658:	980f883a 	mov	r7,r19
 401165c:	9009883a 	mov	r4,r18
 4011660:	880b883a 	mov	r5,r17
 4011664:	401359c0 	call	401359c <__subdf3>
 4011668:	b00d883a 	mov	r6,r22
 401166c:	a80f883a 	mov	r7,r21
 4011670:	1009883a 	mov	r4,r2
 4011674:	180b883a 	mov	r5,r3
 4011678:	4012d300 	call	4012d30 <__muldf3>
 401167c:	003f3c06 	br	4011370 <__alt_mem_onchip_memory2_0+0xfc00c1b0>

04011680 <__divsi3>:
 4011680:	20001b16 	blt	r4,zero,40116f0 <__divsi3+0x70>
 4011684:	000f883a 	mov	r7,zero
 4011688:	28001616 	blt	r5,zero,40116e4 <__divsi3+0x64>
 401168c:	200d883a 	mov	r6,r4
 4011690:	29001a2e 	bgeu	r5,r4,40116fc <__divsi3+0x7c>
 4011694:	00800804 	movi	r2,32
 4011698:	00c00044 	movi	r3,1
 401169c:	00000106 	br	40116a4 <__divsi3+0x24>
 40116a0:	10000d26 	beq	r2,zero,40116d8 <__divsi3+0x58>
 40116a4:	294b883a 	add	r5,r5,r5
 40116a8:	10bfffc4 	addi	r2,r2,-1
 40116ac:	18c7883a 	add	r3,r3,r3
 40116b0:	293ffb36 	bltu	r5,r4,40116a0 <__alt_mem_onchip_memory2_0+0xfc00c4e0>
 40116b4:	0005883a 	mov	r2,zero
 40116b8:	18000726 	beq	r3,zero,40116d8 <__divsi3+0x58>
 40116bc:	0005883a 	mov	r2,zero
 40116c0:	31400236 	bltu	r6,r5,40116cc <__divsi3+0x4c>
 40116c4:	314dc83a 	sub	r6,r6,r5
 40116c8:	10c4b03a 	or	r2,r2,r3
 40116cc:	1806d07a 	srli	r3,r3,1
 40116d0:	280ad07a 	srli	r5,r5,1
 40116d4:	183ffa1e 	bne	r3,zero,40116c0 <__alt_mem_onchip_memory2_0+0xfc00c500>
 40116d8:	38000126 	beq	r7,zero,40116e0 <__divsi3+0x60>
 40116dc:	0085c83a 	sub	r2,zero,r2
 40116e0:	f800283a 	ret
 40116e4:	014bc83a 	sub	r5,zero,r5
 40116e8:	39c0005c 	xori	r7,r7,1
 40116ec:	003fe706 	br	401168c <__alt_mem_onchip_memory2_0+0xfc00c4cc>
 40116f0:	0109c83a 	sub	r4,zero,r4
 40116f4:	01c00044 	movi	r7,1
 40116f8:	003fe306 	br	4011688 <__alt_mem_onchip_memory2_0+0xfc00c4c8>
 40116fc:	00c00044 	movi	r3,1
 4011700:	003fee06 	br	40116bc <__alt_mem_onchip_memory2_0+0xfc00c4fc>

04011704 <__modsi3>:
 4011704:	20001716 	blt	r4,zero,4011764 <__modsi3+0x60>
 4011708:	000f883a 	mov	r7,zero
 401170c:	2005883a 	mov	r2,r4
 4011710:	28001216 	blt	r5,zero,401175c <__modsi3+0x58>
 4011714:	2900162e 	bgeu	r5,r4,4011770 <__modsi3+0x6c>
 4011718:	01800804 	movi	r6,32
 401171c:	00c00044 	movi	r3,1
 4011720:	00000106 	br	4011728 <__modsi3+0x24>
 4011724:	30000a26 	beq	r6,zero,4011750 <__modsi3+0x4c>
 4011728:	294b883a 	add	r5,r5,r5
 401172c:	31bfffc4 	addi	r6,r6,-1
 4011730:	18c7883a 	add	r3,r3,r3
 4011734:	293ffb36 	bltu	r5,r4,4011724 <__alt_mem_onchip_memory2_0+0xfc00c564>
 4011738:	18000526 	beq	r3,zero,4011750 <__modsi3+0x4c>
 401173c:	1806d07a 	srli	r3,r3,1
 4011740:	11400136 	bltu	r2,r5,4011748 <__modsi3+0x44>
 4011744:	1145c83a 	sub	r2,r2,r5
 4011748:	280ad07a 	srli	r5,r5,1
 401174c:	183ffb1e 	bne	r3,zero,401173c <__alt_mem_onchip_memory2_0+0xfc00c57c>
 4011750:	38000126 	beq	r7,zero,4011758 <__modsi3+0x54>
 4011754:	0085c83a 	sub	r2,zero,r2
 4011758:	f800283a 	ret
 401175c:	014bc83a 	sub	r5,zero,r5
 4011760:	003fec06 	br	4011714 <__alt_mem_onchip_memory2_0+0xfc00c554>
 4011764:	0109c83a 	sub	r4,zero,r4
 4011768:	01c00044 	movi	r7,1
 401176c:	003fe706 	br	401170c <__alt_mem_onchip_memory2_0+0xfc00c54c>
 4011770:	00c00044 	movi	r3,1
 4011774:	003ff106 	br	401173c <__alt_mem_onchip_memory2_0+0xfc00c57c>

04011778 <__udivsi3>:
 4011778:	200d883a 	mov	r6,r4
 401177c:	2900152e 	bgeu	r5,r4,40117d4 <__udivsi3+0x5c>
 4011780:	28001416 	blt	r5,zero,40117d4 <__udivsi3+0x5c>
 4011784:	00800804 	movi	r2,32
 4011788:	00c00044 	movi	r3,1
 401178c:	00000206 	br	4011798 <__udivsi3+0x20>
 4011790:	10000e26 	beq	r2,zero,40117cc <__udivsi3+0x54>
 4011794:	28000516 	blt	r5,zero,40117ac <__udivsi3+0x34>
 4011798:	294b883a 	add	r5,r5,r5
 401179c:	10bfffc4 	addi	r2,r2,-1
 40117a0:	18c7883a 	add	r3,r3,r3
 40117a4:	293ffa36 	bltu	r5,r4,4011790 <__alt_mem_onchip_memory2_0+0xfc00c5d0>
 40117a8:	18000826 	beq	r3,zero,40117cc <__udivsi3+0x54>
 40117ac:	0005883a 	mov	r2,zero
 40117b0:	31400236 	bltu	r6,r5,40117bc <__udivsi3+0x44>
 40117b4:	314dc83a 	sub	r6,r6,r5
 40117b8:	10c4b03a 	or	r2,r2,r3
 40117bc:	1806d07a 	srli	r3,r3,1
 40117c0:	280ad07a 	srli	r5,r5,1
 40117c4:	183ffa1e 	bne	r3,zero,40117b0 <__alt_mem_onchip_memory2_0+0xfc00c5f0>
 40117c8:	f800283a 	ret
 40117cc:	0005883a 	mov	r2,zero
 40117d0:	f800283a 	ret
 40117d4:	00c00044 	movi	r3,1
 40117d8:	003ff406 	br	40117ac <__alt_mem_onchip_memory2_0+0xfc00c5ec>

040117dc <__umodsi3>:
 40117dc:	2005883a 	mov	r2,r4
 40117e0:	2900122e 	bgeu	r5,r4,401182c <__umodsi3+0x50>
 40117e4:	28001116 	blt	r5,zero,401182c <__umodsi3+0x50>
 40117e8:	01800804 	movi	r6,32
 40117ec:	00c00044 	movi	r3,1
 40117f0:	00000206 	br	40117fc <__umodsi3+0x20>
 40117f4:	30000c26 	beq	r6,zero,4011828 <__umodsi3+0x4c>
 40117f8:	28000516 	blt	r5,zero,4011810 <__umodsi3+0x34>
 40117fc:	294b883a 	add	r5,r5,r5
 4011800:	31bfffc4 	addi	r6,r6,-1
 4011804:	18c7883a 	add	r3,r3,r3
 4011808:	293ffa36 	bltu	r5,r4,40117f4 <__alt_mem_onchip_memory2_0+0xfc00c634>
 401180c:	18000626 	beq	r3,zero,4011828 <__umodsi3+0x4c>
 4011810:	1806d07a 	srli	r3,r3,1
 4011814:	11400136 	bltu	r2,r5,401181c <__umodsi3+0x40>
 4011818:	1145c83a 	sub	r2,r2,r5
 401181c:	280ad07a 	srli	r5,r5,1
 4011820:	183ffb1e 	bne	r3,zero,4011810 <__alt_mem_onchip_memory2_0+0xfc00c650>
 4011824:	f800283a 	ret
 4011828:	f800283a 	ret
 401182c:	00c00044 	movi	r3,1
 4011830:	003ff706 	br	4011810 <__alt_mem_onchip_memory2_0+0xfc00c650>

04011834 <__mulsi3>:
 4011834:	0005883a 	mov	r2,zero
 4011838:	20000726 	beq	r4,zero,4011858 <__mulsi3+0x24>
 401183c:	20c0004c 	andi	r3,r4,1
 4011840:	2008d07a 	srli	r4,r4,1
 4011844:	18000126 	beq	r3,zero,401184c <__mulsi3+0x18>
 4011848:	1145883a 	add	r2,r2,r5
 401184c:	294b883a 	add	r5,r5,r5
 4011850:	203ffa1e 	bne	r4,zero,401183c <__alt_mem_onchip_memory2_0+0xfc00c67c>
 4011854:	f800283a 	ret
 4011858:	f800283a 	ret

0401185c <__adddf3>:
 401185c:	02c00434 	movhi	r11,16
 4011860:	5affffc4 	addi	r11,r11,-1
 4011864:	2806d7fa 	srli	r3,r5,31
 4011868:	2ad4703a 	and	r10,r5,r11
 401186c:	3ad2703a 	and	r9,r7,r11
 4011870:	3804d53a 	srli	r2,r7,20
 4011874:	3018d77a 	srli	r12,r6,29
 4011878:	280ad53a 	srli	r5,r5,20
 401187c:	501490fa 	slli	r10,r10,3
 4011880:	2010d77a 	srli	r8,r4,29
 4011884:	481290fa 	slli	r9,r9,3
 4011888:	380ed7fa 	srli	r7,r7,31
 401188c:	defffb04 	addi	sp,sp,-20
 4011890:	dc800215 	stw	r18,8(sp)
 4011894:	dc400115 	stw	r17,4(sp)
 4011898:	dc000015 	stw	r16,0(sp)
 401189c:	dfc00415 	stw	ra,16(sp)
 40118a0:	dcc00315 	stw	r19,12(sp)
 40118a4:	1c803fcc 	andi	r18,r3,255
 40118a8:	2c01ffcc 	andi	r16,r5,2047
 40118ac:	5210b03a 	or	r8,r10,r8
 40118b0:	202290fa 	slli	r17,r4,3
 40118b4:	1081ffcc 	andi	r2,r2,2047
 40118b8:	4b12b03a 	or	r9,r9,r12
 40118bc:	300c90fa 	slli	r6,r6,3
 40118c0:	91c07526 	beq	r18,r7,4011a98 <__adddf3+0x23c>
 40118c4:	8087c83a 	sub	r3,r16,r2
 40118c8:	00c0ab0e 	bge	zero,r3,4011b78 <__adddf3+0x31c>
 40118cc:	10002a1e 	bne	r2,zero,4011978 <__adddf3+0x11c>
 40118d0:	4984b03a 	or	r2,r9,r6
 40118d4:	1000961e 	bne	r2,zero,4011b30 <__adddf3+0x2d4>
 40118d8:	888001cc 	andi	r2,r17,7
 40118dc:	10000726 	beq	r2,zero,40118fc <__adddf3+0xa0>
 40118e0:	888003cc 	andi	r2,r17,15
 40118e4:	00c00104 	movi	r3,4
 40118e8:	10c00426 	beq	r2,r3,40118fc <__adddf3+0xa0>
 40118ec:	88c7883a 	add	r3,r17,r3
 40118f0:	1c63803a 	cmpltu	r17,r3,r17
 40118f4:	4451883a 	add	r8,r8,r17
 40118f8:	1823883a 	mov	r17,r3
 40118fc:	4080202c 	andhi	r2,r8,128
 4011900:	10005926 	beq	r2,zero,4011a68 <__adddf3+0x20c>
 4011904:	84000044 	addi	r16,r16,1
 4011908:	0081ffc4 	movi	r2,2047
 401190c:	8080ba26 	beq	r16,r2,4011bf8 <__adddf3+0x39c>
 4011910:	00bfe034 	movhi	r2,65408
 4011914:	10bfffc4 	addi	r2,r2,-1
 4011918:	4090703a 	and	r8,r8,r2
 401191c:	4004977a 	slli	r2,r8,29
 4011920:	4010927a 	slli	r8,r8,9
 4011924:	8822d0fa 	srli	r17,r17,3
 4011928:	8401ffcc 	andi	r16,r16,2047
 401192c:	4010d33a 	srli	r8,r8,12
 4011930:	9007883a 	mov	r3,r18
 4011934:	1444b03a 	or	r2,r2,r17
 4011938:	8401ffcc 	andi	r16,r16,2047
 401193c:	8020953a 	slli	r16,r16,20
 4011940:	18c03fcc 	andi	r3,r3,255
 4011944:	01000434 	movhi	r4,16
 4011948:	213fffc4 	addi	r4,r4,-1
 401194c:	180697fa 	slli	r3,r3,31
 4011950:	4110703a 	and	r8,r8,r4
 4011954:	4410b03a 	or	r8,r8,r16
 4011958:	40c6b03a 	or	r3,r8,r3
 401195c:	dfc00417 	ldw	ra,16(sp)
 4011960:	dcc00317 	ldw	r19,12(sp)
 4011964:	dc800217 	ldw	r18,8(sp)
 4011968:	dc400117 	ldw	r17,4(sp)
 401196c:	dc000017 	ldw	r16,0(sp)
 4011970:	dec00504 	addi	sp,sp,20
 4011974:	f800283a 	ret
 4011978:	0081ffc4 	movi	r2,2047
 401197c:	80bfd626 	beq	r16,r2,40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011980:	4a402034 	orhi	r9,r9,128
 4011984:	00800e04 	movi	r2,56
 4011988:	10c09f16 	blt	r2,r3,4011c08 <__adddf3+0x3ac>
 401198c:	008007c4 	movi	r2,31
 4011990:	10c0c216 	blt	r2,r3,4011c9c <__adddf3+0x440>
 4011994:	00800804 	movi	r2,32
 4011998:	10c5c83a 	sub	r2,r2,r3
 401199c:	488a983a 	sll	r5,r9,r2
 40119a0:	30c8d83a 	srl	r4,r6,r3
 40119a4:	3084983a 	sll	r2,r6,r2
 40119a8:	48c6d83a 	srl	r3,r9,r3
 40119ac:	290cb03a 	or	r6,r5,r4
 40119b0:	1004c03a 	cmpne	r2,r2,zero
 40119b4:	308cb03a 	or	r6,r6,r2
 40119b8:	898dc83a 	sub	r6,r17,r6
 40119bc:	89a3803a 	cmpltu	r17,r17,r6
 40119c0:	40d1c83a 	sub	r8,r8,r3
 40119c4:	4451c83a 	sub	r8,r8,r17
 40119c8:	3023883a 	mov	r17,r6
 40119cc:	4080202c 	andhi	r2,r8,128
 40119d0:	10002326 	beq	r2,zero,4011a60 <__adddf3+0x204>
 40119d4:	04c02034 	movhi	r19,128
 40119d8:	9cffffc4 	addi	r19,r19,-1
 40119dc:	44e6703a 	and	r19,r8,r19
 40119e0:	98007626 	beq	r19,zero,4011bbc <__adddf3+0x360>
 40119e4:	9809883a 	mov	r4,r19
 40119e8:	4013ff40 	call	4013ff4 <__clzsi2>
 40119ec:	10fffe04 	addi	r3,r2,-8
 40119f0:	010007c4 	movi	r4,31
 40119f4:	20c07716 	blt	r4,r3,4011bd4 <__adddf3+0x378>
 40119f8:	00800804 	movi	r2,32
 40119fc:	10c5c83a 	sub	r2,r2,r3
 4011a00:	8884d83a 	srl	r2,r17,r2
 4011a04:	98d0983a 	sll	r8,r19,r3
 4011a08:	88e2983a 	sll	r17,r17,r3
 4011a0c:	1204b03a 	or	r2,r2,r8
 4011a10:	1c007416 	blt	r3,r16,4011be4 <__adddf3+0x388>
 4011a14:	1c21c83a 	sub	r16,r3,r16
 4011a18:	82000044 	addi	r8,r16,1
 4011a1c:	00c007c4 	movi	r3,31
 4011a20:	1a009116 	blt	r3,r8,4011c68 <__adddf3+0x40c>
 4011a24:	00c00804 	movi	r3,32
 4011a28:	1a07c83a 	sub	r3,r3,r8
 4011a2c:	8a08d83a 	srl	r4,r17,r8
 4011a30:	88e2983a 	sll	r17,r17,r3
 4011a34:	10c6983a 	sll	r3,r2,r3
 4011a38:	1210d83a 	srl	r8,r2,r8
 4011a3c:	8804c03a 	cmpne	r2,r17,zero
 4011a40:	1906b03a 	or	r3,r3,r4
 4011a44:	18a2b03a 	or	r17,r3,r2
 4011a48:	0021883a 	mov	r16,zero
 4011a4c:	003fa206 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011a50:	1890b03a 	or	r8,r3,r2
 4011a54:	40017d26 	beq	r8,zero,401204c <__adddf3+0x7f0>
 4011a58:	1011883a 	mov	r8,r2
 4011a5c:	1823883a 	mov	r17,r3
 4011a60:	888001cc 	andi	r2,r17,7
 4011a64:	103f9e1e 	bne	r2,zero,40118e0 <__alt_mem_onchip_memory2_0+0xfc00c720>
 4011a68:	4004977a 	slli	r2,r8,29
 4011a6c:	8822d0fa 	srli	r17,r17,3
 4011a70:	4010d0fa 	srli	r8,r8,3
 4011a74:	9007883a 	mov	r3,r18
 4011a78:	1444b03a 	or	r2,r2,r17
 4011a7c:	0101ffc4 	movi	r4,2047
 4011a80:	81002426 	beq	r16,r4,4011b14 <__adddf3+0x2b8>
 4011a84:	8120703a 	and	r16,r16,r4
 4011a88:	01000434 	movhi	r4,16
 4011a8c:	213fffc4 	addi	r4,r4,-1
 4011a90:	4110703a 	and	r8,r8,r4
 4011a94:	003fa806 	br	4011938 <__alt_mem_onchip_memory2_0+0xfc00c778>
 4011a98:	8089c83a 	sub	r4,r16,r2
 4011a9c:	01005e0e 	bge	zero,r4,4011c18 <__adddf3+0x3bc>
 4011aa0:	10002b26 	beq	r2,zero,4011b50 <__adddf3+0x2f4>
 4011aa4:	0081ffc4 	movi	r2,2047
 4011aa8:	80bf8b26 	beq	r16,r2,40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011aac:	4a402034 	orhi	r9,r9,128
 4011ab0:	00800e04 	movi	r2,56
 4011ab4:	1100a40e 	bge	r2,r4,4011d48 <__adddf3+0x4ec>
 4011ab8:	498cb03a 	or	r6,r9,r6
 4011abc:	300ac03a 	cmpne	r5,r6,zero
 4011ac0:	0013883a 	mov	r9,zero
 4011ac4:	2c4b883a 	add	r5,r5,r17
 4011ac8:	2c63803a 	cmpltu	r17,r5,r17
 4011acc:	4a11883a 	add	r8,r9,r8
 4011ad0:	8a11883a 	add	r8,r17,r8
 4011ad4:	2823883a 	mov	r17,r5
 4011ad8:	4080202c 	andhi	r2,r8,128
 4011adc:	103fe026 	beq	r2,zero,4011a60 <__alt_mem_onchip_memory2_0+0xfc00c8a0>
 4011ae0:	84000044 	addi	r16,r16,1
 4011ae4:	0081ffc4 	movi	r2,2047
 4011ae8:	8080d226 	beq	r16,r2,4011e34 <__adddf3+0x5d8>
 4011aec:	00bfe034 	movhi	r2,65408
 4011af0:	10bfffc4 	addi	r2,r2,-1
 4011af4:	4090703a 	and	r8,r8,r2
 4011af8:	880ad07a 	srli	r5,r17,1
 4011afc:	400897fa 	slli	r4,r8,31
 4011b00:	88c0004c 	andi	r3,r17,1
 4011b04:	28e2b03a 	or	r17,r5,r3
 4011b08:	4010d07a 	srli	r8,r8,1
 4011b0c:	2462b03a 	or	r17,r4,r17
 4011b10:	003f7106 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011b14:	4088b03a 	or	r4,r8,r2
 4011b18:	20014526 	beq	r4,zero,4012030 <__adddf3+0x7d4>
 4011b1c:	01000434 	movhi	r4,16
 4011b20:	42000234 	orhi	r8,r8,8
 4011b24:	213fffc4 	addi	r4,r4,-1
 4011b28:	4110703a 	and	r8,r8,r4
 4011b2c:	003f8206 	br	4011938 <__alt_mem_onchip_memory2_0+0xfc00c778>
 4011b30:	18ffffc4 	addi	r3,r3,-1
 4011b34:	1800491e 	bne	r3,zero,4011c5c <__adddf3+0x400>
 4011b38:	898bc83a 	sub	r5,r17,r6
 4011b3c:	8963803a 	cmpltu	r17,r17,r5
 4011b40:	4251c83a 	sub	r8,r8,r9
 4011b44:	4451c83a 	sub	r8,r8,r17
 4011b48:	2823883a 	mov	r17,r5
 4011b4c:	003f9f06 	br	40119cc <__alt_mem_onchip_memory2_0+0xfc00c80c>
 4011b50:	4984b03a 	or	r2,r9,r6
 4011b54:	103f6026 	beq	r2,zero,40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011b58:	213fffc4 	addi	r4,r4,-1
 4011b5c:	2000931e 	bne	r4,zero,4011dac <__adddf3+0x550>
 4011b60:	898d883a 	add	r6,r17,r6
 4011b64:	3463803a 	cmpltu	r17,r6,r17
 4011b68:	4251883a 	add	r8,r8,r9
 4011b6c:	8a11883a 	add	r8,r17,r8
 4011b70:	3023883a 	mov	r17,r6
 4011b74:	003fd806 	br	4011ad8 <__alt_mem_onchip_memory2_0+0xfc00c918>
 4011b78:	1800541e 	bne	r3,zero,4011ccc <__adddf3+0x470>
 4011b7c:	80800044 	addi	r2,r16,1
 4011b80:	1081ffcc 	andi	r2,r2,2047
 4011b84:	00c00044 	movi	r3,1
 4011b88:	1880a00e 	bge	r3,r2,4011e0c <__adddf3+0x5b0>
 4011b8c:	8989c83a 	sub	r4,r17,r6
 4011b90:	8905803a 	cmpltu	r2,r17,r4
 4011b94:	4267c83a 	sub	r19,r8,r9
 4011b98:	98a7c83a 	sub	r19,r19,r2
 4011b9c:	9880202c 	andhi	r2,r19,128
 4011ba0:	10006326 	beq	r2,zero,4011d30 <__adddf3+0x4d4>
 4011ba4:	3463c83a 	sub	r17,r6,r17
 4011ba8:	4a07c83a 	sub	r3,r9,r8
 4011bac:	344d803a 	cmpltu	r6,r6,r17
 4011bb0:	19a7c83a 	sub	r19,r3,r6
 4011bb4:	3825883a 	mov	r18,r7
 4011bb8:	983f8a1e 	bne	r19,zero,40119e4 <__alt_mem_onchip_memory2_0+0xfc00c824>
 4011bbc:	8809883a 	mov	r4,r17
 4011bc0:	4013ff40 	call	4013ff4 <__clzsi2>
 4011bc4:	10800804 	addi	r2,r2,32
 4011bc8:	10fffe04 	addi	r3,r2,-8
 4011bcc:	010007c4 	movi	r4,31
 4011bd0:	20ff890e 	bge	r4,r3,40119f8 <__alt_mem_onchip_memory2_0+0xfc00c838>
 4011bd4:	10bff604 	addi	r2,r2,-40
 4011bd8:	8884983a 	sll	r2,r17,r2
 4011bdc:	0023883a 	mov	r17,zero
 4011be0:	1c3f8c0e 	bge	r3,r16,4011a14 <__alt_mem_onchip_memory2_0+0xfc00c854>
 4011be4:	023fe034 	movhi	r8,65408
 4011be8:	423fffc4 	addi	r8,r8,-1
 4011bec:	80e1c83a 	sub	r16,r16,r3
 4011bf0:	1210703a 	and	r8,r2,r8
 4011bf4:	003f3806 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011bf8:	9007883a 	mov	r3,r18
 4011bfc:	0011883a 	mov	r8,zero
 4011c00:	0005883a 	mov	r2,zero
 4011c04:	003f4c06 	br	4011938 <__alt_mem_onchip_memory2_0+0xfc00c778>
 4011c08:	498cb03a 	or	r6,r9,r6
 4011c0c:	300cc03a 	cmpne	r6,r6,zero
 4011c10:	0007883a 	mov	r3,zero
 4011c14:	003f6806 	br	40119b8 <__alt_mem_onchip_memory2_0+0xfc00c7f8>
 4011c18:	20009c1e 	bne	r4,zero,4011e8c <__adddf3+0x630>
 4011c1c:	80800044 	addi	r2,r16,1
 4011c20:	1141ffcc 	andi	r5,r2,2047
 4011c24:	01000044 	movi	r4,1
 4011c28:	2140670e 	bge	r4,r5,4011dc8 <__adddf3+0x56c>
 4011c2c:	0101ffc4 	movi	r4,2047
 4011c30:	11007f26 	beq	r2,r4,4011e30 <__adddf3+0x5d4>
 4011c34:	898d883a 	add	r6,r17,r6
 4011c38:	4247883a 	add	r3,r8,r9
 4011c3c:	3451803a 	cmpltu	r8,r6,r17
 4011c40:	40d1883a 	add	r8,r8,r3
 4011c44:	402297fa 	slli	r17,r8,31
 4011c48:	300cd07a 	srli	r6,r6,1
 4011c4c:	4010d07a 	srli	r8,r8,1
 4011c50:	1021883a 	mov	r16,r2
 4011c54:	89a2b03a 	or	r17,r17,r6
 4011c58:	003f1f06 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011c5c:	0081ffc4 	movi	r2,2047
 4011c60:	80bf481e 	bne	r16,r2,4011984 <__alt_mem_onchip_memory2_0+0xfc00c7c4>
 4011c64:	003f1c06 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011c68:	843ff844 	addi	r16,r16,-31
 4011c6c:	01000804 	movi	r4,32
 4011c70:	1406d83a 	srl	r3,r2,r16
 4011c74:	41005026 	beq	r8,r4,4011db8 <__adddf3+0x55c>
 4011c78:	01001004 	movi	r4,64
 4011c7c:	2211c83a 	sub	r8,r4,r8
 4011c80:	1204983a 	sll	r2,r2,r8
 4011c84:	88a2b03a 	or	r17,r17,r2
 4011c88:	8822c03a 	cmpne	r17,r17,zero
 4011c8c:	1c62b03a 	or	r17,r3,r17
 4011c90:	0011883a 	mov	r8,zero
 4011c94:	0021883a 	mov	r16,zero
 4011c98:	003f7106 	br	4011a60 <__alt_mem_onchip_memory2_0+0xfc00c8a0>
 4011c9c:	193ff804 	addi	r4,r3,-32
 4011ca0:	00800804 	movi	r2,32
 4011ca4:	4908d83a 	srl	r4,r9,r4
 4011ca8:	18804526 	beq	r3,r2,4011dc0 <__adddf3+0x564>
 4011cac:	00801004 	movi	r2,64
 4011cb0:	10c5c83a 	sub	r2,r2,r3
 4011cb4:	4886983a 	sll	r3,r9,r2
 4011cb8:	198cb03a 	or	r6,r3,r6
 4011cbc:	300cc03a 	cmpne	r6,r6,zero
 4011cc0:	218cb03a 	or	r6,r4,r6
 4011cc4:	0007883a 	mov	r3,zero
 4011cc8:	003f3b06 	br	40119b8 <__alt_mem_onchip_memory2_0+0xfc00c7f8>
 4011ccc:	80002a26 	beq	r16,zero,4011d78 <__adddf3+0x51c>
 4011cd0:	0101ffc4 	movi	r4,2047
 4011cd4:	11006826 	beq	r2,r4,4011e78 <__adddf3+0x61c>
 4011cd8:	00c7c83a 	sub	r3,zero,r3
 4011cdc:	42002034 	orhi	r8,r8,128
 4011ce0:	01000e04 	movi	r4,56
 4011ce4:	20c07c16 	blt	r4,r3,4011ed8 <__adddf3+0x67c>
 4011ce8:	010007c4 	movi	r4,31
 4011cec:	20c0da16 	blt	r4,r3,4012058 <__adddf3+0x7fc>
 4011cf0:	01000804 	movi	r4,32
 4011cf4:	20c9c83a 	sub	r4,r4,r3
 4011cf8:	4114983a 	sll	r10,r8,r4
 4011cfc:	88cad83a 	srl	r5,r17,r3
 4011d00:	8908983a 	sll	r4,r17,r4
 4011d04:	40c6d83a 	srl	r3,r8,r3
 4011d08:	5162b03a 	or	r17,r10,r5
 4011d0c:	2008c03a 	cmpne	r4,r4,zero
 4011d10:	8922b03a 	or	r17,r17,r4
 4011d14:	3463c83a 	sub	r17,r6,r17
 4011d18:	48c7c83a 	sub	r3,r9,r3
 4011d1c:	344d803a 	cmpltu	r6,r6,r17
 4011d20:	1991c83a 	sub	r8,r3,r6
 4011d24:	1021883a 	mov	r16,r2
 4011d28:	3825883a 	mov	r18,r7
 4011d2c:	003f2706 	br	40119cc <__alt_mem_onchip_memory2_0+0xfc00c80c>
 4011d30:	24d0b03a 	or	r8,r4,r19
 4011d34:	40001b1e 	bne	r8,zero,4011da4 <__adddf3+0x548>
 4011d38:	0005883a 	mov	r2,zero
 4011d3c:	0007883a 	mov	r3,zero
 4011d40:	0021883a 	mov	r16,zero
 4011d44:	003f4d06 	br	4011a7c <__alt_mem_onchip_memory2_0+0xfc00c8bc>
 4011d48:	008007c4 	movi	r2,31
 4011d4c:	11003c16 	blt	r2,r4,4011e40 <__adddf3+0x5e4>
 4011d50:	00800804 	movi	r2,32
 4011d54:	1105c83a 	sub	r2,r2,r4
 4011d58:	488e983a 	sll	r7,r9,r2
 4011d5c:	310ad83a 	srl	r5,r6,r4
 4011d60:	3084983a 	sll	r2,r6,r2
 4011d64:	4912d83a 	srl	r9,r9,r4
 4011d68:	394ab03a 	or	r5,r7,r5
 4011d6c:	1004c03a 	cmpne	r2,r2,zero
 4011d70:	288ab03a 	or	r5,r5,r2
 4011d74:	003f5306 	br	4011ac4 <__alt_mem_onchip_memory2_0+0xfc00c904>
 4011d78:	4448b03a 	or	r4,r8,r17
 4011d7c:	20003e26 	beq	r4,zero,4011e78 <__adddf3+0x61c>
 4011d80:	00c6303a 	nor	r3,zero,r3
 4011d84:	18003a1e 	bne	r3,zero,4011e70 <__adddf3+0x614>
 4011d88:	3463c83a 	sub	r17,r6,r17
 4011d8c:	4a07c83a 	sub	r3,r9,r8
 4011d90:	344d803a 	cmpltu	r6,r6,r17
 4011d94:	1991c83a 	sub	r8,r3,r6
 4011d98:	1021883a 	mov	r16,r2
 4011d9c:	3825883a 	mov	r18,r7
 4011da0:	003f0a06 	br	40119cc <__alt_mem_onchip_memory2_0+0xfc00c80c>
 4011da4:	2023883a 	mov	r17,r4
 4011da8:	003f0d06 	br	40119e0 <__alt_mem_onchip_memory2_0+0xfc00c820>
 4011dac:	0081ffc4 	movi	r2,2047
 4011db0:	80bf3f1e 	bne	r16,r2,4011ab0 <__alt_mem_onchip_memory2_0+0xfc00c8f0>
 4011db4:	003ec806 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011db8:	0005883a 	mov	r2,zero
 4011dbc:	003fb106 	br	4011c84 <__alt_mem_onchip_memory2_0+0xfc00cac4>
 4011dc0:	0007883a 	mov	r3,zero
 4011dc4:	003fbc06 	br	4011cb8 <__alt_mem_onchip_memory2_0+0xfc00caf8>
 4011dc8:	4444b03a 	or	r2,r8,r17
 4011dcc:	8000871e 	bne	r16,zero,4011fec <__adddf3+0x790>
 4011dd0:	1000ba26 	beq	r2,zero,40120bc <__adddf3+0x860>
 4011dd4:	4984b03a 	or	r2,r9,r6
 4011dd8:	103ebf26 	beq	r2,zero,40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011ddc:	8985883a 	add	r2,r17,r6
 4011de0:	4247883a 	add	r3,r8,r9
 4011de4:	1451803a 	cmpltu	r8,r2,r17
 4011de8:	40d1883a 	add	r8,r8,r3
 4011dec:	40c0202c 	andhi	r3,r8,128
 4011df0:	1023883a 	mov	r17,r2
 4011df4:	183f1a26 	beq	r3,zero,4011a60 <__alt_mem_onchip_memory2_0+0xfc00c8a0>
 4011df8:	00bfe034 	movhi	r2,65408
 4011dfc:	10bfffc4 	addi	r2,r2,-1
 4011e00:	2021883a 	mov	r16,r4
 4011e04:	4090703a 	and	r8,r8,r2
 4011e08:	003eb306 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011e0c:	4444b03a 	or	r2,r8,r17
 4011e10:	8000291e 	bne	r16,zero,4011eb8 <__adddf3+0x65c>
 4011e14:	10004b1e 	bne	r2,zero,4011f44 <__adddf3+0x6e8>
 4011e18:	4990b03a 	or	r8,r9,r6
 4011e1c:	40008b26 	beq	r8,zero,401204c <__adddf3+0x7f0>
 4011e20:	4811883a 	mov	r8,r9
 4011e24:	3023883a 	mov	r17,r6
 4011e28:	3825883a 	mov	r18,r7
 4011e2c:	003eaa06 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011e30:	1021883a 	mov	r16,r2
 4011e34:	0011883a 	mov	r8,zero
 4011e38:	0005883a 	mov	r2,zero
 4011e3c:	003f0f06 	br	4011a7c <__alt_mem_onchip_memory2_0+0xfc00c8bc>
 4011e40:	217ff804 	addi	r5,r4,-32
 4011e44:	00800804 	movi	r2,32
 4011e48:	494ad83a 	srl	r5,r9,r5
 4011e4c:	20807d26 	beq	r4,r2,4012044 <__adddf3+0x7e8>
 4011e50:	00801004 	movi	r2,64
 4011e54:	1109c83a 	sub	r4,r2,r4
 4011e58:	4912983a 	sll	r9,r9,r4
 4011e5c:	498cb03a 	or	r6,r9,r6
 4011e60:	300cc03a 	cmpne	r6,r6,zero
 4011e64:	298ab03a 	or	r5,r5,r6
 4011e68:	0013883a 	mov	r9,zero
 4011e6c:	003f1506 	br	4011ac4 <__alt_mem_onchip_memory2_0+0xfc00c904>
 4011e70:	0101ffc4 	movi	r4,2047
 4011e74:	113f9a1e 	bne	r2,r4,4011ce0 <__alt_mem_onchip_memory2_0+0xfc00cb20>
 4011e78:	4811883a 	mov	r8,r9
 4011e7c:	3023883a 	mov	r17,r6
 4011e80:	1021883a 	mov	r16,r2
 4011e84:	3825883a 	mov	r18,r7
 4011e88:	003e9306 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011e8c:	8000161e 	bne	r16,zero,4011ee8 <__adddf3+0x68c>
 4011e90:	444ab03a 	or	r5,r8,r17
 4011e94:	28005126 	beq	r5,zero,4011fdc <__adddf3+0x780>
 4011e98:	0108303a 	nor	r4,zero,r4
 4011e9c:	20004d1e 	bne	r4,zero,4011fd4 <__adddf3+0x778>
 4011ea0:	89a3883a 	add	r17,r17,r6
 4011ea4:	4253883a 	add	r9,r8,r9
 4011ea8:	898d803a 	cmpltu	r6,r17,r6
 4011eac:	3251883a 	add	r8,r6,r9
 4011eb0:	1021883a 	mov	r16,r2
 4011eb4:	003f0806 	br	4011ad8 <__alt_mem_onchip_memory2_0+0xfc00c918>
 4011eb8:	1000301e 	bne	r2,zero,4011f7c <__adddf3+0x720>
 4011ebc:	4984b03a 	or	r2,r9,r6
 4011ec0:	10007126 	beq	r2,zero,4012088 <__adddf3+0x82c>
 4011ec4:	4811883a 	mov	r8,r9
 4011ec8:	3023883a 	mov	r17,r6
 4011ecc:	3825883a 	mov	r18,r7
 4011ed0:	0401ffc4 	movi	r16,2047
 4011ed4:	003e8006 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011ed8:	4462b03a 	or	r17,r8,r17
 4011edc:	8822c03a 	cmpne	r17,r17,zero
 4011ee0:	0007883a 	mov	r3,zero
 4011ee4:	003f8b06 	br	4011d14 <__alt_mem_onchip_memory2_0+0xfc00cb54>
 4011ee8:	0141ffc4 	movi	r5,2047
 4011eec:	11403b26 	beq	r2,r5,4011fdc <__adddf3+0x780>
 4011ef0:	0109c83a 	sub	r4,zero,r4
 4011ef4:	42002034 	orhi	r8,r8,128
 4011ef8:	01400e04 	movi	r5,56
 4011efc:	29006716 	blt	r5,r4,401209c <__adddf3+0x840>
 4011f00:	014007c4 	movi	r5,31
 4011f04:	29007016 	blt	r5,r4,40120c8 <__adddf3+0x86c>
 4011f08:	01400804 	movi	r5,32
 4011f0c:	290bc83a 	sub	r5,r5,r4
 4011f10:	4154983a 	sll	r10,r8,r5
 4011f14:	890ed83a 	srl	r7,r17,r4
 4011f18:	894a983a 	sll	r5,r17,r5
 4011f1c:	4108d83a 	srl	r4,r8,r4
 4011f20:	51e2b03a 	or	r17,r10,r7
 4011f24:	280ac03a 	cmpne	r5,r5,zero
 4011f28:	8962b03a 	or	r17,r17,r5
 4011f2c:	89a3883a 	add	r17,r17,r6
 4011f30:	2253883a 	add	r9,r4,r9
 4011f34:	898d803a 	cmpltu	r6,r17,r6
 4011f38:	3251883a 	add	r8,r6,r9
 4011f3c:	1021883a 	mov	r16,r2
 4011f40:	003ee506 	br	4011ad8 <__alt_mem_onchip_memory2_0+0xfc00c918>
 4011f44:	4984b03a 	or	r2,r9,r6
 4011f48:	103e6326 	beq	r2,zero,40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011f4c:	8987c83a 	sub	r3,r17,r6
 4011f50:	88c9803a 	cmpltu	r4,r17,r3
 4011f54:	4245c83a 	sub	r2,r8,r9
 4011f58:	1105c83a 	sub	r2,r2,r4
 4011f5c:	1100202c 	andhi	r4,r2,128
 4011f60:	203ebb26 	beq	r4,zero,4011a50 <__alt_mem_onchip_memory2_0+0xfc00c890>
 4011f64:	3463c83a 	sub	r17,r6,r17
 4011f68:	4a07c83a 	sub	r3,r9,r8
 4011f6c:	344d803a 	cmpltu	r6,r6,r17
 4011f70:	1991c83a 	sub	r8,r3,r6
 4011f74:	3825883a 	mov	r18,r7
 4011f78:	003e5706 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011f7c:	4984b03a 	or	r2,r9,r6
 4011f80:	10002e26 	beq	r2,zero,401203c <__adddf3+0x7e0>
 4011f84:	4004d0fa 	srli	r2,r8,3
 4011f88:	8822d0fa 	srli	r17,r17,3
 4011f8c:	4010977a 	slli	r8,r8,29
 4011f90:	10c0022c 	andhi	r3,r2,8
 4011f94:	4462b03a 	or	r17,r8,r17
 4011f98:	18000826 	beq	r3,zero,4011fbc <__adddf3+0x760>
 4011f9c:	4808d0fa 	srli	r4,r9,3
 4011fa0:	20c0022c 	andhi	r3,r4,8
 4011fa4:	1800051e 	bne	r3,zero,4011fbc <__adddf3+0x760>
 4011fa8:	300cd0fa 	srli	r6,r6,3
 4011fac:	4806977a 	slli	r3,r9,29
 4011fb0:	2005883a 	mov	r2,r4
 4011fb4:	3825883a 	mov	r18,r7
 4011fb8:	19a2b03a 	or	r17,r3,r6
 4011fbc:	8810d77a 	srli	r8,r17,29
 4011fc0:	100490fa 	slli	r2,r2,3
 4011fc4:	882290fa 	slli	r17,r17,3
 4011fc8:	0401ffc4 	movi	r16,2047
 4011fcc:	4090b03a 	or	r8,r8,r2
 4011fd0:	003e4106 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011fd4:	0141ffc4 	movi	r5,2047
 4011fd8:	117fc71e 	bne	r2,r5,4011ef8 <__alt_mem_onchip_memory2_0+0xfc00cd38>
 4011fdc:	4811883a 	mov	r8,r9
 4011fe0:	3023883a 	mov	r17,r6
 4011fe4:	1021883a 	mov	r16,r2
 4011fe8:	003e3b06 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4011fec:	10002f26 	beq	r2,zero,40120ac <__adddf3+0x850>
 4011ff0:	4984b03a 	or	r2,r9,r6
 4011ff4:	10001126 	beq	r2,zero,401203c <__adddf3+0x7e0>
 4011ff8:	4004d0fa 	srli	r2,r8,3
 4011ffc:	8822d0fa 	srli	r17,r17,3
 4012000:	4010977a 	slli	r8,r8,29
 4012004:	10c0022c 	andhi	r3,r2,8
 4012008:	4462b03a 	or	r17,r8,r17
 401200c:	183feb26 	beq	r3,zero,4011fbc <__alt_mem_onchip_memory2_0+0xfc00cdfc>
 4012010:	4808d0fa 	srli	r4,r9,3
 4012014:	20c0022c 	andhi	r3,r4,8
 4012018:	183fe81e 	bne	r3,zero,4011fbc <__alt_mem_onchip_memory2_0+0xfc00cdfc>
 401201c:	300cd0fa 	srli	r6,r6,3
 4012020:	4806977a 	slli	r3,r9,29
 4012024:	2005883a 	mov	r2,r4
 4012028:	19a2b03a 	or	r17,r3,r6
 401202c:	003fe306 	br	4011fbc <__alt_mem_onchip_memory2_0+0xfc00cdfc>
 4012030:	0011883a 	mov	r8,zero
 4012034:	0005883a 	mov	r2,zero
 4012038:	003e3f06 	br	4011938 <__alt_mem_onchip_memory2_0+0xfc00c778>
 401203c:	0401ffc4 	movi	r16,2047
 4012040:	003e2506 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 4012044:	0013883a 	mov	r9,zero
 4012048:	003f8406 	br	4011e5c <__alt_mem_onchip_memory2_0+0xfc00cc9c>
 401204c:	0005883a 	mov	r2,zero
 4012050:	0007883a 	mov	r3,zero
 4012054:	003e8906 	br	4011a7c <__alt_mem_onchip_memory2_0+0xfc00c8bc>
 4012058:	197ff804 	addi	r5,r3,-32
 401205c:	01000804 	movi	r4,32
 4012060:	414ad83a 	srl	r5,r8,r5
 4012064:	19002426 	beq	r3,r4,40120f8 <__adddf3+0x89c>
 4012068:	01001004 	movi	r4,64
 401206c:	20c7c83a 	sub	r3,r4,r3
 4012070:	40c6983a 	sll	r3,r8,r3
 4012074:	1c46b03a 	or	r3,r3,r17
 4012078:	1806c03a 	cmpne	r3,r3,zero
 401207c:	28e2b03a 	or	r17,r5,r3
 4012080:	0007883a 	mov	r3,zero
 4012084:	003f2306 	br	4011d14 <__alt_mem_onchip_memory2_0+0xfc00cb54>
 4012088:	0007883a 	mov	r3,zero
 401208c:	5811883a 	mov	r8,r11
 4012090:	00bfffc4 	movi	r2,-1
 4012094:	0401ffc4 	movi	r16,2047
 4012098:	003e7806 	br	4011a7c <__alt_mem_onchip_memory2_0+0xfc00c8bc>
 401209c:	4462b03a 	or	r17,r8,r17
 40120a0:	8822c03a 	cmpne	r17,r17,zero
 40120a4:	0009883a 	mov	r4,zero
 40120a8:	003fa006 	br	4011f2c <__alt_mem_onchip_memory2_0+0xfc00cd6c>
 40120ac:	4811883a 	mov	r8,r9
 40120b0:	3023883a 	mov	r17,r6
 40120b4:	0401ffc4 	movi	r16,2047
 40120b8:	003e0706 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 40120bc:	4811883a 	mov	r8,r9
 40120c0:	3023883a 	mov	r17,r6
 40120c4:	003e0406 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 40120c8:	21fff804 	addi	r7,r4,-32
 40120cc:	01400804 	movi	r5,32
 40120d0:	41ced83a 	srl	r7,r8,r7
 40120d4:	21400a26 	beq	r4,r5,4012100 <__adddf3+0x8a4>
 40120d8:	01401004 	movi	r5,64
 40120dc:	2909c83a 	sub	r4,r5,r4
 40120e0:	4108983a 	sll	r4,r8,r4
 40120e4:	2448b03a 	or	r4,r4,r17
 40120e8:	2008c03a 	cmpne	r4,r4,zero
 40120ec:	3922b03a 	or	r17,r7,r4
 40120f0:	0009883a 	mov	r4,zero
 40120f4:	003f8d06 	br	4011f2c <__alt_mem_onchip_memory2_0+0xfc00cd6c>
 40120f8:	0007883a 	mov	r3,zero
 40120fc:	003fdd06 	br	4012074 <__alt_mem_onchip_memory2_0+0xfc00ceb4>
 4012100:	0009883a 	mov	r4,zero
 4012104:	003ff706 	br	40120e4 <__alt_mem_onchip_memory2_0+0xfc00cf24>

04012108 <__divdf3>:
 4012108:	defff004 	addi	sp,sp,-64
 401210c:	dc800815 	stw	r18,32(sp)
 4012110:	2824d53a 	srli	r18,r5,20
 4012114:	dd800c15 	stw	r22,48(sp)
 4012118:	282cd7fa 	srli	r22,r5,31
 401211c:	dc000615 	stw	r16,24(sp)
 4012120:	04000434 	movhi	r16,16
 4012124:	843fffc4 	addi	r16,r16,-1
 4012128:	dfc00f15 	stw	ra,60(sp)
 401212c:	df000e15 	stw	fp,56(sp)
 4012130:	ddc00d15 	stw	r23,52(sp)
 4012134:	dd400b15 	stw	r21,44(sp)
 4012138:	dd000a15 	stw	r20,40(sp)
 401213c:	dcc00915 	stw	r19,36(sp)
 4012140:	dc400715 	stw	r17,28(sp)
 4012144:	9481ffcc 	andi	r18,r18,2047
 4012148:	2c20703a 	and	r16,r5,r16
 401214c:	b2003fcc 	andi	r8,r22,255
 4012150:	90006126 	beq	r18,zero,40122d8 <__divdf3+0x1d0>
 4012154:	0081ffc4 	movi	r2,2047
 4012158:	202b883a 	mov	r21,r4
 401215c:	90803726 	beq	r18,r2,401223c <__divdf3+0x134>
 4012160:	80800434 	orhi	r2,r16,16
 4012164:	100490fa 	slli	r2,r2,3
 4012168:	2020d77a 	srli	r16,r4,29
 401216c:	202a90fa 	slli	r21,r4,3
 4012170:	94bf0044 	addi	r18,r18,-1023
 4012174:	80a0b03a 	or	r16,r16,r2
 4012178:	0013883a 	mov	r9,zero
 401217c:	000b883a 	mov	r5,zero
 4012180:	3806d53a 	srli	r3,r7,20
 4012184:	382ed7fa 	srli	r23,r7,31
 4012188:	04400434 	movhi	r17,16
 401218c:	8c7fffc4 	addi	r17,r17,-1
 4012190:	18c1ffcc 	andi	r3,r3,2047
 4012194:	3029883a 	mov	r20,r6
 4012198:	3c62703a 	and	r17,r7,r17
 401219c:	bf003fcc 	andi	fp,r23,255
 40121a0:	18006e26 	beq	r3,zero,401235c <__divdf3+0x254>
 40121a4:	0081ffc4 	movi	r2,2047
 40121a8:	18806626 	beq	r3,r2,4012344 <__divdf3+0x23c>
 40121ac:	88800434 	orhi	r2,r17,16
 40121b0:	100490fa 	slli	r2,r2,3
 40121b4:	3022d77a 	srli	r17,r6,29
 40121b8:	302890fa 	slli	r20,r6,3
 40121bc:	18ff0044 	addi	r3,r3,-1023
 40121c0:	88a2b03a 	or	r17,r17,r2
 40121c4:	000f883a 	mov	r7,zero
 40121c8:	b5e6f03a 	xor	r19,r22,r23
 40121cc:	3a4cb03a 	or	r6,r7,r9
 40121d0:	008003c4 	movi	r2,15
 40121d4:	9809883a 	mov	r4,r19
 40121d8:	90c7c83a 	sub	r3,r18,r3
 40121dc:	9cc03fcc 	andi	r19,r19,255
 40121e0:	11809636 	bltu	r2,r6,401243c <__divdf3+0x334>
 40121e4:	300c90ba 	slli	r6,r6,2
 40121e8:	00810074 	movhi	r2,1025
 40121ec:	10887f04 	addi	r2,r2,8700
 40121f0:	308d883a 	add	r6,r6,r2
 40121f4:	30800017 	ldw	r2,0(r6)
 40121f8:	1000683a 	jmp	r2
 40121fc:	0401243c 	xorhi	r16,zero,1168
 4012200:	04012274 	movhi	r16,1161
 4012204:	0401242c 	andhi	r16,zero,1168
 4012208:	04012268 	cmpgeui	r16,zero,1161
 401220c:	0401242c 	andhi	r16,zero,1168
 4012210:	04012400 	call	401240 <__alt_mem_sdram-0x3bfedc0>
 4012214:	0401242c 	andhi	r16,zero,1168
 4012218:	04012268 	cmpgeui	r16,zero,1161
 401221c:	04012274 	movhi	r16,1161
 4012220:	04012274 	movhi	r16,1161
 4012224:	04012400 	call	401240 <__alt_mem_sdram-0x3bfedc0>
 4012228:	04012268 	cmpgeui	r16,zero,1161
 401222c:	04012258 	cmpnei	r16,zero,1161
 4012230:	04012258 	cmpnei	r16,zero,1161
 4012234:	04012258 	cmpnei	r16,zero,1161
 4012238:	040127c4 	movi	r16,1183
 401223c:	2404b03a 	or	r2,r4,r16
 4012240:	10006c1e 	bne	r2,zero,40123f4 <__divdf3+0x2ec>
 4012244:	02400204 	movi	r9,8
 4012248:	0021883a 	mov	r16,zero
 401224c:	002b883a 	mov	r21,zero
 4012250:	01400084 	movi	r5,2
 4012254:	003fca06 	br	4012180 <__alt_mem_onchip_memory2_0+0xfc00cfc0>
 4012258:	8023883a 	mov	r17,r16
 401225c:	a829883a 	mov	r20,r21
 4012260:	4039883a 	mov	fp,r8
 4012264:	280f883a 	mov	r7,r5
 4012268:	00800084 	movi	r2,2
 401226c:	3881601e 	bne	r7,r2,40127f0 <__divdf3+0x6e8>
 4012270:	e027883a 	mov	r19,fp
 4012274:	9900004c 	andi	r4,r19,1
 4012278:	0081ffc4 	movi	r2,2047
 401227c:	0021883a 	mov	r16,zero
 4012280:	002b883a 	mov	r21,zero
 4012284:	1004953a 	slli	r2,r2,20
 4012288:	20c03fcc 	andi	r3,r4,255
 401228c:	01400434 	movhi	r5,16
 4012290:	297fffc4 	addi	r5,r5,-1
 4012294:	180697fa 	slli	r3,r3,31
 4012298:	8160703a 	and	r16,r16,r5
 401229c:	80a0b03a 	or	r16,r16,r2
 40122a0:	80c6b03a 	or	r3,r16,r3
 40122a4:	a805883a 	mov	r2,r21
 40122a8:	dfc00f17 	ldw	ra,60(sp)
 40122ac:	df000e17 	ldw	fp,56(sp)
 40122b0:	ddc00d17 	ldw	r23,52(sp)
 40122b4:	dd800c17 	ldw	r22,48(sp)
 40122b8:	dd400b17 	ldw	r21,44(sp)
 40122bc:	dd000a17 	ldw	r20,40(sp)
 40122c0:	dcc00917 	ldw	r19,36(sp)
 40122c4:	dc800817 	ldw	r18,32(sp)
 40122c8:	dc400717 	ldw	r17,28(sp)
 40122cc:	dc000617 	ldw	r16,24(sp)
 40122d0:	dec01004 	addi	sp,sp,64
 40122d4:	f800283a 	ret
 40122d8:	2404b03a 	or	r2,r4,r16
 40122dc:	2023883a 	mov	r17,r4
 40122e0:	10003f26 	beq	r2,zero,40123e0 <__divdf3+0x2d8>
 40122e4:	80015e26 	beq	r16,zero,4012860 <__divdf3+0x758>
 40122e8:	8009883a 	mov	r4,r16
 40122ec:	d9800215 	stw	r6,8(sp)
 40122f0:	d9c00515 	stw	r7,20(sp)
 40122f4:	da000415 	stw	r8,16(sp)
 40122f8:	4013ff40 	call	4013ff4 <__clzsi2>
 40122fc:	d9800217 	ldw	r6,8(sp)
 4012300:	d9c00517 	ldw	r7,20(sp)
 4012304:	da000417 	ldw	r8,16(sp)
 4012308:	113ffd44 	addi	r4,r2,-11
 401230c:	00c00704 	movi	r3,28
 4012310:	19014f16 	blt	r3,r4,4012850 <__divdf3+0x748>
 4012314:	00c00744 	movi	r3,29
 4012318:	157ffe04 	addi	r21,r2,-8
 401231c:	1907c83a 	sub	r3,r3,r4
 4012320:	8560983a 	sll	r16,r16,r21
 4012324:	88c6d83a 	srl	r3,r17,r3
 4012328:	8d6a983a 	sll	r21,r17,r21
 401232c:	1c20b03a 	or	r16,r3,r16
 4012330:	1080fcc4 	addi	r2,r2,1011
 4012334:	00a5c83a 	sub	r18,zero,r2
 4012338:	0013883a 	mov	r9,zero
 401233c:	000b883a 	mov	r5,zero
 4012340:	003f8f06 	br	4012180 <__alt_mem_onchip_memory2_0+0xfc00cfc0>
 4012344:	3444b03a 	or	r2,r6,r17
 4012348:	1000231e 	bne	r2,zero,40123d8 <__divdf3+0x2d0>
 401234c:	0023883a 	mov	r17,zero
 4012350:	0029883a 	mov	r20,zero
 4012354:	01c00084 	movi	r7,2
 4012358:	003f9b06 	br	40121c8 <__alt_mem_onchip_memory2_0+0xfc00d008>
 401235c:	3444b03a 	or	r2,r6,r17
 4012360:	10001926 	beq	r2,zero,40123c8 <__divdf3+0x2c0>
 4012364:	88014b26 	beq	r17,zero,4012894 <__divdf3+0x78c>
 4012368:	8809883a 	mov	r4,r17
 401236c:	d9400115 	stw	r5,4(sp)
 4012370:	d9800215 	stw	r6,8(sp)
 4012374:	da000415 	stw	r8,16(sp)
 4012378:	da400315 	stw	r9,12(sp)
 401237c:	4013ff40 	call	4013ff4 <__clzsi2>
 4012380:	d9400117 	ldw	r5,4(sp)
 4012384:	d9800217 	ldw	r6,8(sp)
 4012388:	da000417 	ldw	r8,16(sp)
 401238c:	da400317 	ldw	r9,12(sp)
 4012390:	113ffd44 	addi	r4,r2,-11
 4012394:	00c00704 	movi	r3,28
 4012398:	19013a16 	blt	r3,r4,4012884 <__divdf3+0x77c>
 401239c:	00c00744 	movi	r3,29
 40123a0:	153ffe04 	addi	r20,r2,-8
 40123a4:	1907c83a 	sub	r3,r3,r4
 40123a8:	8d22983a 	sll	r17,r17,r20
 40123ac:	30c6d83a 	srl	r3,r6,r3
 40123b0:	3528983a 	sll	r20,r6,r20
 40123b4:	1c62b03a 	or	r17,r3,r17
 40123b8:	1080fcc4 	addi	r2,r2,1011
 40123bc:	0087c83a 	sub	r3,zero,r2
 40123c0:	000f883a 	mov	r7,zero
 40123c4:	003f8006 	br	40121c8 <__alt_mem_onchip_memory2_0+0xfc00d008>
 40123c8:	0023883a 	mov	r17,zero
 40123cc:	0029883a 	mov	r20,zero
 40123d0:	01c00044 	movi	r7,1
 40123d4:	003f7c06 	br	40121c8 <__alt_mem_onchip_memory2_0+0xfc00d008>
 40123d8:	01c000c4 	movi	r7,3
 40123dc:	003f7a06 	br	40121c8 <__alt_mem_onchip_memory2_0+0xfc00d008>
 40123e0:	02400104 	movi	r9,4
 40123e4:	0021883a 	mov	r16,zero
 40123e8:	002b883a 	mov	r21,zero
 40123ec:	01400044 	movi	r5,1
 40123f0:	003f6306 	br	4012180 <__alt_mem_onchip_memory2_0+0xfc00cfc0>
 40123f4:	02400304 	movi	r9,12
 40123f8:	014000c4 	movi	r5,3
 40123fc:	003f6006 	br	4012180 <__alt_mem_onchip_memory2_0+0xfc00cfc0>
 4012400:	04000434 	movhi	r16,16
 4012404:	0009883a 	mov	r4,zero
 4012408:	843fffc4 	addi	r16,r16,-1
 401240c:	057fffc4 	movi	r21,-1
 4012410:	0081ffc4 	movi	r2,2047
 4012414:	003f9b06 	br	4012284 <__alt_mem_onchip_memory2_0+0xfc00d0c4>
 4012418:	00c00044 	movi	r3,1
 401241c:	1887c83a 	sub	r3,r3,r2
 4012420:	01000e04 	movi	r4,56
 4012424:	20c1530e 	bge	r4,r3,4012974 <__divdf3+0x86c>
 4012428:	9900004c 	andi	r4,r19,1
 401242c:	0005883a 	mov	r2,zero
 4012430:	0021883a 	mov	r16,zero
 4012434:	002b883a 	mov	r21,zero
 4012438:	003f9206 	br	4012284 <__alt_mem_onchip_memory2_0+0xfc00d0c4>
 401243c:	8c012e36 	bltu	r17,r16,40128f8 <__divdf3+0x7f0>
 4012440:	84412c26 	beq	r16,r17,40128f4 <__divdf3+0x7ec>
 4012444:	a82f883a 	mov	r23,r21
 4012448:	18ffffc4 	addi	r3,r3,-1
 401244c:	002b883a 	mov	r21,zero
 4012450:	a004d63a 	srli	r2,r20,24
 4012454:	8822923a 	slli	r17,r17,8
 4012458:	a028923a 	slli	r20,r20,8
 401245c:	8009883a 	mov	r4,r16
 4012460:	88acb03a 	or	r22,r17,r2
 4012464:	dd000015 	stw	r20,0(sp)
 4012468:	b028d43a 	srli	r20,r22,16
 401246c:	d8c00215 	stw	r3,8(sp)
 4012470:	b4bfffcc 	andi	r18,r22,65535
 4012474:	a00b883a 	mov	r5,r20
 4012478:	40117780 	call	4011778 <__udivsi3>
 401247c:	100b883a 	mov	r5,r2
 4012480:	9009883a 	mov	r4,r18
 4012484:	1023883a 	mov	r17,r2
 4012488:	40118340 	call	4011834 <__mulsi3>
 401248c:	8009883a 	mov	r4,r16
 4012490:	a00b883a 	mov	r5,r20
 4012494:	1039883a 	mov	fp,r2
 4012498:	40117dc0 	call	40117dc <__umodsi3>
 401249c:	1004943a 	slli	r2,r2,16
 40124a0:	b808d43a 	srli	r4,r23,16
 40124a4:	d8c00217 	ldw	r3,8(sp)
 40124a8:	2084b03a 	or	r2,r4,r2
 40124ac:	1700062e 	bgeu	r2,fp,40124c8 <__divdf3+0x3c0>
 40124b0:	1585883a 	add	r2,r2,r22
 40124b4:	893fffc4 	addi	r4,r17,-1
 40124b8:	15811d36 	bltu	r2,r22,4012930 <__divdf3+0x828>
 40124bc:	17011c2e 	bgeu	r2,fp,4012930 <__divdf3+0x828>
 40124c0:	8c7fff84 	addi	r17,r17,-2
 40124c4:	1585883a 	add	r2,r2,r22
 40124c8:	1739c83a 	sub	fp,r2,fp
 40124cc:	a00b883a 	mov	r5,r20
 40124d0:	e009883a 	mov	r4,fp
 40124d4:	d8c00215 	stw	r3,8(sp)
 40124d8:	40117780 	call	4011778 <__udivsi3>
 40124dc:	100b883a 	mov	r5,r2
 40124e0:	9009883a 	mov	r4,r18
 40124e4:	1021883a 	mov	r16,r2
 40124e8:	40118340 	call	4011834 <__mulsi3>
 40124ec:	a00b883a 	mov	r5,r20
 40124f0:	e009883a 	mov	r4,fp
 40124f4:	d8800415 	stw	r2,16(sp)
 40124f8:	40117dc0 	call	40117dc <__umodsi3>
 40124fc:	1004943a 	slli	r2,r2,16
 4012500:	da000417 	ldw	r8,16(sp)
 4012504:	bdffffcc 	andi	r23,r23,65535
 4012508:	b884b03a 	or	r2,r23,r2
 401250c:	d8c00217 	ldw	r3,8(sp)
 4012510:	1200062e 	bgeu	r2,r8,401252c <__divdf3+0x424>
 4012514:	1585883a 	add	r2,r2,r22
 4012518:	813fffc4 	addi	r4,r16,-1
 401251c:	15810236 	bltu	r2,r22,4012928 <__divdf3+0x820>
 4012520:	1201012e 	bgeu	r2,r8,4012928 <__divdf3+0x820>
 4012524:	843fff84 	addi	r16,r16,-2
 4012528:	1585883a 	add	r2,r2,r22
 401252c:	8822943a 	slli	r17,r17,16
 4012530:	d9800017 	ldw	r6,0(sp)
 4012534:	1211c83a 	sub	r8,r2,r8
 4012538:	8c22b03a 	or	r17,r17,r16
 401253c:	373fffcc 	andi	fp,r6,65535
 4012540:	8abfffcc 	andi	r10,r17,65535
 4012544:	8820d43a 	srli	r16,r17,16
 4012548:	5009883a 	mov	r4,r10
 401254c:	e00b883a 	mov	r5,fp
 4012550:	302ed43a 	srli	r23,r6,16
 4012554:	d8c00215 	stw	r3,8(sp)
 4012558:	da000415 	stw	r8,16(sp)
 401255c:	da800115 	stw	r10,4(sp)
 4012560:	40118340 	call	4011834 <__mulsi3>
 4012564:	800b883a 	mov	r5,r16
 4012568:	e009883a 	mov	r4,fp
 401256c:	d8800515 	stw	r2,20(sp)
 4012570:	40118340 	call	4011834 <__mulsi3>
 4012574:	8009883a 	mov	r4,r16
 4012578:	b80b883a 	mov	r5,r23
 401257c:	d8800315 	stw	r2,12(sp)
 4012580:	40118340 	call	4011834 <__mulsi3>
 4012584:	da800117 	ldw	r10,4(sp)
 4012588:	b80b883a 	mov	r5,r23
 401258c:	1021883a 	mov	r16,r2
 4012590:	5009883a 	mov	r4,r10
 4012594:	40118340 	call	4011834 <__mulsi3>
 4012598:	d9c00517 	ldw	r7,20(sp)
 401259c:	da400317 	ldw	r9,12(sp)
 40125a0:	d8c00217 	ldw	r3,8(sp)
 40125a4:	3808d43a 	srli	r4,r7,16
 40125a8:	1245883a 	add	r2,r2,r9
 40125ac:	da000417 	ldw	r8,16(sp)
 40125b0:	2085883a 	add	r2,r4,r2
 40125b4:	1240022e 	bgeu	r2,r9,40125c0 <__divdf3+0x4b8>
 40125b8:	01000074 	movhi	r4,1
 40125bc:	8121883a 	add	r16,r16,r4
 40125c0:	1008d43a 	srli	r4,r2,16
 40125c4:	1004943a 	slli	r2,r2,16
 40125c8:	39ffffcc 	andi	r7,r7,65535
 40125cc:	2409883a 	add	r4,r4,r16
 40125d0:	11c5883a 	add	r2,r2,r7
 40125d4:	4100bb36 	bltu	r8,r4,40128c4 <__divdf3+0x7bc>
 40125d8:	4100d726 	beq	r8,r4,4012938 <__divdf3+0x830>
 40125dc:	4109c83a 	sub	r4,r8,r4
 40125e0:	a8a1c83a 	sub	r16,r21,r2
 40125e4:	ac2b803a 	cmpltu	r21,r21,r16
 40125e8:	256bc83a 	sub	r21,r4,r21
 40125ec:	b540d926 	beq	r22,r21,4012954 <__divdf3+0x84c>
 40125f0:	a00b883a 	mov	r5,r20
 40125f4:	a809883a 	mov	r4,r21
 40125f8:	d8c00215 	stw	r3,8(sp)
 40125fc:	40117780 	call	4011778 <__udivsi3>
 4012600:	100b883a 	mov	r5,r2
 4012604:	9009883a 	mov	r4,r18
 4012608:	d8800515 	stw	r2,20(sp)
 401260c:	40118340 	call	4011834 <__mulsi3>
 4012610:	a809883a 	mov	r4,r21
 4012614:	a00b883a 	mov	r5,r20
 4012618:	d8800415 	stw	r2,16(sp)
 401261c:	40117dc0 	call	40117dc <__umodsi3>
 4012620:	1004943a 	slli	r2,r2,16
 4012624:	8008d43a 	srli	r4,r16,16
 4012628:	da000417 	ldw	r8,16(sp)
 401262c:	d8c00217 	ldw	r3,8(sp)
 4012630:	2084b03a 	or	r2,r4,r2
 4012634:	d9c00517 	ldw	r7,20(sp)
 4012638:	1200062e 	bgeu	r2,r8,4012654 <__divdf3+0x54c>
 401263c:	1585883a 	add	r2,r2,r22
 4012640:	393fffc4 	addi	r4,r7,-1
 4012644:	1580c536 	bltu	r2,r22,401295c <__divdf3+0x854>
 4012648:	1200c42e 	bgeu	r2,r8,401295c <__divdf3+0x854>
 401264c:	39ffff84 	addi	r7,r7,-2
 4012650:	1585883a 	add	r2,r2,r22
 4012654:	122bc83a 	sub	r21,r2,r8
 4012658:	a00b883a 	mov	r5,r20
 401265c:	a809883a 	mov	r4,r21
 4012660:	d8c00215 	stw	r3,8(sp)
 4012664:	d9c00515 	stw	r7,20(sp)
 4012668:	40117780 	call	4011778 <__udivsi3>
 401266c:	9009883a 	mov	r4,r18
 4012670:	100b883a 	mov	r5,r2
 4012674:	d8800415 	stw	r2,16(sp)
 4012678:	40118340 	call	4011834 <__mulsi3>
 401267c:	a809883a 	mov	r4,r21
 4012680:	a00b883a 	mov	r5,r20
 4012684:	1025883a 	mov	r18,r2
 4012688:	40117dc0 	call	40117dc <__umodsi3>
 401268c:	1004943a 	slli	r2,r2,16
 4012690:	813fffcc 	andi	r4,r16,65535
 4012694:	d8c00217 	ldw	r3,8(sp)
 4012698:	20a0b03a 	or	r16,r4,r2
 401269c:	d9c00517 	ldw	r7,20(sp)
 40126a0:	da000417 	ldw	r8,16(sp)
 40126a4:	8480062e 	bgeu	r16,r18,40126c0 <__divdf3+0x5b8>
 40126a8:	85a1883a 	add	r16,r16,r22
 40126ac:	40bfffc4 	addi	r2,r8,-1
 40126b0:	8580ac36 	bltu	r16,r22,4012964 <__divdf3+0x85c>
 40126b4:	8480ab2e 	bgeu	r16,r18,4012964 <__divdf3+0x85c>
 40126b8:	423fff84 	addi	r8,r8,-2
 40126bc:	85a1883a 	add	r16,r16,r22
 40126c0:	3804943a 	slli	r2,r7,16
 40126c4:	84a1c83a 	sub	r16,r16,r18
 40126c8:	e009883a 	mov	r4,fp
 40126cc:	1228b03a 	or	r20,r2,r8
 40126d0:	a1ffffcc 	andi	r7,r20,65535
 40126d4:	a024d43a 	srli	r18,r20,16
 40126d8:	380b883a 	mov	r5,r7
 40126dc:	d8c00215 	stw	r3,8(sp)
 40126e0:	d9c00515 	stw	r7,20(sp)
 40126e4:	40118340 	call	4011834 <__mulsi3>
 40126e8:	900b883a 	mov	r5,r18
 40126ec:	e009883a 	mov	r4,fp
 40126f0:	102b883a 	mov	r21,r2
 40126f4:	40118340 	call	4011834 <__mulsi3>
 40126f8:	900b883a 	mov	r5,r18
 40126fc:	b809883a 	mov	r4,r23
 4012700:	1039883a 	mov	fp,r2
 4012704:	40118340 	call	4011834 <__mulsi3>
 4012708:	d9c00517 	ldw	r7,20(sp)
 401270c:	b80b883a 	mov	r5,r23
 4012710:	1025883a 	mov	r18,r2
 4012714:	3809883a 	mov	r4,r7
 4012718:	40118340 	call	4011834 <__mulsi3>
 401271c:	a808d43a 	srli	r4,r21,16
 4012720:	1705883a 	add	r2,r2,fp
 4012724:	d8c00217 	ldw	r3,8(sp)
 4012728:	2085883a 	add	r2,r4,r2
 401272c:	1700022e 	bgeu	r2,fp,4012738 <__divdf3+0x630>
 4012730:	01000074 	movhi	r4,1
 4012734:	9125883a 	add	r18,r18,r4
 4012738:	1008d43a 	srli	r4,r2,16
 401273c:	1004943a 	slli	r2,r2,16
 4012740:	ad7fffcc 	andi	r21,r21,65535
 4012744:	2489883a 	add	r4,r4,r18
 4012748:	1545883a 	add	r2,r2,r21
 401274c:	81003836 	bltu	r16,r4,4012830 <__divdf3+0x728>
 4012750:	81003626 	beq	r16,r4,401282c <__divdf3+0x724>
 4012754:	a5000054 	ori	r20,r20,1
 4012758:	1880ffc4 	addi	r2,r3,1023
 401275c:	00bf2e0e 	bge	zero,r2,4012418 <__alt_mem_onchip_memory2_0+0xfc00d258>
 4012760:	a10001cc 	andi	r4,r20,7
 4012764:	20000726 	beq	r4,zero,4012784 <__divdf3+0x67c>
 4012768:	a10003cc 	andi	r4,r20,15
 401276c:	01400104 	movi	r5,4
 4012770:	21400426 	beq	r4,r5,4012784 <__divdf3+0x67c>
 4012774:	a149883a 	add	r4,r20,r5
 4012778:	2529803a 	cmpltu	r20,r4,r20
 401277c:	8d23883a 	add	r17,r17,r20
 4012780:	2029883a 	mov	r20,r4
 4012784:	8900402c 	andhi	r4,r17,256
 4012788:	20000426 	beq	r4,zero,401279c <__divdf3+0x694>
 401278c:	18810004 	addi	r2,r3,1024
 4012790:	00ffc034 	movhi	r3,65280
 4012794:	18ffffc4 	addi	r3,r3,-1
 4012798:	88e2703a 	and	r17,r17,r3
 401279c:	00c1ff84 	movi	r3,2046
 40127a0:	18beb416 	blt	r3,r2,4012274 <__alt_mem_onchip_memory2_0+0xfc00d0b4>
 40127a4:	a028d0fa 	srli	r20,r20,3
 40127a8:	882a977a 	slli	r21,r17,29
 40127ac:	8820927a 	slli	r16,r17,9
 40127b0:	1081ffcc 	andi	r2,r2,2047
 40127b4:	ad2ab03a 	or	r21,r21,r20
 40127b8:	8020d33a 	srli	r16,r16,12
 40127bc:	9900004c 	andi	r4,r19,1
 40127c0:	003eb006 	br	4012284 <__alt_mem_onchip_memory2_0+0xfc00d0c4>
 40127c4:	8080022c 	andhi	r2,r16,8
 40127c8:	10001226 	beq	r2,zero,4012814 <__divdf3+0x70c>
 40127cc:	8880022c 	andhi	r2,r17,8
 40127d0:	1000101e 	bne	r2,zero,4012814 <__divdf3+0x70c>
 40127d4:	00800434 	movhi	r2,16
 40127d8:	8c000234 	orhi	r16,r17,8
 40127dc:	10bfffc4 	addi	r2,r2,-1
 40127e0:	b809883a 	mov	r4,r23
 40127e4:	80a0703a 	and	r16,r16,r2
 40127e8:	a02b883a 	mov	r21,r20
 40127ec:	003f0806 	br	4012410 <__alt_mem_onchip_memory2_0+0xfc00d250>
 40127f0:	008000c4 	movi	r2,3
 40127f4:	3880b126 	beq	r7,r2,4012abc <__divdf3+0x9b4>
 40127f8:	00800044 	movi	r2,1
 40127fc:	38805b1e 	bne	r7,r2,401296c <__divdf3+0x864>
 4012800:	e009883a 	mov	r4,fp
 4012804:	0005883a 	mov	r2,zero
 4012808:	0021883a 	mov	r16,zero
 401280c:	002b883a 	mov	r21,zero
 4012810:	003e9c06 	br	4012284 <__alt_mem_onchip_memory2_0+0xfc00d0c4>
 4012814:	00800434 	movhi	r2,16
 4012818:	84000234 	orhi	r16,r16,8
 401281c:	10bfffc4 	addi	r2,r2,-1
 4012820:	b009883a 	mov	r4,r22
 4012824:	80a0703a 	and	r16,r16,r2
 4012828:	003ef906 	br	4012410 <__alt_mem_onchip_memory2_0+0xfc00d250>
 401282c:	103fca26 	beq	r2,zero,4012758 <__alt_mem_onchip_memory2_0+0xfc00d598>
 4012830:	b421883a 	add	r16,r22,r16
 4012834:	a17fffc4 	addi	r5,r20,-1
 4012838:	8580422e 	bgeu	r16,r22,4012944 <__divdf3+0x83c>
 401283c:	2829883a 	mov	r20,r5
 4012840:	813fc41e 	bne	r16,r4,4012754 <__alt_mem_onchip_memory2_0+0xfc00d594>
 4012844:	d9800017 	ldw	r6,0(sp)
 4012848:	30bfc21e 	bne	r6,r2,4012754 <__alt_mem_onchip_memory2_0+0xfc00d594>
 401284c:	003fc206 	br	4012758 <__alt_mem_onchip_memory2_0+0xfc00d598>
 4012850:	143ff604 	addi	r16,r2,-40
 4012854:	8c20983a 	sll	r16,r17,r16
 4012858:	002b883a 	mov	r21,zero
 401285c:	003eb406 	br	4012330 <__alt_mem_onchip_memory2_0+0xfc00d170>
 4012860:	d9800215 	stw	r6,8(sp)
 4012864:	d9c00515 	stw	r7,20(sp)
 4012868:	da000415 	stw	r8,16(sp)
 401286c:	4013ff40 	call	4013ff4 <__clzsi2>
 4012870:	10800804 	addi	r2,r2,32
 4012874:	da000417 	ldw	r8,16(sp)
 4012878:	d9c00517 	ldw	r7,20(sp)
 401287c:	d9800217 	ldw	r6,8(sp)
 4012880:	003ea106 	br	4012308 <__alt_mem_onchip_memory2_0+0xfc00d148>
 4012884:	147ff604 	addi	r17,r2,-40
 4012888:	3462983a 	sll	r17,r6,r17
 401288c:	0029883a 	mov	r20,zero
 4012890:	003ec906 	br	40123b8 <__alt_mem_onchip_memory2_0+0xfc00d1f8>
 4012894:	3009883a 	mov	r4,r6
 4012898:	d9400115 	stw	r5,4(sp)
 401289c:	d9800215 	stw	r6,8(sp)
 40128a0:	da000415 	stw	r8,16(sp)
 40128a4:	da400315 	stw	r9,12(sp)
 40128a8:	4013ff40 	call	4013ff4 <__clzsi2>
 40128ac:	10800804 	addi	r2,r2,32
 40128b0:	da400317 	ldw	r9,12(sp)
 40128b4:	da000417 	ldw	r8,16(sp)
 40128b8:	d9800217 	ldw	r6,8(sp)
 40128bc:	d9400117 	ldw	r5,4(sp)
 40128c0:	003eb306 	br	4012390 <__alt_mem_onchip_memory2_0+0xfc00d1d0>
 40128c4:	d9800017 	ldw	r6,0(sp)
 40128c8:	a9ab883a 	add	r21,r21,r6
 40128cc:	a98b803a 	cmpltu	r5,r21,r6
 40128d0:	2d8b883a 	add	r5,r5,r22
 40128d4:	2a11883a 	add	r8,r5,r8
 40128d8:	897fffc4 	addi	r5,r17,-1
 40128dc:	b2000c2e 	bgeu	r22,r8,4012910 <__divdf3+0x808>
 40128e0:	41003f36 	bltu	r8,r4,40129e0 <__divdf3+0x8d8>
 40128e4:	22006c26 	beq	r4,r8,4012a98 <__divdf3+0x990>
 40128e8:	4109c83a 	sub	r4,r8,r4
 40128ec:	2823883a 	mov	r17,r5
 40128f0:	003f3b06 	br	40125e0 <__alt_mem_onchip_memory2_0+0xfc00d420>
 40128f4:	ad3ed336 	bltu	r21,r20,4012444 <__alt_mem_onchip_memory2_0+0xfc00d284>
 40128f8:	a804d07a 	srli	r2,r21,1
 40128fc:	802e97fa 	slli	r23,r16,31
 4012900:	a82a97fa 	slli	r21,r21,31
 4012904:	8020d07a 	srli	r16,r16,1
 4012908:	b8aeb03a 	or	r23,r23,r2
 401290c:	003ed006 	br	4012450 <__alt_mem_onchip_memory2_0+0xfc00d290>
 4012910:	b23ff51e 	bne	r22,r8,40128e8 <__alt_mem_onchip_memory2_0+0xfc00d728>
 4012914:	d9800017 	ldw	r6,0(sp)
 4012918:	a9bff12e 	bgeu	r21,r6,40128e0 <__alt_mem_onchip_memory2_0+0xfc00d720>
 401291c:	b109c83a 	sub	r4,r22,r4
 4012920:	2823883a 	mov	r17,r5
 4012924:	003f2e06 	br	40125e0 <__alt_mem_onchip_memory2_0+0xfc00d420>
 4012928:	2021883a 	mov	r16,r4
 401292c:	003eff06 	br	401252c <__alt_mem_onchip_memory2_0+0xfc00d36c>
 4012930:	2023883a 	mov	r17,r4
 4012934:	003ee406 	br	40124c8 <__alt_mem_onchip_memory2_0+0xfc00d308>
 4012938:	a8bfe236 	bltu	r21,r2,40128c4 <__alt_mem_onchip_memory2_0+0xfc00d704>
 401293c:	0009883a 	mov	r4,zero
 4012940:	003f2706 	br	40125e0 <__alt_mem_onchip_memory2_0+0xfc00d420>
 4012944:	81002d36 	bltu	r16,r4,40129fc <__divdf3+0x8f4>
 4012948:	24005626 	beq	r4,r16,4012aa4 <__divdf3+0x99c>
 401294c:	2829883a 	mov	r20,r5
 4012950:	003f8006 	br	4012754 <__alt_mem_onchip_memory2_0+0xfc00d594>
 4012954:	053fffc4 	movi	r20,-1
 4012958:	003f7f06 	br	4012758 <__alt_mem_onchip_memory2_0+0xfc00d598>
 401295c:	200f883a 	mov	r7,r4
 4012960:	003f3c06 	br	4012654 <__alt_mem_onchip_memory2_0+0xfc00d494>
 4012964:	1011883a 	mov	r8,r2
 4012968:	003f5506 	br	40126c0 <__alt_mem_onchip_memory2_0+0xfc00d500>
 401296c:	e027883a 	mov	r19,fp
 4012970:	003f7906 	br	4012758 <__alt_mem_onchip_memory2_0+0xfc00d598>
 4012974:	010007c4 	movi	r4,31
 4012978:	20c02816 	blt	r4,r3,4012a1c <__divdf3+0x914>
 401297c:	00800804 	movi	r2,32
 4012980:	10c5c83a 	sub	r2,r2,r3
 4012984:	888a983a 	sll	r5,r17,r2
 4012988:	a0c8d83a 	srl	r4,r20,r3
 401298c:	a084983a 	sll	r2,r20,r2
 4012990:	88e2d83a 	srl	r17,r17,r3
 4012994:	2906b03a 	or	r3,r5,r4
 4012998:	1004c03a 	cmpne	r2,r2,zero
 401299c:	1886b03a 	or	r3,r3,r2
 40129a0:	188001cc 	andi	r2,r3,7
 40129a4:	10000726 	beq	r2,zero,40129c4 <__divdf3+0x8bc>
 40129a8:	188003cc 	andi	r2,r3,15
 40129ac:	01000104 	movi	r4,4
 40129b0:	11000426 	beq	r2,r4,40129c4 <__divdf3+0x8bc>
 40129b4:	1805883a 	mov	r2,r3
 40129b8:	10c00104 	addi	r3,r2,4
 40129bc:	1885803a 	cmpltu	r2,r3,r2
 40129c0:	88a3883a 	add	r17,r17,r2
 40129c4:	8880202c 	andhi	r2,r17,128
 40129c8:	10002926 	beq	r2,zero,4012a70 <__divdf3+0x968>
 40129cc:	9900004c 	andi	r4,r19,1
 40129d0:	00800044 	movi	r2,1
 40129d4:	0021883a 	mov	r16,zero
 40129d8:	002b883a 	mov	r21,zero
 40129dc:	003e2906 	br	4012284 <__alt_mem_onchip_memory2_0+0xfc00d0c4>
 40129e0:	d9800017 	ldw	r6,0(sp)
 40129e4:	8c7fff84 	addi	r17,r17,-2
 40129e8:	a9ab883a 	add	r21,r21,r6
 40129ec:	a98b803a 	cmpltu	r5,r21,r6
 40129f0:	2d8b883a 	add	r5,r5,r22
 40129f4:	2a11883a 	add	r8,r5,r8
 40129f8:	003ef806 	br	40125dc <__alt_mem_onchip_memory2_0+0xfc00d41c>
 40129fc:	d9800017 	ldw	r6,0(sp)
 4012a00:	318f883a 	add	r7,r6,r6
 4012a04:	398b803a 	cmpltu	r5,r7,r6
 4012a08:	2d8d883a 	add	r6,r5,r22
 4012a0c:	81a1883a 	add	r16,r16,r6
 4012a10:	a17fff84 	addi	r5,r20,-2
 4012a14:	d9c00015 	stw	r7,0(sp)
 4012a18:	003f8806 	br	401283c <__alt_mem_onchip_memory2_0+0xfc00d67c>
 4012a1c:	013ff844 	movi	r4,-31
 4012a20:	2085c83a 	sub	r2,r4,r2
 4012a24:	8888d83a 	srl	r4,r17,r2
 4012a28:	00800804 	movi	r2,32
 4012a2c:	18802126 	beq	r3,r2,4012ab4 <__divdf3+0x9ac>
 4012a30:	04001004 	movi	r16,64
 4012a34:	80c7c83a 	sub	r3,r16,r3
 4012a38:	88e0983a 	sll	r16,r17,r3
 4012a3c:	8504b03a 	or	r2,r16,r20
 4012a40:	1004c03a 	cmpne	r2,r2,zero
 4012a44:	2084b03a 	or	r2,r4,r2
 4012a48:	144001cc 	andi	r17,r2,7
 4012a4c:	88000d1e 	bne	r17,zero,4012a84 <__divdf3+0x97c>
 4012a50:	0021883a 	mov	r16,zero
 4012a54:	102ad0fa 	srli	r21,r2,3
 4012a58:	9900004c 	andi	r4,r19,1
 4012a5c:	0005883a 	mov	r2,zero
 4012a60:	ac6ab03a 	or	r21,r21,r17
 4012a64:	003e0706 	br	4012284 <__alt_mem_onchip_memory2_0+0xfc00d0c4>
 4012a68:	1007883a 	mov	r3,r2
 4012a6c:	0023883a 	mov	r17,zero
 4012a70:	8820927a 	slli	r16,r17,9
 4012a74:	1805883a 	mov	r2,r3
 4012a78:	8822977a 	slli	r17,r17,29
 4012a7c:	8020d33a 	srli	r16,r16,12
 4012a80:	003ff406 	br	4012a54 <__alt_mem_onchip_memory2_0+0xfc00d894>
 4012a84:	10c003cc 	andi	r3,r2,15
 4012a88:	01000104 	movi	r4,4
 4012a8c:	193ff626 	beq	r3,r4,4012a68 <__alt_mem_onchip_memory2_0+0xfc00d8a8>
 4012a90:	0023883a 	mov	r17,zero
 4012a94:	003fc806 	br	40129b8 <__alt_mem_onchip_memory2_0+0xfc00d7f8>
 4012a98:	a8bfd136 	bltu	r21,r2,40129e0 <__alt_mem_onchip_memory2_0+0xfc00d820>
 4012a9c:	2823883a 	mov	r17,r5
 4012aa0:	003fa606 	br	401293c <__alt_mem_onchip_memory2_0+0xfc00d77c>
 4012aa4:	d9800017 	ldw	r6,0(sp)
 4012aa8:	30bfd436 	bltu	r6,r2,40129fc <__alt_mem_onchip_memory2_0+0xfc00d83c>
 4012aac:	2829883a 	mov	r20,r5
 4012ab0:	003f6406 	br	4012844 <__alt_mem_onchip_memory2_0+0xfc00d684>
 4012ab4:	0021883a 	mov	r16,zero
 4012ab8:	003fe006 	br	4012a3c <__alt_mem_onchip_memory2_0+0xfc00d87c>
 4012abc:	00800434 	movhi	r2,16
 4012ac0:	8c000234 	orhi	r16,r17,8
 4012ac4:	10bfffc4 	addi	r2,r2,-1
 4012ac8:	e009883a 	mov	r4,fp
 4012acc:	80a0703a 	and	r16,r16,r2
 4012ad0:	a02b883a 	mov	r21,r20
 4012ad4:	003e4e06 	br	4012410 <__alt_mem_onchip_memory2_0+0xfc00d250>

04012ad8 <__eqdf2>:
 4012ad8:	2804d53a 	srli	r2,r5,20
 4012adc:	3806d53a 	srli	r3,r7,20
 4012ae0:	02000434 	movhi	r8,16
 4012ae4:	423fffc4 	addi	r8,r8,-1
 4012ae8:	1081ffcc 	andi	r2,r2,2047
 4012aec:	0281ffc4 	movi	r10,2047
 4012af0:	2a12703a 	and	r9,r5,r8
 4012af4:	18c1ffcc 	andi	r3,r3,2047
 4012af8:	3a10703a 	and	r8,r7,r8
 4012afc:	280ad7fa 	srli	r5,r5,31
 4012b00:	380ed7fa 	srli	r7,r7,31
 4012b04:	12801026 	beq	r2,r10,4012b48 <__eqdf2+0x70>
 4012b08:	0281ffc4 	movi	r10,2047
 4012b0c:	1a800a26 	beq	r3,r10,4012b38 <__eqdf2+0x60>
 4012b10:	10c00226 	beq	r2,r3,4012b1c <__eqdf2+0x44>
 4012b14:	00800044 	movi	r2,1
 4012b18:	f800283a 	ret
 4012b1c:	4a3ffd1e 	bne	r9,r8,4012b14 <__alt_mem_onchip_memory2_0+0xfc00d954>
 4012b20:	21bffc1e 	bne	r4,r6,4012b14 <__alt_mem_onchip_memory2_0+0xfc00d954>
 4012b24:	29c00c26 	beq	r5,r7,4012b58 <__eqdf2+0x80>
 4012b28:	103ffa1e 	bne	r2,zero,4012b14 <__alt_mem_onchip_memory2_0+0xfc00d954>
 4012b2c:	2244b03a 	or	r2,r4,r9
 4012b30:	1004c03a 	cmpne	r2,r2,zero
 4012b34:	f800283a 	ret
 4012b38:	3214b03a 	or	r10,r6,r8
 4012b3c:	503ff426 	beq	r10,zero,4012b10 <__alt_mem_onchip_memory2_0+0xfc00d950>
 4012b40:	00800044 	movi	r2,1
 4012b44:	f800283a 	ret
 4012b48:	2254b03a 	or	r10,r4,r9
 4012b4c:	503fee26 	beq	r10,zero,4012b08 <__alt_mem_onchip_memory2_0+0xfc00d948>
 4012b50:	00800044 	movi	r2,1
 4012b54:	f800283a 	ret
 4012b58:	0005883a 	mov	r2,zero
 4012b5c:	f800283a 	ret

04012b60 <__gedf2>:
 4012b60:	2804d53a 	srli	r2,r5,20
 4012b64:	3806d53a 	srli	r3,r7,20
 4012b68:	02000434 	movhi	r8,16
 4012b6c:	423fffc4 	addi	r8,r8,-1
 4012b70:	1081ffcc 	andi	r2,r2,2047
 4012b74:	0241ffc4 	movi	r9,2047
 4012b78:	2a14703a 	and	r10,r5,r8
 4012b7c:	18c1ffcc 	andi	r3,r3,2047
 4012b80:	3a10703a 	and	r8,r7,r8
 4012b84:	280ad7fa 	srli	r5,r5,31
 4012b88:	380ed7fa 	srli	r7,r7,31
 4012b8c:	12401d26 	beq	r2,r9,4012c04 <__gedf2+0xa4>
 4012b90:	0241ffc4 	movi	r9,2047
 4012b94:	1a401226 	beq	r3,r9,4012be0 <__gedf2+0x80>
 4012b98:	1000081e 	bne	r2,zero,4012bbc <__gedf2+0x5c>
 4012b9c:	2296b03a 	or	r11,r4,r10
 4012ba0:	5813003a 	cmpeq	r9,r11,zero
 4012ba4:	1800091e 	bne	r3,zero,4012bcc <__gedf2+0x6c>
 4012ba8:	3218b03a 	or	r12,r6,r8
 4012bac:	6000071e 	bne	r12,zero,4012bcc <__gedf2+0x6c>
 4012bb0:	0005883a 	mov	r2,zero
 4012bb4:	5800101e 	bne	r11,zero,4012bf8 <__gedf2+0x98>
 4012bb8:	f800283a 	ret
 4012bbc:	18000c1e 	bne	r3,zero,4012bf0 <__gedf2+0x90>
 4012bc0:	3212b03a 	or	r9,r6,r8
 4012bc4:	48000c26 	beq	r9,zero,4012bf8 <__gedf2+0x98>
 4012bc8:	0013883a 	mov	r9,zero
 4012bcc:	39c03fcc 	andi	r7,r7,255
 4012bd0:	48000826 	beq	r9,zero,4012bf4 <__gedf2+0x94>
 4012bd4:	38000926 	beq	r7,zero,4012bfc <__gedf2+0x9c>
 4012bd8:	00800044 	movi	r2,1
 4012bdc:	f800283a 	ret
 4012be0:	3212b03a 	or	r9,r6,r8
 4012be4:	483fec26 	beq	r9,zero,4012b98 <__alt_mem_onchip_memory2_0+0xfc00d9d8>
 4012be8:	00bfff84 	movi	r2,-2
 4012bec:	f800283a 	ret
 4012bf0:	39c03fcc 	andi	r7,r7,255
 4012bf4:	29c00626 	beq	r5,r7,4012c10 <__gedf2+0xb0>
 4012bf8:	283ff726 	beq	r5,zero,4012bd8 <__alt_mem_onchip_memory2_0+0xfc00da18>
 4012bfc:	00bfffc4 	movi	r2,-1
 4012c00:	f800283a 	ret
 4012c04:	2292b03a 	or	r9,r4,r10
 4012c08:	483fe126 	beq	r9,zero,4012b90 <__alt_mem_onchip_memory2_0+0xfc00d9d0>
 4012c0c:	003ff606 	br	4012be8 <__alt_mem_onchip_memory2_0+0xfc00da28>
 4012c10:	18bff916 	blt	r3,r2,4012bf8 <__alt_mem_onchip_memory2_0+0xfc00da38>
 4012c14:	10c00316 	blt	r2,r3,4012c24 <__gedf2+0xc4>
 4012c18:	42bff736 	bltu	r8,r10,4012bf8 <__alt_mem_onchip_memory2_0+0xfc00da38>
 4012c1c:	52000326 	beq	r10,r8,4012c2c <__gedf2+0xcc>
 4012c20:	5200042e 	bgeu	r10,r8,4012c34 <__gedf2+0xd4>
 4012c24:	283fec1e 	bne	r5,zero,4012bd8 <__alt_mem_onchip_memory2_0+0xfc00da18>
 4012c28:	003ff406 	br	4012bfc <__alt_mem_onchip_memory2_0+0xfc00da3c>
 4012c2c:	313ff236 	bltu	r6,r4,4012bf8 <__alt_mem_onchip_memory2_0+0xfc00da38>
 4012c30:	21bffc36 	bltu	r4,r6,4012c24 <__alt_mem_onchip_memory2_0+0xfc00da64>
 4012c34:	0005883a 	mov	r2,zero
 4012c38:	f800283a 	ret

04012c3c <__ledf2>:
 4012c3c:	2804d53a 	srli	r2,r5,20
 4012c40:	3810d53a 	srli	r8,r7,20
 4012c44:	00c00434 	movhi	r3,16
 4012c48:	18ffffc4 	addi	r3,r3,-1
 4012c4c:	1081ffcc 	andi	r2,r2,2047
 4012c50:	0241ffc4 	movi	r9,2047
 4012c54:	28d4703a 	and	r10,r5,r3
 4012c58:	4201ffcc 	andi	r8,r8,2047
 4012c5c:	38c6703a 	and	r3,r7,r3
 4012c60:	280ad7fa 	srli	r5,r5,31
 4012c64:	380ed7fa 	srli	r7,r7,31
 4012c68:	12401f26 	beq	r2,r9,4012ce8 <__ledf2+0xac>
 4012c6c:	0241ffc4 	movi	r9,2047
 4012c70:	42401426 	beq	r8,r9,4012cc4 <__ledf2+0x88>
 4012c74:	1000091e 	bne	r2,zero,4012c9c <__ledf2+0x60>
 4012c78:	2296b03a 	or	r11,r4,r10
 4012c7c:	5813003a 	cmpeq	r9,r11,zero
 4012c80:	29403fcc 	andi	r5,r5,255
 4012c84:	40000a1e 	bne	r8,zero,4012cb0 <__ledf2+0x74>
 4012c88:	30d8b03a 	or	r12,r6,r3
 4012c8c:	6000081e 	bne	r12,zero,4012cb0 <__ledf2+0x74>
 4012c90:	0005883a 	mov	r2,zero
 4012c94:	5800111e 	bne	r11,zero,4012cdc <__ledf2+0xa0>
 4012c98:	f800283a 	ret
 4012c9c:	29403fcc 	andi	r5,r5,255
 4012ca0:	40000c1e 	bne	r8,zero,4012cd4 <__ledf2+0x98>
 4012ca4:	30d2b03a 	or	r9,r6,r3
 4012ca8:	48000c26 	beq	r9,zero,4012cdc <__ledf2+0xa0>
 4012cac:	0013883a 	mov	r9,zero
 4012cb0:	39c03fcc 	andi	r7,r7,255
 4012cb4:	48000826 	beq	r9,zero,4012cd8 <__ledf2+0x9c>
 4012cb8:	38001126 	beq	r7,zero,4012d00 <__ledf2+0xc4>
 4012cbc:	00800044 	movi	r2,1
 4012cc0:	f800283a 	ret
 4012cc4:	30d2b03a 	or	r9,r6,r3
 4012cc8:	483fea26 	beq	r9,zero,4012c74 <__alt_mem_onchip_memory2_0+0xfc00dab4>
 4012ccc:	00800084 	movi	r2,2
 4012cd0:	f800283a 	ret
 4012cd4:	39c03fcc 	andi	r7,r7,255
 4012cd8:	39400726 	beq	r7,r5,4012cf8 <__ledf2+0xbc>
 4012cdc:	2800081e 	bne	r5,zero,4012d00 <__ledf2+0xc4>
 4012ce0:	00800044 	movi	r2,1
 4012ce4:	f800283a 	ret
 4012ce8:	2292b03a 	or	r9,r4,r10
 4012cec:	483fdf26 	beq	r9,zero,4012c6c <__alt_mem_onchip_memory2_0+0xfc00daac>
 4012cf0:	00800084 	movi	r2,2
 4012cf4:	f800283a 	ret
 4012cf8:	4080030e 	bge	r8,r2,4012d08 <__ledf2+0xcc>
 4012cfc:	383fef26 	beq	r7,zero,4012cbc <__alt_mem_onchip_memory2_0+0xfc00dafc>
 4012d00:	00bfffc4 	movi	r2,-1
 4012d04:	f800283a 	ret
 4012d08:	123feb16 	blt	r2,r8,4012cb8 <__alt_mem_onchip_memory2_0+0xfc00daf8>
 4012d0c:	1abff336 	bltu	r3,r10,4012cdc <__alt_mem_onchip_memory2_0+0xfc00db1c>
 4012d10:	50c00326 	beq	r10,r3,4012d20 <__ledf2+0xe4>
 4012d14:	50c0042e 	bgeu	r10,r3,4012d28 <__ledf2+0xec>
 4012d18:	283fe81e 	bne	r5,zero,4012cbc <__alt_mem_onchip_memory2_0+0xfc00dafc>
 4012d1c:	003ff806 	br	4012d00 <__alt_mem_onchip_memory2_0+0xfc00db40>
 4012d20:	313fee36 	bltu	r6,r4,4012cdc <__alt_mem_onchip_memory2_0+0xfc00db1c>
 4012d24:	21bffc36 	bltu	r4,r6,4012d18 <__alt_mem_onchip_memory2_0+0xfc00db58>
 4012d28:	0005883a 	mov	r2,zero
 4012d2c:	f800283a 	ret

04012d30 <__muldf3>:
 4012d30:	deffee04 	addi	sp,sp,-72
 4012d34:	dd000c15 	stw	r20,48(sp)
 4012d38:	2828d53a 	srli	r20,r5,20
 4012d3c:	ddc00f15 	stw	r23,60(sp)
 4012d40:	282ed7fa 	srli	r23,r5,31
 4012d44:	dc000815 	stw	r16,32(sp)
 4012d48:	04000434 	movhi	r16,16
 4012d4c:	dcc00b15 	stw	r19,44(sp)
 4012d50:	843fffc4 	addi	r16,r16,-1
 4012d54:	dfc01115 	stw	ra,68(sp)
 4012d58:	df001015 	stw	fp,64(sp)
 4012d5c:	dd800e15 	stw	r22,56(sp)
 4012d60:	dd400d15 	stw	r21,52(sp)
 4012d64:	dc800a15 	stw	r18,40(sp)
 4012d68:	dc400915 	stw	r17,36(sp)
 4012d6c:	a501ffcc 	andi	r20,r20,2047
 4012d70:	2c20703a 	and	r16,r5,r16
 4012d74:	b827883a 	mov	r19,r23
 4012d78:	ba403fcc 	andi	r9,r23,255
 4012d7c:	a0006026 	beq	r20,zero,4012f00 <__muldf3+0x1d0>
 4012d80:	0081ffc4 	movi	r2,2047
 4012d84:	202d883a 	mov	r22,r4
 4012d88:	a0803626 	beq	r20,r2,4012e64 <__muldf3+0x134>
 4012d8c:	84000434 	orhi	r16,r16,16
 4012d90:	200ad77a 	srli	r5,r4,29
 4012d94:	800490fa 	slli	r2,r16,3
 4012d98:	202c90fa 	slli	r22,r4,3
 4012d9c:	a53f0044 	addi	r20,r20,-1023
 4012da0:	28a0b03a 	or	r16,r5,r2
 4012da4:	002b883a 	mov	r21,zero
 4012da8:	000b883a 	mov	r5,zero
 4012dac:	3804d53a 	srli	r2,r7,20
 4012db0:	3838d7fa 	srli	fp,r7,31
 4012db4:	04400434 	movhi	r17,16
 4012db8:	8c7fffc4 	addi	r17,r17,-1
 4012dbc:	1081ffcc 	andi	r2,r2,2047
 4012dc0:	3025883a 	mov	r18,r6
 4012dc4:	3c62703a 	and	r17,r7,r17
 4012dc8:	e2803fcc 	andi	r10,fp,255
 4012dcc:	10006d26 	beq	r2,zero,4012f84 <__muldf3+0x254>
 4012dd0:	00c1ffc4 	movi	r3,2047
 4012dd4:	10c06526 	beq	r2,r3,4012f6c <__muldf3+0x23c>
 4012dd8:	8c400434 	orhi	r17,r17,16
 4012ddc:	300ed77a 	srli	r7,r6,29
 4012de0:	880690fa 	slli	r3,r17,3
 4012de4:	302490fa 	slli	r18,r6,3
 4012de8:	10bf0044 	addi	r2,r2,-1023
 4012dec:	38e2b03a 	or	r17,r7,r3
 4012df0:	000f883a 	mov	r7,zero
 4012df4:	a087883a 	add	r3,r20,r2
 4012df8:	010003c4 	movi	r4,15
 4012dfc:	3d44b03a 	or	r2,r7,r21
 4012e00:	e5ccf03a 	xor	r6,fp,r23
 4012e04:	1a000044 	addi	r8,r3,1
 4012e08:	20809b36 	bltu	r4,r2,4013078 <__muldf3+0x348>
 4012e0c:	100490ba 	slli	r2,r2,2
 4012e10:	01010074 	movhi	r4,1025
 4012e14:	210b8904 	addi	r4,r4,11812
 4012e18:	1105883a 	add	r2,r2,r4
 4012e1c:	10800017 	ldw	r2,0(r2)
 4012e20:	1000683a 	jmp	r2
 4012e24:	04013078 	rdprs	r16,zero,1217
 4012e28:	04012e84 	movi	r16,1210
 4012e2c:	04012e84 	movi	r16,1210
 4012e30:	04012e80 	call	4012e8 <__alt_mem_sdram-0x3bfed18>
 4012e34:	04013054 	movui	r16,1217
 4012e38:	04013054 	movui	r16,1217
 4012e3c:	0401303c 	xorhi	r16,zero,1216
 4012e40:	04012e80 	call	4012e8 <__alt_mem_sdram-0x3bfed18>
 4012e44:	04013054 	movui	r16,1217
 4012e48:	0401303c 	xorhi	r16,zero,1216
 4012e4c:	04013054 	movui	r16,1217
 4012e50:	04012e80 	call	4012e8 <__alt_mem_sdram-0x3bfed18>
 4012e54:	04013064 	muli	r16,zero,1217
 4012e58:	04013064 	muli	r16,zero,1217
 4012e5c:	04013064 	muli	r16,zero,1217
 4012e60:	040133c4 	movi	r16,1231
 4012e64:	2404b03a 	or	r2,r4,r16
 4012e68:	1000711e 	bne	r2,zero,4013030 <__muldf3+0x300>
 4012e6c:	05400204 	movi	r21,8
 4012e70:	0021883a 	mov	r16,zero
 4012e74:	002d883a 	mov	r22,zero
 4012e78:	01400084 	movi	r5,2
 4012e7c:	003fcb06 	br	4012dac <__alt_mem_onchip_memory2_0+0xfc00dbec>
 4012e80:	500d883a 	mov	r6,r10
 4012e84:	00800084 	movi	r2,2
 4012e88:	38805926 	beq	r7,r2,4012ff0 <__muldf3+0x2c0>
 4012e8c:	008000c4 	movi	r2,3
 4012e90:	3881bb26 	beq	r7,r2,4013580 <__muldf3+0x850>
 4012e94:	00800044 	movi	r2,1
 4012e98:	3881961e 	bne	r7,r2,40134f4 <__muldf3+0x7c4>
 4012e9c:	3027883a 	mov	r19,r6
 4012ea0:	0005883a 	mov	r2,zero
 4012ea4:	0021883a 	mov	r16,zero
 4012ea8:	002d883a 	mov	r22,zero
 4012eac:	1004953a 	slli	r2,r2,20
 4012eb0:	98c03fcc 	andi	r3,r19,255
 4012eb4:	04400434 	movhi	r17,16
 4012eb8:	8c7fffc4 	addi	r17,r17,-1
 4012ebc:	180697fa 	slli	r3,r3,31
 4012ec0:	8460703a 	and	r16,r16,r17
 4012ec4:	80a0b03a 	or	r16,r16,r2
 4012ec8:	80c6b03a 	or	r3,r16,r3
 4012ecc:	b005883a 	mov	r2,r22
 4012ed0:	dfc01117 	ldw	ra,68(sp)
 4012ed4:	df001017 	ldw	fp,64(sp)
 4012ed8:	ddc00f17 	ldw	r23,60(sp)
 4012edc:	dd800e17 	ldw	r22,56(sp)
 4012ee0:	dd400d17 	ldw	r21,52(sp)
 4012ee4:	dd000c17 	ldw	r20,48(sp)
 4012ee8:	dcc00b17 	ldw	r19,44(sp)
 4012eec:	dc800a17 	ldw	r18,40(sp)
 4012ef0:	dc400917 	ldw	r17,36(sp)
 4012ef4:	dc000817 	ldw	r16,32(sp)
 4012ef8:	dec01204 	addi	sp,sp,72
 4012efc:	f800283a 	ret
 4012f00:	2404b03a 	or	r2,r4,r16
 4012f04:	202b883a 	mov	r21,r4
 4012f08:	10004426 	beq	r2,zero,401301c <__muldf3+0x2ec>
 4012f0c:	80015126 	beq	r16,zero,4013454 <__muldf3+0x724>
 4012f10:	8009883a 	mov	r4,r16
 4012f14:	d9800715 	stw	r6,28(sp)
 4012f18:	d9c00215 	stw	r7,8(sp)
 4012f1c:	da400415 	stw	r9,16(sp)
 4012f20:	4013ff40 	call	4013ff4 <__clzsi2>
 4012f24:	d9800717 	ldw	r6,28(sp)
 4012f28:	d9c00217 	ldw	r7,8(sp)
 4012f2c:	da400417 	ldw	r9,16(sp)
 4012f30:	113ffd44 	addi	r4,r2,-11
 4012f34:	00c00704 	movi	r3,28
 4012f38:	19014216 	blt	r3,r4,4013444 <__muldf3+0x714>
 4012f3c:	00c00744 	movi	r3,29
 4012f40:	15bffe04 	addi	r22,r2,-8
 4012f44:	1907c83a 	sub	r3,r3,r4
 4012f48:	85a0983a 	sll	r16,r16,r22
 4012f4c:	a8c6d83a 	srl	r3,r21,r3
 4012f50:	adac983a 	sll	r22,r21,r22
 4012f54:	1c20b03a 	or	r16,r3,r16
 4012f58:	1080fcc4 	addi	r2,r2,1011
 4012f5c:	00a9c83a 	sub	r20,zero,r2
 4012f60:	002b883a 	mov	r21,zero
 4012f64:	000b883a 	mov	r5,zero
 4012f68:	003f9006 	br	4012dac <__alt_mem_onchip_memory2_0+0xfc00dbec>
 4012f6c:	3446b03a 	or	r3,r6,r17
 4012f70:	1800281e 	bne	r3,zero,4013014 <__muldf3+0x2e4>
 4012f74:	0023883a 	mov	r17,zero
 4012f78:	0025883a 	mov	r18,zero
 4012f7c:	01c00084 	movi	r7,2
 4012f80:	003f9c06 	br	4012df4 <__alt_mem_onchip_memory2_0+0xfc00dc34>
 4012f84:	3446b03a 	or	r3,r6,r17
 4012f88:	18001e26 	beq	r3,zero,4013004 <__muldf3+0x2d4>
 4012f8c:	88012126 	beq	r17,zero,4013414 <__muldf3+0x6e4>
 4012f90:	8809883a 	mov	r4,r17
 4012f94:	d9400215 	stw	r5,8(sp)
 4012f98:	d9800715 	stw	r6,28(sp)
 4012f9c:	da400415 	stw	r9,16(sp)
 4012fa0:	da800315 	stw	r10,12(sp)
 4012fa4:	4013ff40 	call	4013ff4 <__clzsi2>
 4012fa8:	d9400217 	ldw	r5,8(sp)
 4012fac:	d9800717 	ldw	r6,28(sp)
 4012fb0:	da400417 	ldw	r9,16(sp)
 4012fb4:	da800317 	ldw	r10,12(sp)
 4012fb8:	113ffd44 	addi	r4,r2,-11
 4012fbc:	00c00704 	movi	r3,28
 4012fc0:	19011016 	blt	r3,r4,4013404 <__muldf3+0x6d4>
 4012fc4:	00c00744 	movi	r3,29
 4012fc8:	14bffe04 	addi	r18,r2,-8
 4012fcc:	1907c83a 	sub	r3,r3,r4
 4012fd0:	8ca2983a 	sll	r17,r17,r18
 4012fd4:	30c6d83a 	srl	r3,r6,r3
 4012fd8:	34a4983a 	sll	r18,r6,r18
 4012fdc:	1c62b03a 	or	r17,r3,r17
 4012fe0:	1080fcc4 	addi	r2,r2,1011
 4012fe4:	0085c83a 	sub	r2,zero,r2
 4012fe8:	000f883a 	mov	r7,zero
 4012fec:	003f8106 	br	4012df4 <__alt_mem_onchip_memory2_0+0xfc00dc34>
 4012ff0:	3027883a 	mov	r19,r6
 4012ff4:	0081ffc4 	movi	r2,2047
 4012ff8:	0021883a 	mov	r16,zero
 4012ffc:	002d883a 	mov	r22,zero
 4013000:	003faa06 	br	4012eac <__alt_mem_onchip_memory2_0+0xfc00dcec>
 4013004:	0023883a 	mov	r17,zero
 4013008:	0025883a 	mov	r18,zero
 401300c:	01c00044 	movi	r7,1
 4013010:	003f7806 	br	4012df4 <__alt_mem_onchip_memory2_0+0xfc00dc34>
 4013014:	01c000c4 	movi	r7,3
 4013018:	003f7606 	br	4012df4 <__alt_mem_onchip_memory2_0+0xfc00dc34>
 401301c:	05400104 	movi	r21,4
 4013020:	0021883a 	mov	r16,zero
 4013024:	002d883a 	mov	r22,zero
 4013028:	01400044 	movi	r5,1
 401302c:	003f5f06 	br	4012dac <__alt_mem_onchip_memory2_0+0xfc00dbec>
 4013030:	05400304 	movi	r21,12
 4013034:	014000c4 	movi	r5,3
 4013038:	003f5c06 	br	4012dac <__alt_mem_onchip_memory2_0+0xfc00dbec>
 401303c:	04000434 	movhi	r16,16
 4013040:	0027883a 	mov	r19,zero
 4013044:	843fffc4 	addi	r16,r16,-1
 4013048:	05bfffc4 	movi	r22,-1
 401304c:	0081ffc4 	movi	r2,2047
 4013050:	003f9606 	br	4012eac <__alt_mem_onchip_memory2_0+0xfc00dcec>
 4013054:	8023883a 	mov	r17,r16
 4013058:	b025883a 	mov	r18,r22
 401305c:	280f883a 	mov	r7,r5
 4013060:	003f8806 	br	4012e84 <__alt_mem_onchip_memory2_0+0xfc00dcc4>
 4013064:	8023883a 	mov	r17,r16
 4013068:	b025883a 	mov	r18,r22
 401306c:	480d883a 	mov	r6,r9
 4013070:	280f883a 	mov	r7,r5
 4013074:	003f8306 	br	4012e84 <__alt_mem_onchip_memory2_0+0xfc00dcc4>
 4013078:	b026d43a 	srli	r19,r22,16
 401307c:	902ed43a 	srli	r23,r18,16
 4013080:	b5bfffcc 	andi	r22,r22,65535
 4013084:	94bfffcc 	andi	r18,r18,65535
 4013088:	b00b883a 	mov	r5,r22
 401308c:	9009883a 	mov	r4,r18
 4013090:	d8c00515 	stw	r3,20(sp)
 4013094:	d9800715 	stw	r6,28(sp)
 4013098:	da000615 	stw	r8,24(sp)
 401309c:	40118340 	call	4011834 <__mulsi3>
 40130a0:	980b883a 	mov	r5,r19
 40130a4:	9009883a 	mov	r4,r18
 40130a8:	1029883a 	mov	r20,r2
 40130ac:	40118340 	call	4011834 <__mulsi3>
 40130b0:	b80b883a 	mov	r5,r23
 40130b4:	9809883a 	mov	r4,r19
 40130b8:	102b883a 	mov	r21,r2
 40130bc:	40118340 	call	4011834 <__mulsi3>
 40130c0:	b809883a 	mov	r4,r23
 40130c4:	b00b883a 	mov	r5,r22
 40130c8:	1039883a 	mov	fp,r2
 40130cc:	40118340 	call	4011834 <__mulsi3>
 40130d0:	a008d43a 	srli	r4,r20,16
 40130d4:	1545883a 	add	r2,r2,r21
 40130d8:	d8c00517 	ldw	r3,20(sp)
 40130dc:	2085883a 	add	r2,r4,r2
 40130e0:	d9800717 	ldw	r6,28(sp)
 40130e4:	da000617 	ldw	r8,24(sp)
 40130e8:	1540022e 	bgeu	r2,r21,40130f4 <__muldf3+0x3c4>
 40130ec:	01000074 	movhi	r4,1
 40130f0:	e139883a 	add	fp,fp,r4
 40130f4:	100e943a 	slli	r7,r2,16
 40130f8:	1004d43a 	srli	r2,r2,16
 40130fc:	882ad43a 	srli	r21,r17,16
 4013100:	a53fffcc 	andi	r20,r20,65535
 4013104:	8c7fffcc 	andi	r17,r17,65535
 4013108:	3d29883a 	add	r20,r7,r20
 401310c:	b00b883a 	mov	r5,r22
 4013110:	8809883a 	mov	r4,r17
 4013114:	d8c00515 	stw	r3,20(sp)
 4013118:	d9800715 	stw	r6,28(sp)
 401311c:	da000615 	stw	r8,24(sp)
 4013120:	dd000115 	stw	r20,4(sp)
 4013124:	d8800015 	stw	r2,0(sp)
 4013128:	40118340 	call	4011834 <__mulsi3>
 401312c:	980b883a 	mov	r5,r19
 4013130:	8809883a 	mov	r4,r17
 4013134:	d8800215 	stw	r2,8(sp)
 4013138:	40118340 	call	4011834 <__mulsi3>
 401313c:	9809883a 	mov	r4,r19
 4013140:	a80b883a 	mov	r5,r21
 4013144:	1029883a 	mov	r20,r2
 4013148:	40118340 	call	4011834 <__mulsi3>
 401314c:	b00b883a 	mov	r5,r22
 4013150:	a809883a 	mov	r4,r21
 4013154:	d8800415 	stw	r2,16(sp)
 4013158:	40118340 	call	4011834 <__mulsi3>
 401315c:	d9c00217 	ldw	r7,8(sp)
 4013160:	1505883a 	add	r2,r2,r20
 4013164:	d8c00517 	ldw	r3,20(sp)
 4013168:	3826d43a 	srli	r19,r7,16
 401316c:	d9800717 	ldw	r6,28(sp)
 4013170:	da000617 	ldw	r8,24(sp)
 4013174:	9885883a 	add	r2,r19,r2
 4013178:	da400417 	ldw	r9,16(sp)
 401317c:	1500022e 	bgeu	r2,r20,4013188 <__muldf3+0x458>
 4013180:	01000074 	movhi	r4,1
 4013184:	4913883a 	add	r9,r9,r4
 4013188:	1028d43a 	srli	r20,r2,16
 401318c:	1004943a 	slli	r2,r2,16
 4013190:	802cd43a 	srli	r22,r16,16
 4013194:	843fffcc 	andi	r16,r16,65535
 4013198:	3cffffcc 	andi	r19,r7,65535
 401319c:	9009883a 	mov	r4,r18
 40131a0:	800b883a 	mov	r5,r16
 40131a4:	a269883a 	add	r20,r20,r9
 40131a8:	d8c00515 	stw	r3,20(sp)
 40131ac:	d9800715 	stw	r6,28(sp)
 40131b0:	da000615 	stw	r8,24(sp)
 40131b4:	14e7883a 	add	r19,r2,r19
 40131b8:	40118340 	call	4011834 <__mulsi3>
 40131bc:	9009883a 	mov	r4,r18
 40131c0:	b00b883a 	mov	r5,r22
 40131c4:	d8800315 	stw	r2,12(sp)
 40131c8:	40118340 	call	4011834 <__mulsi3>
 40131cc:	b809883a 	mov	r4,r23
 40131d0:	b00b883a 	mov	r5,r22
 40131d4:	d8800215 	stw	r2,8(sp)
 40131d8:	40118340 	call	4011834 <__mulsi3>
 40131dc:	b80b883a 	mov	r5,r23
 40131e0:	8009883a 	mov	r4,r16
 40131e4:	d8800415 	stw	r2,16(sp)
 40131e8:	40118340 	call	4011834 <__mulsi3>
 40131ec:	da800317 	ldw	r10,12(sp)
 40131f0:	d9c00217 	ldw	r7,8(sp)
 40131f4:	d9000017 	ldw	r4,0(sp)
 40131f8:	502ed43a 	srli	r23,r10,16
 40131fc:	11c5883a 	add	r2,r2,r7
 4013200:	24e5883a 	add	r18,r4,r19
 4013204:	b885883a 	add	r2,r23,r2
 4013208:	d8c00517 	ldw	r3,20(sp)
 401320c:	d9800717 	ldw	r6,28(sp)
 4013210:	da000617 	ldw	r8,24(sp)
 4013214:	da400417 	ldw	r9,16(sp)
 4013218:	11c0022e 	bgeu	r2,r7,4013224 <__muldf3+0x4f4>
 401321c:	01000074 	movhi	r4,1
 4013220:	4913883a 	add	r9,r9,r4
 4013224:	100ed43a 	srli	r7,r2,16
 4013228:	1004943a 	slli	r2,r2,16
 401322c:	55ffffcc 	andi	r23,r10,65535
 4013230:	3a53883a 	add	r9,r7,r9
 4013234:	8809883a 	mov	r4,r17
 4013238:	800b883a 	mov	r5,r16
 401323c:	d8c00515 	stw	r3,20(sp)
 4013240:	d9800715 	stw	r6,28(sp)
 4013244:	da000615 	stw	r8,24(sp)
 4013248:	da400415 	stw	r9,16(sp)
 401324c:	15ef883a 	add	r23,r2,r23
 4013250:	40118340 	call	4011834 <__mulsi3>
 4013254:	8809883a 	mov	r4,r17
 4013258:	b00b883a 	mov	r5,r22
 401325c:	d8800215 	stw	r2,8(sp)
 4013260:	40118340 	call	4011834 <__mulsi3>
 4013264:	b00b883a 	mov	r5,r22
 4013268:	a809883a 	mov	r4,r21
 401326c:	d8800315 	stw	r2,12(sp)
 4013270:	40118340 	call	4011834 <__mulsi3>
 4013274:	8009883a 	mov	r4,r16
 4013278:	a80b883a 	mov	r5,r21
 401327c:	1023883a 	mov	r17,r2
 4013280:	40118340 	call	4011834 <__mulsi3>
 4013284:	d9c00217 	ldw	r7,8(sp)
 4013288:	da800317 	ldw	r10,12(sp)
 401328c:	d8c00517 	ldw	r3,20(sp)
 4013290:	3808d43a 	srli	r4,r7,16
 4013294:	1285883a 	add	r2,r2,r10
 4013298:	d9800717 	ldw	r6,28(sp)
 401329c:	2085883a 	add	r2,r4,r2
 40132a0:	da000617 	ldw	r8,24(sp)
 40132a4:	da400417 	ldw	r9,16(sp)
 40132a8:	1280022e 	bgeu	r2,r10,40132b4 <__muldf3+0x584>
 40132ac:	01000074 	movhi	r4,1
 40132b0:	8923883a 	add	r17,r17,r4
 40132b4:	1008943a 	slli	r4,r2,16
 40132b8:	39ffffcc 	andi	r7,r7,65535
 40132bc:	e4b9883a 	add	fp,fp,r18
 40132c0:	21cf883a 	add	r7,r4,r7
 40132c4:	e4e7803a 	cmpltu	r19,fp,r19
 40132c8:	3d0f883a 	add	r7,r7,r20
 40132cc:	bf39883a 	add	fp,r23,fp
 40132d0:	99c9883a 	add	r4,r19,r7
 40132d4:	e5ef803a 	cmpltu	r23,fp,r23
 40132d8:	490b883a 	add	r5,r9,r4
 40132dc:	1004d43a 	srli	r2,r2,16
 40132e0:	b965883a 	add	r18,r23,r5
 40132e4:	24c9803a 	cmpltu	r4,r4,r19
 40132e8:	3d29803a 	cmpltu	r20,r7,r20
 40132ec:	a128b03a 	or	r20,r20,r4
 40132f0:	95ef803a 	cmpltu	r23,r18,r23
 40132f4:	2a53803a 	cmpltu	r9,r5,r9
 40132f8:	a0a9883a 	add	r20,r20,r2
 40132fc:	4deeb03a 	or	r23,r9,r23
 4013300:	a5ef883a 	add	r23,r20,r23
 4013304:	bc63883a 	add	r17,r23,r17
 4013308:	e004927a 	slli	r2,fp,9
 401330c:	d9000117 	ldw	r4,4(sp)
 4013310:	882e927a 	slli	r23,r17,9
 4013314:	9022d5fa 	srli	r17,r18,23
 4013318:	e038d5fa 	srli	fp,fp,23
 401331c:	1104b03a 	or	r2,r2,r4
 4013320:	9024927a 	slli	r18,r18,9
 4013324:	1004c03a 	cmpne	r2,r2,zero
 4013328:	bc62b03a 	or	r17,r23,r17
 401332c:	1738b03a 	or	fp,r2,fp
 4013330:	8880402c 	andhi	r2,r17,256
 4013334:	e4a4b03a 	or	r18,fp,r18
 4013338:	10000726 	beq	r2,zero,4013358 <__muldf3+0x628>
 401333c:	9006d07a 	srli	r3,r18,1
 4013340:	880497fa 	slli	r2,r17,31
 4013344:	9480004c 	andi	r18,r18,1
 4013348:	8822d07a 	srli	r17,r17,1
 401334c:	1ca4b03a 	or	r18,r3,r18
 4013350:	14a4b03a 	or	r18,r2,r18
 4013354:	4007883a 	mov	r3,r8
 4013358:	1880ffc4 	addi	r2,r3,1023
 401335c:	0080460e 	bge	zero,r2,4013478 <__muldf3+0x748>
 4013360:	910001cc 	andi	r4,r18,7
 4013364:	20000726 	beq	r4,zero,4013384 <__muldf3+0x654>
 4013368:	910003cc 	andi	r4,r18,15
 401336c:	01400104 	movi	r5,4
 4013370:	21400426 	beq	r4,r5,4013384 <__muldf3+0x654>
 4013374:	9149883a 	add	r4,r18,r5
 4013378:	24a5803a 	cmpltu	r18,r4,r18
 401337c:	8ca3883a 	add	r17,r17,r18
 4013380:	2025883a 	mov	r18,r4
 4013384:	8900402c 	andhi	r4,r17,256
 4013388:	20000426 	beq	r4,zero,401339c <__muldf3+0x66c>
 401338c:	18810004 	addi	r2,r3,1024
 4013390:	00ffc034 	movhi	r3,65280
 4013394:	18ffffc4 	addi	r3,r3,-1
 4013398:	88e2703a 	and	r17,r17,r3
 401339c:	00c1ff84 	movi	r3,2046
 40133a0:	18bf1316 	blt	r3,r2,4012ff0 <__alt_mem_onchip_memory2_0+0xfc00de30>
 40133a4:	882c977a 	slli	r22,r17,29
 40133a8:	9024d0fa 	srli	r18,r18,3
 40133ac:	8822927a 	slli	r17,r17,9
 40133b0:	1081ffcc 	andi	r2,r2,2047
 40133b4:	b4acb03a 	or	r22,r22,r18
 40133b8:	8820d33a 	srli	r16,r17,12
 40133bc:	3027883a 	mov	r19,r6
 40133c0:	003eba06 	br	4012eac <__alt_mem_onchip_memory2_0+0xfc00dcec>
 40133c4:	8080022c 	andhi	r2,r16,8
 40133c8:	10000926 	beq	r2,zero,40133f0 <__muldf3+0x6c0>
 40133cc:	8880022c 	andhi	r2,r17,8
 40133d0:	1000071e 	bne	r2,zero,40133f0 <__muldf3+0x6c0>
 40133d4:	00800434 	movhi	r2,16
 40133d8:	8c000234 	orhi	r16,r17,8
 40133dc:	10bfffc4 	addi	r2,r2,-1
 40133e0:	e027883a 	mov	r19,fp
 40133e4:	80a0703a 	and	r16,r16,r2
 40133e8:	902d883a 	mov	r22,r18
 40133ec:	003f1706 	br	401304c <__alt_mem_onchip_memory2_0+0xfc00de8c>
 40133f0:	00800434 	movhi	r2,16
 40133f4:	84000234 	orhi	r16,r16,8
 40133f8:	10bfffc4 	addi	r2,r2,-1
 40133fc:	80a0703a 	and	r16,r16,r2
 4013400:	003f1206 	br	401304c <__alt_mem_onchip_memory2_0+0xfc00de8c>
 4013404:	147ff604 	addi	r17,r2,-40
 4013408:	3462983a 	sll	r17,r6,r17
 401340c:	0025883a 	mov	r18,zero
 4013410:	003ef306 	br	4012fe0 <__alt_mem_onchip_memory2_0+0xfc00de20>
 4013414:	3009883a 	mov	r4,r6
 4013418:	d9400215 	stw	r5,8(sp)
 401341c:	d9800715 	stw	r6,28(sp)
 4013420:	da400415 	stw	r9,16(sp)
 4013424:	da800315 	stw	r10,12(sp)
 4013428:	4013ff40 	call	4013ff4 <__clzsi2>
 401342c:	10800804 	addi	r2,r2,32
 4013430:	da800317 	ldw	r10,12(sp)
 4013434:	da400417 	ldw	r9,16(sp)
 4013438:	d9800717 	ldw	r6,28(sp)
 401343c:	d9400217 	ldw	r5,8(sp)
 4013440:	003edd06 	br	4012fb8 <__alt_mem_onchip_memory2_0+0xfc00ddf8>
 4013444:	143ff604 	addi	r16,r2,-40
 4013448:	ac20983a 	sll	r16,r21,r16
 401344c:	002d883a 	mov	r22,zero
 4013450:	003ec106 	br	4012f58 <__alt_mem_onchip_memory2_0+0xfc00dd98>
 4013454:	d9800715 	stw	r6,28(sp)
 4013458:	d9c00215 	stw	r7,8(sp)
 401345c:	da400415 	stw	r9,16(sp)
 4013460:	4013ff40 	call	4013ff4 <__clzsi2>
 4013464:	10800804 	addi	r2,r2,32
 4013468:	da400417 	ldw	r9,16(sp)
 401346c:	d9c00217 	ldw	r7,8(sp)
 4013470:	d9800717 	ldw	r6,28(sp)
 4013474:	003eae06 	br	4012f30 <__alt_mem_onchip_memory2_0+0xfc00dd70>
 4013478:	00c00044 	movi	r3,1
 401347c:	1887c83a 	sub	r3,r3,r2
 4013480:	01000e04 	movi	r4,56
 4013484:	20fe8516 	blt	r4,r3,4012e9c <__alt_mem_onchip_memory2_0+0xfc00dcdc>
 4013488:	010007c4 	movi	r4,31
 401348c:	20c01b16 	blt	r4,r3,40134fc <__muldf3+0x7cc>
 4013490:	00800804 	movi	r2,32
 4013494:	10c5c83a 	sub	r2,r2,r3
 4013498:	888a983a 	sll	r5,r17,r2
 401349c:	90c8d83a 	srl	r4,r18,r3
 40134a0:	9084983a 	sll	r2,r18,r2
 40134a4:	88e2d83a 	srl	r17,r17,r3
 40134a8:	2906b03a 	or	r3,r5,r4
 40134ac:	1004c03a 	cmpne	r2,r2,zero
 40134b0:	1886b03a 	or	r3,r3,r2
 40134b4:	188001cc 	andi	r2,r3,7
 40134b8:	10000726 	beq	r2,zero,40134d8 <__muldf3+0x7a8>
 40134bc:	188003cc 	andi	r2,r3,15
 40134c0:	01000104 	movi	r4,4
 40134c4:	11000426 	beq	r2,r4,40134d8 <__muldf3+0x7a8>
 40134c8:	1805883a 	mov	r2,r3
 40134cc:	10c00104 	addi	r3,r2,4
 40134d0:	1885803a 	cmpltu	r2,r3,r2
 40134d4:	88a3883a 	add	r17,r17,r2
 40134d8:	8880202c 	andhi	r2,r17,128
 40134dc:	10001c26 	beq	r2,zero,4013550 <__muldf3+0x820>
 40134e0:	3027883a 	mov	r19,r6
 40134e4:	00800044 	movi	r2,1
 40134e8:	0021883a 	mov	r16,zero
 40134ec:	002d883a 	mov	r22,zero
 40134f0:	003e6e06 	br	4012eac <__alt_mem_onchip_memory2_0+0xfc00dcec>
 40134f4:	4007883a 	mov	r3,r8
 40134f8:	003f9706 	br	4013358 <__alt_mem_onchip_memory2_0+0xfc00e198>
 40134fc:	017ff844 	movi	r5,-31
 4013500:	2885c83a 	sub	r2,r5,r2
 4013504:	888ad83a 	srl	r5,r17,r2
 4013508:	00800804 	movi	r2,32
 401350c:	18801a26 	beq	r3,r2,4013578 <__muldf3+0x848>
 4013510:	01001004 	movi	r4,64
 4013514:	20c7c83a 	sub	r3,r4,r3
 4013518:	88e2983a 	sll	r17,r17,r3
 401351c:	8ca4b03a 	or	r18,r17,r18
 4013520:	9004c03a 	cmpne	r2,r18,zero
 4013524:	2884b03a 	or	r2,r5,r2
 4013528:	144001cc 	andi	r17,r2,7
 401352c:	88000d1e 	bne	r17,zero,4013564 <__muldf3+0x834>
 4013530:	0021883a 	mov	r16,zero
 4013534:	102cd0fa 	srli	r22,r2,3
 4013538:	3027883a 	mov	r19,r6
 401353c:	0005883a 	mov	r2,zero
 4013540:	b46cb03a 	or	r22,r22,r17
 4013544:	003e5906 	br	4012eac <__alt_mem_onchip_memory2_0+0xfc00dcec>
 4013548:	1007883a 	mov	r3,r2
 401354c:	0023883a 	mov	r17,zero
 4013550:	8820927a 	slli	r16,r17,9
 4013554:	1805883a 	mov	r2,r3
 4013558:	8822977a 	slli	r17,r17,29
 401355c:	8020d33a 	srli	r16,r16,12
 4013560:	003ff406 	br	4013534 <__alt_mem_onchip_memory2_0+0xfc00e374>
 4013564:	10c003cc 	andi	r3,r2,15
 4013568:	01000104 	movi	r4,4
 401356c:	193ff626 	beq	r3,r4,4013548 <__alt_mem_onchip_memory2_0+0xfc00e388>
 4013570:	0023883a 	mov	r17,zero
 4013574:	003fd506 	br	40134cc <__alt_mem_onchip_memory2_0+0xfc00e30c>
 4013578:	0023883a 	mov	r17,zero
 401357c:	003fe706 	br	401351c <__alt_mem_onchip_memory2_0+0xfc00e35c>
 4013580:	00800434 	movhi	r2,16
 4013584:	8c000234 	orhi	r16,r17,8
 4013588:	10bfffc4 	addi	r2,r2,-1
 401358c:	3027883a 	mov	r19,r6
 4013590:	80a0703a 	and	r16,r16,r2
 4013594:	902d883a 	mov	r22,r18
 4013598:	003eac06 	br	401304c <__alt_mem_onchip_memory2_0+0xfc00de8c>

0401359c <__subdf3>:
 401359c:	02000434 	movhi	r8,16
 40135a0:	423fffc4 	addi	r8,r8,-1
 40135a4:	defffb04 	addi	sp,sp,-20
 40135a8:	2a14703a 	and	r10,r5,r8
 40135ac:	3812d53a 	srli	r9,r7,20
 40135b0:	3a10703a 	and	r8,r7,r8
 40135b4:	2006d77a 	srli	r3,r4,29
 40135b8:	3004d77a 	srli	r2,r6,29
 40135bc:	dc000015 	stw	r16,0(sp)
 40135c0:	501490fa 	slli	r10,r10,3
 40135c4:	2820d53a 	srli	r16,r5,20
 40135c8:	401090fa 	slli	r8,r8,3
 40135cc:	dc800215 	stw	r18,8(sp)
 40135d0:	dc400115 	stw	r17,4(sp)
 40135d4:	dfc00415 	stw	ra,16(sp)
 40135d8:	202290fa 	slli	r17,r4,3
 40135dc:	dcc00315 	stw	r19,12(sp)
 40135e0:	4a41ffcc 	andi	r9,r9,2047
 40135e4:	0101ffc4 	movi	r4,2047
 40135e8:	2824d7fa 	srli	r18,r5,31
 40135ec:	8401ffcc 	andi	r16,r16,2047
 40135f0:	50c6b03a 	or	r3,r10,r3
 40135f4:	380ed7fa 	srli	r7,r7,31
 40135f8:	408ab03a 	or	r5,r8,r2
 40135fc:	300c90fa 	slli	r6,r6,3
 4013600:	49009626 	beq	r9,r4,401385c <__subdf3+0x2c0>
 4013604:	39c0005c 	xori	r7,r7,1
 4013608:	8245c83a 	sub	r2,r16,r9
 401360c:	3c807426 	beq	r7,r18,40137e0 <__subdf3+0x244>
 4013610:	0080af0e 	bge	zero,r2,40138d0 <__subdf3+0x334>
 4013614:	48002a1e 	bne	r9,zero,40136c0 <__subdf3+0x124>
 4013618:	2988b03a 	or	r4,r5,r6
 401361c:	20009a1e 	bne	r4,zero,4013888 <__subdf3+0x2ec>
 4013620:	888001cc 	andi	r2,r17,7
 4013624:	10000726 	beq	r2,zero,4013644 <__subdf3+0xa8>
 4013628:	888003cc 	andi	r2,r17,15
 401362c:	01000104 	movi	r4,4
 4013630:	11000426 	beq	r2,r4,4013644 <__subdf3+0xa8>
 4013634:	890b883a 	add	r5,r17,r4
 4013638:	2c63803a 	cmpltu	r17,r5,r17
 401363c:	1c47883a 	add	r3,r3,r17
 4013640:	2823883a 	mov	r17,r5
 4013644:	1880202c 	andhi	r2,r3,128
 4013648:	10005926 	beq	r2,zero,40137b0 <__subdf3+0x214>
 401364c:	84000044 	addi	r16,r16,1
 4013650:	0081ffc4 	movi	r2,2047
 4013654:	8080be26 	beq	r16,r2,4013950 <__subdf3+0x3b4>
 4013658:	017fe034 	movhi	r5,65408
 401365c:	297fffc4 	addi	r5,r5,-1
 4013660:	1946703a 	and	r3,r3,r5
 4013664:	1804977a 	slli	r2,r3,29
 4013668:	1806927a 	slli	r3,r3,9
 401366c:	8822d0fa 	srli	r17,r17,3
 4013670:	8401ffcc 	andi	r16,r16,2047
 4013674:	180ad33a 	srli	r5,r3,12
 4013678:	9100004c 	andi	r4,r18,1
 401367c:	1444b03a 	or	r2,r2,r17
 4013680:	80c1ffcc 	andi	r3,r16,2047
 4013684:	1820953a 	slli	r16,r3,20
 4013688:	20c03fcc 	andi	r3,r4,255
 401368c:	180897fa 	slli	r4,r3,31
 4013690:	00c00434 	movhi	r3,16
 4013694:	18ffffc4 	addi	r3,r3,-1
 4013698:	28c6703a 	and	r3,r5,r3
 401369c:	1c06b03a 	or	r3,r3,r16
 40136a0:	1906b03a 	or	r3,r3,r4
 40136a4:	dfc00417 	ldw	ra,16(sp)
 40136a8:	dcc00317 	ldw	r19,12(sp)
 40136ac:	dc800217 	ldw	r18,8(sp)
 40136b0:	dc400117 	ldw	r17,4(sp)
 40136b4:	dc000017 	ldw	r16,0(sp)
 40136b8:	dec00504 	addi	sp,sp,20
 40136bc:	f800283a 	ret
 40136c0:	0101ffc4 	movi	r4,2047
 40136c4:	813fd626 	beq	r16,r4,4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 40136c8:	29402034 	orhi	r5,r5,128
 40136cc:	01000e04 	movi	r4,56
 40136d0:	2080a316 	blt	r4,r2,4013960 <__subdf3+0x3c4>
 40136d4:	010007c4 	movi	r4,31
 40136d8:	2080c616 	blt	r4,r2,40139f4 <__subdf3+0x458>
 40136dc:	01000804 	movi	r4,32
 40136e0:	2089c83a 	sub	r4,r4,r2
 40136e4:	2910983a 	sll	r8,r5,r4
 40136e8:	308ed83a 	srl	r7,r6,r2
 40136ec:	3108983a 	sll	r4,r6,r4
 40136f0:	2884d83a 	srl	r2,r5,r2
 40136f4:	41ccb03a 	or	r6,r8,r7
 40136f8:	2008c03a 	cmpne	r4,r4,zero
 40136fc:	310cb03a 	or	r6,r6,r4
 4013700:	898dc83a 	sub	r6,r17,r6
 4013704:	89a3803a 	cmpltu	r17,r17,r6
 4013708:	1887c83a 	sub	r3,r3,r2
 401370c:	1c47c83a 	sub	r3,r3,r17
 4013710:	3023883a 	mov	r17,r6
 4013714:	1880202c 	andhi	r2,r3,128
 4013718:	10002326 	beq	r2,zero,40137a8 <__subdf3+0x20c>
 401371c:	04c02034 	movhi	r19,128
 4013720:	9cffffc4 	addi	r19,r19,-1
 4013724:	1ce6703a 	and	r19,r3,r19
 4013728:	98007a26 	beq	r19,zero,4013914 <__subdf3+0x378>
 401372c:	9809883a 	mov	r4,r19
 4013730:	4013ff40 	call	4013ff4 <__clzsi2>
 4013734:	113ffe04 	addi	r4,r2,-8
 4013738:	00c007c4 	movi	r3,31
 401373c:	19007b16 	blt	r3,r4,401392c <__subdf3+0x390>
 4013740:	00800804 	movi	r2,32
 4013744:	1105c83a 	sub	r2,r2,r4
 4013748:	8884d83a 	srl	r2,r17,r2
 401374c:	9906983a 	sll	r3,r19,r4
 4013750:	8922983a 	sll	r17,r17,r4
 4013754:	10c4b03a 	or	r2,r2,r3
 4013758:	24007816 	blt	r4,r16,401393c <__subdf3+0x3a0>
 401375c:	2421c83a 	sub	r16,r4,r16
 4013760:	80c00044 	addi	r3,r16,1
 4013764:	010007c4 	movi	r4,31
 4013768:	20c09516 	blt	r4,r3,40139c0 <__subdf3+0x424>
 401376c:	01400804 	movi	r5,32
 4013770:	28cbc83a 	sub	r5,r5,r3
 4013774:	88c8d83a 	srl	r4,r17,r3
 4013778:	8962983a 	sll	r17,r17,r5
 401377c:	114a983a 	sll	r5,r2,r5
 4013780:	10c6d83a 	srl	r3,r2,r3
 4013784:	8804c03a 	cmpne	r2,r17,zero
 4013788:	290ab03a 	or	r5,r5,r4
 401378c:	28a2b03a 	or	r17,r5,r2
 4013790:	0021883a 	mov	r16,zero
 4013794:	003fa206 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013798:	2090b03a 	or	r8,r4,r2
 401379c:	40018e26 	beq	r8,zero,4013dd8 <__subdf3+0x83c>
 40137a0:	1007883a 	mov	r3,r2
 40137a4:	2023883a 	mov	r17,r4
 40137a8:	888001cc 	andi	r2,r17,7
 40137ac:	103f9e1e 	bne	r2,zero,4013628 <__alt_mem_onchip_memory2_0+0xfc00e468>
 40137b0:	1804977a 	slli	r2,r3,29
 40137b4:	8822d0fa 	srli	r17,r17,3
 40137b8:	1810d0fa 	srli	r8,r3,3
 40137bc:	9100004c 	andi	r4,r18,1
 40137c0:	1444b03a 	or	r2,r2,r17
 40137c4:	00c1ffc4 	movi	r3,2047
 40137c8:	80c02826 	beq	r16,r3,401386c <__subdf3+0x2d0>
 40137cc:	01400434 	movhi	r5,16
 40137d0:	297fffc4 	addi	r5,r5,-1
 40137d4:	80e0703a 	and	r16,r16,r3
 40137d8:	414a703a 	and	r5,r8,r5
 40137dc:	003fa806 	br	4013680 <__alt_mem_onchip_memory2_0+0xfc00e4c0>
 40137e0:	0080630e 	bge	zero,r2,4013970 <__subdf3+0x3d4>
 40137e4:	48003026 	beq	r9,zero,40138a8 <__subdf3+0x30c>
 40137e8:	0101ffc4 	movi	r4,2047
 40137ec:	813f8c26 	beq	r16,r4,4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 40137f0:	29402034 	orhi	r5,r5,128
 40137f4:	01000e04 	movi	r4,56
 40137f8:	2080a90e 	bge	r4,r2,4013aa0 <__subdf3+0x504>
 40137fc:	298cb03a 	or	r6,r5,r6
 4013800:	3012c03a 	cmpne	r9,r6,zero
 4013804:	0005883a 	mov	r2,zero
 4013808:	4c53883a 	add	r9,r9,r17
 401380c:	4c63803a 	cmpltu	r17,r9,r17
 4013810:	10c7883a 	add	r3,r2,r3
 4013814:	88c7883a 	add	r3,r17,r3
 4013818:	4823883a 	mov	r17,r9
 401381c:	1880202c 	andhi	r2,r3,128
 4013820:	1000d026 	beq	r2,zero,4013b64 <__subdf3+0x5c8>
 4013824:	84000044 	addi	r16,r16,1
 4013828:	0081ffc4 	movi	r2,2047
 401382c:	8080fe26 	beq	r16,r2,4013c28 <__subdf3+0x68c>
 4013830:	00bfe034 	movhi	r2,65408
 4013834:	10bfffc4 	addi	r2,r2,-1
 4013838:	1886703a 	and	r3,r3,r2
 401383c:	880ad07a 	srli	r5,r17,1
 4013840:	180497fa 	slli	r2,r3,31
 4013844:	8900004c 	andi	r4,r17,1
 4013848:	2922b03a 	or	r17,r5,r4
 401384c:	1806d07a 	srli	r3,r3,1
 4013850:	1462b03a 	or	r17,r2,r17
 4013854:	3825883a 	mov	r18,r7
 4013858:	003f7106 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 401385c:	2984b03a 	or	r2,r5,r6
 4013860:	103f6826 	beq	r2,zero,4013604 <__alt_mem_onchip_memory2_0+0xfc00e444>
 4013864:	39c03fcc 	andi	r7,r7,255
 4013868:	003f6706 	br	4013608 <__alt_mem_onchip_memory2_0+0xfc00e448>
 401386c:	4086b03a 	or	r3,r8,r2
 4013870:	18015226 	beq	r3,zero,4013dbc <__subdf3+0x820>
 4013874:	00c00434 	movhi	r3,16
 4013878:	41400234 	orhi	r5,r8,8
 401387c:	18ffffc4 	addi	r3,r3,-1
 4013880:	28ca703a 	and	r5,r5,r3
 4013884:	003f7e06 	br	4013680 <__alt_mem_onchip_memory2_0+0xfc00e4c0>
 4013888:	10bfffc4 	addi	r2,r2,-1
 401388c:	1000491e 	bne	r2,zero,40139b4 <__subdf3+0x418>
 4013890:	898fc83a 	sub	r7,r17,r6
 4013894:	89e3803a 	cmpltu	r17,r17,r7
 4013898:	1947c83a 	sub	r3,r3,r5
 401389c:	1c47c83a 	sub	r3,r3,r17
 40138a0:	3823883a 	mov	r17,r7
 40138a4:	003f9b06 	br	4013714 <__alt_mem_onchip_memory2_0+0xfc00e554>
 40138a8:	2988b03a 	or	r4,r5,r6
 40138ac:	203f5c26 	beq	r4,zero,4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 40138b0:	10bfffc4 	addi	r2,r2,-1
 40138b4:	1000931e 	bne	r2,zero,4013b04 <__subdf3+0x568>
 40138b8:	898d883a 	add	r6,r17,r6
 40138bc:	3463803a 	cmpltu	r17,r6,r17
 40138c0:	1947883a 	add	r3,r3,r5
 40138c4:	88c7883a 	add	r3,r17,r3
 40138c8:	3023883a 	mov	r17,r6
 40138cc:	003fd306 	br	401381c <__alt_mem_onchip_memory2_0+0xfc00e65c>
 40138d0:	1000541e 	bne	r2,zero,4013a24 <__subdf3+0x488>
 40138d4:	80800044 	addi	r2,r16,1
 40138d8:	1081ffcc 	andi	r2,r2,2047
 40138dc:	01000044 	movi	r4,1
 40138e0:	2080a20e 	bge	r4,r2,4013b6c <__subdf3+0x5d0>
 40138e4:	8989c83a 	sub	r4,r17,r6
 40138e8:	8905803a 	cmpltu	r2,r17,r4
 40138ec:	1967c83a 	sub	r19,r3,r5
 40138f0:	98a7c83a 	sub	r19,r19,r2
 40138f4:	9880202c 	andhi	r2,r19,128
 40138f8:	10006326 	beq	r2,zero,4013a88 <__subdf3+0x4ec>
 40138fc:	3463c83a 	sub	r17,r6,r17
 4013900:	28c7c83a 	sub	r3,r5,r3
 4013904:	344d803a 	cmpltu	r6,r6,r17
 4013908:	19a7c83a 	sub	r19,r3,r6
 401390c:	3825883a 	mov	r18,r7
 4013910:	983f861e 	bne	r19,zero,401372c <__alt_mem_onchip_memory2_0+0xfc00e56c>
 4013914:	8809883a 	mov	r4,r17
 4013918:	4013ff40 	call	4013ff4 <__clzsi2>
 401391c:	10800804 	addi	r2,r2,32
 4013920:	113ffe04 	addi	r4,r2,-8
 4013924:	00c007c4 	movi	r3,31
 4013928:	193f850e 	bge	r3,r4,4013740 <__alt_mem_onchip_memory2_0+0xfc00e580>
 401392c:	10bff604 	addi	r2,r2,-40
 4013930:	8884983a 	sll	r2,r17,r2
 4013934:	0023883a 	mov	r17,zero
 4013938:	243f880e 	bge	r4,r16,401375c <__alt_mem_onchip_memory2_0+0xfc00e59c>
 401393c:	00ffe034 	movhi	r3,65408
 4013940:	18ffffc4 	addi	r3,r3,-1
 4013944:	8121c83a 	sub	r16,r16,r4
 4013948:	10c6703a 	and	r3,r2,r3
 401394c:	003f3406 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013950:	9100004c 	andi	r4,r18,1
 4013954:	000b883a 	mov	r5,zero
 4013958:	0005883a 	mov	r2,zero
 401395c:	003f4806 	br	4013680 <__alt_mem_onchip_memory2_0+0xfc00e4c0>
 4013960:	298cb03a 	or	r6,r5,r6
 4013964:	300cc03a 	cmpne	r6,r6,zero
 4013968:	0005883a 	mov	r2,zero
 401396c:	003f6406 	br	4013700 <__alt_mem_onchip_memory2_0+0xfc00e540>
 4013970:	10009a1e 	bne	r2,zero,4013bdc <__subdf3+0x640>
 4013974:	82400044 	addi	r9,r16,1
 4013978:	4881ffcc 	andi	r2,r9,2047
 401397c:	02800044 	movi	r10,1
 4013980:	5080670e 	bge	r10,r2,4013b20 <__subdf3+0x584>
 4013984:	0081ffc4 	movi	r2,2047
 4013988:	4880af26 	beq	r9,r2,4013c48 <__subdf3+0x6ac>
 401398c:	898d883a 	add	r6,r17,r6
 4013990:	1945883a 	add	r2,r3,r5
 4013994:	3447803a 	cmpltu	r3,r6,r17
 4013998:	1887883a 	add	r3,r3,r2
 401399c:	182297fa 	slli	r17,r3,31
 40139a0:	300cd07a 	srli	r6,r6,1
 40139a4:	1806d07a 	srli	r3,r3,1
 40139a8:	4821883a 	mov	r16,r9
 40139ac:	89a2b03a 	or	r17,r17,r6
 40139b0:	003f1b06 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 40139b4:	0101ffc4 	movi	r4,2047
 40139b8:	813f441e 	bne	r16,r4,40136cc <__alt_mem_onchip_memory2_0+0xfc00e50c>
 40139bc:	003f1806 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 40139c0:	843ff844 	addi	r16,r16,-31
 40139c4:	01400804 	movi	r5,32
 40139c8:	1408d83a 	srl	r4,r2,r16
 40139cc:	19405026 	beq	r3,r5,4013b10 <__subdf3+0x574>
 40139d0:	01401004 	movi	r5,64
 40139d4:	28c7c83a 	sub	r3,r5,r3
 40139d8:	10c4983a 	sll	r2,r2,r3
 40139dc:	88a2b03a 	or	r17,r17,r2
 40139e0:	8822c03a 	cmpne	r17,r17,zero
 40139e4:	2462b03a 	or	r17,r4,r17
 40139e8:	0007883a 	mov	r3,zero
 40139ec:	0021883a 	mov	r16,zero
 40139f0:	003f6d06 	br	40137a8 <__alt_mem_onchip_memory2_0+0xfc00e5e8>
 40139f4:	11fff804 	addi	r7,r2,-32
 40139f8:	01000804 	movi	r4,32
 40139fc:	29ced83a 	srl	r7,r5,r7
 4013a00:	11004526 	beq	r2,r4,4013b18 <__subdf3+0x57c>
 4013a04:	01001004 	movi	r4,64
 4013a08:	2089c83a 	sub	r4,r4,r2
 4013a0c:	2904983a 	sll	r2,r5,r4
 4013a10:	118cb03a 	or	r6,r2,r6
 4013a14:	300cc03a 	cmpne	r6,r6,zero
 4013a18:	398cb03a 	or	r6,r7,r6
 4013a1c:	0005883a 	mov	r2,zero
 4013a20:	003f3706 	br	4013700 <__alt_mem_onchip_memory2_0+0xfc00e540>
 4013a24:	80002a26 	beq	r16,zero,4013ad0 <__subdf3+0x534>
 4013a28:	0101ffc4 	movi	r4,2047
 4013a2c:	49006626 	beq	r9,r4,4013bc8 <__subdf3+0x62c>
 4013a30:	0085c83a 	sub	r2,zero,r2
 4013a34:	18c02034 	orhi	r3,r3,128
 4013a38:	01000e04 	movi	r4,56
 4013a3c:	20807e16 	blt	r4,r2,4013c38 <__subdf3+0x69c>
 4013a40:	010007c4 	movi	r4,31
 4013a44:	2080e716 	blt	r4,r2,4013de4 <__subdf3+0x848>
 4013a48:	01000804 	movi	r4,32
 4013a4c:	2089c83a 	sub	r4,r4,r2
 4013a50:	1914983a 	sll	r10,r3,r4
 4013a54:	8890d83a 	srl	r8,r17,r2
 4013a58:	8908983a 	sll	r4,r17,r4
 4013a5c:	1884d83a 	srl	r2,r3,r2
 4013a60:	5222b03a 	or	r17,r10,r8
 4013a64:	2006c03a 	cmpne	r3,r4,zero
 4013a68:	88e2b03a 	or	r17,r17,r3
 4013a6c:	3463c83a 	sub	r17,r6,r17
 4013a70:	2885c83a 	sub	r2,r5,r2
 4013a74:	344d803a 	cmpltu	r6,r6,r17
 4013a78:	1187c83a 	sub	r3,r2,r6
 4013a7c:	4821883a 	mov	r16,r9
 4013a80:	3825883a 	mov	r18,r7
 4013a84:	003f2306 	br	4013714 <__alt_mem_onchip_memory2_0+0xfc00e554>
 4013a88:	24d0b03a 	or	r8,r4,r19
 4013a8c:	40001b1e 	bne	r8,zero,4013afc <__subdf3+0x560>
 4013a90:	0005883a 	mov	r2,zero
 4013a94:	0009883a 	mov	r4,zero
 4013a98:	0021883a 	mov	r16,zero
 4013a9c:	003f4906 	br	40137c4 <__alt_mem_onchip_memory2_0+0xfc00e604>
 4013aa0:	010007c4 	movi	r4,31
 4013aa4:	20803a16 	blt	r4,r2,4013b90 <__subdf3+0x5f4>
 4013aa8:	01000804 	movi	r4,32
 4013aac:	2089c83a 	sub	r4,r4,r2
 4013ab0:	2912983a 	sll	r9,r5,r4
 4013ab4:	3090d83a 	srl	r8,r6,r2
 4013ab8:	3108983a 	sll	r4,r6,r4
 4013abc:	2884d83a 	srl	r2,r5,r2
 4013ac0:	4a12b03a 	or	r9,r9,r8
 4013ac4:	2008c03a 	cmpne	r4,r4,zero
 4013ac8:	4912b03a 	or	r9,r9,r4
 4013acc:	003f4e06 	br	4013808 <__alt_mem_onchip_memory2_0+0xfc00e648>
 4013ad0:	1c48b03a 	or	r4,r3,r17
 4013ad4:	20003c26 	beq	r4,zero,4013bc8 <__subdf3+0x62c>
 4013ad8:	0084303a 	nor	r2,zero,r2
 4013adc:	1000381e 	bne	r2,zero,4013bc0 <__subdf3+0x624>
 4013ae0:	3463c83a 	sub	r17,r6,r17
 4013ae4:	28c5c83a 	sub	r2,r5,r3
 4013ae8:	344d803a 	cmpltu	r6,r6,r17
 4013aec:	1187c83a 	sub	r3,r2,r6
 4013af0:	4821883a 	mov	r16,r9
 4013af4:	3825883a 	mov	r18,r7
 4013af8:	003f0606 	br	4013714 <__alt_mem_onchip_memory2_0+0xfc00e554>
 4013afc:	2023883a 	mov	r17,r4
 4013b00:	003f0906 	br	4013728 <__alt_mem_onchip_memory2_0+0xfc00e568>
 4013b04:	0101ffc4 	movi	r4,2047
 4013b08:	813f3a1e 	bne	r16,r4,40137f4 <__alt_mem_onchip_memory2_0+0xfc00e634>
 4013b0c:	003ec406 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013b10:	0005883a 	mov	r2,zero
 4013b14:	003fb106 	br	40139dc <__alt_mem_onchip_memory2_0+0xfc00e81c>
 4013b18:	0005883a 	mov	r2,zero
 4013b1c:	003fbc06 	br	4013a10 <__alt_mem_onchip_memory2_0+0xfc00e850>
 4013b20:	1c44b03a 	or	r2,r3,r17
 4013b24:	80008e1e 	bne	r16,zero,4013d60 <__subdf3+0x7c4>
 4013b28:	1000c826 	beq	r2,zero,4013e4c <__subdf3+0x8b0>
 4013b2c:	2984b03a 	or	r2,r5,r6
 4013b30:	103ebb26 	beq	r2,zero,4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013b34:	8989883a 	add	r4,r17,r6
 4013b38:	1945883a 	add	r2,r3,r5
 4013b3c:	2447803a 	cmpltu	r3,r4,r17
 4013b40:	1887883a 	add	r3,r3,r2
 4013b44:	1880202c 	andhi	r2,r3,128
 4013b48:	2023883a 	mov	r17,r4
 4013b4c:	103f1626 	beq	r2,zero,40137a8 <__alt_mem_onchip_memory2_0+0xfc00e5e8>
 4013b50:	00bfe034 	movhi	r2,65408
 4013b54:	10bfffc4 	addi	r2,r2,-1
 4013b58:	5021883a 	mov	r16,r10
 4013b5c:	1886703a 	and	r3,r3,r2
 4013b60:	003eaf06 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013b64:	3825883a 	mov	r18,r7
 4013b68:	003f0f06 	br	40137a8 <__alt_mem_onchip_memory2_0+0xfc00e5e8>
 4013b6c:	1c44b03a 	or	r2,r3,r17
 4013b70:	8000251e 	bne	r16,zero,4013c08 <__subdf3+0x66c>
 4013b74:	1000661e 	bne	r2,zero,4013d10 <__subdf3+0x774>
 4013b78:	2990b03a 	or	r8,r5,r6
 4013b7c:	40009626 	beq	r8,zero,4013dd8 <__subdf3+0x83c>
 4013b80:	2807883a 	mov	r3,r5
 4013b84:	3023883a 	mov	r17,r6
 4013b88:	3825883a 	mov	r18,r7
 4013b8c:	003ea406 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013b90:	127ff804 	addi	r9,r2,-32
 4013b94:	01000804 	movi	r4,32
 4013b98:	2a52d83a 	srl	r9,r5,r9
 4013b9c:	11008c26 	beq	r2,r4,4013dd0 <__subdf3+0x834>
 4013ba0:	01001004 	movi	r4,64
 4013ba4:	2085c83a 	sub	r2,r4,r2
 4013ba8:	2884983a 	sll	r2,r5,r2
 4013bac:	118cb03a 	or	r6,r2,r6
 4013bb0:	300cc03a 	cmpne	r6,r6,zero
 4013bb4:	4992b03a 	or	r9,r9,r6
 4013bb8:	0005883a 	mov	r2,zero
 4013bbc:	003f1206 	br	4013808 <__alt_mem_onchip_memory2_0+0xfc00e648>
 4013bc0:	0101ffc4 	movi	r4,2047
 4013bc4:	493f9c1e 	bne	r9,r4,4013a38 <__alt_mem_onchip_memory2_0+0xfc00e878>
 4013bc8:	2807883a 	mov	r3,r5
 4013bcc:	3023883a 	mov	r17,r6
 4013bd0:	4821883a 	mov	r16,r9
 4013bd4:	3825883a 	mov	r18,r7
 4013bd8:	003e9106 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013bdc:	80001f1e 	bne	r16,zero,4013c5c <__subdf3+0x6c0>
 4013be0:	1c48b03a 	or	r4,r3,r17
 4013be4:	20005a26 	beq	r4,zero,4013d50 <__subdf3+0x7b4>
 4013be8:	0084303a 	nor	r2,zero,r2
 4013bec:	1000561e 	bne	r2,zero,4013d48 <__subdf3+0x7ac>
 4013bf0:	89a3883a 	add	r17,r17,r6
 4013bf4:	1945883a 	add	r2,r3,r5
 4013bf8:	898d803a 	cmpltu	r6,r17,r6
 4013bfc:	3087883a 	add	r3,r6,r2
 4013c00:	4821883a 	mov	r16,r9
 4013c04:	003f0506 	br	401381c <__alt_mem_onchip_memory2_0+0xfc00e65c>
 4013c08:	10002b1e 	bne	r2,zero,4013cb8 <__subdf3+0x71c>
 4013c0c:	2984b03a 	or	r2,r5,r6
 4013c10:	10008026 	beq	r2,zero,4013e14 <__subdf3+0x878>
 4013c14:	2807883a 	mov	r3,r5
 4013c18:	3023883a 	mov	r17,r6
 4013c1c:	3825883a 	mov	r18,r7
 4013c20:	0401ffc4 	movi	r16,2047
 4013c24:	003e7e06 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013c28:	3809883a 	mov	r4,r7
 4013c2c:	0011883a 	mov	r8,zero
 4013c30:	0005883a 	mov	r2,zero
 4013c34:	003ee306 	br	40137c4 <__alt_mem_onchip_memory2_0+0xfc00e604>
 4013c38:	1c62b03a 	or	r17,r3,r17
 4013c3c:	8822c03a 	cmpne	r17,r17,zero
 4013c40:	0005883a 	mov	r2,zero
 4013c44:	003f8906 	br	4013a6c <__alt_mem_onchip_memory2_0+0xfc00e8ac>
 4013c48:	3809883a 	mov	r4,r7
 4013c4c:	4821883a 	mov	r16,r9
 4013c50:	0011883a 	mov	r8,zero
 4013c54:	0005883a 	mov	r2,zero
 4013c58:	003eda06 	br	40137c4 <__alt_mem_onchip_memory2_0+0xfc00e604>
 4013c5c:	0101ffc4 	movi	r4,2047
 4013c60:	49003b26 	beq	r9,r4,4013d50 <__subdf3+0x7b4>
 4013c64:	0085c83a 	sub	r2,zero,r2
 4013c68:	18c02034 	orhi	r3,r3,128
 4013c6c:	01000e04 	movi	r4,56
 4013c70:	20806e16 	blt	r4,r2,4013e2c <__subdf3+0x890>
 4013c74:	010007c4 	movi	r4,31
 4013c78:	20807716 	blt	r4,r2,4013e58 <__subdf3+0x8bc>
 4013c7c:	01000804 	movi	r4,32
 4013c80:	2089c83a 	sub	r4,r4,r2
 4013c84:	1914983a 	sll	r10,r3,r4
 4013c88:	8890d83a 	srl	r8,r17,r2
 4013c8c:	8908983a 	sll	r4,r17,r4
 4013c90:	1884d83a 	srl	r2,r3,r2
 4013c94:	5222b03a 	or	r17,r10,r8
 4013c98:	2006c03a 	cmpne	r3,r4,zero
 4013c9c:	88e2b03a 	or	r17,r17,r3
 4013ca0:	89a3883a 	add	r17,r17,r6
 4013ca4:	1145883a 	add	r2,r2,r5
 4013ca8:	898d803a 	cmpltu	r6,r17,r6
 4013cac:	3087883a 	add	r3,r6,r2
 4013cb0:	4821883a 	mov	r16,r9
 4013cb4:	003ed906 	br	401381c <__alt_mem_onchip_memory2_0+0xfc00e65c>
 4013cb8:	2984b03a 	or	r2,r5,r6
 4013cbc:	10004226 	beq	r2,zero,4013dc8 <__subdf3+0x82c>
 4013cc0:	1808d0fa 	srli	r4,r3,3
 4013cc4:	8822d0fa 	srli	r17,r17,3
 4013cc8:	1806977a 	slli	r3,r3,29
 4013ccc:	2080022c 	andhi	r2,r4,8
 4013cd0:	1c62b03a 	or	r17,r3,r17
 4013cd4:	10000826 	beq	r2,zero,4013cf8 <__subdf3+0x75c>
 4013cd8:	2812d0fa 	srli	r9,r5,3
 4013cdc:	4880022c 	andhi	r2,r9,8
 4013ce0:	1000051e 	bne	r2,zero,4013cf8 <__subdf3+0x75c>
 4013ce4:	300cd0fa 	srli	r6,r6,3
 4013ce8:	2804977a 	slli	r2,r5,29
 4013cec:	4809883a 	mov	r4,r9
 4013cf0:	3825883a 	mov	r18,r7
 4013cf4:	11a2b03a 	or	r17,r2,r6
 4013cf8:	8806d77a 	srli	r3,r17,29
 4013cfc:	200890fa 	slli	r4,r4,3
 4013d00:	882290fa 	slli	r17,r17,3
 4013d04:	0401ffc4 	movi	r16,2047
 4013d08:	1906b03a 	or	r3,r3,r4
 4013d0c:	003e4406 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013d10:	2984b03a 	or	r2,r5,r6
 4013d14:	103e4226 	beq	r2,zero,4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013d18:	8989c83a 	sub	r4,r17,r6
 4013d1c:	8911803a 	cmpltu	r8,r17,r4
 4013d20:	1945c83a 	sub	r2,r3,r5
 4013d24:	1205c83a 	sub	r2,r2,r8
 4013d28:	1200202c 	andhi	r8,r2,128
 4013d2c:	403e9a26 	beq	r8,zero,4013798 <__alt_mem_onchip_memory2_0+0xfc00e5d8>
 4013d30:	3463c83a 	sub	r17,r6,r17
 4013d34:	28c5c83a 	sub	r2,r5,r3
 4013d38:	344d803a 	cmpltu	r6,r6,r17
 4013d3c:	1187c83a 	sub	r3,r2,r6
 4013d40:	3825883a 	mov	r18,r7
 4013d44:	003e3606 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013d48:	0101ffc4 	movi	r4,2047
 4013d4c:	493fc71e 	bne	r9,r4,4013c6c <__alt_mem_onchip_memory2_0+0xfc00eaac>
 4013d50:	2807883a 	mov	r3,r5
 4013d54:	3023883a 	mov	r17,r6
 4013d58:	4821883a 	mov	r16,r9
 4013d5c:	003e3006 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013d60:	10003626 	beq	r2,zero,4013e3c <__subdf3+0x8a0>
 4013d64:	2984b03a 	or	r2,r5,r6
 4013d68:	10001726 	beq	r2,zero,4013dc8 <__subdf3+0x82c>
 4013d6c:	1808d0fa 	srli	r4,r3,3
 4013d70:	8822d0fa 	srli	r17,r17,3
 4013d74:	1806977a 	slli	r3,r3,29
 4013d78:	2080022c 	andhi	r2,r4,8
 4013d7c:	1c62b03a 	or	r17,r3,r17
 4013d80:	10000726 	beq	r2,zero,4013da0 <__subdf3+0x804>
 4013d84:	2812d0fa 	srli	r9,r5,3
 4013d88:	4880022c 	andhi	r2,r9,8
 4013d8c:	1000041e 	bne	r2,zero,4013da0 <__subdf3+0x804>
 4013d90:	300cd0fa 	srli	r6,r6,3
 4013d94:	2804977a 	slli	r2,r5,29
 4013d98:	4809883a 	mov	r4,r9
 4013d9c:	11a2b03a 	or	r17,r2,r6
 4013da0:	8806d77a 	srli	r3,r17,29
 4013da4:	200890fa 	slli	r4,r4,3
 4013da8:	882290fa 	slli	r17,r17,3
 4013dac:	3825883a 	mov	r18,r7
 4013db0:	1906b03a 	or	r3,r3,r4
 4013db4:	0401ffc4 	movi	r16,2047
 4013db8:	003e1906 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013dbc:	000b883a 	mov	r5,zero
 4013dc0:	0005883a 	mov	r2,zero
 4013dc4:	003e2e06 	br	4013680 <__alt_mem_onchip_memory2_0+0xfc00e4c0>
 4013dc8:	0401ffc4 	movi	r16,2047
 4013dcc:	003e1406 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013dd0:	0005883a 	mov	r2,zero
 4013dd4:	003f7506 	br	4013bac <__alt_mem_onchip_memory2_0+0xfc00e9ec>
 4013dd8:	0005883a 	mov	r2,zero
 4013ddc:	0009883a 	mov	r4,zero
 4013de0:	003e7806 	br	40137c4 <__alt_mem_onchip_memory2_0+0xfc00e604>
 4013de4:	123ff804 	addi	r8,r2,-32
 4013de8:	01000804 	movi	r4,32
 4013dec:	1a10d83a 	srl	r8,r3,r8
 4013df0:	11002526 	beq	r2,r4,4013e88 <__subdf3+0x8ec>
 4013df4:	01001004 	movi	r4,64
 4013df8:	2085c83a 	sub	r2,r4,r2
 4013dfc:	1884983a 	sll	r2,r3,r2
 4013e00:	1444b03a 	or	r2,r2,r17
 4013e04:	1004c03a 	cmpne	r2,r2,zero
 4013e08:	40a2b03a 	or	r17,r8,r2
 4013e0c:	0005883a 	mov	r2,zero
 4013e10:	003f1606 	br	4013a6c <__alt_mem_onchip_memory2_0+0xfc00e8ac>
 4013e14:	02000434 	movhi	r8,16
 4013e18:	0009883a 	mov	r4,zero
 4013e1c:	423fffc4 	addi	r8,r8,-1
 4013e20:	00bfffc4 	movi	r2,-1
 4013e24:	0401ffc4 	movi	r16,2047
 4013e28:	003e6606 	br	40137c4 <__alt_mem_onchip_memory2_0+0xfc00e604>
 4013e2c:	1c62b03a 	or	r17,r3,r17
 4013e30:	8822c03a 	cmpne	r17,r17,zero
 4013e34:	0005883a 	mov	r2,zero
 4013e38:	003f9906 	br	4013ca0 <__alt_mem_onchip_memory2_0+0xfc00eae0>
 4013e3c:	2807883a 	mov	r3,r5
 4013e40:	3023883a 	mov	r17,r6
 4013e44:	0401ffc4 	movi	r16,2047
 4013e48:	003df506 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013e4c:	2807883a 	mov	r3,r5
 4013e50:	3023883a 	mov	r17,r6
 4013e54:	003df206 	br	4013620 <__alt_mem_onchip_memory2_0+0xfc00e460>
 4013e58:	123ff804 	addi	r8,r2,-32
 4013e5c:	01000804 	movi	r4,32
 4013e60:	1a10d83a 	srl	r8,r3,r8
 4013e64:	11000a26 	beq	r2,r4,4013e90 <__subdf3+0x8f4>
 4013e68:	01001004 	movi	r4,64
 4013e6c:	2085c83a 	sub	r2,r4,r2
 4013e70:	1884983a 	sll	r2,r3,r2
 4013e74:	1444b03a 	or	r2,r2,r17
 4013e78:	1004c03a 	cmpne	r2,r2,zero
 4013e7c:	40a2b03a 	or	r17,r8,r2
 4013e80:	0005883a 	mov	r2,zero
 4013e84:	003f8606 	br	4013ca0 <__alt_mem_onchip_memory2_0+0xfc00eae0>
 4013e88:	0005883a 	mov	r2,zero
 4013e8c:	003fdc06 	br	4013e00 <__alt_mem_onchip_memory2_0+0xfc00ec40>
 4013e90:	0005883a 	mov	r2,zero
 4013e94:	003ff706 	br	4013e74 <__alt_mem_onchip_memory2_0+0xfc00ecb4>

04013e98 <__fixdfsi>:
 4013e98:	280cd53a 	srli	r6,r5,20
 4013e9c:	00c00434 	movhi	r3,16
 4013ea0:	18ffffc4 	addi	r3,r3,-1
 4013ea4:	3181ffcc 	andi	r6,r6,2047
 4013ea8:	01c0ff84 	movi	r7,1022
 4013eac:	28c6703a 	and	r3,r5,r3
 4013eb0:	280ad7fa 	srli	r5,r5,31
 4013eb4:	3980120e 	bge	r7,r6,4013f00 <__fixdfsi+0x68>
 4013eb8:	00810744 	movi	r2,1053
 4013ebc:	11800c16 	blt	r2,r6,4013ef0 <__fixdfsi+0x58>
 4013ec0:	00810cc4 	movi	r2,1075
 4013ec4:	1185c83a 	sub	r2,r2,r6
 4013ec8:	01c007c4 	movi	r7,31
 4013ecc:	18c00434 	orhi	r3,r3,16
 4013ed0:	38800d16 	blt	r7,r2,4013f08 <__fixdfsi+0x70>
 4013ed4:	31befb44 	addi	r6,r6,-1043
 4013ed8:	2084d83a 	srl	r2,r4,r2
 4013edc:	1986983a 	sll	r3,r3,r6
 4013ee0:	1884b03a 	or	r2,r3,r2
 4013ee4:	28000726 	beq	r5,zero,4013f04 <__fixdfsi+0x6c>
 4013ee8:	0085c83a 	sub	r2,zero,r2
 4013eec:	f800283a 	ret
 4013ef0:	00a00034 	movhi	r2,32768
 4013ef4:	10bfffc4 	addi	r2,r2,-1
 4013ef8:	2885883a 	add	r2,r5,r2
 4013efc:	f800283a 	ret
 4013f00:	0005883a 	mov	r2,zero
 4013f04:	f800283a 	ret
 4013f08:	008104c4 	movi	r2,1043
 4013f0c:	1185c83a 	sub	r2,r2,r6
 4013f10:	1884d83a 	srl	r2,r3,r2
 4013f14:	003ff306 	br	4013ee4 <__alt_mem_onchip_memory2_0+0xfc00ed24>

04013f18 <__floatsidf>:
 4013f18:	defffd04 	addi	sp,sp,-12
 4013f1c:	dfc00215 	stw	ra,8(sp)
 4013f20:	dc400115 	stw	r17,4(sp)
 4013f24:	dc000015 	stw	r16,0(sp)
 4013f28:	20002b26 	beq	r4,zero,4013fd8 <__floatsidf+0xc0>
 4013f2c:	2023883a 	mov	r17,r4
 4013f30:	2020d7fa 	srli	r16,r4,31
 4013f34:	20002d16 	blt	r4,zero,4013fec <__floatsidf+0xd4>
 4013f38:	8809883a 	mov	r4,r17
 4013f3c:	4013ff40 	call	4013ff4 <__clzsi2>
 4013f40:	01410784 	movi	r5,1054
 4013f44:	288bc83a 	sub	r5,r5,r2
 4013f48:	01010cc4 	movi	r4,1075
 4013f4c:	2149c83a 	sub	r4,r4,r5
 4013f50:	00c007c4 	movi	r3,31
 4013f54:	1900160e 	bge	r3,r4,4013fb0 <__floatsidf+0x98>
 4013f58:	00c104c4 	movi	r3,1043
 4013f5c:	1947c83a 	sub	r3,r3,r5
 4013f60:	88c6983a 	sll	r3,r17,r3
 4013f64:	00800434 	movhi	r2,16
 4013f68:	10bfffc4 	addi	r2,r2,-1
 4013f6c:	1886703a 	and	r3,r3,r2
 4013f70:	2941ffcc 	andi	r5,r5,2047
 4013f74:	800d883a 	mov	r6,r16
 4013f78:	0005883a 	mov	r2,zero
 4013f7c:	280a953a 	slli	r5,r5,20
 4013f80:	31803fcc 	andi	r6,r6,255
 4013f84:	01000434 	movhi	r4,16
 4013f88:	300c97fa 	slli	r6,r6,31
 4013f8c:	213fffc4 	addi	r4,r4,-1
 4013f90:	1906703a 	and	r3,r3,r4
 4013f94:	1946b03a 	or	r3,r3,r5
 4013f98:	1986b03a 	or	r3,r3,r6
 4013f9c:	dfc00217 	ldw	ra,8(sp)
 4013fa0:	dc400117 	ldw	r17,4(sp)
 4013fa4:	dc000017 	ldw	r16,0(sp)
 4013fa8:	dec00304 	addi	sp,sp,12
 4013fac:	f800283a 	ret
 4013fb0:	00c002c4 	movi	r3,11
 4013fb4:	1887c83a 	sub	r3,r3,r2
 4013fb8:	88c6d83a 	srl	r3,r17,r3
 4013fbc:	8904983a 	sll	r2,r17,r4
 4013fc0:	01000434 	movhi	r4,16
 4013fc4:	213fffc4 	addi	r4,r4,-1
 4013fc8:	2941ffcc 	andi	r5,r5,2047
 4013fcc:	1906703a 	and	r3,r3,r4
 4013fd0:	800d883a 	mov	r6,r16
 4013fd4:	003fe906 	br	4013f7c <__alt_mem_onchip_memory2_0+0xfc00edbc>
 4013fd8:	000d883a 	mov	r6,zero
 4013fdc:	000b883a 	mov	r5,zero
 4013fe0:	0007883a 	mov	r3,zero
 4013fe4:	0005883a 	mov	r2,zero
 4013fe8:	003fe406 	br	4013f7c <__alt_mem_onchip_memory2_0+0xfc00edbc>
 4013fec:	0123c83a 	sub	r17,zero,r4
 4013ff0:	003fd106 	br	4013f38 <__alt_mem_onchip_memory2_0+0xfc00ed78>

04013ff4 <__clzsi2>:
 4013ff4:	00bfffd4 	movui	r2,65535
 4013ff8:	11000536 	bltu	r2,r4,4014010 <__clzsi2+0x1c>
 4013ffc:	00803fc4 	movi	r2,255
 4014000:	11000f36 	bltu	r2,r4,4014040 <__clzsi2+0x4c>
 4014004:	00800804 	movi	r2,32
 4014008:	0007883a 	mov	r3,zero
 401400c:	00000506 	br	4014024 <__clzsi2+0x30>
 4014010:	00804034 	movhi	r2,256
 4014014:	10bfffc4 	addi	r2,r2,-1
 4014018:	11000c2e 	bgeu	r2,r4,401404c <__clzsi2+0x58>
 401401c:	00800204 	movi	r2,8
 4014020:	00c00604 	movi	r3,24
 4014024:	20c8d83a 	srl	r4,r4,r3
 4014028:	00c100b4 	movhi	r3,1026
 401402c:	18d53984 	addi	r3,r3,21734
 4014030:	1909883a 	add	r4,r3,r4
 4014034:	20c00003 	ldbu	r3,0(r4)
 4014038:	10c5c83a 	sub	r2,r2,r3
 401403c:	f800283a 	ret
 4014040:	00800604 	movi	r2,24
 4014044:	00c00204 	movi	r3,8
 4014048:	003ff606 	br	4014024 <__alt_mem_onchip_memory2_0+0xfc00ee64>
 401404c:	00800404 	movi	r2,16
 4014050:	1007883a 	mov	r3,r2
 4014054:	003ff306 	br	4014024 <__alt_mem_onchip_memory2_0+0xfc00ee64>

04014058 <__errno>:
 4014058:	008100b4 	movhi	r2,1026
 401405c:	109ddd04 	addi	r2,r2,30580
 4014060:	10800017 	ldw	r2,0(r2)
 4014064:	f800283a 	ret

04014068 <_printf_r>:
 4014068:	defffd04 	addi	sp,sp,-12
 401406c:	2805883a 	mov	r2,r5
 4014070:	dfc00015 	stw	ra,0(sp)
 4014074:	d9800115 	stw	r6,4(sp)
 4014078:	d9c00215 	stw	r7,8(sp)
 401407c:	21400217 	ldw	r5,8(r4)
 4014080:	d9c00104 	addi	r7,sp,4
 4014084:	100d883a 	mov	r6,r2
 4014088:	40166ac0 	call	40166ac <___vfprintf_internal_r>
 401408c:	dfc00017 	ldw	ra,0(sp)
 4014090:	dec00304 	addi	sp,sp,12
 4014094:	f800283a 	ret

04014098 <printf>:
 4014098:	defffc04 	addi	sp,sp,-16
 401409c:	dfc00015 	stw	ra,0(sp)
 40140a0:	d9400115 	stw	r5,4(sp)
 40140a4:	d9800215 	stw	r6,8(sp)
 40140a8:	d9c00315 	stw	r7,12(sp)
 40140ac:	008100b4 	movhi	r2,1026
 40140b0:	109ddd04 	addi	r2,r2,30580
 40140b4:	10800017 	ldw	r2,0(r2)
 40140b8:	200b883a 	mov	r5,r4
 40140bc:	d9800104 	addi	r6,sp,4
 40140c0:	11000217 	ldw	r4,8(r2)
 40140c4:	40189880 	call	4018988 <__vfprintf_internal>
 40140c8:	dfc00017 	ldw	ra,0(sp)
 40140cc:	dec00404 	addi	sp,sp,16
 40140d0:	f800283a 	ret

040140d4 <_putchar_r>:
 40140d4:	21800217 	ldw	r6,8(r4)
 40140d8:	401d5a81 	jmpi	401d5a8 <_putc_r>

040140dc <putchar>:
 40140dc:	008100b4 	movhi	r2,1026
 40140e0:	109ddd04 	addi	r2,r2,30580
 40140e4:	200b883a 	mov	r5,r4
 40140e8:	11000017 	ldw	r4,0(r2)
 40140ec:	21800217 	ldw	r6,8(r4)
 40140f0:	401d5a81 	jmpi	401d5a8 <_putc_r>

040140f4 <_puts_r>:
 40140f4:	defff604 	addi	sp,sp,-40
 40140f8:	dc000715 	stw	r16,28(sp)
 40140fc:	2021883a 	mov	r16,r4
 4014100:	2809883a 	mov	r4,r5
 4014104:	dc400815 	stw	r17,32(sp)
 4014108:	dfc00915 	stw	ra,36(sp)
 401410c:	2823883a 	mov	r17,r5
 4014110:	40143080 	call	4014308 <strlen>
 4014114:	10c00044 	addi	r3,r2,1
 4014118:	d8800115 	stw	r2,4(sp)
 401411c:	008100b4 	movhi	r2,1026
 4014120:	10957b04 	addi	r2,r2,21996
 4014124:	d8800215 	stw	r2,8(sp)
 4014128:	00800044 	movi	r2,1
 401412c:	d8800315 	stw	r2,12(sp)
 4014130:	00800084 	movi	r2,2
 4014134:	dc400015 	stw	r17,0(sp)
 4014138:	d8c00615 	stw	r3,24(sp)
 401413c:	dec00415 	stw	sp,16(sp)
 4014140:	d8800515 	stw	r2,20(sp)
 4014144:	80000226 	beq	r16,zero,4014150 <_puts_r+0x5c>
 4014148:	80800e17 	ldw	r2,56(r16)
 401414c:	10001426 	beq	r2,zero,40141a0 <_puts_r+0xac>
 4014150:	81400217 	ldw	r5,8(r16)
 4014154:	2880030b 	ldhu	r2,12(r5)
 4014158:	10c8000c 	andi	r3,r2,8192
 401415c:	1800061e 	bne	r3,zero,4014178 <_puts_r+0x84>
 4014160:	29001917 	ldw	r4,100(r5)
 4014164:	00f7ffc4 	movi	r3,-8193
 4014168:	10880014 	ori	r2,r2,8192
 401416c:	20c6703a 	and	r3,r4,r3
 4014170:	2880030d 	sth	r2,12(r5)
 4014174:	28c01915 	stw	r3,100(r5)
 4014178:	d9800404 	addi	r6,sp,16
 401417c:	8009883a 	mov	r4,r16
 4014180:	401aef00 	call	401aef0 <__sfvwrite_r>
 4014184:	1000091e 	bne	r2,zero,40141ac <_puts_r+0xb8>
 4014188:	00800284 	movi	r2,10
 401418c:	dfc00917 	ldw	ra,36(sp)
 4014190:	dc400817 	ldw	r17,32(sp)
 4014194:	dc000717 	ldw	r16,28(sp)
 4014198:	dec00a04 	addi	sp,sp,40
 401419c:	f800283a 	ret
 40141a0:	8009883a 	mov	r4,r16
 40141a4:	401aa6c0 	call	401aa6c <__sinit>
 40141a8:	003fe906 	br	4014150 <__alt_mem_onchip_memory2_0+0xfc00ef90>
 40141ac:	00bfffc4 	movi	r2,-1
 40141b0:	003ff606 	br	401418c <__alt_mem_onchip_memory2_0+0xfc00efcc>

040141b4 <puts>:
 40141b4:	008100b4 	movhi	r2,1026
 40141b8:	109ddd04 	addi	r2,r2,30580
 40141bc:	200b883a 	mov	r5,r4
 40141c0:	11000017 	ldw	r4,0(r2)
 40141c4:	40140f41 	jmpi	40140f4 <_puts_r>

040141c8 <srand>:
 40141c8:	008100b4 	movhi	r2,1026
 40141cc:	109ddd04 	addi	r2,r2,30580
 40141d0:	10800017 	ldw	r2,0(r2)
 40141d4:	11002915 	stw	r4,164(r2)
 40141d8:	10002a15 	stw	zero,168(r2)
 40141dc:	f800283a 	ret

040141e0 <rand>:
 40141e0:	008100b4 	movhi	r2,1026
 40141e4:	defffe04 	addi	sp,sp,-8
 40141e8:	109ddd04 	addi	r2,r2,30580
 40141ec:	dc000015 	stw	r16,0(sp)
 40141f0:	14000017 	ldw	r16,0(r2)
 40141f4:	dfc00115 	stw	ra,4(sp)
 40141f8:	01932574 	movhi	r6,19605
 40141fc:	81002917 	ldw	r4,164(r16)
 4014200:	81402a17 	ldw	r5,168(r16)
 4014204:	01d614b4 	movhi	r7,22610
 4014208:	319fcb44 	addi	r6,r6,32557
 401420c:	39fd0b44 	addi	r7,r7,-3027
 4014210:	40214940 	call	4021494 <__muldi3>
 4014214:	11000044 	addi	r4,r2,1
 4014218:	2085803a 	cmpltu	r2,r4,r2
 401421c:	10c7883a 	add	r3,r2,r3
 4014220:	00a00034 	movhi	r2,32768
 4014224:	10bfffc4 	addi	r2,r2,-1
 4014228:	1884703a 	and	r2,r3,r2
 401422c:	81002915 	stw	r4,164(r16)
 4014230:	80c02a15 	stw	r3,168(r16)
 4014234:	dfc00117 	ldw	ra,4(sp)
 4014238:	dc000017 	ldw	r16,0(sp)
 401423c:	dec00204 	addi	sp,sp,8
 4014240:	f800283a 	ret

04014244 <_sprintf_r>:
 4014244:	deffe404 	addi	sp,sp,-112
 4014248:	2807883a 	mov	r3,r5
 401424c:	dfc01a15 	stw	ra,104(sp)
 4014250:	d9c01b15 	stw	r7,108(sp)
 4014254:	00a00034 	movhi	r2,32768
 4014258:	10bfffc4 	addi	r2,r2,-1
 401425c:	02008204 	movi	r8,520
 4014260:	d8800215 	stw	r2,8(sp)
 4014264:	d8800515 	stw	r2,20(sp)
 4014268:	d9c01b04 	addi	r7,sp,108
 401426c:	d80b883a 	mov	r5,sp
 4014270:	00bfffc4 	movi	r2,-1
 4014274:	d8c00015 	stw	r3,0(sp)
 4014278:	d8c00415 	stw	r3,16(sp)
 401427c:	da00030d 	sth	r8,12(sp)
 4014280:	d880038d 	sth	r2,14(sp)
 4014284:	40143a00 	call	40143a0 <___svfprintf_internal_r>
 4014288:	d8c00017 	ldw	r3,0(sp)
 401428c:	18000005 	stb	zero,0(r3)
 4014290:	dfc01a17 	ldw	ra,104(sp)
 4014294:	dec01c04 	addi	sp,sp,112
 4014298:	f800283a 	ret

0401429c <sprintf>:
 401429c:	deffe304 	addi	sp,sp,-116
 40142a0:	2007883a 	mov	r3,r4
 40142a4:	dfc01a15 	stw	ra,104(sp)
 40142a8:	d9801b15 	stw	r6,108(sp)
 40142ac:	d9c01c15 	stw	r7,112(sp)
 40142b0:	010100b4 	movhi	r4,1026
 40142b4:	211ddd04 	addi	r4,r4,30580
 40142b8:	21000017 	ldw	r4,0(r4)
 40142bc:	00a00034 	movhi	r2,32768
 40142c0:	10bfffc4 	addi	r2,r2,-1
 40142c4:	280d883a 	mov	r6,r5
 40142c8:	02008204 	movi	r8,520
 40142cc:	d8800215 	stw	r2,8(sp)
 40142d0:	d8800515 	stw	r2,20(sp)
 40142d4:	d9c01b04 	addi	r7,sp,108
 40142d8:	d80b883a 	mov	r5,sp
 40142dc:	00bfffc4 	movi	r2,-1
 40142e0:	d8c00015 	stw	r3,0(sp)
 40142e4:	d8c00415 	stw	r3,16(sp)
 40142e8:	da00030d 	sth	r8,12(sp)
 40142ec:	d880038d 	sth	r2,14(sp)
 40142f0:	40143a00 	call	40143a0 <___svfprintf_internal_r>
 40142f4:	d8c00017 	ldw	r3,0(sp)
 40142f8:	18000005 	stb	zero,0(r3)
 40142fc:	dfc01a17 	ldw	ra,104(sp)
 4014300:	dec01d04 	addi	sp,sp,116
 4014304:	f800283a 	ret

04014308 <strlen>:
 4014308:	208000cc 	andi	r2,r4,3
 401430c:	10002026 	beq	r2,zero,4014390 <strlen+0x88>
 4014310:	20800007 	ldb	r2,0(r4)
 4014314:	10002026 	beq	r2,zero,4014398 <strlen+0x90>
 4014318:	2005883a 	mov	r2,r4
 401431c:	00000206 	br	4014328 <strlen+0x20>
 4014320:	10c00007 	ldb	r3,0(r2)
 4014324:	18001826 	beq	r3,zero,4014388 <strlen+0x80>
 4014328:	10800044 	addi	r2,r2,1
 401432c:	10c000cc 	andi	r3,r2,3
 4014330:	183ffb1e 	bne	r3,zero,4014320 <__alt_mem_onchip_memory2_0+0xfc00f160>
 4014334:	10c00017 	ldw	r3,0(r2)
 4014338:	01ffbff4 	movhi	r7,65279
 401433c:	39ffbfc4 	addi	r7,r7,-257
 4014340:	00ca303a 	nor	r5,zero,r3
 4014344:	01a02074 	movhi	r6,32897
 4014348:	19c7883a 	add	r3,r3,r7
 401434c:	31a02004 	addi	r6,r6,-32640
 4014350:	1946703a 	and	r3,r3,r5
 4014354:	1986703a 	and	r3,r3,r6
 4014358:	1800091e 	bne	r3,zero,4014380 <strlen+0x78>
 401435c:	10800104 	addi	r2,r2,4
 4014360:	10c00017 	ldw	r3,0(r2)
 4014364:	19cb883a 	add	r5,r3,r7
 4014368:	00c6303a 	nor	r3,zero,r3
 401436c:	28c6703a 	and	r3,r5,r3
 4014370:	1986703a 	and	r3,r3,r6
 4014374:	183ff926 	beq	r3,zero,401435c <__alt_mem_onchip_memory2_0+0xfc00f19c>
 4014378:	00000106 	br	4014380 <strlen+0x78>
 401437c:	10800044 	addi	r2,r2,1
 4014380:	10c00007 	ldb	r3,0(r2)
 4014384:	183ffd1e 	bne	r3,zero,401437c <__alt_mem_onchip_memory2_0+0xfc00f1bc>
 4014388:	1105c83a 	sub	r2,r2,r4
 401438c:	f800283a 	ret
 4014390:	2005883a 	mov	r2,r4
 4014394:	003fe706 	br	4014334 <__alt_mem_onchip_memory2_0+0xfc00f174>
 4014398:	0005883a 	mov	r2,zero
 401439c:	f800283a 	ret

040143a0 <___svfprintf_internal_r>:
 40143a0:	deffb704 	addi	sp,sp,-292
 40143a4:	dfc04815 	stw	ra,288(sp)
 40143a8:	ddc04615 	stw	r23,280(sp)
 40143ac:	d9402d15 	stw	r5,180(sp)
 40143b0:	d9003915 	stw	r4,228(sp)
 40143b4:	302f883a 	mov	r23,r6
 40143b8:	d9c02e15 	stw	r7,184(sp)
 40143bc:	df004715 	stw	fp,284(sp)
 40143c0:	dd804515 	stw	r22,276(sp)
 40143c4:	dd404415 	stw	r21,272(sp)
 40143c8:	dd004315 	stw	r20,268(sp)
 40143cc:	dcc04215 	stw	r19,264(sp)
 40143d0:	dc804115 	stw	r18,260(sp)
 40143d4:	dc404015 	stw	r17,256(sp)
 40143d8:	dc003f15 	stw	r16,252(sp)
 40143dc:	401b6480 	call	401b648 <_localeconv_r>
 40143e0:	10800017 	ldw	r2,0(r2)
 40143e4:	1009883a 	mov	r4,r2
 40143e8:	d8803415 	stw	r2,208(sp)
 40143ec:	40143080 	call	4014308 <strlen>
 40143f0:	d8c02d17 	ldw	r3,180(sp)
 40143f4:	d8803815 	stw	r2,224(sp)
 40143f8:	1880030b 	ldhu	r2,12(r3)
 40143fc:	1080200c 	andi	r2,r2,128
 4014400:	10000226 	beq	r2,zero,401440c <___svfprintf_internal_r+0x6c>
 4014404:	18800417 	ldw	r2,16(r3)
 4014408:	1006b126 	beq	r2,zero,4015ed0 <___svfprintf_internal_r+0x1b30>
 401440c:	dcc03917 	ldw	r19,228(sp)
 4014410:	d8c00404 	addi	r3,sp,16
 4014414:	054100b4 	movhi	r21,1026
 4014418:	d9001e04 	addi	r4,sp,120
 401441c:	ad558bc4 	addi	r21,r21,22063
 4014420:	d8c01e15 	stw	r3,120(sp)
 4014424:	d8002015 	stw	zero,128(sp)
 4014428:	d8001f15 	stw	zero,124(sp)
 401442c:	d8003315 	stw	zero,204(sp)
 4014430:	d8003615 	stw	zero,216(sp)
 4014434:	d8003715 	stw	zero,220(sp)
 4014438:	1811883a 	mov	r8,r3
 401443c:	d8003a15 	stw	zero,232(sp)
 4014440:	d8003b15 	stw	zero,236(sp)
 4014444:	d8002f15 	stw	zero,188(sp)
 4014448:	d9002815 	stw	r4,160(sp)
 401444c:	b8800007 	ldb	r2,0(r23)
 4014450:	10027726 	beq	r2,zero,4014e30 <___svfprintf_internal_r+0xa90>
 4014454:	00c00944 	movi	r3,37
 4014458:	b823883a 	mov	r17,r23
 401445c:	10c0021e 	bne	r2,r3,4014468 <___svfprintf_internal_r+0xc8>
 4014460:	00001406 	br	40144b4 <___svfprintf_internal_r+0x114>
 4014464:	10c00326 	beq	r2,r3,4014474 <___svfprintf_internal_r+0xd4>
 4014468:	8c400044 	addi	r17,r17,1
 401446c:	88800007 	ldb	r2,0(r17)
 4014470:	103ffc1e 	bne	r2,zero,4014464 <__alt_mem_onchip_memory2_0+0xfc00f2a4>
 4014474:	8de1c83a 	sub	r16,r17,r23
 4014478:	80000e26 	beq	r16,zero,40144b4 <___svfprintf_internal_r+0x114>
 401447c:	d8c02017 	ldw	r3,128(sp)
 4014480:	d8801f17 	ldw	r2,124(sp)
 4014484:	45c00015 	stw	r23,0(r8)
 4014488:	1c07883a 	add	r3,r3,r16
 401448c:	10800044 	addi	r2,r2,1
 4014490:	d8c02015 	stw	r3,128(sp)
 4014494:	44000115 	stw	r16,4(r8)
 4014498:	d8801f15 	stw	r2,124(sp)
 401449c:	00c001c4 	movi	r3,7
 40144a0:	18809916 	blt	r3,r2,4014708 <___svfprintf_internal_r+0x368>
 40144a4:	42000204 	addi	r8,r8,8
 40144a8:	d9402f17 	ldw	r5,188(sp)
 40144ac:	2c0b883a 	add	r5,r5,r16
 40144b0:	d9402f15 	stw	r5,188(sp)
 40144b4:	88800007 	ldb	r2,0(r17)
 40144b8:	10009a26 	beq	r2,zero,4014724 <___svfprintf_internal_r+0x384>
 40144bc:	8dc00044 	addi	r23,r17,1
 40144c0:	8c400047 	ldb	r17,1(r17)
 40144c4:	0021883a 	mov	r16,zero
 40144c8:	00bfffc4 	movi	r2,-1
 40144cc:	0025883a 	mov	r18,zero
 40144d0:	dc002905 	stb	r16,164(sp)
 40144d4:	d8002785 	stb	zero,158(sp)
 40144d8:	d8002b05 	stb	zero,172(sp)
 40144dc:	d8802a15 	stw	r2,168(sp)
 40144e0:	d8003115 	stw	zero,196(sp)
 40144e4:	05001604 	movi	r20,88
 40144e8:	05800244 	movi	r22,9
 40144ec:	4039883a 	mov	fp,r8
 40144f0:	9021883a 	mov	r16,r18
 40144f4:	bdc00044 	addi	r23,r23,1
 40144f8:	88bff804 	addi	r2,r17,-32
 40144fc:	a0831e36 	bltu	r20,r2,4015178 <___svfprintf_internal_r+0xdd8>
 4014500:	100490ba 	slli	r2,r2,2
 4014504:	00c10074 	movhi	r3,1025
 4014508:	18d14604 	addi	r3,r3,17688
 401450c:	10c5883a 	add	r2,r2,r3
 4014510:	10800017 	ldw	r2,0(r2)
 4014514:	1000683a 	jmp	r2
 4014518:	040150c0 	call	40150c <__alt_mem_sdram-0x3bfeaf4>
 401451c:	04015178 	rdprs	r16,zero,1349
 4014520:	04015178 	rdprs	r16,zero,1349
 4014524:	040150b4 	movhi	r16,1346
 4014528:	04015178 	rdprs	r16,zero,1349
 401452c:	04015178 	rdprs	r16,zero,1349
 4014530:	04015178 	rdprs	r16,zero,1349
 4014534:	04015178 	rdprs	r16,zero,1349
 4014538:	04015178 	rdprs	r16,zero,1349
 401453c:	04015178 	rdprs	r16,zero,1349
 4014540:	04014780 	call	401478 <__alt_mem_sdram-0x3bfeb88>
 4014544:	04014fc4 	movi	r16,1343
 4014548:	04015178 	rdprs	r16,zero,1349
 401454c:	0401468c 	andi	r16,zero,1306
 4014550:	040147a4 	muli	r16,zero,1310
 4014554:	04015178 	rdprs	r16,zero,1349
 4014558:	04014830 	cmpltui	r16,zero,1312
 401455c:	040147f4 	movhi	r16,1311
 4014560:	040147f4 	movhi	r16,1311
 4014564:	040147f4 	movhi	r16,1311
 4014568:	040147f4 	movhi	r16,1311
 401456c:	040147f4 	movhi	r16,1311
 4014570:	040147f4 	movhi	r16,1311
 4014574:	040147f4 	movhi	r16,1311
 4014578:	040147f4 	movhi	r16,1311
 401457c:	040147f4 	movhi	r16,1311
 4014580:	04015178 	rdprs	r16,zero,1349
 4014584:	04015178 	rdprs	r16,zero,1349
 4014588:	04015178 	rdprs	r16,zero,1349
 401458c:	04015178 	rdprs	r16,zero,1349
 4014590:	04015178 	rdprs	r16,zero,1349
 4014594:	04015178 	rdprs	r16,zero,1349
 4014598:	04015178 	rdprs	r16,zero,1349
 401459c:	04015178 	rdprs	r16,zero,1349
 40145a0:	04015178 	rdprs	r16,zero,1349
 40145a4:	04015178 	rdprs	r16,zero,1349
 40145a8:	040148f4 	movhi	r16,1315
 40145ac:	0401483c 	xorhi	r16,zero,1312
 40145b0:	04015178 	rdprs	r16,zero,1349
 40145b4:	0401483c 	xorhi	r16,zero,1312
 40145b8:	04015178 	rdprs	r16,zero,1349
 40145bc:	04015178 	rdprs	r16,zero,1349
 40145c0:	04015178 	rdprs	r16,zero,1349
 40145c4:	04015178 	rdprs	r16,zero,1349
 40145c8:	040148e8 	cmpgeui	r16,zero,1315
 40145cc:	04015178 	rdprs	r16,zero,1349
 40145d0:	04015178 	rdprs	r16,zero,1349
 40145d4:	040149bc 	xorhi	r16,zero,1318
 40145d8:	04015178 	rdprs	r16,zero,1349
 40145dc:	04015178 	rdprs	r16,zero,1349
 40145e0:	04015178 	rdprs	r16,zero,1349
 40145e4:	04015178 	rdprs	r16,zero,1349
 40145e8:	04015178 	rdprs	r16,zero,1349
 40145ec:	04014e38 	rdprs	r16,zero,1336
 40145f0:	04015178 	rdprs	r16,zero,1349
 40145f4:	04015178 	rdprs	r16,zero,1349
 40145f8:	04014ea4 	muli	r16,zero,1338
 40145fc:	04015178 	rdprs	r16,zero,1349
 4014600:	04015178 	rdprs	r16,zero,1349
 4014604:	04015178 	rdprs	r16,zero,1349
 4014608:	04015178 	rdprs	r16,zero,1349
 401460c:	04015178 	rdprs	r16,zero,1349
 4014610:	04015178 	rdprs	r16,zero,1349
 4014614:	04015178 	rdprs	r16,zero,1349
 4014618:	04015178 	rdprs	r16,zero,1349
 401461c:	04015178 	rdprs	r16,zero,1349
 4014620:	04015178 	rdprs	r16,zero,1349
 4014624:	04014f60 	cmpeqi	r16,zero,1341
 4014628:	040150e0 	cmpeqi	r16,zero,1347
 401462c:	0401483c 	xorhi	r16,zero,1312
 4014630:	0401483c 	xorhi	r16,zero,1312
 4014634:	0401483c 	xorhi	r16,zero,1312
 4014638:	04015154 	movui	r16,1349
 401463c:	040150e0 	cmpeqi	r16,zero,1347
 4014640:	04015178 	rdprs	r16,zero,1349
 4014644:	04015178 	rdprs	r16,zero,1349
 4014648:	04015100 	call	401510 <__alt_mem_sdram-0x3bfeaf0>
 401464c:	04015178 	rdprs	r16,zero,1349
 4014650:	04015114 	movui	r16,1348
 4014654:	04014fa4 	muli	r16,zero,1342
 4014658:	04014698 	cmpnei	r16,zero,1306
 401465c:	04014fdc 	xori	r16,zero,1343
 4014660:	04015178 	rdprs	r16,zero,1349
 4014664:	04014fe8 	cmpgeui	r16,zero,1343
 4014668:	04015178 	rdprs	r16,zero,1349
 401466c:	0401504c 	andi	r16,zero,1345
 4014670:	04015178 	rdprs	r16,zero,1349
 4014674:	04015178 	rdprs	r16,zero,1349
 4014678:	0401506c 	andhi	r16,zero,1345
 401467c:	d8c03117 	ldw	r3,196(sp)
 4014680:	d8802e15 	stw	r2,184(sp)
 4014684:	00c7c83a 	sub	r3,zero,r3
 4014688:	d8c03115 	stw	r3,196(sp)
 401468c:	84000114 	ori	r16,r16,4
 4014690:	bc400007 	ldb	r17,0(r23)
 4014694:	003f9706 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 4014698:	00800c04 	movi	r2,48
 401469c:	d8802705 	stb	r2,156(sp)
 40146a0:	00801e04 	movi	r2,120
 40146a4:	d8802745 	stb	r2,157(sp)
 40146a8:	d9002a17 	ldw	r4,168(sp)
 40146ac:	d8802e17 	ldw	r2,184(sp)
 40146b0:	d8002785 	stb	zero,158(sp)
 40146b4:	e011883a 	mov	r8,fp
 40146b8:	10c00104 	addi	r3,r2,4
 40146bc:	15000017 	ldw	r20,0(r2)
 40146c0:	002d883a 	mov	r22,zero
 40146c4:	80800094 	ori	r2,r16,2
 40146c8:	2002b616 	blt	r4,zero,40151a4 <___svfprintf_internal_r+0xe04>
 40146cc:	00bfdfc4 	movi	r2,-129
 40146d0:	80a4703a 	and	r18,r16,r2
 40146d4:	d8c02e15 	stw	r3,184(sp)
 40146d8:	94800094 	ori	r18,r18,2
 40146dc:	a002a01e 	bne	r20,zero,4015160 <___svfprintf_internal_r+0xdc0>
 40146e0:	014100b4 	movhi	r5,1026
 40146e4:	29558504 	addi	r5,r5,22036
 40146e8:	d9403a15 	stw	r5,232(sp)
 40146ec:	04401e04 	movi	r17,120
 40146f0:	d8c02a17 	ldw	r3,168(sp)
 40146f4:	0039883a 	mov	fp,zero
 40146f8:	1801e626 	beq	r3,zero,4014e94 <___svfprintf_internal_r+0xaf4>
 40146fc:	0029883a 	mov	r20,zero
 4014700:	002d883a 	mov	r22,zero
 4014704:	00020506 	br	4014f1c <___svfprintf_internal_r+0xb7c>
 4014708:	d9402d17 	ldw	r5,180(sp)
 401470c:	d9801e04 	addi	r6,sp,120
 4014710:	9809883a 	mov	r4,r19
 4014714:	401dee00 	call	401dee0 <__ssprint_r>
 4014718:	1000081e 	bne	r2,zero,401473c <___svfprintf_internal_r+0x39c>
 401471c:	da000404 	addi	r8,sp,16
 4014720:	003f6106 	br	40144a8 <__alt_mem_onchip_memory2_0+0xfc00f2e8>
 4014724:	d8802017 	ldw	r2,128(sp)
 4014728:	10000426 	beq	r2,zero,401473c <___svfprintf_internal_r+0x39c>
 401472c:	d9402d17 	ldw	r5,180(sp)
 4014730:	d9003917 	ldw	r4,228(sp)
 4014734:	d9801e04 	addi	r6,sp,120
 4014738:	401dee00 	call	401dee0 <__ssprint_r>
 401473c:	d8802d17 	ldw	r2,180(sp)
 4014740:	10c0030b 	ldhu	r3,12(r2)
 4014744:	d8802f17 	ldw	r2,188(sp)
 4014748:	18c0100c 	andi	r3,r3,64
 401474c:	1806251e 	bne	r3,zero,4015fe4 <___svfprintf_internal_r+0x1c44>
 4014750:	dfc04817 	ldw	ra,288(sp)
 4014754:	df004717 	ldw	fp,284(sp)
 4014758:	ddc04617 	ldw	r23,280(sp)
 401475c:	dd804517 	ldw	r22,276(sp)
 4014760:	dd404417 	ldw	r21,272(sp)
 4014764:	dd004317 	ldw	r20,268(sp)
 4014768:	dcc04217 	ldw	r19,264(sp)
 401476c:	dc804117 	ldw	r18,260(sp)
 4014770:	dc404017 	ldw	r17,256(sp)
 4014774:	dc003f17 	ldw	r16,252(sp)
 4014778:	dec04904 	addi	sp,sp,292
 401477c:	f800283a 	ret
 4014780:	d9002e17 	ldw	r4,184(sp)
 4014784:	d9402e17 	ldw	r5,184(sp)
 4014788:	21000017 	ldw	r4,0(r4)
 401478c:	28800104 	addi	r2,r5,4
 4014790:	d9003115 	stw	r4,196(sp)
 4014794:	203fb916 	blt	r4,zero,401467c <__alt_mem_onchip_memory2_0+0xfc00f4bc>
 4014798:	d8802e15 	stw	r2,184(sp)
 401479c:	bc400007 	ldb	r17,0(r23)
 40147a0:	003f5406 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 40147a4:	bc400007 	ldb	r17,0(r23)
 40147a8:	01000a84 	movi	r4,42
 40147ac:	b8c00044 	addi	r3,r23,1
 40147b0:	89076926 	beq	r17,r4,4016558 <___svfprintf_internal_r+0x21b8>
 40147b4:	8cbff404 	addi	r18,r17,-48
 40147b8:	b486b936 	bltu	r22,r18,40162a0 <___svfprintf_internal_r+0x1f00>
 40147bc:	0009883a 	mov	r4,zero
 40147c0:	1823883a 	mov	r17,r3
 40147c4:	01400284 	movi	r5,10
 40147c8:	40118340 	call	4011834 <__mulsi3>
 40147cc:	88c00007 	ldb	r3,0(r17)
 40147d0:	1489883a 	add	r4,r2,r18
 40147d4:	8dc00044 	addi	r23,r17,1
 40147d8:	1cbff404 	addi	r18,r3,-48
 40147dc:	b823883a 	mov	r17,r23
 40147e0:	b4bff82e 	bgeu	r22,r18,40147c4 <__alt_mem_onchip_memory2_0+0xfc00f604>
 40147e4:	1823883a 	mov	r17,r3
 40147e8:	20060416 	blt	r4,zero,4015ffc <___svfprintf_internal_r+0x1c5c>
 40147ec:	d9002a15 	stw	r4,168(sp)
 40147f0:	003f4106 	br	40144f8 <__alt_mem_onchip_memory2_0+0xfc00f338>
 40147f4:	8cbff404 	addi	r18,r17,-48
 40147f8:	d8003115 	stw	zero,196(sp)
 40147fc:	0009883a 	mov	r4,zero
 4014800:	b823883a 	mov	r17,r23
 4014804:	01400284 	movi	r5,10
 4014808:	40118340 	call	4011834 <__mulsi3>
 401480c:	88c00007 	ldb	r3,0(r17)
 4014810:	9089883a 	add	r4,r18,r2
 4014814:	bdc00044 	addi	r23,r23,1
 4014818:	1cbff404 	addi	r18,r3,-48
 401481c:	b823883a 	mov	r17,r23
 4014820:	b4bff82e 	bgeu	r22,r18,4014804 <__alt_mem_onchip_memory2_0+0xfc00f644>
 4014824:	1823883a 	mov	r17,r3
 4014828:	d9003115 	stw	r4,196(sp)
 401482c:	003f3206 	br	40144f8 <__alt_mem_onchip_memory2_0+0xfc00f338>
 4014830:	84002014 	ori	r16,r16,128
 4014834:	bc400007 	ldb	r17,0(r23)
 4014838:	003f2e06 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 401483c:	8025883a 	mov	r18,r16
 4014840:	dc002903 	ldbu	r16,164(sp)
 4014844:	e011883a 	mov	r8,fp
 4014848:	84003fcc 	andi	r16,r16,255
 401484c:	8007721e 	bne	r16,zero,4016618 <___svfprintf_internal_r+0x2278>
 4014850:	9080020c 	andi	r2,r18,8
 4014854:	1004a526 	beq	r2,zero,4015aec <___svfprintf_internal_r+0x174c>
 4014858:	d9002e17 	ldw	r4,184(sp)
 401485c:	d9402e17 	ldw	r5,184(sp)
 4014860:	d8802e17 	ldw	r2,184(sp)
 4014864:	21000017 	ldw	r4,0(r4)
 4014868:	29400117 	ldw	r5,4(r5)
 401486c:	10800204 	addi	r2,r2,8
 4014870:	d9003615 	stw	r4,216(sp)
 4014874:	d9403715 	stw	r5,220(sp)
 4014878:	d8802e15 	stw	r2,184(sp)
 401487c:	d9003617 	ldw	r4,216(sp)
 4014880:	d9403717 	ldw	r5,220(sp)
 4014884:	da003e15 	stw	r8,248(sp)
 4014888:	04000044 	movi	r16,1
 401488c:	4010edc0 	call	4010edc <__fpclassifyd>
 4014890:	da003e17 	ldw	r8,248(sp)
 4014894:	1404731e 	bne	r2,r16,4015a64 <___svfprintf_internal_r+0x16c4>
 4014898:	d9003617 	ldw	r4,216(sp)
 401489c:	d9403717 	ldw	r5,220(sp)
 40148a0:	000d883a 	mov	r6,zero
 40148a4:	000f883a 	mov	r7,zero
 40148a8:	4012c3c0 	call	4012c3c <__ledf2>
 40148ac:	da003e17 	ldw	r8,248(sp)
 40148b0:	10061b16 	blt	r2,zero,4016120 <___svfprintf_internal_r+0x1d80>
 40148b4:	df002783 	ldbu	fp,158(sp)
 40148b8:	008011c4 	movi	r2,71
 40148bc:	1445810e 	bge	r2,r17,4015ec4 <___svfprintf_internal_r+0x1b24>
 40148c0:	040100b4 	movhi	r16,1026
 40148c4:	84157d04 	addi	r16,r16,22004
 40148c8:	00c000c4 	movi	r3,3
 40148cc:	00bfdfc4 	movi	r2,-129
 40148d0:	d8c02915 	stw	r3,164(sp)
 40148d4:	90a4703a 	and	r18,r18,r2
 40148d8:	d8c02b15 	stw	r3,172(sp)
 40148dc:	d8002a15 	stw	zero,168(sp)
 40148e0:	d8003215 	stw	zero,200(sp)
 40148e4:	00006c06 	br	4014a98 <___svfprintf_internal_r+0x6f8>
 40148e8:	84000214 	ori	r16,r16,8
 40148ec:	bc400007 	ldb	r17,0(r23)
 40148f0:	003f0006 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 40148f4:	8025883a 	mov	r18,r16
 40148f8:	dc002903 	ldbu	r16,164(sp)
 40148fc:	e011883a 	mov	r8,fp
 4014900:	84003fcc 	andi	r16,r16,255
 4014904:	80073f1e 	bne	r16,zero,4016604 <___svfprintf_internal_r+0x2264>
 4014908:	94800414 	ori	r18,r18,16
 401490c:	9080080c 	andi	r2,r18,32
 4014910:	1003bb26 	beq	r2,zero,4015800 <___svfprintf_internal_r+0x1460>
 4014914:	d9002e17 	ldw	r4,184(sp)
 4014918:	20800117 	ldw	r2,4(r4)
 401491c:	25000017 	ldw	r20,0(r4)
 4014920:	21000204 	addi	r4,r4,8
 4014924:	d9002e15 	stw	r4,184(sp)
 4014928:	102d883a 	mov	r22,r2
 401492c:	1003bd16 	blt	r2,zero,4015824 <___svfprintf_internal_r+0x1484>
 4014930:	d9002a17 	ldw	r4,168(sp)
 4014934:	df002783 	ldbu	fp,158(sp)
 4014938:	2003d016 	blt	r4,zero,401587c <___svfprintf_internal_r+0x14dc>
 401493c:	00ffdfc4 	movi	r3,-129
 4014940:	a584b03a 	or	r2,r20,r22
 4014944:	90e4703a 	and	r18,r18,r3
 4014948:	10015026 	beq	r2,zero,4014e8c <___svfprintf_internal_r+0xaec>
 401494c:	b0037026 	beq	r22,zero,4015710 <___svfprintf_internal_r+0x1370>
 4014950:	dc402915 	stw	r17,164(sp)
 4014954:	dc001e04 	addi	r16,sp,120
 4014958:	b023883a 	mov	r17,r22
 401495c:	402d883a 	mov	r22,r8
 4014960:	a009883a 	mov	r4,r20
 4014964:	880b883a 	mov	r5,r17
 4014968:	01800284 	movi	r6,10
 401496c:	000f883a 	mov	r7,zero
 4014970:	4021b9c0 	call	4021b9c <__umoddi3>
 4014974:	10800c04 	addi	r2,r2,48
 4014978:	843fffc4 	addi	r16,r16,-1
 401497c:	a009883a 	mov	r4,r20
 4014980:	880b883a 	mov	r5,r17
 4014984:	80800005 	stb	r2,0(r16)
 4014988:	01800284 	movi	r6,10
 401498c:	000f883a 	mov	r7,zero
 4014990:	40215a00 	call	40215a0 <__udivdi3>
 4014994:	1029883a 	mov	r20,r2
 4014998:	10c4b03a 	or	r2,r2,r3
 401499c:	1823883a 	mov	r17,r3
 40149a0:	103fef1e 	bne	r2,zero,4014960 <__alt_mem_onchip_memory2_0+0xfc00f7a0>
 40149a4:	d8c02817 	ldw	r3,160(sp)
 40149a8:	dc402917 	ldw	r17,164(sp)
 40149ac:	b011883a 	mov	r8,r22
 40149b0:	1c07c83a 	sub	r3,r3,r16
 40149b4:	d8c02b15 	stw	r3,172(sp)
 40149b8:	00003106 	br	4014a80 <___svfprintf_internal_r+0x6e0>
 40149bc:	8025883a 	mov	r18,r16
 40149c0:	dc002903 	ldbu	r16,164(sp)
 40149c4:	e011883a 	mov	r8,fp
 40149c8:	84003fcc 	andi	r16,r16,255
 40149cc:	80070a1e 	bne	r16,zero,40165f8 <___svfprintf_internal_r+0x2258>
 40149d0:	94800414 	ori	r18,r18,16
 40149d4:	9080080c 	andi	r2,r18,32
 40149d8:	1002f626 	beq	r2,zero,40155b4 <___svfprintf_internal_r+0x1214>
 40149dc:	d9002e17 	ldw	r4,184(sp)
 40149e0:	d9402a17 	ldw	r5,168(sp)
 40149e4:	d8002785 	stb	zero,158(sp)
 40149e8:	20800204 	addi	r2,r4,8
 40149ec:	25000017 	ldw	r20,0(r4)
 40149f0:	25800117 	ldw	r22,4(r4)
 40149f4:	28043716 	blt	r5,zero,4015ad4 <___svfprintf_internal_r+0x1734>
 40149f8:	013fdfc4 	movi	r4,-129
 40149fc:	a586b03a 	or	r3,r20,r22
 4014a00:	d8802e15 	stw	r2,184(sp)
 4014a04:	9124703a 	and	r18,r18,r4
 4014a08:	1802f71e 	bne	r3,zero,40155e8 <___svfprintf_internal_r+0x1248>
 4014a0c:	d9402a17 	ldw	r5,168(sp)
 4014a10:	0039883a 	mov	fp,zero
 4014a14:	2806df26 	beq	r5,zero,4016594 <___svfprintf_internal_r+0x21f4>
 4014a18:	0029883a 	mov	r20,zero
 4014a1c:	002d883a 	mov	r22,zero
 4014a20:	dc001e04 	addi	r16,sp,120
 4014a24:	a006d0fa 	srli	r3,r20,3
 4014a28:	b008977a 	slli	r4,r22,29
 4014a2c:	b02cd0fa 	srli	r22,r22,3
 4014a30:	a50001cc 	andi	r20,r20,7
 4014a34:	a0800c04 	addi	r2,r20,48
 4014a38:	843fffc4 	addi	r16,r16,-1
 4014a3c:	20e8b03a 	or	r20,r4,r3
 4014a40:	80800005 	stb	r2,0(r16)
 4014a44:	a586b03a 	or	r3,r20,r22
 4014a48:	183ff61e 	bne	r3,zero,4014a24 <__alt_mem_onchip_memory2_0+0xfc00f864>
 4014a4c:	90c0004c 	andi	r3,r18,1
 4014a50:	18013f26 	beq	r3,zero,4014f50 <___svfprintf_internal_r+0xbb0>
 4014a54:	10803fcc 	andi	r2,r2,255
 4014a58:	1080201c 	xori	r2,r2,128
 4014a5c:	10bfe004 	addi	r2,r2,-128
 4014a60:	00c00c04 	movi	r3,48
 4014a64:	10c13a26 	beq	r2,r3,4014f50 <___svfprintf_internal_r+0xbb0>
 4014a68:	80ffffc5 	stb	r3,-1(r16)
 4014a6c:	d8c02817 	ldw	r3,160(sp)
 4014a70:	80bfffc4 	addi	r2,r16,-1
 4014a74:	1021883a 	mov	r16,r2
 4014a78:	1887c83a 	sub	r3,r3,r2
 4014a7c:	d8c02b15 	stw	r3,172(sp)
 4014a80:	d8802b17 	ldw	r2,172(sp)
 4014a84:	d9002a17 	ldw	r4,168(sp)
 4014a88:	1100010e 	bge	r2,r4,4014a90 <___svfprintf_internal_r+0x6f0>
 4014a8c:	2005883a 	mov	r2,r4
 4014a90:	d8802915 	stw	r2,164(sp)
 4014a94:	d8003215 	stw	zero,200(sp)
 4014a98:	e7003fcc 	andi	fp,fp,255
 4014a9c:	e700201c 	xori	fp,fp,128
 4014aa0:	e73fe004 	addi	fp,fp,-128
 4014aa4:	e0000326 	beq	fp,zero,4014ab4 <___svfprintf_internal_r+0x714>
 4014aa8:	d8c02917 	ldw	r3,164(sp)
 4014aac:	18c00044 	addi	r3,r3,1
 4014ab0:	d8c02915 	stw	r3,164(sp)
 4014ab4:	90c0008c 	andi	r3,r18,2
 4014ab8:	d8c02c15 	stw	r3,176(sp)
 4014abc:	18000326 	beq	r3,zero,4014acc <___svfprintf_internal_r+0x72c>
 4014ac0:	d8c02917 	ldw	r3,164(sp)
 4014ac4:	18c00084 	addi	r3,r3,2
 4014ac8:	d8c02915 	stw	r3,164(sp)
 4014acc:	90c0210c 	andi	r3,r18,132
 4014ad0:	d8c03015 	stw	r3,192(sp)
 4014ad4:	1801c31e 	bne	r3,zero,40151e4 <___svfprintf_internal_r+0xe44>
 4014ad8:	d9003117 	ldw	r4,196(sp)
 4014adc:	d8c02917 	ldw	r3,164(sp)
 4014ae0:	20e9c83a 	sub	r20,r4,r3
 4014ae4:	0501bf0e 	bge	zero,r20,40151e4 <___svfprintf_internal_r+0xe44>
 4014ae8:	02400404 	movi	r9,16
 4014aec:	d8c02017 	ldw	r3,128(sp)
 4014af0:	d8801f17 	ldw	r2,124(sp)
 4014af4:	4d053d0e 	bge	r9,r20,4015fec <___svfprintf_internal_r+0x1c4c>
 4014af8:	014100b4 	movhi	r5,1026
 4014afc:	29558fc4 	addi	r5,r5,22079
 4014b00:	dc403c15 	stw	r17,240(sp)
 4014b04:	d9403515 	stw	r5,212(sp)
 4014b08:	a023883a 	mov	r17,r20
 4014b0c:	482d883a 	mov	r22,r9
 4014b10:	9029883a 	mov	r20,r18
 4014b14:	070001c4 	movi	fp,7
 4014b18:	8025883a 	mov	r18,r16
 4014b1c:	dc002d17 	ldw	r16,180(sp)
 4014b20:	00000306 	br	4014b30 <___svfprintf_internal_r+0x790>
 4014b24:	8c7ffc04 	addi	r17,r17,-16
 4014b28:	42000204 	addi	r8,r8,8
 4014b2c:	b440130e 	bge	r22,r17,4014b7c <___svfprintf_internal_r+0x7dc>
 4014b30:	010100b4 	movhi	r4,1026
 4014b34:	18c00404 	addi	r3,r3,16
 4014b38:	10800044 	addi	r2,r2,1
 4014b3c:	21158fc4 	addi	r4,r4,22079
 4014b40:	41000015 	stw	r4,0(r8)
 4014b44:	45800115 	stw	r22,4(r8)
 4014b48:	d8c02015 	stw	r3,128(sp)
 4014b4c:	d8801f15 	stw	r2,124(sp)
 4014b50:	e0bff40e 	bge	fp,r2,4014b24 <__alt_mem_onchip_memory2_0+0xfc00f964>
 4014b54:	d9801e04 	addi	r6,sp,120
 4014b58:	800b883a 	mov	r5,r16
 4014b5c:	9809883a 	mov	r4,r19
 4014b60:	401dee00 	call	401dee0 <__ssprint_r>
 4014b64:	103ef51e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4014b68:	8c7ffc04 	addi	r17,r17,-16
 4014b6c:	d8c02017 	ldw	r3,128(sp)
 4014b70:	d8801f17 	ldw	r2,124(sp)
 4014b74:	da000404 	addi	r8,sp,16
 4014b78:	b47fed16 	blt	r22,r17,4014b30 <__alt_mem_onchip_memory2_0+0xfc00f970>
 4014b7c:	9021883a 	mov	r16,r18
 4014b80:	a025883a 	mov	r18,r20
 4014b84:	8829883a 	mov	r20,r17
 4014b88:	dc403c17 	ldw	r17,240(sp)
 4014b8c:	d9403517 	ldw	r5,212(sp)
 4014b90:	a0c7883a 	add	r3,r20,r3
 4014b94:	10800044 	addi	r2,r2,1
 4014b98:	41400015 	stw	r5,0(r8)
 4014b9c:	45000115 	stw	r20,4(r8)
 4014ba0:	d8c02015 	stw	r3,128(sp)
 4014ba4:	d8801f15 	stw	r2,124(sp)
 4014ba8:	010001c4 	movi	r4,7
 4014bac:	2082c116 	blt	r4,r2,40156b4 <___svfprintf_internal_r+0x1314>
 4014bb0:	df002787 	ldb	fp,158(sp)
 4014bb4:	42000204 	addi	r8,r8,8
 4014bb8:	e0000c26 	beq	fp,zero,4014bec <___svfprintf_internal_r+0x84c>
 4014bbc:	d8801f17 	ldw	r2,124(sp)
 4014bc0:	d9002784 	addi	r4,sp,158
 4014bc4:	18c00044 	addi	r3,r3,1
 4014bc8:	10800044 	addi	r2,r2,1
 4014bcc:	41000015 	stw	r4,0(r8)
 4014bd0:	01000044 	movi	r4,1
 4014bd4:	41000115 	stw	r4,4(r8)
 4014bd8:	d8c02015 	stw	r3,128(sp)
 4014bdc:	d8801f15 	stw	r2,124(sp)
 4014be0:	010001c4 	movi	r4,7
 4014be4:	20825a16 	blt	r4,r2,4015550 <___svfprintf_internal_r+0x11b0>
 4014be8:	42000204 	addi	r8,r8,8
 4014bec:	d8802c17 	ldw	r2,176(sp)
 4014bf0:	10000c26 	beq	r2,zero,4014c24 <___svfprintf_internal_r+0x884>
 4014bf4:	d8801f17 	ldw	r2,124(sp)
 4014bf8:	d9002704 	addi	r4,sp,156
 4014bfc:	18c00084 	addi	r3,r3,2
 4014c00:	10800044 	addi	r2,r2,1
 4014c04:	41000015 	stw	r4,0(r8)
 4014c08:	01000084 	movi	r4,2
 4014c0c:	41000115 	stw	r4,4(r8)
 4014c10:	d8c02015 	stw	r3,128(sp)
 4014c14:	d8801f15 	stw	r2,124(sp)
 4014c18:	010001c4 	movi	r4,7
 4014c1c:	20825416 	blt	r4,r2,4015570 <___svfprintf_internal_r+0x11d0>
 4014c20:	42000204 	addi	r8,r8,8
 4014c24:	d9003017 	ldw	r4,192(sp)
 4014c28:	00802004 	movi	r2,128
 4014c2c:	2081b926 	beq	r4,r2,4015314 <___svfprintf_internal_r+0xf74>
 4014c30:	d9402a17 	ldw	r5,168(sp)
 4014c34:	d8802b17 	ldw	r2,172(sp)
 4014c38:	28adc83a 	sub	r22,r5,r2
 4014c3c:	05802f0e 	bge	zero,r22,4014cfc <___svfprintf_internal_r+0x95c>
 4014c40:	07000404 	movi	fp,16
 4014c44:	d8801f17 	ldw	r2,124(sp)
 4014c48:	e583e20e 	bge	fp,r22,4015bd4 <___svfprintf_internal_r+0x1834>
 4014c4c:	014100b4 	movhi	r5,1026
 4014c50:	29558bc4 	addi	r5,r5,22063
 4014c54:	dc402a15 	stw	r17,168(sp)
 4014c58:	d9402c15 	stw	r5,176(sp)
 4014c5c:	b023883a 	mov	r17,r22
 4014c60:	050001c4 	movi	r20,7
 4014c64:	902d883a 	mov	r22,r18
 4014c68:	8025883a 	mov	r18,r16
 4014c6c:	dc002d17 	ldw	r16,180(sp)
 4014c70:	00000306 	br	4014c80 <___svfprintf_internal_r+0x8e0>
 4014c74:	8c7ffc04 	addi	r17,r17,-16
 4014c78:	42000204 	addi	r8,r8,8
 4014c7c:	e440110e 	bge	fp,r17,4014cc4 <___svfprintf_internal_r+0x924>
 4014c80:	18c00404 	addi	r3,r3,16
 4014c84:	10800044 	addi	r2,r2,1
 4014c88:	45400015 	stw	r21,0(r8)
 4014c8c:	47000115 	stw	fp,4(r8)
 4014c90:	d8c02015 	stw	r3,128(sp)
 4014c94:	d8801f15 	stw	r2,124(sp)
 4014c98:	a0bff60e 	bge	r20,r2,4014c74 <__alt_mem_onchip_memory2_0+0xfc00fab4>
 4014c9c:	d9801e04 	addi	r6,sp,120
 4014ca0:	800b883a 	mov	r5,r16
 4014ca4:	9809883a 	mov	r4,r19
 4014ca8:	401dee00 	call	401dee0 <__ssprint_r>
 4014cac:	103ea31e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4014cb0:	8c7ffc04 	addi	r17,r17,-16
 4014cb4:	d8c02017 	ldw	r3,128(sp)
 4014cb8:	d8801f17 	ldw	r2,124(sp)
 4014cbc:	da000404 	addi	r8,sp,16
 4014cc0:	e47fef16 	blt	fp,r17,4014c80 <__alt_mem_onchip_memory2_0+0xfc00fac0>
 4014cc4:	9021883a 	mov	r16,r18
 4014cc8:	b025883a 	mov	r18,r22
 4014ccc:	882d883a 	mov	r22,r17
 4014cd0:	dc402a17 	ldw	r17,168(sp)
 4014cd4:	d9002c17 	ldw	r4,176(sp)
 4014cd8:	1d87883a 	add	r3,r3,r22
 4014cdc:	10800044 	addi	r2,r2,1
 4014ce0:	41000015 	stw	r4,0(r8)
 4014ce4:	45800115 	stw	r22,4(r8)
 4014ce8:	d8c02015 	stw	r3,128(sp)
 4014cec:	d8801f15 	stw	r2,124(sp)
 4014cf0:	010001c4 	movi	r4,7
 4014cf4:	20820e16 	blt	r4,r2,4015530 <___svfprintf_internal_r+0x1190>
 4014cf8:	42000204 	addi	r8,r8,8
 4014cfc:	9080400c 	andi	r2,r18,256
 4014d00:	10013a1e 	bne	r2,zero,40151ec <___svfprintf_internal_r+0xe4c>
 4014d04:	d9402b17 	ldw	r5,172(sp)
 4014d08:	d8801f17 	ldw	r2,124(sp)
 4014d0c:	44000015 	stw	r16,0(r8)
 4014d10:	1947883a 	add	r3,r3,r5
 4014d14:	10800044 	addi	r2,r2,1
 4014d18:	41400115 	stw	r5,4(r8)
 4014d1c:	d8c02015 	stw	r3,128(sp)
 4014d20:	d8801f15 	stw	r2,124(sp)
 4014d24:	010001c4 	movi	r4,7
 4014d28:	2081f316 	blt	r4,r2,40154f8 <___svfprintf_internal_r+0x1158>
 4014d2c:	42000204 	addi	r8,r8,8
 4014d30:	9480010c 	andi	r18,r18,4
 4014d34:	90003226 	beq	r18,zero,4014e00 <___svfprintf_internal_r+0xa60>
 4014d38:	d9403117 	ldw	r5,196(sp)
 4014d3c:	d8802917 	ldw	r2,164(sp)
 4014d40:	28a1c83a 	sub	r16,r5,r2
 4014d44:	04002e0e 	bge	zero,r16,4014e00 <___svfprintf_internal_r+0xa60>
 4014d48:	04400404 	movi	r17,16
 4014d4c:	d8801f17 	ldw	r2,124(sp)
 4014d50:	8c04db0e 	bge	r17,r16,40160c0 <___svfprintf_internal_r+0x1d20>
 4014d54:	014100b4 	movhi	r5,1026
 4014d58:	29558fc4 	addi	r5,r5,22079
 4014d5c:	d9403515 	stw	r5,212(sp)
 4014d60:	048001c4 	movi	r18,7
 4014d64:	dd002d17 	ldw	r20,180(sp)
 4014d68:	00000306 	br	4014d78 <___svfprintf_internal_r+0x9d8>
 4014d6c:	843ffc04 	addi	r16,r16,-16
 4014d70:	42000204 	addi	r8,r8,8
 4014d74:	8c00130e 	bge	r17,r16,4014dc4 <___svfprintf_internal_r+0xa24>
 4014d78:	010100b4 	movhi	r4,1026
 4014d7c:	18c00404 	addi	r3,r3,16
 4014d80:	10800044 	addi	r2,r2,1
 4014d84:	21158fc4 	addi	r4,r4,22079
 4014d88:	41000015 	stw	r4,0(r8)
 4014d8c:	44400115 	stw	r17,4(r8)
 4014d90:	d8c02015 	stw	r3,128(sp)
 4014d94:	d8801f15 	stw	r2,124(sp)
 4014d98:	90bff40e 	bge	r18,r2,4014d6c <__alt_mem_onchip_memory2_0+0xfc00fbac>
 4014d9c:	d9801e04 	addi	r6,sp,120
 4014da0:	a00b883a 	mov	r5,r20
 4014da4:	9809883a 	mov	r4,r19
 4014da8:	401dee00 	call	401dee0 <__ssprint_r>
 4014dac:	103e631e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4014db0:	843ffc04 	addi	r16,r16,-16
 4014db4:	d8c02017 	ldw	r3,128(sp)
 4014db8:	d8801f17 	ldw	r2,124(sp)
 4014dbc:	da000404 	addi	r8,sp,16
 4014dc0:	8c3fed16 	blt	r17,r16,4014d78 <__alt_mem_onchip_memory2_0+0xfc00fbb8>
 4014dc4:	d9403517 	ldw	r5,212(sp)
 4014dc8:	1c07883a 	add	r3,r3,r16
 4014dcc:	10800044 	addi	r2,r2,1
 4014dd0:	41400015 	stw	r5,0(r8)
 4014dd4:	44000115 	stw	r16,4(r8)
 4014dd8:	d8c02015 	stw	r3,128(sp)
 4014ddc:	d8801f15 	stw	r2,124(sp)
 4014de0:	010001c4 	movi	r4,7
 4014de4:	2080060e 	bge	r4,r2,4014e00 <___svfprintf_internal_r+0xa60>
 4014de8:	d9402d17 	ldw	r5,180(sp)
 4014dec:	d9801e04 	addi	r6,sp,120
 4014df0:	9809883a 	mov	r4,r19
 4014df4:	401dee00 	call	401dee0 <__ssprint_r>
 4014df8:	103e501e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4014dfc:	d8c02017 	ldw	r3,128(sp)
 4014e00:	d8803117 	ldw	r2,196(sp)
 4014e04:	d9002917 	ldw	r4,164(sp)
 4014e08:	1100010e 	bge	r2,r4,4014e10 <___svfprintf_internal_r+0xa70>
 4014e0c:	2005883a 	mov	r2,r4
 4014e10:	d9402f17 	ldw	r5,188(sp)
 4014e14:	288b883a 	add	r5,r5,r2
 4014e18:	d9402f15 	stw	r5,188(sp)
 4014e1c:	1801be1e 	bne	r3,zero,4015518 <___svfprintf_internal_r+0x1178>
 4014e20:	b8800007 	ldb	r2,0(r23)
 4014e24:	d8001f15 	stw	zero,124(sp)
 4014e28:	da000404 	addi	r8,sp,16
 4014e2c:	103d891e 	bne	r2,zero,4014454 <__alt_mem_onchip_memory2_0+0xfc00f294>
 4014e30:	b823883a 	mov	r17,r23
 4014e34:	003d9f06 	br	40144b4 <__alt_mem_onchip_memory2_0+0xfc00f2f4>
 4014e38:	8025883a 	mov	r18,r16
 4014e3c:	dc002903 	ldbu	r16,164(sp)
 4014e40:	e011883a 	mov	r8,fp
 4014e44:	84003fcc 	andi	r16,r16,255
 4014e48:	8005e61e 	bne	r16,zero,40165e4 <___svfprintf_internal_r+0x2244>
 4014e4c:	94800414 	ori	r18,r18,16
 4014e50:	9080080c 	andi	r2,r18,32
 4014e54:	10022026 	beq	r2,zero,40156d8 <___svfprintf_internal_r+0x1338>
 4014e58:	d9002e17 	ldw	r4,184(sp)
 4014e5c:	d9402a17 	ldw	r5,168(sp)
 4014e60:	d8002785 	stb	zero,158(sp)
 4014e64:	20c00204 	addi	r3,r4,8
 4014e68:	25000017 	ldw	r20,0(r4)
 4014e6c:	25800117 	ldw	r22,4(r4)
 4014e70:	2803ad16 	blt	r5,zero,4015d28 <___svfprintf_internal_r+0x1988>
 4014e74:	013fdfc4 	movi	r4,-129
 4014e78:	a584b03a 	or	r2,r20,r22
 4014e7c:	d8c02e15 	stw	r3,184(sp)
 4014e80:	9124703a 	and	r18,r18,r4
 4014e84:	0039883a 	mov	fp,zero
 4014e88:	103eb01e 	bne	r2,zero,401494c <__alt_mem_onchip_memory2_0+0xfc00f78c>
 4014e8c:	d8802a17 	ldw	r2,168(sp)
 4014e90:	1002e71e 	bne	r2,zero,4015a30 <___svfprintf_internal_r+0x1690>
 4014e94:	d8002a15 	stw	zero,168(sp)
 4014e98:	d8002b15 	stw	zero,172(sp)
 4014e9c:	dc001e04 	addi	r16,sp,120
 4014ea0:	003ef706 	br	4014a80 <__alt_mem_onchip_memory2_0+0xfc00f8c0>
 4014ea4:	8025883a 	mov	r18,r16
 4014ea8:	dc002903 	ldbu	r16,164(sp)
 4014eac:	e011883a 	mov	r8,fp
 4014eb0:	84003fcc 	andi	r16,r16,255
 4014eb4:	8005c81e 	bne	r16,zero,40165d8 <___svfprintf_internal_r+0x2238>
 4014eb8:	010100b4 	movhi	r4,1026
 4014ebc:	21158004 	addi	r4,r4,22016
 4014ec0:	d9003a15 	stw	r4,232(sp)
 4014ec4:	9080080c 	andi	r2,r18,32
 4014ec8:	10007226 	beq	r2,zero,4015094 <___svfprintf_internal_r+0xcf4>
 4014ecc:	d9402e17 	ldw	r5,184(sp)
 4014ed0:	2d000017 	ldw	r20,0(r5)
 4014ed4:	2d800117 	ldw	r22,4(r5)
 4014ed8:	29400204 	addi	r5,r5,8
 4014edc:	d9402e15 	stw	r5,184(sp)
 4014ee0:	9080004c 	andi	r2,r18,1
 4014ee4:	1001aa26 	beq	r2,zero,4015590 <___svfprintf_internal_r+0x11f0>
 4014ee8:	a584b03a 	or	r2,r20,r22
 4014eec:	10032526 	beq	r2,zero,4015b84 <___svfprintf_internal_r+0x17e4>
 4014ef0:	d8c02a17 	ldw	r3,168(sp)
 4014ef4:	00800c04 	movi	r2,48
 4014ef8:	d8802705 	stb	r2,156(sp)
 4014efc:	dc402745 	stb	r17,157(sp)
 4014f00:	d8002785 	stb	zero,158(sp)
 4014f04:	90800094 	ori	r2,r18,2
 4014f08:	1804a316 	blt	r3,zero,4016198 <___svfprintf_internal_r+0x1df8>
 4014f0c:	00bfdfc4 	movi	r2,-129
 4014f10:	90a4703a 	and	r18,r18,r2
 4014f14:	94800094 	ori	r18,r18,2
 4014f18:	0039883a 	mov	fp,zero
 4014f1c:	d9003a17 	ldw	r4,232(sp)
 4014f20:	dc001e04 	addi	r16,sp,120
 4014f24:	a08003cc 	andi	r2,r20,15
 4014f28:	b006973a 	slli	r3,r22,28
 4014f2c:	2085883a 	add	r2,r4,r2
 4014f30:	a028d13a 	srli	r20,r20,4
 4014f34:	10800003 	ldbu	r2,0(r2)
 4014f38:	b02cd13a 	srli	r22,r22,4
 4014f3c:	843fffc4 	addi	r16,r16,-1
 4014f40:	1d28b03a 	or	r20,r3,r20
 4014f44:	80800005 	stb	r2,0(r16)
 4014f48:	a584b03a 	or	r2,r20,r22
 4014f4c:	103ff51e 	bne	r2,zero,4014f24 <__alt_mem_onchip_memory2_0+0xfc00fd64>
 4014f50:	d8c02817 	ldw	r3,160(sp)
 4014f54:	1c07c83a 	sub	r3,r3,r16
 4014f58:	d8c02b15 	stw	r3,172(sp)
 4014f5c:	003ec806 	br	4014a80 <__alt_mem_onchip_memory2_0+0xfc00f8c0>
 4014f60:	d8c02e17 	ldw	r3,184(sp)
 4014f64:	d9002e17 	ldw	r4,184(sp)
 4014f68:	8025883a 	mov	r18,r16
 4014f6c:	18800017 	ldw	r2,0(r3)
 4014f70:	21000104 	addi	r4,r4,4
 4014f74:	00c00044 	movi	r3,1
 4014f78:	e011883a 	mov	r8,fp
 4014f7c:	d8c02915 	stw	r3,164(sp)
 4014f80:	d8002785 	stb	zero,158(sp)
 4014f84:	d8801405 	stb	r2,80(sp)
 4014f88:	d9002e15 	stw	r4,184(sp)
 4014f8c:	d8c02b15 	stw	r3,172(sp)
 4014f90:	d8002a15 	stw	zero,168(sp)
 4014f94:	d8003215 	stw	zero,200(sp)
 4014f98:	dc001404 	addi	r16,sp,80
 4014f9c:	0039883a 	mov	fp,zero
 4014fa0:	003ec406 	br	4014ab4 <__alt_mem_onchip_memory2_0+0xfc00f8f4>
 4014fa4:	8025883a 	mov	r18,r16
 4014fa8:	dc002903 	ldbu	r16,164(sp)
 4014fac:	e011883a 	mov	r8,fp
 4014fb0:	84003fcc 	andi	r16,r16,255
 4014fb4:	803e8726 	beq	r16,zero,40149d4 <__alt_mem_onchip_memory2_0+0xfc00f814>
 4014fb8:	d8c02b03 	ldbu	r3,172(sp)
 4014fbc:	d8c02785 	stb	r3,158(sp)
 4014fc0:	003e8406 	br	40149d4 <__alt_mem_onchip_memory2_0+0xfc00f814>
 4014fc4:	00c00044 	movi	r3,1
 4014fc8:	d8c02905 	stb	r3,164(sp)
 4014fcc:	00c00ac4 	movi	r3,43
 4014fd0:	d8c02b05 	stb	r3,172(sp)
 4014fd4:	bc400007 	ldb	r17,0(r23)
 4014fd8:	003d4606 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 4014fdc:	84000814 	ori	r16,r16,32
 4014fe0:	bc400007 	ldb	r17,0(r23)
 4014fe4:	003d4306 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 4014fe8:	d8802e17 	ldw	r2,184(sp)
 4014fec:	8025883a 	mov	r18,r16
 4014ff0:	d8002785 	stb	zero,158(sp)
 4014ff4:	14000017 	ldw	r16,0(r2)
 4014ff8:	e011883a 	mov	r8,fp
 4014ffc:	15000104 	addi	r20,r2,4
 4015000:	80042126 	beq	r16,zero,4016088 <___svfprintf_internal_r+0x1ce8>
 4015004:	d8c02a17 	ldw	r3,168(sp)
 4015008:	1803ee16 	blt	r3,zero,4015fc4 <___svfprintf_internal_r+0x1c24>
 401500c:	180d883a 	mov	r6,r3
 4015010:	000b883a 	mov	r5,zero
 4015014:	8009883a 	mov	r4,r16
 4015018:	df003e15 	stw	fp,248(sp)
 401501c:	401c0400 	call	401c040 <memchr>
 4015020:	da003e17 	ldw	r8,248(sp)
 4015024:	10046a26 	beq	r2,zero,40161d0 <___svfprintf_internal_r+0x1e30>
 4015028:	1405c83a 	sub	r2,r2,r16
 401502c:	d8802b15 	stw	r2,172(sp)
 4015030:	1003ea16 	blt	r2,zero,4015fdc <___svfprintf_internal_r+0x1c3c>
 4015034:	df002783 	ldbu	fp,158(sp)
 4015038:	d8802915 	stw	r2,164(sp)
 401503c:	dd002e15 	stw	r20,184(sp)
 4015040:	d8002a15 	stw	zero,168(sp)
 4015044:	d8003215 	stw	zero,200(sp)
 4015048:	003e9306 	br	4014a98 <__alt_mem_onchip_memory2_0+0xfc00f8d8>
 401504c:	8025883a 	mov	r18,r16
 4015050:	dc002903 	ldbu	r16,164(sp)
 4015054:	e011883a 	mov	r8,fp
 4015058:	84003fcc 	andi	r16,r16,255
 401505c:	803f7c26 	beq	r16,zero,4014e50 <__alt_mem_onchip_memory2_0+0xfc00fc90>
 4015060:	d8c02b03 	ldbu	r3,172(sp)
 4015064:	d8c02785 	stb	r3,158(sp)
 4015068:	003f7906 	br	4014e50 <__alt_mem_onchip_memory2_0+0xfc00fc90>
 401506c:	8025883a 	mov	r18,r16
 4015070:	dc002903 	ldbu	r16,164(sp)
 4015074:	e011883a 	mov	r8,fp
 4015078:	84003fcc 	andi	r16,r16,255
 401507c:	8005741e 	bne	r16,zero,4016650 <___svfprintf_internal_r+0x22b0>
 4015080:	010100b4 	movhi	r4,1026
 4015084:	21158504 	addi	r4,r4,22036
 4015088:	d9003a15 	stw	r4,232(sp)
 401508c:	9080080c 	andi	r2,r18,32
 4015090:	103f8e1e 	bne	r2,zero,4014ecc <__alt_mem_onchip_memory2_0+0xfc00fd0c>
 4015094:	9080040c 	andi	r2,r18,16
 4015098:	1002a726 	beq	r2,zero,4015b38 <___svfprintf_internal_r+0x1798>
 401509c:	d8802e17 	ldw	r2,184(sp)
 40150a0:	002d883a 	mov	r22,zero
 40150a4:	15000017 	ldw	r20,0(r2)
 40150a8:	10800104 	addi	r2,r2,4
 40150ac:	d8802e15 	stw	r2,184(sp)
 40150b0:	003f8b06 	br	4014ee0 <__alt_mem_onchip_memory2_0+0xfc00fd20>
 40150b4:	84000054 	ori	r16,r16,1
 40150b8:	bc400007 	ldb	r17,0(r23)
 40150bc:	003d0d06 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 40150c0:	d8802b07 	ldb	r2,172(sp)
 40150c4:	1002a41e 	bne	r2,zero,4015b58 <___svfprintf_internal_r+0x17b8>
 40150c8:	00c00044 	movi	r3,1
 40150cc:	d8c02905 	stb	r3,164(sp)
 40150d0:	00c00804 	movi	r3,32
 40150d4:	d8c02b05 	stb	r3,172(sp)
 40150d8:	bc400007 	ldb	r17,0(r23)
 40150dc:	003d0506 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 40150e0:	8025883a 	mov	r18,r16
 40150e4:	dc002903 	ldbu	r16,164(sp)
 40150e8:	e011883a 	mov	r8,fp
 40150ec:	84003fcc 	andi	r16,r16,255
 40150f0:	803e0626 	beq	r16,zero,401490c <__alt_mem_onchip_memory2_0+0xfc00f74c>
 40150f4:	d8c02b03 	ldbu	r3,172(sp)
 40150f8:	d8c02785 	stb	r3,158(sp)
 40150fc:	003e0306 	br	401490c <__alt_mem_onchip_memory2_0+0xfc00f74c>
 4015100:	bc400007 	ldb	r17,0(r23)
 4015104:	00801b04 	movi	r2,108
 4015108:	88830a26 	beq	r17,r2,4015d34 <___svfprintf_internal_r+0x1994>
 401510c:	84000414 	ori	r16,r16,16
 4015110:	003cf806 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 4015114:	8025883a 	mov	r18,r16
 4015118:	dc002903 	ldbu	r16,164(sp)
 401511c:	e011883a 	mov	r8,fp
 4015120:	84003fcc 	andi	r16,r16,255
 4015124:	8005471e 	bne	r16,zero,4016644 <___svfprintf_internal_r+0x22a4>
 4015128:	9080080c 	andi	r2,r18,32
 401512c:	10028c26 	beq	r2,zero,4015b60 <___svfprintf_internal_r+0x17c0>
 4015130:	d9002e17 	ldw	r4,184(sp)
 4015134:	d9402f17 	ldw	r5,188(sp)
 4015138:	20800017 	ldw	r2,0(r4)
 401513c:	2807d7fa 	srai	r3,r5,31
 4015140:	21000104 	addi	r4,r4,4
 4015144:	d9002e15 	stw	r4,184(sp)
 4015148:	11400015 	stw	r5,0(r2)
 401514c:	10c00115 	stw	r3,4(r2)
 4015150:	003cbe06 	br	401444c <__alt_mem_onchip_memory2_0+0xfc00f28c>
 4015154:	84001014 	ori	r16,r16,64
 4015158:	bc400007 	ldb	r17,0(r23)
 401515c:	003ce506 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 4015160:	010100b4 	movhi	r4,1026
 4015164:	21158504 	addi	r4,r4,22036
 4015168:	0039883a 	mov	fp,zero
 401516c:	d9003a15 	stw	r4,232(sp)
 4015170:	04401e04 	movi	r17,120
 4015174:	003f6906 	br	4014f1c <__alt_mem_onchip_memory2_0+0xfc00fd5c>
 4015178:	8025883a 	mov	r18,r16
 401517c:	dc002903 	ldbu	r16,164(sp)
 4015180:	e011883a 	mov	r8,fp
 4015184:	84003fcc 	andi	r16,r16,255
 4015188:	8005261e 	bne	r16,zero,4016624 <___svfprintf_internal_r+0x2284>
 401518c:	883d6526 	beq	r17,zero,4014724 <__alt_mem_onchip_memory2_0+0xfc00f564>
 4015190:	00c00044 	movi	r3,1
 4015194:	d8c02915 	stw	r3,164(sp)
 4015198:	dc401405 	stb	r17,80(sp)
 401519c:	d8002785 	stb	zero,158(sp)
 40151a0:	003f7a06 	br	4014f8c <__alt_mem_onchip_memory2_0+0xfc00fdcc>
 40151a4:	010100b4 	movhi	r4,1026
 40151a8:	21158504 	addi	r4,r4,22036
 40151ac:	d9003a15 	stw	r4,232(sp)
 40151b0:	d8c02e15 	stw	r3,184(sp)
 40151b4:	1025883a 	mov	r18,r2
 40151b8:	04401e04 	movi	r17,120
 40151bc:	a584b03a 	or	r2,r20,r22
 40151c0:	1000fa1e 	bne	r2,zero,40155ac <___svfprintf_internal_r+0x120c>
 40151c4:	0039883a 	mov	fp,zero
 40151c8:	00800084 	movi	r2,2
 40151cc:	10803fcc 	andi	r2,r2,255
 40151d0:	00c00044 	movi	r3,1
 40151d4:	10c21626 	beq	r2,r3,4015a30 <___svfprintf_internal_r+0x1690>
 40151d8:	00c00084 	movi	r3,2
 40151dc:	10fe0e1e 	bne	r2,r3,4014a18 <__alt_mem_onchip_memory2_0+0xfc00f858>
 40151e0:	003d4606 	br	40146fc <__alt_mem_onchip_memory2_0+0xfc00f53c>
 40151e4:	d8c02017 	ldw	r3,128(sp)
 40151e8:	003e7306 	br	4014bb8 <__alt_mem_onchip_memory2_0+0xfc00f9f8>
 40151ec:	00801944 	movi	r2,101
 40151f0:	14407c0e 	bge	r2,r17,40153e4 <___svfprintf_internal_r+0x1044>
 40151f4:	d9003617 	ldw	r4,216(sp)
 40151f8:	d9403717 	ldw	r5,220(sp)
 40151fc:	000d883a 	mov	r6,zero
 4015200:	000f883a 	mov	r7,zero
 4015204:	d8c03d15 	stw	r3,244(sp)
 4015208:	da003e15 	stw	r8,248(sp)
 401520c:	4012ad80 	call	4012ad8 <__eqdf2>
 4015210:	d8c03d17 	ldw	r3,244(sp)
 4015214:	da003e17 	ldw	r8,248(sp)
 4015218:	1000f51e 	bne	r2,zero,40155f0 <___svfprintf_internal_r+0x1250>
 401521c:	d8801f17 	ldw	r2,124(sp)
 4015220:	010100b4 	movhi	r4,1026
 4015224:	21153904 	addi	r4,r4,21732
 4015228:	18c00044 	addi	r3,r3,1
 401522c:	10800044 	addi	r2,r2,1
 4015230:	41000015 	stw	r4,0(r8)
 4015234:	01000044 	movi	r4,1
 4015238:	41000115 	stw	r4,4(r8)
 401523c:	d8c02015 	stw	r3,128(sp)
 4015240:	d8801f15 	stw	r2,124(sp)
 4015244:	010001c4 	movi	r4,7
 4015248:	20826616 	blt	r4,r2,4015be4 <___svfprintf_internal_r+0x1844>
 401524c:	42000204 	addi	r8,r8,8
 4015250:	d8802617 	ldw	r2,152(sp)
 4015254:	d9403317 	ldw	r5,204(sp)
 4015258:	11400216 	blt	r2,r5,4015264 <___svfprintf_internal_r+0xec4>
 401525c:	9080004c 	andi	r2,r18,1
 4015260:	103eb326 	beq	r2,zero,4014d30 <__alt_mem_onchip_memory2_0+0xfc00fb70>
 4015264:	d8803817 	ldw	r2,224(sp)
 4015268:	d9003417 	ldw	r4,208(sp)
 401526c:	d9403817 	ldw	r5,224(sp)
 4015270:	1887883a 	add	r3,r3,r2
 4015274:	d8801f17 	ldw	r2,124(sp)
 4015278:	41000015 	stw	r4,0(r8)
 401527c:	41400115 	stw	r5,4(r8)
 4015280:	10800044 	addi	r2,r2,1
 4015284:	d8c02015 	stw	r3,128(sp)
 4015288:	d8801f15 	stw	r2,124(sp)
 401528c:	010001c4 	movi	r4,7
 4015290:	2082af16 	blt	r4,r2,4015d50 <___svfprintf_internal_r+0x19b0>
 4015294:	42000204 	addi	r8,r8,8
 4015298:	d8803317 	ldw	r2,204(sp)
 401529c:	143fffc4 	addi	r16,r2,-1
 40152a0:	043ea30e 	bge	zero,r16,4014d30 <__alt_mem_onchip_memory2_0+0xfc00fb70>
 40152a4:	04400404 	movi	r17,16
 40152a8:	d8801f17 	ldw	r2,124(sp)
 40152ac:	8c00860e 	bge	r17,r16,40154c8 <___svfprintf_internal_r+0x1128>
 40152b0:	014100b4 	movhi	r5,1026
 40152b4:	29558bc4 	addi	r5,r5,22063
 40152b8:	d9402c15 	stw	r5,176(sp)
 40152bc:	058001c4 	movi	r22,7
 40152c0:	dd002d17 	ldw	r20,180(sp)
 40152c4:	00000306 	br	40152d4 <___svfprintf_internal_r+0xf34>
 40152c8:	42000204 	addi	r8,r8,8
 40152cc:	843ffc04 	addi	r16,r16,-16
 40152d0:	8c00800e 	bge	r17,r16,40154d4 <___svfprintf_internal_r+0x1134>
 40152d4:	18c00404 	addi	r3,r3,16
 40152d8:	10800044 	addi	r2,r2,1
 40152dc:	45400015 	stw	r21,0(r8)
 40152e0:	44400115 	stw	r17,4(r8)
 40152e4:	d8c02015 	stw	r3,128(sp)
 40152e8:	d8801f15 	stw	r2,124(sp)
 40152ec:	b0bff60e 	bge	r22,r2,40152c8 <__alt_mem_onchip_memory2_0+0xfc010108>
 40152f0:	d9801e04 	addi	r6,sp,120
 40152f4:	a00b883a 	mov	r5,r20
 40152f8:	9809883a 	mov	r4,r19
 40152fc:	401dee00 	call	401dee0 <__ssprint_r>
 4015300:	103d0e1e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015304:	d8c02017 	ldw	r3,128(sp)
 4015308:	d8801f17 	ldw	r2,124(sp)
 401530c:	da000404 	addi	r8,sp,16
 4015310:	003fee06 	br	40152cc <__alt_mem_onchip_memory2_0+0xfc01010c>
 4015314:	d9403117 	ldw	r5,196(sp)
 4015318:	d8802917 	ldw	r2,164(sp)
 401531c:	28adc83a 	sub	r22,r5,r2
 4015320:	05be430e 	bge	zero,r22,4014c30 <__alt_mem_onchip_memory2_0+0xfc00fa70>
 4015324:	07000404 	movi	fp,16
 4015328:	d8801f17 	ldw	r2,124(sp)
 401532c:	e583a20e 	bge	fp,r22,40161b8 <___svfprintf_internal_r+0x1e18>
 4015330:	014100b4 	movhi	r5,1026
 4015334:	29558bc4 	addi	r5,r5,22063
 4015338:	dc403015 	stw	r17,192(sp)
 401533c:	d9402c15 	stw	r5,176(sp)
 4015340:	b023883a 	mov	r17,r22
 4015344:	050001c4 	movi	r20,7
 4015348:	902d883a 	mov	r22,r18
 401534c:	8025883a 	mov	r18,r16
 4015350:	dc002d17 	ldw	r16,180(sp)
 4015354:	00000306 	br	4015364 <___svfprintf_internal_r+0xfc4>
 4015358:	8c7ffc04 	addi	r17,r17,-16
 401535c:	42000204 	addi	r8,r8,8
 4015360:	e440110e 	bge	fp,r17,40153a8 <___svfprintf_internal_r+0x1008>
 4015364:	18c00404 	addi	r3,r3,16
 4015368:	10800044 	addi	r2,r2,1
 401536c:	45400015 	stw	r21,0(r8)
 4015370:	47000115 	stw	fp,4(r8)
 4015374:	d8c02015 	stw	r3,128(sp)
 4015378:	d8801f15 	stw	r2,124(sp)
 401537c:	a0bff60e 	bge	r20,r2,4015358 <__alt_mem_onchip_memory2_0+0xfc010198>
 4015380:	d9801e04 	addi	r6,sp,120
 4015384:	800b883a 	mov	r5,r16
 4015388:	9809883a 	mov	r4,r19
 401538c:	401dee00 	call	401dee0 <__ssprint_r>
 4015390:	103cea1e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015394:	8c7ffc04 	addi	r17,r17,-16
 4015398:	d8c02017 	ldw	r3,128(sp)
 401539c:	d8801f17 	ldw	r2,124(sp)
 40153a0:	da000404 	addi	r8,sp,16
 40153a4:	e47fef16 	blt	fp,r17,4015364 <__alt_mem_onchip_memory2_0+0xfc0101a4>
 40153a8:	9021883a 	mov	r16,r18
 40153ac:	b025883a 	mov	r18,r22
 40153b0:	882d883a 	mov	r22,r17
 40153b4:	dc403017 	ldw	r17,192(sp)
 40153b8:	d9002c17 	ldw	r4,176(sp)
 40153bc:	1d87883a 	add	r3,r3,r22
 40153c0:	10800044 	addi	r2,r2,1
 40153c4:	41000015 	stw	r4,0(r8)
 40153c8:	45800115 	stw	r22,4(r8)
 40153cc:	d8c02015 	stw	r3,128(sp)
 40153d0:	d8801f15 	stw	r2,124(sp)
 40153d4:	010001c4 	movi	r4,7
 40153d8:	20819a16 	blt	r4,r2,4015a44 <___svfprintf_internal_r+0x16a4>
 40153dc:	42000204 	addi	r8,r8,8
 40153e0:	003e1306 	br	4014c30 <__alt_mem_onchip_memory2_0+0xfc00fa70>
 40153e4:	d9403317 	ldw	r5,204(sp)
 40153e8:	00800044 	movi	r2,1
 40153ec:	18c00044 	addi	r3,r3,1
 40153f0:	1141710e 	bge	r2,r5,40159b8 <___svfprintf_internal_r+0x1618>
 40153f4:	dc401f17 	ldw	r17,124(sp)
 40153f8:	00800044 	movi	r2,1
 40153fc:	40800115 	stw	r2,4(r8)
 4015400:	8c400044 	addi	r17,r17,1
 4015404:	44000015 	stw	r16,0(r8)
 4015408:	d8c02015 	stw	r3,128(sp)
 401540c:	dc401f15 	stw	r17,124(sp)
 4015410:	008001c4 	movi	r2,7
 4015414:	14417416 	blt	r2,r17,40159e8 <___svfprintf_internal_r+0x1648>
 4015418:	42000204 	addi	r8,r8,8
 401541c:	d8803817 	ldw	r2,224(sp)
 4015420:	d9003417 	ldw	r4,208(sp)
 4015424:	8c400044 	addi	r17,r17,1
 4015428:	10c7883a 	add	r3,r2,r3
 401542c:	40800115 	stw	r2,4(r8)
 4015430:	41000015 	stw	r4,0(r8)
 4015434:	d8c02015 	stw	r3,128(sp)
 4015438:	dc401f15 	stw	r17,124(sp)
 401543c:	008001c4 	movi	r2,7
 4015440:	14417216 	blt	r2,r17,4015a0c <___svfprintf_internal_r+0x166c>
 4015444:	45800204 	addi	r22,r8,8
 4015448:	d9003617 	ldw	r4,216(sp)
 401544c:	d9403717 	ldw	r5,220(sp)
 4015450:	000d883a 	mov	r6,zero
 4015454:	000f883a 	mov	r7,zero
 4015458:	d8c03d15 	stw	r3,244(sp)
 401545c:	4012ad80 	call	4012ad8 <__eqdf2>
 4015460:	d8c03d17 	ldw	r3,244(sp)
 4015464:	1000b326 	beq	r2,zero,4015734 <___svfprintf_internal_r+0x1394>
 4015468:	d9403317 	ldw	r5,204(sp)
 401546c:	84000044 	addi	r16,r16,1
 4015470:	8c400044 	addi	r17,r17,1
 4015474:	28bfffc4 	addi	r2,r5,-1
 4015478:	1887883a 	add	r3,r3,r2
 401547c:	b0800115 	stw	r2,4(r22)
 4015480:	b4000015 	stw	r16,0(r22)
 4015484:	d8c02015 	stw	r3,128(sp)
 4015488:	dc401f15 	stw	r17,124(sp)
 401548c:	008001c4 	movi	r2,7
 4015490:	1440d216 	blt	r2,r17,40157dc <___svfprintf_internal_r+0x143c>
 4015494:	b5800204 	addi	r22,r22,8
 4015498:	d9003b17 	ldw	r4,236(sp)
 401549c:	df0022c4 	addi	fp,sp,139
 40154a0:	8c400044 	addi	r17,r17,1
 40154a4:	20c7883a 	add	r3,r4,r3
 40154a8:	b7000015 	stw	fp,0(r22)
 40154ac:	b1000115 	stw	r4,4(r22)
 40154b0:	d8c02015 	stw	r3,128(sp)
 40154b4:	dc401f15 	stw	r17,124(sp)
 40154b8:	008001c4 	movi	r2,7
 40154bc:	14400e16 	blt	r2,r17,40154f8 <___svfprintf_internal_r+0x1158>
 40154c0:	b2000204 	addi	r8,r22,8
 40154c4:	003e1a06 	br	4014d30 <__alt_mem_onchip_memory2_0+0xfc00fb70>
 40154c8:	010100b4 	movhi	r4,1026
 40154cc:	21158bc4 	addi	r4,r4,22063
 40154d0:	d9002c15 	stw	r4,176(sp)
 40154d4:	d9002c17 	ldw	r4,176(sp)
 40154d8:	1c07883a 	add	r3,r3,r16
 40154dc:	44000115 	stw	r16,4(r8)
 40154e0:	41000015 	stw	r4,0(r8)
 40154e4:	10800044 	addi	r2,r2,1
 40154e8:	d8c02015 	stw	r3,128(sp)
 40154ec:	d8801f15 	stw	r2,124(sp)
 40154f0:	010001c4 	movi	r4,7
 40154f4:	20be0d0e 	bge	r4,r2,4014d2c <__alt_mem_onchip_memory2_0+0xfc00fb6c>
 40154f8:	d9402d17 	ldw	r5,180(sp)
 40154fc:	d9801e04 	addi	r6,sp,120
 4015500:	9809883a 	mov	r4,r19
 4015504:	401dee00 	call	401dee0 <__ssprint_r>
 4015508:	103c8c1e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 401550c:	d8c02017 	ldw	r3,128(sp)
 4015510:	da000404 	addi	r8,sp,16
 4015514:	003e0606 	br	4014d30 <__alt_mem_onchip_memory2_0+0xfc00fb70>
 4015518:	d9402d17 	ldw	r5,180(sp)
 401551c:	d9801e04 	addi	r6,sp,120
 4015520:	9809883a 	mov	r4,r19
 4015524:	401dee00 	call	401dee0 <__ssprint_r>
 4015528:	103e3d26 	beq	r2,zero,4014e20 <__alt_mem_onchip_memory2_0+0xfc00fc60>
 401552c:	003c8306 	br	401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015530:	d9402d17 	ldw	r5,180(sp)
 4015534:	d9801e04 	addi	r6,sp,120
 4015538:	9809883a 	mov	r4,r19
 401553c:	401dee00 	call	401dee0 <__ssprint_r>
 4015540:	103c7e1e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015544:	d8c02017 	ldw	r3,128(sp)
 4015548:	da000404 	addi	r8,sp,16
 401554c:	003deb06 	br	4014cfc <__alt_mem_onchip_memory2_0+0xfc00fb3c>
 4015550:	d9402d17 	ldw	r5,180(sp)
 4015554:	d9801e04 	addi	r6,sp,120
 4015558:	9809883a 	mov	r4,r19
 401555c:	401dee00 	call	401dee0 <__ssprint_r>
 4015560:	103c761e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015564:	d8c02017 	ldw	r3,128(sp)
 4015568:	da000404 	addi	r8,sp,16
 401556c:	003d9f06 	br	4014bec <__alt_mem_onchip_memory2_0+0xfc00fa2c>
 4015570:	d9402d17 	ldw	r5,180(sp)
 4015574:	d9801e04 	addi	r6,sp,120
 4015578:	9809883a 	mov	r4,r19
 401557c:	401dee00 	call	401dee0 <__ssprint_r>
 4015580:	103c6e1e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015584:	d8c02017 	ldw	r3,128(sp)
 4015588:	da000404 	addi	r8,sp,16
 401558c:	003da506 	br	4014c24 <__alt_mem_onchip_memory2_0+0xfc00fa64>
 4015590:	d9402a17 	ldw	r5,168(sp)
 4015594:	d8002785 	stb	zero,158(sp)
 4015598:	283f0816 	blt	r5,zero,40151bc <__alt_mem_onchip_memory2_0+0xfc00fffc>
 401559c:	00ffdfc4 	movi	r3,-129
 40155a0:	a584b03a 	or	r2,r20,r22
 40155a4:	90e4703a 	and	r18,r18,r3
 40155a8:	103c5126 	beq	r2,zero,40146f0 <__alt_mem_onchip_memory2_0+0xfc00f530>
 40155ac:	0039883a 	mov	fp,zero
 40155b0:	003e5a06 	br	4014f1c <__alt_mem_onchip_memory2_0+0xfc00fd5c>
 40155b4:	9080040c 	andi	r2,r18,16
 40155b8:	10013d26 	beq	r2,zero,4015ab0 <___svfprintf_internal_r+0x1710>
 40155bc:	d8c02e17 	ldw	r3,184(sp)
 40155c0:	d9002a17 	ldw	r4,168(sp)
 40155c4:	d8002785 	stb	zero,158(sp)
 40155c8:	18800104 	addi	r2,r3,4
 40155cc:	1d000017 	ldw	r20,0(r3)
 40155d0:	002d883a 	mov	r22,zero
 40155d4:	20013f16 	blt	r4,zero,4015ad4 <___svfprintf_internal_r+0x1734>
 40155d8:	00ffdfc4 	movi	r3,-129
 40155dc:	d8802e15 	stw	r2,184(sp)
 40155e0:	90e4703a 	and	r18,r18,r3
 40155e4:	a03d0926 	beq	r20,zero,4014a0c <__alt_mem_onchip_memory2_0+0xfc00f84c>
 40155e8:	0039883a 	mov	fp,zero
 40155ec:	003d0c06 	br	4014a20 <__alt_mem_onchip_memory2_0+0xfc00f860>
 40155f0:	dc402617 	ldw	r17,152(sp)
 40155f4:	0441830e 	bge	zero,r17,4015c04 <___svfprintf_internal_r+0x1864>
 40155f8:	dc403217 	ldw	r17,200(sp)
 40155fc:	d8803317 	ldw	r2,204(sp)
 4015600:	1440010e 	bge	r2,r17,4015608 <___svfprintf_internal_r+0x1268>
 4015604:	1023883a 	mov	r17,r2
 4015608:	04400a0e 	bge	zero,r17,4015634 <___svfprintf_internal_r+0x1294>
 401560c:	d8801f17 	ldw	r2,124(sp)
 4015610:	1c47883a 	add	r3,r3,r17
 4015614:	44000015 	stw	r16,0(r8)
 4015618:	10800044 	addi	r2,r2,1
 401561c:	44400115 	stw	r17,4(r8)
 4015620:	d8c02015 	stw	r3,128(sp)
 4015624:	d8801f15 	stw	r2,124(sp)
 4015628:	010001c4 	movi	r4,7
 401562c:	20827516 	blt	r4,r2,4016004 <___svfprintf_internal_r+0x1c64>
 4015630:	42000204 	addi	r8,r8,8
 4015634:	88027b16 	blt	r17,zero,4016024 <___svfprintf_internal_r+0x1c84>
 4015638:	d9003217 	ldw	r4,200(sp)
 401563c:	2463c83a 	sub	r17,r4,r17
 4015640:	0440990e 	bge	zero,r17,40158a8 <___svfprintf_internal_r+0x1508>
 4015644:	05800404 	movi	r22,16
 4015648:	d8801f17 	ldw	r2,124(sp)
 401564c:	b441530e 	bge	r22,r17,4015b9c <___svfprintf_internal_r+0x17fc>
 4015650:	010100b4 	movhi	r4,1026
 4015654:	21158bc4 	addi	r4,r4,22063
 4015658:	d9002c15 	stw	r4,176(sp)
 401565c:	070001c4 	movi	fp,7
 4015660:	dd002d17 	ldw	r20,180(sp)
 4015664:	00000306 	br	4015674 <___svfprintf_internal_r+0x12d4>
 4015668:	42000204 	addi	r8,r8,8
 401566c:	8c7ffc04 	addi	r17,r17,-16
 4015670:	b4414d0e 	bge	r22,r17,4015ba8 <___svfprintf_internal_r+0x1808>
 4015674:	18c00404 	addi	r3,r3,16
 4015678:	10800044 	addi	r2,r2,1
 401567c:	45400015 	stw	r21,0(r8)
 4015680:	45800115 	stw	r22,4(r8)
 4015684:	d8c02015 	stw	r3,128(sp)
 4015688:	d8801f15 	stw	r2,124(sp)
 401568c:	e0bff60e 	bge	fp,r2,4015668 <__alt_mem_onchip_memory2_0+0xfc0104a8>
 4015690:	d9801e04 	addi	r6,sp,120
 4015694:	a00b883a 	mov	r5,r20
 4015698:	9809883a 	mov	r4,r19
 401569c:	401dee00 	call	401dee0 <__ssprint_r>
 40156a0:	103c261e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 40156a4:	d8c02017 	ldw	r3,128(sp)
 40156a8:	d8801f17 	ldw	r2,124(sp)
 40156ac:	da000404 	addi	r8,sp,16
 40156b0:	003fee06 	br	401566c <__alt_mem_onchip_memory2_0+0xfc0104ac>
 40156b4:	d9402d17 	ldw	r5,180(sp)
 40156b8:	d9801e04 	addi	r6,sp,120
 40156bc:	9809883a 	mov	r4,r19
 40156c0:	401dee00 	call	401dee0 <__ssprint_r>
 40156c4:	103c1d1e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 40156c8:	d8c02017 	ldw	r3,128(sp)
 40156cc:	df002787 	ldb	fp,158(sp)
 40156d0:	da000404 	addi	r8,sp,16
 40156d4:	003d3806 	br	4014bb8 <__alt_mem_onchip_memory2_0+0xfc00f9f8>
 40156d8:	9080040c 	andi	r2,r18,16
 40156dc:	10005c26 	beq	r2,zero,4015850 <___svfprintf_internal_r+0x14b0>
 40156e0:	d8c02e17 	ldw	r3,184(sp)
 40156e4:	d9002a17 	ldw	r4,168(sp)
 40156e8:	d8002785 	stb	zero,158(sp)
 40156ec:	18800104 	addi	r2,r3,4
 40156f0:	1d000017 	ldw	r20,0(r3)
 40156f4:	002d883a 	mov	r22,zero
 40156f8:	20005e16 	blt	r4,zero,4015874 <___svfprintf_internal_r+0x14d4>
 40156fc:	00ffdfc4 	movi	r3,-129
 4015700:	d8802e15 	stw	r2,184(sp)
 4015704:	90e4703a 	and	r18,r18,r3
 4015708:	0039883a 	mov	fp,zero
 401570c:	a03ddf26 	beq	r20,zero,4014e8c <__alt_mem_onchip_memory2_0+0xfc00fccc>
 4015710:	00800244 	movi	r2,9
 4015714:	153c8e36 	bltu	r2,r20,4014950 <__alt_mem_onchip_memory2_0+0xfc00f790>
 4015718:	a5000c04 	addi	r20,r20,48
 401571c:	dc001dc4 	addi	r16,sp,119
 4015720:	dd001dc5 	stb	r20,119(sp)
 4015724:	d8c02817 	ldw	r3,160(sp)
 4015728:	1c07c83a 	sub	r3,r3,r16
 401572c:	d8c02b15 	stw	r3,172(sp)
 4015730:	003cd306 	br	4014a80 <__alt_mem_onchip_memory2_0+0xfc00f8c0>
 4015734:	d8803317 	ldw	r2,204(sp)
 4015738:	143fffc4 	addi	r16,r2,-1
 401573c:	043f560e 	bge	zero,r16,4015498 <__alt_mem_onchip_memory2_0+0xfc0102d8>
 4015740:	07000404 	movi	fp,16
 4015744:	e403530e 	bge	fp,r16,4016494 <___svfprintf_internal_r+0x20f4>
 4015748:	014100b4 	movhi	r5,1026
 401574c:	29558bc4 	addi	r5,r5,22063
 4015750:	d9402c15 	stw	r5,176(sp)
 4015754:	01c001c4 	movi	r7,7
 4015758:	dd002d17 	ldw	r20,180(sp)
 401575c:	00000306 	br	401576c <___svfprintf_internal_r+0x13cc>
 4015760:	843ffc04 	addi	r16,r16,-16
 4015764:	b5800204 	addi	r22,r22,8
 4015768:	e400130e 	bge	fp,r16,40157b8 <___svfprintf_internal_r+0x1418>
 401576c:	18c00404 	addi	r3,r3,16
 4015770:	8c400044 	addi	r17,r17,1
 4015774:	b5400015 	stw	r21,0(r22)
 4015778:	b7000115 	stw	fp,4(r22)
 401577c:	d8c02015 	stw	r3,128(sp)
 4015780:	dc401f15 	stw	r17,124(sp)
 4015784:	3c7ff60e 	bge	r7,r17,4015760 <__alt_mem_onchip_memory2_0+0xfc0105a0>
 4015788:	d9801e04 	addi	r6,sp,120
 401578c:	a00b883a 	mov	r5,r20
 4015790:	9809883a 	mov	r4,r19
 4015794:	d9c03d15 	stw	r7,244(sp)
 4015798:	401dee00 	call	401dee0 <__ssprint_r>
 401579c:	d9c03d17 	ldw	r7,244(sp)
 40157a0:	103be61e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 40157a4:	843ffc04 	addi	r16,r16,-16
 40157a8:	d8c02017 	ldw	r3,128(sp)
 40157ac:	dc401f17 	ldw	r17,124(sp)
 40157b0:	dd800404 	addi	r22,sp,16
 40157b4:	e43fed16 	blt	fp,r16,401576c <__alt_mem_onchip_memory2_0+0xfc0105ac>
 40157b8:	d8802c17 	ldw	r2,176(sp)
 40157bc:	1c07883a 	add	r3,r3,r16
 40157c0:	8c400044 	addi	r17,r17,1
 40157c4:	b0800015 	stw	r2,0(r22)
 40157c8:	b4000115 	stw	r16,4(r22)
 40157cc:	d8c02015 	stw	r3,128(sp)
 40157d0:	dc401f15 	stw	r17,124(sp)
 40157d4:	008001c4 	movi	r2,7
 40157d8:	147f2e0e 	bge	r2,r17,4015494 <__alt_mem_onchip_memory2_0+0xfc0102d4>
 40157dc:	d9402d17 	ldw	r5,180(sp)
 40157e0:	d9801e04 	addi	r6,sp,120
 40157e4:	9809883a 	mov	r4,r19
 40157e8:	401dee00 	call	401dee0 <__ssprint_r>
 40157ec:	103bd31e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 40157f0:	d8c02017 	ldw	r3,128(sp)
 40157f4:	dc401f17 	ldw	r17,124(sp)
 40157f8:	dd800404 	addi	r22,sp,16
 40157fc:	003f2606 	br	4015498 <__alt_mem_onchip_memory2_0+0xfc0102d8>
 4015800:	9080040c 	andi	r2,r18,16
 4015804:	1000c326 	beq	r2,zero,4015b14 <___svfprintf_internal_r+0x1774>
 4015808:	d9402e17 	ldw	r5,184(sp)
 401580c:	2d000017 	ldw	r20,0(r5)
 4015810:	29400104 	addi	r5,r5,4
 4015814:	d9402e15 	stw	r5,184(sp)
 4015818:	a02dd7fa 	srai	r22,r20,31
 401581c:	b005883a 	mov	r2,r22
 4015820:	103c430e 	bge	r2,zero,4014930 <__alt_mem_onchip_memory2_0+0xfc00f770>
 4015824:	d9402a17 	ldw	r5,168(sp)
 4015828:	0529c83a 	sub	r20,zero,r20
 401582c:	07000b44 	movi	fp,45
 4015830:	a004c03a 	cmpne	r2,r20,zero
 4015834:	05adc83a 	sub	r22,zero,r22
 4015838:	df002785 	stb	fp,158(sp)
 401583c:	b0adc83a 	sub	r22,r22,r2
 4015840:	28022e16 	blt	r5,zero,40160fc <___svfprintf_internal_r+0x1d5c>
 4015844:	00bfdfc4 	movi	r2,-129
 4015848:	90a4703a 	and	r18,r18,r2
 401584c:	003c3f06 	br	401494c <__alt_mem_onchip_memory2_0+0xfc00f78c>
 4015850:	9080100c 	andi	r2,r18,64
 4015854:	d8002785 	stb	zero,158(sp)
 4015858:	10012526 	beq	r2,zero,4015cf0 <___svfprintf_internal_r+0x1950>
 401585c:	d9402e17 	ldw	r5,184(sp)
 4015860:	d8c02a17 	ldw	r3,168(sp)
 4015864:	002d883a 	mov	r22,zero
 4015868:	28800104 	addi	r2,r5,4
 401586c:	2d00000b 	ldhu	r20,0(r5)
 4015870:	183fa20e 	bge	r3,zero,40156fc <__alt_mem_onchip_memory2_0+0xfc01053c>
 4015874:	d8802e15 	stw	r2,184(sp)
 4015878:	0039883a 	mov	fp,zero
 401587c:	a584b03a 	or	r2,r20,r22
 4015880:	103c321e 	bne	r2,zero,401494c <__alt_mem_onchip_memory2_0+0xfc00f78c>
 4015884:	00800044 	movi	r2,1
 4015888:	003e5006 	br	40151cc <__alt_mem_onchip_memory2_0+0xfc01000c>
 401588c:	d9402d17 	ldw	r5,180(sp)
 4015890:	d9801e04 	addi	r6,sp,120
 4015894:	9809883a 	mov	r4,r19
 4015898:	401dee00 	call	401dee0 <__ssprint_r>
 401589c:	103ba71e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 40158a0:	d8c02017 	ldw	r3,128(sp)
 40158a4:	da000404 	addi	r8,sp,16
 40158a8:	d9003217 	ldw	r4,200(sp)
 40158ac:	d8802617 	ldw	r2,152(sp)
 40158b0:	d9403317 	ldw	r5,204(sp)
 40158b4:	8123883a 	add	r17,r16,r4
 40158b8:	11400216 	blt	r2,r5,40158c4 <___svfprintf_internal_r+0x1524>
 40158bc:	9100004c 	andi	r4,r18,1
 40158c0:	20000d26 	beq	r4,zero,40158f8 <___svfprintf_internal_r+0x1558>
 40158c4:	d9003817 	ldw	r4,224(sp)
 40158c8:	d9403417 	ldw	r5,208(sp)
 40158cc:	1907883a 	add	r3,r3,r4
 40158d0:	d9001f17 	ldw	r4,124(sp)
 40158d4:	41400015 	stw	r5,0(r8)
 40158d8:	d9403817 	ldw	r5,224(sp)
 40158dc:	21000044 	addi	r4,r4,1
 40158e0:	d8c02015 	stw	r3,128(sp)
 40158e4:	41400115 	stw	r5,4(r8)
 40158e8:	d9001f15 	stw	r4,124(sp)
 40158ec:	014001c4 	movi	r5,7
 40158f0:	2901dc16 	blt	r5,r4,4016064 <___svfprintf_internal_r+0x1cc4>
 40158f4:	42000204 	addi	r8,r8,8
 40158f8:	d9003317 	ldw	r4,204(sp)
 40158fc:	8121883a 	add	r16,r16,r4
 4015900:	2085c83a 	sub	r2,r4,r2
 4015904:	8461c83a 	sub	r16,r16,r17
 4015908:	1400010e 	bge	r2,r16,4015910 <___svfprintf_internal_r+0x1570>
 401590c:	1021883a 	mov	r16,r2
 4015910:	04000a0e 	bge	zero,r16,401593c <___svfprintf_internal_r+0x159c>
 4015914:	d9001f17 	ldw	r4,124(sp)
 4015918:	1c07883a 	add	r3,r3,r16
 401591c:	44400015 	stw	r17,0(r8)
 4015920:	21000044 	addi	r4,r4,1
 4015924:	44000115 	stw	r16,4(r8)
 4015928:	d8c02015 	stw	r3,128(sp)
 401592c:	d9001f15 	stw	r4,124(sp)
 4015930:	014001c4 	movi	r5,7
 4015934:	2901e616 	blt	r5,r4,40160d0 <___svfprintf_internal_r+0x1d30>
 4015938:	42000204 	addi	r8,r8,8
 401593c:	8001f616 	blt	r16,zero,4016118 <___svfprintf_internal_r+0x1d78>
 4015940:	1421c83a 	sub	r16,r2,r16
 4015944:	043cfa0e 	bge	zero,r16,4014d30 <__alt_mem_onchip_memory2_0+0xfc00fb70>
 4015948:	04400404 	movi	r17,16
 401594c:	d8801f17 	ldw	r2,124(sp)
 4015950:	8c3edd0e 	bge	r17,r16,40154c8 <__alt_mem_onchip_memory2_0+0xfc010308>
 4015954:	014100b4 	movhi	r5,1026
 4015958:	29558bc4 	addi	r5,r5,22063
 401595c:	d9402c15 	stw	r5,176(sp)
 4015960:	058001c4 	movi	r22,7
 4015964:	dd002d17 	ldw	r20,180(sp)
 4015968:	00000306 	br	4015978 <___svfprintf_internal_r+0x15d8>
 401596c:	42000204 	addi	r8,r8,8
 4015970:	843ffc04 	addi	r16,r16,-16
 4015974:	8c3ed70e 	bge	r17,r16,40154d4 <__alt_mem_onchip_memory2_0+0xfc010314>
 4015978:	18c00404 	addi	r3,r3,16
 401597c:	10800044 	addi	r2,r2,1
 4015980:	45400015 	stw	r21,0(r8)
 4015984:	44400115 	stw	r17,4(r8)
 4015988:	d8c02015 	stw	r3,128(sp)
 401598c:	d8801f15 	stw	r2,124(sp)
 4015990:	b0bff60e 	bge	r22,r2,401596c <__alt_mem_onchip_memory2_0+0xfc0107ac>
 4015994:	d9801e04 	addi	r6,sp,120
 4015998:	a00b883a 	mov	r5,r20
 401599c:	9809883a 	mov	r4,r19
 40159a0:	401dee00 	call	401dee0 <__ssprint_r>
 40159a4:	103b651e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 40159a8:	d8c02017 	ldw	r3,128(sp)
 40159ac:	d8801f17 	ldw	r2,124(sp)
 40159b0:	da000404 	addi	r8,sp,16
 40159b4:	003fee06 	br	4015970 <__alt_mem_onchip_memory2_0+0xfc0107b0>
 40159b8:	9088703a 	and	r4,r18,r2
 40159bc:	203e8d1e 	bne	r4,zero,40153f4 <__alt_mem_onchip_memory2_0+0xfc010234>
 40159c0:	dc401f17 	ldw	r17,124(sp)
 40159c4:	40800115 	stw	r2,4(r8)
 40159c8:	44000015 	stw	r16,0(r8)
 40159cc:	8c400044 	addi	r17,r17,1
 40159d0:	d8c02015 	stw	r3,128(sp)
 40159d4:	dc401f15 	stw	r17,124(sp)
 40159d8:	008001c4 	movi	r2,7
 40159dc:	147f7f16 	blt	r2,r17,40157dc <__alt_mem_onchip_memory2_0+0xfc01061c>
 40159e0:	45800204 	addi	r22,r8,8
 40159e4:	003eac06 	br	4015498 <__alt_mem_onchip_memory2_0+0xfc0102d8>
 40159e8:	d9402d17 	ldw	r5,180(sp)
 40159ec:	d9801e04 	addi	r6,sp,120
 40159f0:	9809883a 	mov	r4,r19
 40159f4:	401dee00 	call	401dee0 <__ssprint_r>
 40159f8:	103b501e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 40159fc:	d8c02017 	ldw	r3,128(sp)
 4015a00:	dc401f17 	ldw	r17,124(sp)
 4015a04:	da000404 	addi	r8,sp,16
 4015a08:	003e8406 	br	401541c <__alt_mem_onchip_memory2_0+0xfc01025c>
 4015a0c:	d9402d17 	ldw	r5,180(sp)
 4015a10:	d9801e04 	addi	r6,sp,120
 4015a14:	9809883a 	mov	r4,r19
 4015a18:	401dee00 	call	401dee0 <__ssprint_r>
 4015a1c:	103b471e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015a20:	d8c02017 	ldw	r3,128(sp)
 4015a24:	dc401f17 	ldw	r17,124(sp)
 4015a28:	dd800404 	addi	r22,sp,16
 4015a2c:	003e8606 	br	4015448 <__alt_mem_onchip_memory2_0+0xfc010288>
 4015a30:	0029883a 	mov	r20,zero
 4015a34:	a5000c04 	addi	r20,r20,48
 4015a38:	dc001dc4 	addi	r16,sp,119
 4015a3c:	dd001dc5 	stb	r20,119(sp)
 4015a40:	003f3806 	br	4015724 <__alt_mem_onchip_memory2_0+0xfc010564>
 4015a44:	d9402d17 	ldw	r5,180(sp)
 4015a48:	d9801e04 	addi	r6,sp,120
 4015a4c:	9809883a 	mov	r4,r19
 4015a50:	401dee00 	call	401dee0 <__ssprint_r>
 4015a54:	103b391e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015a58:	d8c02017 	ldw	r3,128(sp)
 4015a5c:	da000404 	addi	r8,sp,16
 4015a60:	003c7306 	br	4014c30 <__alt_mem_onchip_memory2_0+0xfc00fa70>
 4015a64:	d9003617 	ldw	r4,216(sp)
 4015a68:	d9403717 	ldw	r5,220(sp)
 4015a6c:	da003e15 	stw	r8,248(sp)
 4015a70:	4010edc0 	call	4010edc <__fpclassifyd>
 4015a74:	da003e17 	ldw	r8,248(sp)
 4015a78:	1000bd1e 	bne	r2,zero,4015d70 <___svfprintf_internal_r+0x19d0>
 4015a7c:	008011c4 	movi	r2,71
 4015a80:	14411e0e 	bge	r2,r17,4015efc <___svfprintf_internal_r+0x1b5c>
 4015a84:	040100b4 	movhi	r16,1026
 4015a88:	84157f04 	addi	r16,r16,22012
 4015a8c:	00c000c4 	movi	r3,3
 4015a90:	00bfdfc4 	movi	r2,-129
 4015a94:	d8c02915 	stw	r3,164(sp)
 4015a98:	90a4703a 	and	r18,r18,r2
 4015a9c:	df002783 	ldbu	fp,158(sp)
 4015aa0:	d8c02b15 	stw	r3,172(sp)
 4015aa4:	d8002a15 	stw	zero,168(sp)
 4015aa8:	d8003215 	stw	zero,200(sp)
 4015aac:	003bfa06 	br	4014a98 <__alt_mem_onchip_memory2_0+0xfc00f8d8>
 4015ab0:	9080100c 	andi	r2,r18,64
 4015ab4:	d8002785 	stb	zero,158(sp)
 4015ab8:	10009426 	beq	r2,zero,4015d0c <___svfprintf_internal_r+0x196c>
 4015abc:	d9402e17 	ldw	r5,184(sp)
 4015ac0:	d8c02a17 	ldw	r3,168(sp)
 4015ac4:	002d883a 	mov	r22,zero
 4015ac8:	28800104 	addi	r2,r5,4
 4015acc:	2d00000b 	ldhu	r20,0(r5)
 4015ad0:	183ec10e 	bge	r3,zero,40155d8 <__alt_mem_onchip_memory2_0+0xfc010418>
 4015ad4:	a586b03a 	or	r3,r20,r22
 4015ad8:	d8802e15 	stw	r2,184(sp)
 4015adc:	183ec21e 	bne	r3,zero,40155e8 <__alt_mem_onchip_memory2_0+0xfc010428>
 4015ae0:	0039883a 	mov	fp,zero
 4015ae4:	0005883a 	mov	r2,zero
 4015ae8:	003db806 	br	40151cc <__alt_mem_onchip_memory2_0+0xfc01000c>
 4015aec:	d8c02e17 	ldw	r3,184(sp)
 4015af0:	d9002e17 	ldw	r4,184(sp)
 4015af4:	d9402e17 	ldw	r5,184(sp)
 4015af8:	18c00017 	ldw	r3,0(r3)
 4015afc:	21000117 	ldw	r4,4(r4)
 4015b00:	29400204 	addi	r5,r5,8
 4015b04:	d8c03615 	stw	r3,216(sp)
 4015b08:	d9003715 	stw	r4,220(sp)
 4015b0c:	d9402e15 	stw	r5,184(sp)
 4015b10:	003b5a06 	br	401487c <__alt_mem_onchip_memory2_0+0xfc00f6bc>
 4015b14:	9080100c 	andi	r2,r18,64
 4015b18:	10010726 	beq	r2,zero,4015f38 <___svfprintf_internal_r+0x1b98>
 4015b1c:	d8802e17 	ldw	r2,184(sp)
 4015b20:	1500000f 	ldh	r20,0(r2)
 4015b24:	10800104 	addi	r2,r2,4
 4015b28:	d8802e15 	stw	r2,184(sp)
 4015b2c:	a02dd7fa 	srai	r22,r20,31
 4015b30:	b005883a 	mov	r2,r22
 4015b34:	003b7d06 	br	401492c <__alt_mem_onchip_memory2_0+0xfc00f76c>
 4015b38:	9080100c 	andi	r2,r18,64
 4015b3c:	10010526 	beq	r2,zero,4015f54 <___svfprintf_internal_r+0x1bb4>
 4015b40:	d8c02e17 	ldw	r3,184(sp)
 4015b44:	002d883a 	mov	r22,zero
 4015b48:	1d00000b 	ldhu	r20,0(r3)
 4015b4c:	18c00104 	addi	r3,r3,4
 4015b50:	d8c02e15 	stw	r3,184(sp)
 4015b54:	003ce206 	br	4014ee0 <__alt_mem_onchip_memory2_0+0xfc00fd20>
 4015b58:	bc400007 	ldb	r17,0(r23)
 4015b5c:	003a6506 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 4015b60:	9080040c 	andi	r2,r18,16
 4015b64:	10010126 	beq	r2,zero,4015f6c <___svfprintf_internal_r+0x1bcc>
 4015b68:	d8c02e17 	ldw	r3,184(sp)
 4015b6c:	d9002f17 	ldw	r4,188(sp)
 4015b70:	18800017 	ldw	r2,0(r3)
 4015b74:	18c00104 	addi	r3,r3,4
 4015b78:	d8c02e15 	stw	r3,184(sp)
 4015b7c:	11000015 	stw	r4,0(r2)
 4015b80:	003a3206 	br	401444c <__alt_mem_onchip_memory2_0+0xfc00f28c>
 4015b84:	d9002a17 	ldw	r4,168(sp)
 4015b88:	d8002785 	stb	zero,158(sp)
 4015b8c:	203d8d16 	blt	r4,zero,40151c4 <__alt_mem_onchip_memory2_0+0xfc010004>
 4015b90:	00bfdfc4 	movi	r2,-129
 4015b94:	90a4703a 	and	r18,r18,r2
 4015b98:	003ad506 	br	40146f0 <__alt_mem_onchip_memory2_0+0xfc00f530>
 4015b9c:	014100b4 	movhi	r5,1026
 4015ba0:	29558bc4 	addi	r5,r5,22063
 4015ba4:	d9402c15 	stw	r5,176(sp)
 4015ba8:	d9402c17 	ldw	r5,176(sp)
 4015bac:	1c47883a 	add	r3,r3,r17
 4015bb0:	10800044 	addi	r2,r2,1
 4015bb4:	41400015 	stw	r5,0(r8)
 4015bb8:	44400115 	stw	r17,4(r8)
 4015bbc:	d8c02015 	stw	r3,128(sp)
 4015bc0:	d8801f15 	stw	r2,124(sp)
 4015bc4:	010001c4 	movi	r4,7
 4015bc8:	20bf3016 	blt	r4,r2,401588c <__alt_mem_onchip_memory2_0+0xfc0106cc>
 4015bcc:	42000204 	addi	r8,r8,8
 4015bd0:	003f3506 	br	40158a8 <__alt_mem_onchip_memory2_0+0xfc0106e8>
 4015bd4:	010100b4 	movhi	r4,1026
 4015bd8:	21158bc4 	addi	r4,r4,22063
 4015bdc:	d9002c15 	stw	r4,176(sp)
 4015be0:	003c3c06 	br	4014cd4 <__alt_mem_onchip_memory2_0+0xfc00fb14>
 4015be4:	d9402d17 	ldw	r5,180(sp)
 4015be8:	d9801e04 	addi	r6,sp,120
 4015bec:	9809883a 	mov	r4,r19
 4015bf0:	401dee00 	call	401dee0 <__ssprint_r>
 4015bf4:	103ad11e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015bf8:	d8c02017 	ldw	r3,128(sp)
 4015bfc:	da000404 	addi	r8,sp,16
 4015c00:	003d9306 	br	4015250 <__alt_mem_onchip_memory2_0+0xfc010090>
 4015c04:	d8801f17 	ldw	r2,124(sp)
 4015c08:	014100b4 	movhi	r5,1026
 4015c0c:	01000044 	movi	r4,1
 4015c10:	18c00044 	addi	r3,r3,1
 4015c14:	10800044 	addi	r2,r2,1
 4015c18:	29553904 	addi	r5,r5,21732
 4015c1c:	41000115 	stw	r4,4(r8)
 4015c20:	41400015 	stw	r5,0(r8)
 4015c24:	d8c02015 	stw	r3,128(sp)
 4015c28:	d8801f15 	stw	r2,124(sp)
 4015c2c:	010001c4 	movi	r4,7
 4015c30:	2080b516 	blt	r4,r2,4015f08 <___svfprintf_internal_r+0x1b68>
 4015c34:	42000204 	addi	r8,r8,8
 4015c38:	8800041e 	bne	r17,zero,4015c4c <___svfprintf_internal_r+0x18ac>
 4015c3c:	d8803317 	ldw	r2,204(sp)
 4015c40:	1000021e 	bne	r2,zero,4015c4c <___svfprintf_internal_r+0x18ac>
 4015c44:	9080004c 	andi	r2,r18,1
 4015c48:	103c3926 	beq	r2,zero,4014d30 <__alt_mem_onchip_memory2_0+0xfc00fb70>
 4015c4c:	d9003817 	ldw	r4,224(sp)
 4015c50:	d8801f17 	ldw	r2,124(sp)
 4015c54:	d9403417 	ldw	r5,208(sp)
 4015c58:	20c7883a 	add	r3,r4,r3
 4015c5c:	10800044 	addi	r2,r2,1
 4015c60:	41000115 	stw	r4,4(r8)
 4015c64:	41400015 	stw	r5,0(r8)
 4015c68:	d8c02015 	stw	r3,128(sp)
 4015c6c:	d8801f15 	stw	r2,124(sp)
 4015c70:	010001c4 	movi	r4,7
 4015c74:	20818016 	blt	r4,r2,4016278 <___svfprintf_internal_r+0x1ed8>
 4015c78:	42000204 	addi	r8,r8,8
 4015c7c:	0463c83a 	sub	r17,zero,r17
 4015c80:	0440cb0e 	bge	zero,r17,4015fb0 <___svfprintf_internal_r+0x1c10>
 4015c84:	05800404 	movi	r22,16
 4015c88:	b440e80e 	bge	r22,r17,401602c <___svfprintf_internal_r+0x1c8c>
 4015c8c:	014100b4 	movhi	r5,1026
 4015c90:	29558bc4 	addi	r5,r5,22063
 4015c94:	d9402c15 	stw	r5,176(sp)
 4015c98:	070001c4 	movi	fp,7
 4015c9c:	dd002d17 	ldw	r20,180(sp)
 4015ca0:	00000306 	br	4015cb0 <___svfprintf_internal_r+0x1910>
 4015ca4:	42000204 	addi	r8,r8,8
 4015ca8:	8c7ffc04 	addi	r17,r17,-16
 4015cac:	b440e20e 	bge	r22,r17,4016038 <___svfprintf_internal_r+0x1c98>
 4015cb0:	18c00404 	addi	r3,r3,16
 4015cb4:	10800044 	addi	r2,r2,1
 4015cb8:	45400015 	stw	r21,0(r8)
 4015cbc:	45800115 	stw	r22,4(r8)
 4015cc0:	d8c02015 	stw	r3,128(sp)
 4015cc4:	d8801f15 	stw	r2,124(sp)
 4015cc8:	e0bff60e 	bge	fp,r2,4015ca4 <__alt_mem_onchip_memory2_0+0xfc010ae4>
 4015ccc:	d9801e04 	addi	r6,sp,120
 4015cd0:	a00b883a 	mov	r5,r20
 4015cd4:	9809883a 	mov	r4,r19
 4015cd8:	401dee00 	call	401dee0 <__ssprint_r>
 4015cdc:	103a971e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015ce0:	d8c02017 	ldw	r3,128(sp)
 4015ce4:	d8801f17 	ldw	r2,124(sp)
 4015ce8:	da000404 	addi	r8,sp,16
 4015cec:	003fee06 	br	4015ca8 <__alt_mem_onchip_memory2_0+0xfc010ae8>
 4015cf0:	d9002e17 	ldw	r4,184(sp)
 4015cf4:	d9402a17 	ldw	r5,168(sp)
 4015cf8:	002d883a 	mov	r22,zero
 4015cfc:	20800104 	addi	r2,r4,4
 4015d00:	25000017 	ldw	r20,0(r4)
 4015d04:	283e7d0e 	bge	r5,zero,40156fc <__alt_mem_onchip_memory2_0+0xfc01053c>
 4015d08:	003eda06 	br	4015874 <__alt_mem_onchip_memory2_0+0xfc0106b4>
 4015d0c:	d9002e17 	ldw	r4,184(sp)
 4015d10:	d9402a17 	ldw	r5,168(sp)
 4015d14:	002d883a 	mov	r22,zero
 4015d18:	20800104 	addi	r2,r4,4
 4015d1c:	25000017 	ldw	r20,0(r4)
 4015d20:	283e2d0e 	bge	r5,zero,40155d8 <__alt_mem_onchip_memory2_0+0xfc010418>
 4015d24:	003f6b06 	br	4015ad4 <__alt_mem_onchip_memory2_0+0xfc010914>
 4015d28:	d8c02e15 	stw	r3,184(sp)
 4015d2c:	0039883a 	mov	fp,zero
 4015d30:	003ed206 	br	401587c <__alt_mem_onchip_memory2_0+0xfc0106bc>
 4015d34:	bc400043 	ldbu	r17,1(r23)
 4015d38:	84000814 	ori	r16,r16,32
 4015d3c:	bdc00044 	addi	r23,r23,1
 4015d40:	8c403fcc 	andi	r17,r17,255
 4015d44:	8c40201c 	xori	r17,r17,128
 4015d48:	8c7fe004 	addi	r17,r17,-128
 4015d4c:	0039e906 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 4015d50:	d9402d17 	ldw	r5,180(sp)
 4015d54:	d9801e04 	addi	r6,sp,120
 4015d58:	9809883a 	mov	r4,r19
 4015d5c:	401dee00 	call	401dee0 <__ssprint_r>
 4015d60:	103a761e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015d64:	d8c02017 	ldw	r3,128(sp)
 4015d68:	da000404 	addi	r8,sp,16
 4015d6c:	003d4a06 	br	4015298 <__alt_mem_onchip_memory2_0+0xfc0100d8>
 4015d70:	d9002a17 	ldw	r4,168(sp)
 4015d74:	05bff7c4 	movi	r22,-33
 4015d78:	00bfffc4 	movi	r2,-1
 4015d7c:	8dac703a 	and	r22,r17,r22
 4015d80:	20806a26 	beq	r4,r2,4015f2c <___svfprintf_internal_r+0x1b8c>
 4015d84:	008011c4 	movi	r2,71
 4015d88:	b0813726 	beq	r22,r2,4016268 <___svfprintf_internal_r+0x1ec8>
 4015d8c:	d9003717 	ldw	r4,220(sp)
 4015d90:	90c04014 	ori	r3,r18,256
 4015d94:	d8c02c15 	stw	r3,176(sp)
 4015d98:	20015d16 	blt	r4,zero,4016310 <___svfprintf_internal_r+0x1f70>
 4015d9c:	dd003717 	ldw	r20,220(sp)
 4015da0:	d8002905 	stb	zero,164(sp)
 4015da4:	00801984 	movi	r2,102
 4015da8:	88814026 	beq	r17,r2,40162ac <___svfprintf_internal_r+0x1f0c>
 4015dac:	00801184 	movi	r2,70
 4015db0:	88817126 	beq	r17,r2,4016378 <___svfprintf_internal_r+0x1fd8>
 4015db4:	00801144 	movi	r2,69
 4015db8:	b0816226 	beq	r22,r2,4016344 <___svfprintf_internal_r+0x1fa4>
 4015dbc:	d8c02a17 	ldw	r3,168(sp)
 4015dc0:	d8802104 	addi	r2,sp,132
 4015dc4:	d8800315 	stw	r2,12(sp)
 4015dc8:	d9403617 	ldw	r5,216(sp)
 4015dcc:	d8802504 	addi	r2,sp,148
 4015dd0:	d8800215 	stw	r2,8(sp)
 4015dd4:	d8802604 	addi	r2,sp,152
 4015dd8:	d8c00015 	stw	r3,0(sp)
 4015ddc:	d8800115 	stw	r2,4(sp)
 4015de0:	01c00084 	movi	r7,2
 4015de4:	a00d883a 	mov	r6,r20
 4015de8:	9809883a 	mov	r4,r19
 4015dec:	d8c03d15 	stw	r3,244(sp)
 4015df0:	da003e15 	stw	r8,248(sp)
 4015df4:	4018ddc0 	call	4018ddc <_dtoa_r>
 4015df8:	1021883a 	mov	r16,r2
 4015dfc:	008019c4 	movi	r2,103
 4015e00:	d8c03d17 	ldw	r3,244(sp)
 4015e04:	da003e17 	ldw	r8,248(sp)
 4015e08:	8880e726 	beq	r17,r2,40161a8 <___svfprintf_internal_r+0x1e08>
 4015e0c:	008011c4 	movi	r2,71
 4015e10:	8880d426 	beq	r17,r2,4016164 <___svfprintf_internal_r+0x1dc4>
 4015e14:	80f9883a 	add	fp,r16,r3
 4015e18:	d9003617 	ldw	r4,216(sp)
 4015e1c:	000d883a 	mov	r6,zero
 4015e20:	000f883a 	mov	r7,zero
 4015e24:	a00b883a 	mov	r5,r20
 4015e28:	da003e15 	stw	r8,248(sp)
 4015e2c:	4012ad80 	call	4012ad8 <__eqdf2>
 4015e30:	da003e17 	ldw	r8,248(sp)
 4015e34:	1000e426 	beq	r2,zero,40161c8 <___svfprintf_internal_r+0x1e28>
 4015e38:	d8802117 	ldw	r2,132(sp)
 4015e3c:	1700062e 	bgeu	r2,fp,4015e58 <___svfprintf_internal_r+0x1ab8>
 4015e40:	01000c04 	movi	r4,48
 4015e44:	10c00044 	addi	r3,r2,1
 4015e48:	d8c02115 	stw	r3,132(sp)
 4015e4c:	11000005 	stb	r4,0(r2)
 4015e50:	d8802117 	ldw	r2,132(sp)
 4015e54:	173ffb36 	bltu	r2,fp,4015e44 <__alt_mem_onchip_memory2_0+0xfc010c84>
 4015e58:	1405c83a 	sub	r2,r2,r16
 4015e5c:	d8803315 	stw	r2,204(sp)
 4015e60:	008011c4 	movi	r2,71
 4015e64:	b080c526 	beq	r22,r2,401617c <___svfprintf_internal_r+0x1ddc>
 4015e68:	00801944 	movi	r2,101
 4015e6c:	1441d80e 	bge	r2,r17,40165d0 <___svfprintf_internal_r+0x2230>
 4015e70:	d8c02617 	ldw	r3,152(sp)
 4015e74:	00801984 	movi	r2,102
 4015e78:	d8c03215 	stw	r3,200(sp)
 4015e7c:	88813426 	beq	r17,r2,4016350 <___svfprintf_internal_r+0x1fb0>
 4015e80:	d8c03217 	ldw	r3,200(sp)
 4015e84:	d9003317 	ldw	r4,204(sp)
 4015e88:	19012516 	blt	r3,r4,4016320 <___svfprintf_internal_r+0x1f80>
 4015e8c:	9480004c 	andi	r18,r18,1
 4015e90:	9001841e 	bne	r18,zero,40164a4 <___svfprintf_internal_r+0x2104>
 4015e94:	1805883a 	mov	r2,r3
 4015e98:	1801cb16 	blt	r3,zero,40165c8 <___svfprintf_internal_r+0x2228>
 4015e9c:	d8c03217 	ldw	r3,200(sp)
 4015ea0:	044019c4 	movi	r17,103
 4015ea4:	d8c02b15 	stw	r3,172(sp)
 4015ea8:	df002907 	ldb	fp,164(sp)
 4015eac:	e000a61e 	bne	fp,zero,4016148 <___svfprintf_internal_r+0x1da8>
 4015eb0:	df002783 	ldbu	fp,158(sp)
 4015eb4:	d8802915 	stw	r2,164(sp)
 4015eb8:	dc802c17 	ldw	r18,176(sp)
 4015ebc:	d8002a15 	stw	zero,168(sp)
 4015ec0:	003af506 	br	4014a98 <__alt_mem_onchip_memory2_0+0xfc00f8d8>
 4015ec4:	040100b4 	movhi	r16,1026
 4015ec8:	84157c04 	addi	r16,r16,22000
 4015ecc:	003a7e06 	br	40148c8 <__alt_mem_onchip_memory2_0+0xfc00f708>
 4015ed0:	d9003917 	ldw	r4,228(sp)
 4015ed4:	04001004 	movi	r16,64
 4015ed8:	800b883a 	mov	r5,r16
 4015edc:	401b8340 	call	401b834 <_malloc_r>
 4015ee0:	d9002d17 	ldw	r4,180(sp)
 4015ee4:	20800015 	stw	r2,0(r4)
 4015ee8:	20800415 	stw	r2,16(r4)
 4015eec:	1001d026 	beq	r2,zero,4016630 <___svfprintf_internal_r+0x2290>
 4015ef0:	d8802d17 	ldw	r2,180(sp)
 4015ef4:	14000515 	stw	r16,20(r2)
 4015ef8:	00394406 	br	401440c <__alt_mem_onchip_memory2_0+0xfc00f24c>
 4015efc:	040100b4 	movhi	r16,1026
 4015f00:	84157e04 	addi	r16,r16,22008
 4015f04:	003ee106 	br	4015a8c <__alt_mem_onchip_memory2_0+0xfc0108cc>
 4015f08:	d9402d17 	ldw	r5,180(sp)
 4015f0c:	d9801e04 	addi	r6,sp,120
 4015f10:	9809883a 	mov	r4,r19
 4015f14:	401dee00 	call	401dee0 <__ssprint_r>
 4015f18:	103a081e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015f1c:	dc402617 	ldw	r17,152(sp)
 4015f20:	d8c02017 	ldw	r3,128(sp)
 4015f24:	da000404 	addi	r8,sp,16
 4015f28:	003f4306 	br	4015c38 <__alt_mem_onchip_memory2_0+0xfc010a78>
 4015f2c:	01400184 	movi	r5,6
 4015f30:	d9402a15 	stw	r5,168(sp)
 4015f34:	003f9506 	br	4015d8c <__alt_mem_onchip_memory2_0+0xfc010bcc>
 4015f38:	d8c02e17 	ldw	r3,184(sp)
 4015f3c:	1d000017 	ldw	r20,0(r3)
 4015f40:	18c00104 	addi	r3,r3,4
 4015f44:	d8c02e15 	stw	r3,184(sp)
 4015f48:	a02dd7fa 	srai	r22,r20,31
 4015f4c:	b005883a 	mov	r2,r22
 4015f50:	003a7606 	br	401492c <__alt_mem_onchip_memory2_0+0xfc00f76c>
 4015f54:	d9002e17 	ldw	r4,184(sp)
 4015f58:	002d883a 	mov	r22,zero
 4015f5c:	25000017 	ldw	r20,0(r4)
 4015f60:	21000104 	addi	r4,r4,4
 4015f64:	d9002e15 	stw	r4,184(sp)
 4015f68:	003bdd06 	br	4014ee0 <__alt_mem_onchip_memory2_0+0xfc00fd20>
 4015f6c:	9480100c 	andi	r18,r18,64
 4015f70:	90006e26 	beq	r18,zero,401612c <___svfprintf_internal_r+0x1d8c>
 4015f74:	d9402e17 	ldw	r5,184(sp)
 4015f78:	d8c02f17 	ldw	r3,188(sp)
 4015f7c:	28800017 	ldw	r2,0(r5)
 4015f80:	29400104 	addi	r5,r5,4
 4015f84:	d9402e15 	stw	r5,184(sp)
 4015f88:	10c0000d 	sth	r3,0(r2)
 4015f8c:	00392f06 	br	401444c <__alt_mem_onchip_memory2_0+0xfc00f28c>
 4015f90:	d9402d17 	ldw	r5,180(sp)
 4015f94:	d9801e04 	addi	r6,sp,120
 4015f98:	9809883a 	mov	r4,r19
 4015f9c:	401dee00 	call	401dee0 <__ssprint_r>
 4015fa0:	1039e61e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4015fa4:	d8c02017 	ldw	r3,128(sp)
 4015fa8:	d8801f17 	ldw	r2,124(sp)
 4015fac:	da000404 	addi	r8,sp,16
 4015fb0:	d9403317 	ldw	r5,204(sp)
 4015fb4:	10800044 	addi	r2,r2,1
 4015fb8:	44000015 	stw	r16,0(r8)
 4015fbc:	28c7883a 	add	r3,r5,r3
 4015fc0:	003b5506 	br	4014d18 <__alt_mem_onchip_memory2_0+0xfc00fb58>
 4015fc4:	8009883a 	mov	r4,r16
 4015fc8:	df003e15 	stw	fp,248(sp)
 4015fcc:	40143080 	call	4014308 <strlen>
 4015fd0:	d8802b15 	stw	r2,172(sp)
 4015fd4:	da003e17 	ldw	r8,248(sp)
 4015fd8:	103c160e 	bge	r2,zero,4015034 <__alt_mem_onchip_memory2_0+0xfc00fe74>
 4015fdc:	0005883a 	mov	r2,zero
 4015fe0:	003c1406 	br	4015034 <__alt_mem_onchip_memory2_0+0xfc00fe74>
 4015fe4:	00bfffc4 	movi	r2,-1
 4015fe8:	0039d906 	br	4014750 <__alt_mem_onchip_memory2_0+0xfc00f590>
 4015fec:	010100b4 	movhi	r4,1026
 4015ff0:	21158fc4 	addi	r4,r4,22079
 4015ff4:	d9003515 	stw	r4,212(sp)
 4015ff8:	003ae406 	br	4014b8c <__alt_mem_onchip_memory2_0+0xfc00f9cc>
 4015ffc:	013fffc4 	movi	r4,-1
 4016000:	0039fa06 	br	40147ec <__alt_mem_onchip_memory2_0+0xfc00f62c>
 4016004:	d9402d17 	ldw	r5,180(sp)
 4016008:	d9801e04 	addi	r6,sp,120
 401600c:	9809883a 	mov	r4,r19
 4016010:	401dee00 	call	401dee0 <__ssprint_r>
 4016014:	1039c91e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4016018:	d8c02017 	ldw	r3,128(sp)
 401601c:	da000404 	addi	r8,sp,16
 4016020:	003d8406 	br	4015634 <__alt_mem_onchip_memory2_0+0xfc010474>
 4016024:	0023883a 	mov	r17,zero
 4016028:	003d8306 	br	4015638 <__alt_mem_onchip_memory2_0+0xfc010478>
 401602c:	010100b4 	movhi	r4,1026
 4016030:	21158bc4 	addi	r4,r4,22063
 4016034:	d9002c15 	stw	r4,176(sp)
 4016038:	d9002c17 	ldw	r4,176(sp)
 401603c:	1c47883a 	add	r3,r3,r17
 4016040:	10800044 	addi	r2,r2,1
 4016044:	41000015 	stw	r4,0(r8)
 4016048:	44400115 	stw	r17,4(r8)
 401604c:	d8c02015 	stw	r3,128(sp)
 4016050:	d8801f15 	stw	r2,124(sp)
 4016054:	010001c4 	movi	r4,7
 4016058:	20bfcd16 	blt	r4,r2,4015f90 <__alt_mem_onchip_memory2_0+0xfc010dd0>
 401605c:	42000204 	addi	r8,r8,8
 4016060:	003fd306 	br	4015fb0 <__alt_mem_onchip_memory2_0+0xfc010df0>
 4016064:	d9402d17 	ldw	r5,180(sp)
 4016068:	d9801e04 	addi	r6,sp,120
 401606c:	9809883a 	mov	r4,r19
 4016070:	401dee00 	call	401dee0 <__ssprint_r>
 4016074:	1039b11e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 4016078:	d8802617 	ldw	r2,152(sp)
 401607c:	d8c02017 	ldw	r3,128(sp)
 4016080:	da000404 	addi	r8,sp,16
 4016084:	003e1c06 	br	40158f8 <__alt_mem_onchip_memory2_0+0xfc010738>
 4016088:	d8802a17 	ldw	r2,168(sp)
 401608c:	00c00184 	movi	r3,6
 4016090:	1880012e 	bgeu	r3,r2,4016098 <___svfprintf_internal_r+0x1cf8>
 4016094:	1805883a 	mov	r2,r3
 4016098:	d8802b15 	stw	r2,172(sp)
 401609c:	1000f316 	blt	r2,zero,401646c <___svfprintf_internal_r+0x20cc>
 40160a0:	040100b4 	movhi	r16,1026
 40160a4:	d8802915 	stw	r2,164(sp)
 40160a8:	dd002e15 	stw	r20,184(sp)
 40160ac:	d8002a15 	stw	zero,168(sp)
 40160b0:	d8003215 	stw	zero,200(sp)
 40160b4:	84158a04 	addi	r16,r16,22056
 40160b8:	0039883a 	mov	fp,zero
 40160bc:	003a7d06 	br	4014ab4 <__alt_mem_onchip_memory2_0+0xfc00f8f4>
 40160c0:	010100b4 	movhi	r4,1026
 40160c4:	21158fc4 	addi	r4,r4,22079
 40160c8:	d9003515 	stw	r4,212(sp)
 40160cc:	003b3d06 	br	4014dc4 <__alt_mem_onchip_memory2_0+0xfc00fc04>
 40160d0:	d9402d17 	ldw	r5,180(sp)
 40160d4:	d9801e04 	addi	r6,sp,120
 40160d8:	9809883a 	mov	r4,r19
 40160dc:	401dee00 	call	401dee0 <__ssprint_r>
 40160e0:	1039961e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 40160e4:	d8802617 	ldw	r2,152(sp)
 40160e8:	d9403317 	ldw	r5,204(sp)
 40160ec:	d8c02017 	ldw	r3,128(sp)
 40160f0:	da000404 	addi	r8,sp,16
 40160f4:	2885c83a 	sub	r2,r5,r2
 40160f8:	003e1006 	br	401593c <__alt_mem_onchip_memory2_0+0xfc01077c>
 40160fc:	00800044 	movi	r2,1
 4016100:	10803fcc 	andi	r2,r2,255
 4016104:	00c00044 	movi	r3,1
 4016108:	10fa1026 	beq	r2,r3,401494c <__alt_mem_onchip_memory2_0+0xfc00f78c>
 401610c:	00c00084 	movi	r3,2
 4016110:	10fb8226 	beq	r2,r3,4014f1c <__alt_mem_onchip_memory2_0+0xfc00fd5c>
 4016114:	003a4206 	br	4014a20 <__alt_mem_onchip_memory2_0+0xfc00f860>
 4016118:	0021883a 	mov	r16,zero
 401611c:	003e0806 	br	4015940 <__alt_mem_onchip_memory2_0+0xfc010780>
 4016120:	07000b44 	movi	fp,45
 4016124:	df002785 	stb	fp,158(sp)
 4016128:	0039e306 	br	40148b8 <__alt_mem_onchip_memory2_0+0xfc00f6f8>
 401612c:	d9002e17 	ldw	r4,184(sp)
 4016130:	d9402f17 	ldw	r5,188(sp)
 4016134:	20800017 	ldw	r2,0(r4)
 4016138:	21000104 	addi	r4,r4,4
 401613c:	d9002e15 	stw	r4,184(sp)
 4016140:	11400015 	stw	r5,0(r2)
 4016144:	0038c106 	br	401444c <__alt_mem_onchip_memory2_0+0xfc00f28c>
 4016148:	00c00b44 	movi	r3,45
 401614c:	d8c02785 	stb	r3,158(sp)
 4016150:	d8802915 	stw	r2,164(sp)
 4016154:	dc802c17 	ldw	r18,176(sp)
 4016158:	d8002a15 	stw	zero,168(sp)
 401615c:	07000b44 	movi	fp,45
 4016160:	003a5106 	br	4014aa8 <__alt_mem_onchip_memory2_0+0xfc00f8e8>
 4016164:	9080004c 	andi	r2,r18,1
 4016168:	1000941e 	bne	r2,zero,40163bc <___svfprintf_internal_r+0x201c>
 401616c:	d8802117 	ldw	r2,132(sp)
 4016170:	1405c83a 	sub	r2,r2,r16
 4016174:	d8803315 	stw	r2,204(sp)
 4016178:	b441151e 	bne	r22,r17,40165d0 <___svfprintf_internal_r+0x2230>
 401617c:	dd802617 	ldw	r22,152(sp)
 4016180:	00bfff44 	movi	r2,-3
 4016184:	b0801a16 	blt	r22,r2,40161f0 <___svfprintf_internal_r+0x1e50>
 4016188:	d9402a17 	ldw	r5,168(sp)
 401618c:	2d801816 	blt	r5,r22,40161f0 <___svfprintf_internal_r+0x1e50>
 4016190:	dd803215 	stw	r22,200(sp)
 4016194:	003f3a06 	br	4015e80 <__alt_mem_onchip_memory2_0+0xfc010cc0>
 4016198:	1025883a 	mov	r18,r2
 401619c:	0039883a 	mov	fp,zero
 40161a0:	00800084 	movi	r2,2
 40161a4:	003fd606 	br	4016100 <__alt_mem_onchip_memory2_0+0xfc010f40>
 40161a8:	9080004c 	andi	r2,r18,1
 40161ac:	103f191e 	bne	r2,zero,4015e14 <__alt_mem_onchip_memory2_0+0xfc010c54>
 40161b0:	d8802117 	ldw	r2,132(sp)
 40161b4:	003f2806 	br	4015e58 <__alt_mem_onchip_memory2_0+0xfc010c98>
 40161b8:	010100b4 	movhi	r4,1026
 40161bc:	21158bc4 	addi	r4,r4,22063
 40161c0:	d9002c15 	stw	r4,176(sp)
 40161c4:	003c7c06 	br	40153b8 <__alt_mem_onchip_memory2_0+0xfc0101f8>
 40161c8:	e005883a 	mov	r2,fp
 40161cc:	003f2206 	br	4015e58 <__alt_mem_onchip_memory2_0+0xfc010c98>
 40161d0:	d9002a17 	ldw	r4,168(sp)
 40161d4:	df002783 	ldbu	fp,158(sp)
 40161d8:	dd002e15 	stw	r20,184(sp)
 40161dc:	d9002915 	stw	r4,164(sp)
 40161e0:	d9002b15 	stw	r4,172(sp)
 40161e4:	d8002a15 	stw	zero,168(sp)
 40161e8:	d8003215 	stw	zero,200(sp)
 40161ec:	003a2a06 	br	4014a98 <__alt_mem_onchip_memory2_0+0xfc00f8d8>
 40161f0:	8c7fff84 	addi	r17,r17,-2
 40161f4:	b5bfffc4 	addi	r22,r22,-1
 40161f8:	dd802615 	stw	r22,152(sp)
 40161fc:	dc4022c5 	stb	r17,139(sp)
 4016200:	b000c316 	blt	r22,zero,4016510 <___svfprintf_internal_r+0x2170>
 4016204:	00800ac4 	movi	r2,43
 4016208:	d8802305 	stb	r2,140(sp)
 401620c:	00800244 	movi	r2,9
 4016210:	15806e16 	blt	r2,r22,40163cc <___svfprintf_internal_r+0x202c>
 4016214:	00800c04 	movi	r2,48
 4016218:	b5800c04 	addi	r22,r22,48
 401621c:	d8802345 	stb	r2,141(sp)
 4016220:	dd802385 	stb	r22,142(sp)
 4016224:	d88023c4 	addi	r2,sp,143
 4016228:	df0022c4 	addi	fp,sp,139
 401622c:	d8c03317 	ldw	r3,204(sp)
 4016230:	1739c83a 	sub	fp,r2,fp
 4016234:	d9003317 	ldw	r4,204(sp)
 4016238:	e0c7883a 	add	r3,fp,r3
 401623c:	df003b15 	stw	fp,236(sp)
 4016240:	d8c02b15 	stw	r3,172(sp)
 4016244:	00800044 	movi	r2,1
 4016248:	1100b70e 	bge	r2,r4,4016528 <___svfprintf_internal_r+0x2188>
 401624c:	d8c02b17 	ldw	r3,172(sp)
 4016250:	18c00044 	addi	r3,r3,1
 4016254:	d8c02b15 	stw	r3,172(sp)
 4016258:	1805883a 	mov	r2,r3
 401625c:	1800b016 	blt	r3,zero,4016520 <___svfprintf_internal_r+0x2180>
 4016260:	d8003215 	stw	zero,200(sp)
 4016264:	003f1006 	br	4015ea8 <__alt_mem_onchip_memory2_0+0xfc010ce8>
 4016268:	d8802a17 	ldw	r2,168(sp)
 401626c:	103ec71e 	bne	r2,zero,4015d8c <__alt_mem_onchip_memory2_0+0xfc010bcc>
 4016270:	dc002a15 	stw	r16,168(sp)
 4016274:	003ec506 	br	4015d8c <__alt_mem_onchip_memory2_0+0xfc010bcc>
 4016278:	d9402d17 	ldw	r5,180(sp)
 401627c:	d9801e04 	addi	r6,sp,120
 4016280:	9809883a 	mov	r4,r19
 4016284:	401dee00 	call	401dee0 <__ssprint_r>
 4016288:	10392c1e 	bne	r2,zero,401473c <__alt_mem_onchip_memory2_0+0xfc00f57c>
 401628c:	dc402617 	ldw	r17,152(sp)
 4016290:	d8c02017 	ldw	r3,128(sp)
 4016294:	d8801f17 	ldw	r2,124(sp)
 4016298:	da000404 	addi	r8,sp,16
 401629c:	003e7706 	br	4015c7c <__alt_mem_onchip_memory2_0+0xfc010abc>
 40162a0:	182f883a 	mov	r23,r3
 40162a4:	d8002a15 	stw	zero,168(sp)
 40162a8:	00389306 	br	40144f8 <__alt_mem_onchip_memory2_0+0xfc00f338>
 40162ac:	d8c02a17 	ldw	r3,168(sp)
 40162b0:	d8802104 	addi	r2,sp,132
 40162b4:	d8800315 	stw	r2,12(sp)
 40162b8:	d9403617 	ldw	r5,216(sp)
 40162bc:	d8802504 	addi	r2,sp,148
 40162c0:	d8800215 	stw	r2,8(sp)
 40162c4:	d8802604 	addi	r2,sp,152
 40162c8:	d8c00015 	stw	r3,0(sp)
 40162cc:	9809883a 	mov	r4,r19
 40162d0:	d8800115 	stw	r2,4(sp)
 40162d4:	01c000c4 	movi	r7,3
 40162d8:	a00d883a 	mov	r6,r20
 40162dc:	da003e15 	stw	r8,248(sp)
 40162e0:	4018ddc0 	call	4018ddc <_dtoa_r>
 40162e4:	d9002a17 	ldw	r4,168(sp)
 40162e8:	da003e17 	ldw	r8,248(sp)
 40162ec:	1021883a 	mov	r16,r2
 40162f0:	1139883a 	add	fp,r2,r4
 40162f4:	2007883a 	mov	r3,r4
 40162f8:	81000007 	ldb	r4,0(r16)
 40162fc:	00800c04 	movi	r2,48
 4016300:	20806f26 	beq	r4,r2,40164c0 <___svfprintf_internal_r+0x2120>
 4016304:	d8c02617 	ldw	r3,152(sp)
 4016308:	e0f9883a 	add	fp,fp,r3
 401630c:	003ec206 	br	4015e18 <__alt_mem_onchip_memory2_0+0xfc010c58>
 4016310:	00c00b44 	movi	r3,45
 4016314:	2520003c 	xorhi	r20,r4,32768
 4016318:	d8c02905 	stb	r3,164(sp)
 401631c:	003ea106 	br	4015da4 <__alt_mem_onchip_memory2_0+0xfc010be4>
 4016320:	d8c03217 	ldw	r3,200(sp)
 4016324:	00c0890e 	bge	zero,r3,401654c <___svfprintf_internal_r+0x21ac>
 4016328:	00800044 	movi	r2,1
 401632c:	d9003317 	ldw	r4,204(sp)
 4016330:	1105883a 	add	r2,r2,r4
 4016334:	d8802b15 	stw	r2,172(sp)
 4016338:	10005f16 	blt	r2,zero,40164b8 <___svfprintf_internal_r+0x2118>
 401633c:	044019c4 	movi	r17,103
 4016340:	003ed906 	br	4015ea8 <__alt_mem_onchip_memory2_0+0xfc010ce8>
 4016344:	d9002a17 	ldw	r4,168(sp)
 4016348:	20c00044 	addi	r3,r4,1
 401634c:	003e9c06 	br	4015dc0 <__alt_mem_onchip_memory2_0+0xfc010c00>
 4016350:	d9002a17 	ldw	r4,168(sp)
 4016354:	00c0680e 	bge	zero,r3,40164f8 <___svfprintf_internal_r+0x2158>
 4016358:	2000461e 	bne	r4,zero,4016474 <___svfprintf_internal_r+0x20d4>
 401635c:	9480004c 	andi	r18,r18,1
 4016360:	9000441e 	bne	r18,zero,4016474 <___svfprintf_internal_r+0x20d4>
 4016364:	1805883a 	mov	r2,r3
 4016368:	1800a116 	blt	r3,zero,40165f0 <___svfprintf_internal_r+0x2250>
 401636c:	d8c03217 	ldw	r3,200(sp)
 4016370:	d8c02b15 	stw	r3,172(sp)
 4016374:	003ecc06 	br	4015ea8 <__alt_mem_onchip_memory2_0+0xfc010ce8>
 4016378:	d9402a17 	ldw	r5,168(sp)
 401637c:	d8802104 	addi	r2,sp,132
 4016380:	d8800315 	stw	r2,12(sp)
 4016384:	d9400015 	stw	r5,0(sp)
 4016388:	d8802504 	addi	r2,sp,148
 401638c:	d9403617 	ldw	r5,216(sp)
 4016390:	d8800215 	stw	r2,8(sp)
 4016394:	d8802604 	addi	r2,sp,152
 4016398:	d8800115 	stw	r2,4(sp)
 401639c:	01c000c4 	movi	r7,3
 40163a0:	a00d883a 	mov	r6,r20
 40163a4:	9809883a 	mov	r4,r19
 40163a8:	da003e15 	stw	r8,248(sp)
 40163ac:	4018ddc0 	call	4018ddc <_dtoa_r>
 40163b0:	d8c02a17 	ldw	r3,168(sp)
 40163b4:	da003e17 	ldw	r8,248(sp)
 40163b8:	1021883a 	mov	r16,r2
 40163bc:	00801184 	movi	r2,70
 40163c0:	80f9883a 	add	fp,r16,r3
 40163c4:	88bfcc26 	beq	r17,r2,40162f8 <__alt_mem_onchip_memory2_0+0xfc011138>
 40163c8:	003e9306 	br	4015e18 <__alt_mem_onchip_memory2_0+0xfc010c58>
 40163cc:	df0022c4 	addi	fp,sp,139
 40163d0:	dc002a15 	stw	r16,168(sp)
 40163d4:	9829883a 	mov	r20,r19
 40163d8:	e021883a 	mov	r16,fp
 40163dc:	4027883a 	mov	r19,r8
 40163e0:	b009883a 	mov	r4,r22
 40163e4:	01400284 	movi	r5,10
 40163e8:	40117040 	call	4011704 <__modsi3>
 40163ec:	10800c04 	addi	r2,r2,48
 40163f0:	843fffc4 	addi	r16,r16,-1
 40163f4:	b009883a 	mov	r4,r22
 40163f8:	01400284 	movi	r5,10
 40163fc:	80800005 	stb	r2,0(r16)
 4016400:	40116800 	call	4011680 <__divsi3>
 4016404:	102d883a 	mov	r22,r2
 4016408:	00800244 	movi	r2,9
 401640c:	15bff416 	blt	r2,r22,40163e0 <__alt_mem_onchip_memory2_0+0xfc011220>
 4016410:	9811883a 	mov	r8,r19
 4016414:	b0800c04 	addi	r2,r22,48
 4016418:	a027883a 	mov	r19,r20
 401641c:	8029883a 	mov	r20,r16
 4016420:	a17fffc4 	addi	r5,r20,-1
 4016424:	a0bfffc5 	stb	r2,-1(r20)
 4016428:	dc002a17 	ldw	r16,168(sp)
 401642c:	2f00782e 	bgeu	r5,fp,4016610 <___svfprintf_internal_r+0x2270>
 4016430:	d9c02384 	addi	r7,sp,142
 4016434:	3d0fc83a 	sub	r7,r7,r20
 4016438:	d9002344 	addi	r4,sp,141
 401643c:	e1cf883a 	add	r7,fp,r7
 4016440:	00000106 	br	4016448 <___svfprintf_internal_r+0x20a8>
 4016444:	28800003 	ldbu	r2,0(r5)
 4016448:	20800005 	stb	r2,0(r4)
 401644c:	21000044 	addi	r4,r4,1
 4016450:	29400044 	addi	r5,r5,1
 4016454:	21fffb1e 	bne	r4,r7,4016444 <__alt_mem_onchip_memory2_0+0xfc011284>
 4016458:	d8802304 	addi	r2,sp,140
 401645c:	1505c83a 	sub	r2,r2,r20
 4016460:	d8c02344 	addi	r3,sp,141
 4016464:	1885883a 	add	r2,r3,r2
 4016468:	003f7006 	br	401622c <__alt_mem_onchip_memory2_0+0xfc01106c>
 401646c:	0005883a 	mov	r2,zero
 4016470:	003f0b06 	br	40160a0 <__alt_mem_onchip_memory2_0+0xfc010ee0>
 4016474:	d9002a17 	ldw	r4,168(sp)
 4016478:	d8c03217 	ldw	r3,200(sp)
 401647c:	20800044 	addi	r2,r4,1
 4016480:	1885883a 	add	r2,r3,r2
 4016484:	d8802b15 	stw	r2,172(sp)
 4016488:	103e870e 	bge	r2,zero,4015ea8 <__alt_mem_onchip_memory2_0+0xfc010ce8>
 401648c:	0005883a 	mov	r2,zero
 4016490:	003e8506 	br	4015ea8 <__alt_mem_onchip_memory2_0+0xfc010ce8>
 4016494:	010100b4 	movhi	r4,1026
 4016498:	21158bc4 	addi	r4,r4,22063
 401649c:	d9002c15 	stw	r4,176(sp)
 40164a0:	003cc506 	br	40157b8 <__alt_mem_onchip_memory2_0+0xfc0105f8>
 40164a4:	d8c03217 	ldw	r3,200(sp)
 40164a8:	18c00044 	addi	r3,r3,1
 40164ac:	d8c02b15 	stw	r3,172(sp)
 40164b0:	1805883a 	mov	r2,r3
 40164b4:	183fa10e 	bge	r3,zero,401633c <__alt_mem_onchip_memory2_0+0xfc01117c>
 40164b8:	0005883a 	mov	r2,zero
 40164bc:	003f9f06 	br	401633c <__alt_mem_onchip_memory2_0+0xfc01117c>
 40164c0:	d9003617 	ldw	r4,216(sp)
 40164c4:	000d883a 	mov	r6,zero
 40164c8:	000f883a 	mov	r7,zero
 40164cc:	a00b883a 	mov	r5,r20
 40164d0:	d8c03d15 	stw	r3,244(sp)
 40164d4:	da003e15 	stw	r8,248(sp)
 40164d8:	4012ad80 	call	4012ad8 <__eqdf2>
 40164dc:	d8c03d17 	ldw	r3,244(sp)
 40164e0:	da003e17 	ldw	r8,248(sp)
 40164e4:	103f8726 	beq	r2,zero,4016304 <__alt_mem_onchip_memory2_0+0xfc011144>
 40164e8:	00800044 	movi	r2,1
 40164ec:	10c7c83a 	sub	r3,r2,r3
 40164f0:	d8c02615 	stw	r3,152(sp)
 40164f4:	003f8406 	br	4016308 <__alt_mem_onchip_memory2_0+0xfc011148>
 40164f8:	20000e1e 	bne	r4,zero,4016534 <___svfprintf_internal_r+0x2194>
 40164fc:	9480004c 	andi	r18,r18,1
 4016500:	90000c1e 	bne	r18,zero,4016534 <___svfprintf_internal_r+0x2194>
 4016504:	00800044 	movi	r2,1
 4016508:	d8802b15 	stw	r2,172(sp)
 401650c:	003e6606 	br	4015ea8 <__alt_mem_onchip_memory2_0+0xfc010ce8>
 4016510:	00800b44 	movi	r2,45
 4016514:	05adc83a 	sub	r22,zero,r22
 4016518:	d8802305 	stb	r2,140(sp)
 401651c:	003f3b06 	br	401620c <__alt_mem_onchip_memory2_0+0xfc01104c>
 4016520:	0005883a 	mov	r2,zero
 4016524:	003f4e06 	br	4016260 <__alt_mem_onchip_memory2_0+0xfc0110a0>
 4016528:	90a4703a 	and	r18,r18,r2
 401652c:	903f4a26 	beq	r18,zero,4016258 <__alt_mem_onchip_memory2_0+0xfc011098>
 4016530:	003f4606 	br	401624c <__alt_mem_onchip_memory2_0+0xfc01108c>
 4016534:	d8c02a17 	ldw	r3,168(sp)
 4016538:	18c00084 	addi	r3,r3,2
 401653c:	d8c02b15 	stw	r3,172(sp)
 4016540:	1805883a 	mov	r2,r3
 4016544:	183e580e 	bge	r3,zero,4015ea8 <__alt_mem_onchip_memory2_0+0xfc010ce8>
 4016548:	003fd006 	br	401648c <__alt_mem_onchip_memory2_0+0xfc0112cc>
 401654c:	00800084 	movi	r2,2
 4016550:	10c5c83a 	sub	r2,r2,r3
 4016554:	003f7506 	br	401632c <__alt_mem_onchip_memory2_0+0xfc01116c>
 4016558:	d9402e17 	ldw	r5,184(sp)
 401655c:	d9002e17 	ldw	r4,184(sp)
 4016560:	bc400043 	ldbu	r17,1(r23)
 4016564:	29400017 	ldw	r5,0(r5)
 4016568:	20800104 	addi	r2,r4,4
 401656c:	d8802e15 	stw	r2,184(sp)
 4016570:	d9402a15 	stw	r5,168(sp)
 4016574:	182f883a 	mov	r23,r3
 4016578:	283df10e 	bge	r5,zero,4015d40 <__alt_mem_onchip_memory2_0+0xfc010b80>
 401657c:	8c403fcc 	andi	r17,r17,255
 4016580:	017fffc4 	movi	r5,-1
 4016584:	8c40201c 	xori	r17,r17,128
 4016588:	d9402a15 	stw	r5,168(sp)
 401658c:	8c7fe004 	addi	r17,r17,-128
 4016590:	0037d806 	br	40144f4 <__alt_mem_onchip_memory2_0+0xfc00f334>
 4016594:	9080004c 	andi	r2,r18,1
 4016598:	0039883a 	mov	fp,zero
 401659c:	10000726 	beq	r2,zero,40165bc <___svfprintf_internal_r+0x221c>
 40165a0:	d8c02817 	ldw	r3,160(sp)
 40165a4:	dc001dc4 	addi	r16,sp,119
 40165a8:	00800c04 	movi	r2,48
 40165ac:	1c07c83a 	sub	r3,r3,r16
 40165b0:	d8801dc5 	stb	r2,119(sp)
 40165b4:	d8c02b15 	stw	r3,172(sp)
 40165b8:	00393106 	br	4014a80 <__alt_mem_onchip_memory2_0+0xfc00f8c0>
 40165bc:	d8002b15 	stw	zero,172(sp)
 40165c0:	dc001e04 	addi	r16,sp,120
 40165c4:	00392e06 	br	4014a80 <__alt_mem_onchip_memory2_0+0xfc00f8c0>
 40165c8:	0005883a 	mov	r2,zero
 40165cc:	003e3306 	br	4015e9c <__alt_mem_onchip_memory2_0+0xfc010cdc>
 40165d0:	dd802617 	ldw	r22,152(sp)
 40165d4:	003f0706 	br	40161f4 <__alt_mem_onchip_memory2_0+0xfc011034>
 40165d8:	d8c02b03 	ldbu	r3,172(sp)
 40165dc:	d8c02785 	stb	r3,158(sp)
 40165e0:	003a3506 	br	4014eb8 <__alt_mem_onchip_memory2_0+0xfc00fcf8>
 40165e4:	d8c02b03 	ldbu	r3,172(sp)
 40165e8:	d8c02785 	stb	r3,158(sp)
 40165ec:	003a1706 	br	4014e4c <__alt_mem_onchip_memory2_0+0xfc00fc8c>
 40165f0:	0005883a 	mov	r2,zero
 40165f4:	003f5d06 	br	401636c <__alt_mem_onchip_memory2_0+0xfc0111ac>
 40165f8:	d8c02b03 	ldbu	r3,172(sp)
 40165fc:	d8c02785 	stb	r3,158(sp)
 4016600:	0038f306 	br	40149d0 <__alt_mem_onchip_memory2_0+0xfc00f810>
 4016604:	d8c02b03 	ldbu	r3,172(sp)
 4016608:	d8c02785 	stb	r3,158(sp)
 401660c:	0038be06 	br	4014908 <__alt_mem_onchip_memory2_0+0xfc00f748>
 4016610:	d8802344 	addi	r2,sp,141
 4016614:	003f0506 	br	401622c <__alt_mem_onchip_memory2_0+0xfc01106c>
 4016618:	d8c02b03 	ldbu	r3,172(sp)
 401661c:	d8c02785 	stb	r3,158(sp)
 4016620:	00388b06 	br	4014850 <__alt_mem_onchip_memory2_0+0xfc00f690>
 4016624:	d8c02b03 	ldbu	r3,172(sp)
 4016628:	d8c02785 	stb	r3,158(sp)
 401662c:	003ad706 	br	401518c <__alt_mem_onchip_memory2_0+0xfc00ffcc>
 4016630:	d9403917 	ldw	r5,228(sp)
 4016634:	00800304 	movi	r2,12
 4016638:	28800015 	stw	r2,0(r5)
 401663c:	00bfffc4 	movi	r2,-1
 4016640:	00384306 	br	4014750 <__alt_mem_onchip_memory2_0+0xfc00f590>
 4016644:	d8c02b03 	ldbu	r3,172(sp)
 4016648:	d8c02785 	stb	r3,158(sp)
 401664c:	003ab606 	br	4015128 <__alt_mem_onchip_memory2_0+0xfc00ff68>
 4016650:	d8c02b03 	ldbu	r3,172(sp)
 4016654:	d8c02785 	stb	r3,158(sp)
 4016658:	003a8906 	br	4015080 <__alt_mem_onchip_memory2_0+0xfc00fec0>

0401665c <time>:
 401665c:	008100b4 	movhi	r2,1026
 4016660:	defffc04 	addi	sp,sp,-16
 4016664:	109ddd04 	addi	r2,r2,30580
 4016668:	dc000215 	stw	r16,8(sp)
 401666c:	2021883a 	mov	r16,r4
 4016670:	11000017 	ldw	r4,0(r2)
 4016674:	000d883a 	mov	r6,zero
 4016678:	d80b883a 	mov	r5,sp
 401667c:	dfc00315 	stw	ra,12(sp)
 4016680:	401b5400 	call	401b540 <_gettimeofday_r>
 4016684:	10000716 	blt	r2,zero,40166a4 <time+0x48>
 4016688:	d8800017 	ldw	r2,0(sp)
 401668c:	80000126 	beq	r16,zero,4016694 <time+0x38>
 4016690:	80800015 	stw	r2,0(r16)
 4016694:	dfc00317 	ldw	ra,12(sp)
 4016698:	dc000217 	ldw	r16,8(sp)
 401669c:	dec00404 	addi	sp,sp,16
 40166a0:	f800283a 	ret
 40166a4:	00bfffc4 	movi	r2,-1
 40166a8:	003ffa06 	br	4016694 <__alt_mem_onchip_memory2_0+0xfc0114d4>

040166ac <___vfprintf_internal_r>:
 40166ac:	deffb804 	addi	sp,sp,-288
 40166b0:	dfc04715 	stw	ra,284(sp)
 40166b4:	ddc04515 	stw	r23,276(sp)
 40166b8:	dd404315 	stw	r21,268(sp)
 40166bc:	d9002d15 	stw	r4,180(sp)
 40166c0:	282f883a 	mov	r23,r5
 40166c4:	302b883a 	mov	r21,r6
 40166c8:	d9c02e15 	stw	r7,184(sp)
 40166cc:	df004615 	stw	fp,280(sp)
 40166d0:	dd804415 	stw	r22,272(sp)
 40166d4:	dd004215 	stw	r20,264(sp)
 40166d8:	dcc04115 	stw	r19,260(sp)
 40166dc:	dc804015 	stw	r18,256(sp)
 40166e0:	dc403f15 	stw	r17,252(sp)
 40166e4:	dc003e15 	stw	r16,248(sp)
 40166e8:	401b6480 	call	401b648 <_localeconv_r>
 40166ec:	10800017 	ldw	r2,0(r2)
 40166f0:	1009883a 	mov	r4,r2
 40166f4:	d8803415 	stw	r2,208(sp)
 40166f8:	40143080 	call	4014308 <strlen>
 40166fc:	d8803715 	stw	r2,220(sp)
 4016700:	d8802d17 	ldw	r2,180(sp)
 4016704:	10000226 	beq	r2,zero,4016710 <___vfprintf_internal_r+0x64>
 4016708:	10800e17 	ldw	r2,56(r2)
 401670c:	1000fb26 	beq	r2,zero,4016afc <___vfprintf_internal_r+0x450>
 4016710:	b880030b 	ldhu	r2,12(r23)
 4016714:	10c8000c 	andi	r3,r2,8192
 4016718:	1800061e 	bne	r3,zero,4016734 <___vfprintf_internal_r+0x88>
 401671c:	b9001917 	ldw	r4,100(r23)
 4016720:	00f7ffc4 	movi	r3,-8193
 4016724:	10880014 	ori	r2,r2,8192
 4016728:	20c6703a 	and	r3,r4,r3
 401672c:	b880030d 	sth	r2,12(r23)
 4016730:	b8c01915 	stw	r3,100(r23)
 4016734:	10c0020c 	andi	r3,r2,8
 4016738:	1800c326 	beq	r3,zero,4016a48 <___vfprintf_internal_r+0x39c>
 401673c:	b8c00417 	ldw	r3,16(r23)
 4016740:	1800c126 	beq	r3,zero,4016a48 <___vfprintf_internal_r+0x39c>
 4016744:	1080068c 	andi	r2,r2,26
 4016748:	00c00284 	movi	r3,10
 401674c:	10c0c626 	beq	r2,r3,4016a68 <___vfprintf_internal_r+0x3bc>
 4016750:	d8c00404 	addi	r3,sp,16
 4016754:	050100b4 	movhi	r20,1026
 4016758:	d9001e04 	addi	r4,sp,120
 401675c:	a51593c4 	addi	r20,r20,22095
 4016760:	d8c01e15 	stw	r3,120(sp)
 4016764:	d8002015 	stw	zero,128(sp)
 4016768:	d8001f15 	stw	zero,124(sp)
 401676c:	d8003315 	stw	zero,204(sp)
 4016770:	d8003615 	stw	zero,216(sp)
 4016774:	d8003815 	stw	zero,224(sp)
 4016778:	1811883a 	mov	r8,r3
 401677c:	d8003915 	stw	zero,228(sp)
 4016780:	d8003a15 	stw	zero,232(sp)
 4016784:	d8002f15 	stw	zero,188(sp)
 4016788:	d9002815 	stw	r4,160(sp)
 401678c:	a8800007 	ldb	r2,0(r21)
 4016790:	10028b26 	beq	r2,zero,40171c0 <___vfprintf_internal_r+0xb14>
 4016794:	00c00944 	movi	r3,37
 4016798:	a823883a 	mov	r17,r21
 401679c:	10c0021e 	bne	r2,r3,40167a8 <___vfprintf_internal_r+0xfc>
 40167a0:	00001406 	br	40167f4 <___vfprintf_internal_r+0x148>
 40167a4:	10c00326 	beq	r2,r3,40167b4 <___vfprintf_internal_r+0x108>
 40167a8:	8c400044 	addi	r17,r17,1
 40167ac:	88800007 	ldb	r2,0(r17)
 40167b0:	103ffc1e 	bne	r2,zero,40167a4 <__alt_mem_onchip_memory2_0+0xfc0115e4>
 40167b4:	8d61c83a 	sub	r16,r17,r21
 40167b8:	80000e26 	beq	r16,zero,40167f4 <___vfprintf_internal_r+0x148>
 40167bc:	d8c02017 	ldw	r3,128(sp)
 40167c0:	d8801f17 	ldw	r2,124(sp)
 40167c4:	45400015 	stw	r21,0(r8)
 40167c8:	1c07883a 	add	r3,r3,r16
 40167cc:	10800044 	addi	r2,r2,1
 40167d0:	d8c02015 	stw	r3,128(sp)
 40167d4:	44000115 	stw	r16,4(r8)
 40167d8:	d8801f15 	stw	r2,124(sp)
 40167dc:	00c001c4 	movi	r3,7
 40167e0:	1880a916 	blt	r3,r2,4016a88 <___vfprintf_internal_r+0x3dc>
 40167e4:	42000204 	addi	r8,r8,8
 40167e8:	d9402f17 	ldw	r5,188(sp)
 40167ec:	2c0b883a 	add	r5,r5,r16
 40167f0:	d9402f15 	stw	r5,188(sp)
 40167f4:	88800007 	ldb	r2,0(r17)
 40167f8:	1000aa26 	beq	r2,zero,4016aa4 <___vfprintf_internal_r+0x3f8>
 40167fc:	8d400044 	addi	r21,r17,1
 4016800:	8c400047 	ldb	r17,1(r17)
 4016804:	0021883a 	mov	r16,zero
 4016808:	00bfffc4 	movi	r2,-1
 401680c:	0025883a 	mov	r18,zero
 4016810:	dc002905 	stb	r16,164(sp)
 4016814:	d8002785 	stb	zero,158(sp)
 4016818:	d8002b05 	stb	zero,172(sp)
 401681c:	d8802a15 	stw	r2,168(sp)
 4016820:	d8003115 	stw	zero,196(sp)
 4016824:	04c01604 	movi	r19,88
 4016828:	05800244 	movi	r22,9
 401682c:	9021883a 	mov	r16,r18
 4016830:	4039883a 	mov	fp,r8
 4016834:	ad400044 	addi	r21,r21,1
 4016838:	88bff804 	addi	r2,r17,-32
 401683c:	98833236 	bltu	r19,r2,4017508 <___vfprintf_internal_r+0xe5c>
 4016840:	100490ba 	slli	r2,r2,2
 4016844:	00c10074 	movhi	r3,1025
 4016848:	18da1604 	addi	r3,r3,26712
 401684c:	10c5883a 	add	r2,r2,r3
 4016850:	10800017 	ldw	r2,0(r2)
 4016854:	1000683a 	jmp	r2
 4016858:	04017400 	call	401740 <__alt_mem_sdram-0x3bfe8c0>
 401685c:	04017508 	cmpgei	r16,zero,1492
 4016860:	04017508 	cmpgei	r16,zero,1492
 4016864:	04017420 	cmpeqi	r16,zero,1488
 4016868:	04017508 	cmpgei	r16,zero,1492
 401686c:	04017508 	cmpgei	r16,zero,1492
 4016870:	04017508 	cmpgei	r16,zero,1492
 4016874:	04017508 	cmpgei	r16,zero,1492
 4016878:	04017508 	cmpgei	r16,zero,1492
 401687c:	04017508 	cmpgei	r16,zero,1492
 4016880:	04016b08 	cmpgei	r16,zero,1452
 4016884:	04017310 	cmplti	r16,zero,1484
 4016888:	04017508 	cmpgei	r16,zero,1492
 401688c:	040169cc 	andi	r16,zero,1447
 4016890:	04016b2c 	andhi	r16,zero,1452
 4016894:	04017508 	cmpgei	r16,zero,1492
 4016898:	04016b7c 	xorhi	r16,zero,1453
 401689c:	04016b88 	cmpgei	r16,zero,1454
 40168a0:	04016b88 	cmpgei	r16,zero,1454
 40168a4:	04016b88 	cmpgei	r16,zero,1454
 40168a8:	04016b88 	cmpgei	r16,zero,1454
 40168ac:	04016b88 	cmpgei	r16,zero,1454
 40168b0:	04016b88 	cmpgei	r16,zero,1454
 40168b4:	04016b88 	cmpgei	r16,zero,1454
 40168b8:	04016b88 	cmpgei	r16,zero,1454
 40168bc:	04016b88 	cmpgei	r16,zero,1454
 40168c0:	04017508 	cmpgei	r16,zero,1492
 40168c4:	04017508 	cmpgei	r16,zero,1492
 40168c8:	04017508 	cmpgei	r16,zero,1492
 40168cc:	04017508 	cmpgei	r16,zero,1492
 40168d0:	04017508 	cmpgei	r16,zero,1492
 40168d4:	04017508 	cmpgei	r16,zero,1492
 40168d8:	04017508 	cmpgei	r16,zero,1492
 40168dc:	04017508 	cmpgei	r16,zero,1492
 40168e0:	04017508 	cmpgei	r16,zero,1492
 40168e4:	04017508 	cmpgei	r16,zero,1492
 40168e8:	04016bc4 	movi	r16,1455
 40168ec:	04016c8c 	andi	r16,zero,1458
 40168f0:	04017508 	cmpgei	r16,zero,1492
 40168f4:	04016c8c 	andi	r16,zero,1458
 40168f8:	04017508 	cmpgei	r16,zero,1492
 40168fc:	04017508 	cmpgei	r16,zero,1492
 4016900:	04017508 	cmpgei	r16,zero,1492
 4016904:	04017508 	cmpgei	r16,zero,1492
 4016908:	04016d38 	rdprs	r16,zero,1460
 401690c:	04017508 	cmpgei	r16,zero,1492
 4016910:	04017508 	cmpgei	r16,zero,1492
 4016914:	04016d44 	movi	r16,1461
 4016918:	04017508 	cmpgei	r16,zero,1492
 401691c:	04017508 	cmpgei	r16,zero,1492
 4016920:	04017508 	cmpgei	r16,zero,1492
 4016924:	04017508 	cmpgei	r16,zero,1492
 4016928:	04017508 	cmpgei	r16,zero,1492
 401692c:	040171c8 	cmpgei	r16,zero,1479
 4016930:	04017508 	cmpgei	r16,zero,1492
 4016934:	04017508 	cmpgei	r16,zero,1492
 4016938:	04017234 	movhi	r16,1480
 401693c:	04017508 	cmpgei	r16,zero,1492
 4016940:	04017508 	cmpgei	r16,zero,1492
 4016944:	04017508 	cmpgei	r16,zero,1492
 4016948:	04017508 	cmpgei	r16,zero,1492
 401694c:	04017508 	cmpgei	r16,zero,1492
 4016950:	04017508 	cmpgei	r16,zero,1492
 4016954:	04017508 	cmpgei	r16,zero,1492
 4016958:	04017508 	cmpgei	r16,zero,1492
 401695c:	04017508 	cmpgei	r16,zero,1492
 4016960:	04017508 	cmpgei	r16,zero,1492
 4016964:	040174ac 	andhi	r16,zero,1490
 4016968:	0401742c 	andhi	r16,zero,1488
 401696c:	04016c8c 	andi	r16,zero,1458
 4016970:	04016c8c 	andi	r16,zero,1458
 4016974:	04016c8c 	andi	r16,zero,1458
 4016978:	0401744c 	andi	r16,zero,1489
 401697c:	0401742c 	andhi	r16,zero,1488
 4016980:	04017508 	cmpgei	r16,zero,1492
 4016984:	04017508 	cmpgei	r16,zero,1492
 4016988:	04017458 	cmpnei	r16,zero,1489
 401698c:	04017508 	cmpgei	r16,zero,1492
 4016990:	0401746c 	andhi	r16,zero,1489
 4016994:	040172f0 	cmpltui	r16,zero,1483
 4016998:	040169d8 	cmpnei	r16,zero,1447
 401699c:	04017328 	cmpgeui	r16,zero,1484
 40169a0:	04017508 	cmpgei	r16,zero,1492
 40169a4:	04017334 	movhi	r16,1484
 40169a8:	04017508 	cmpgei	r16,zero,1492
 40169ac:	04017398 	cmpnei	r16,zero,1486
 40169b0:	04017508 	cmpgei	r16,zero,1492
 40169b4:	04017508 	cmpgei	r16,zero,1492
 40169b8:	040173b8 	rdprs	r16,zero,1486
 40169bc:	d8c03117 	ldw	r3,196(sp)
 40169c0:	d8802e15 	stw	r2,184(sp)
 40169c4:	00c7c83a 	sub	r3,zero,r3
 40169c8:	d8c03115 	stw	r3,196(sp)
 40169cc:	84000114 	ori	r16,r16,4
 40169d0:	ac400007 	ldb	r17,0(r21)
 40169d4:	003f9706 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 40169d8:	00800c04 	movi	r2,48
 40169dc:	d8802705 	stb	r2,156(sp)
 40169e0:	00801e04 	movi	r2,120
 40169e4:	d8802745 	stb	r2,157(sp)
 40169e8:	d9002a17 	ldw	r4,168(sp)
 40169ec:	d8802e17 	ldw	r2,184(sp)
 40169f0:	d8002785 	stb	zero,158(sp)
 40169f4:	e011883a 	mov	r8,fp
 40169f8:	10c00104 	addi	r3,r2,4
 40169fc:	14c00017 	ldw	r19,0(r2)
 4016a00:	002d883a 	mov	r22,zero
 4016a04:	80800094 	ori	r2,r16,2
 4016a08:	2002ca16 	blt	r4,zero,4017534 <___vfprintf_internal_r+0xe88>
 4016a0c:	00bfdfc4 	movi	r2,-129
 4016a10:	80a4703a 	and	r18,r16,r2
 4016a14:	d8c02e15 	stw	r3,184(sp)
 4016a18:	94800094 	ori	r18,r18,2
 4016a1c:	9802b41e 	bne	r19,zero,40174f0 <___vfprintf_internal_r+0xe44>
 4016a20:	014100b4 	movhi	r5,1026
 4016a24:	29558504 	addi	r5,r5,22036
 4016a28:	d9403915 	stw	r5,228(sp)
 4016a2c:	04401e04 	movi	r17,120
 4016a30:	d8802a17 	ldw	r2,168(sp)
 4016a34:	0039883a 	mov	fp,zero
 4016a38:	1001fa26 	beq	r2,zero,4017224 <___vfprintf_internal_r+0xb78>
 4016a3c:	0027883a 	mov	r19,zero
 4016a40:	002d883a 	mov	r22,zero
 4016a44:	00021906 	br	40172ac <___vfprintf_internal_r+0xc00>
 4016a48:	d9002d17 	ldw	r4,180(sp)
 4016a4c:	b80b883a 	mov	r5,r23
 4016a50:	4018a600 	call	4018a60 <__swsetup_r>
 4016a54:	1005dc1e 	bne	r2,zero,40181c8 <___vfprintf_internal_r+0x1b1c>
 4016a58:	b880030b 	ldhu	r2,12(r23)
 4016a5c:	00c00284 	movi	r3,10
 4016a60:	1080068c 	andi	r2,r2,26
 4016a64:	10ff3a1e 	bne	r2,r3,4016750 <__alt_mem_onchip_memory2_0+0xfc011590>
 4016a68:	b880038f 	ldh	r2,14(r23)
 4016a6c:	103f3816 	blt	r2,zero,4016750 <__alt_mem_onchip_memory2_0+0xfc011590>
 4016a70:	d9c02e17 	ldw	r7,184(sp)
 4016a74:	d9002d17 	ldw	r4,180(sp)
 4016a78:	a80d883a 	mov	r6,r21
 4016a7c:	b80b883a 	mov	r5,r23
 4016a80:	40189a40 	call	40189a4 <__sbprintf>
 4016a84:	00001106 	br	4016acc <___vfprintf_internal_r+0x420>
 4016a88:	d9002d17 	ldw	r4,180(sp)
 4016a8c:	d9801e04 	addi	r6,sp,120
 4016a90:	b80b883a 	mov	r5,r23
 4016a94:	401f54c0 	call	401f54c <__sprint_r>
 4016a98:	1000081e 	bne	r2,zero,4016abc <___vfprintf_internal_r+0x410>
 4016a9c:	da000404 	addi	r8,sp,16
 4016aa0:	003f5106 	br	40167e8 <__alt_mem_onchip_memory2_0+0xfc011628>
 4016aa4:	d8802017 	ldw	r2,128(sp)
 4016aa8:	10000426 	beq	r2,zero,4016abc <___vfprintf_internal_r+0x410>
 4016aac:	d9002d17 	ldw	r4,180(sp)
 4016ab0:	d9801e04 	addi	r6,sp,120
 4016ab4:	b80b883a 	mov	r5,r23
 4016ab8:	401f54c0 	call	401f54c <__sprint_r>
 4016abc:	b880030b 	ldhu	r2,12(r23)
 4016ac0:	1080100c 	andi	r2,r2,64
 4016ac4:	1005c01e 	bne	r2,zero,40181c8 <___vfprintf_internal_r+0x1b1c>
 4016ac8:	d8802f17 	ldw	r2,188(sp)
 4016acc:	dfc04717 	ldw	ra,284(sp)
 4016ad0:	df004617 	ldw	fp,280(sp)
 4016ad4:	ddc04517 	ldw	r23,276(sp)
 4016ad8:	dd804417 	ldw	r22,272(sp)
 4016adc:	dd404317 	ldw	r21,268(sp)
 4016ae0:	dd004217 	ldw	r20,264(sp)
 4016ae4:	dcc04117 	ldw	r19,260(sp)
 4016ae8:	dc804017 	ldw	r18,256(sp)
 4016aec:	dc403f17 	ldw	r17,252(sp)
 4016af0:	dc003e17 	ldw	r16,248(sp)
 4016af4:	dec04804 	addi	sp,sp,288
 4016af8:	f800283a 	ret
 4016afc:	d9002d17 	ldw	r4,180(sp)
 4016b00:	401aa6c0 	call	401aa6c <__sinit>
 4016b04:	003f0206 	br	4016710 <__alt_mem_onchip_memory2_0+0xfc011550>
 4016b08:	d9002e17 	ldw	r4,184(sp)
 4016b0c:	d9402e17 	ldw	r5,184(sp)
 4016b10:	21000017 	ldw	r4,0(r4)
 4016b14:	28800104 	addi	r2,r5,4
 4016b18:	d9003115 	stw	r4,196(sp)
 4016b1c:	203fa716 	blt	r4,zero,40169bc <__alt_mem_onchip_memory2_0+0xfc0117fc>
 4016b20:	d8802e15 	stw	r2,184(sp)
 4016b24:	ac400007 	ldb	r17,0(r21)
 4016b28:	003f4206 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 4016b2c:	ac400007 	ldb	r17,0(r21)
 4016b30:	01000a84 	movi	r4,42
 4016b34:	a8c00044 	addi	r3,r21,1
 4016b38:	89075826 	beq	r17,r4,401889c <___vfprintf_internal_r+0x21f0>
 4016b3c:	8cbff404 	addi	r18,r17,-48
 4016b40:	b486ae36 	bltu	r22,r18,40185fc <___vfprintf_internal_r+0x1f50>
 4016b44:	0009883a 	mov	r4,zero
 4016b48:	1823883a 	mov	r17,r3
 4016b4c:	01400284 	movi	r5,10
 4016b50:	40118340 	call	4011834 <__mulsi3>
 4016b54:	88c00007 	ldb	r3,0(r17)
 4016b58:	1489883a 	add	r4,r2,r18
 4016b5c:	8d400044 	addi	r21,r17,1
 4016b60:	1cbff404 	addi	r18,r3,-48
 4016b64:	a823883a 	mov	r17,r21
 4016b68:	b4bff82e 	bgeu	r22,r18,4016b4c <__alt_mem_onchip_memory2_0+0xfc01198c>
 4016b6c:	1823883a 	mov	r17,r3
 4016b70:	2005f616 	blt	r4,zero,401834c <___vfprintf_internal_r+0x1ca0>
 4016b74:	d9002a15 	stw	r4,168(sp)
 4016b78:	003f2f06 	br	4016838 <__alt_mem_onchip_memory2_0+0xfc011678>
 4016b7c:	84002014 	ori	r16,r16,128
 4016b80:	ac400007 	ldb	r17,0(r21)
 4016b84:	003f2b06 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 4016b88:	8cbff404 	addi	r18,r17,-48
 4016b8c:	d8003115 	stw	zero,196(sp)
 4016b90:	0009883a 	mov	r4,zero
 4016b94:	a823883a 	mov	r17,r21
 4016b98:	01400284 	movi	r5,10
 4016b9c:	40118340 	call	4011834 <__mulsi3>
 4016ba0:	88c00007 	ldb	r3,0(r17)
 4016ba4:	9089883a 	add	r4,r18,r2
 4016ba8:	ad400044 	addi	r21,r21,1
 4016bac:	1cbff404 	addi	r18,r3,-48
 4016bb0:	a823883a 	mov	r17,r21
 4016bb4:	b4bff82e 	bgeu	r22,r18,4016b98 <__alt_mem_onchip_memory2_0+0xfc0119d8>
 4016bb8:	1823883a 	mov	r17,r3
 4016bbc:	d9003115 	stw	r4,196(sp)
 4016bc0:	003f1d06 	br	4016838 <__alt_mem_onchip_memory2_0+0xfc011678>
 4016bc4:	8025883a 	mov	r18,r16
 4016bc8:	dc002903 	ldbu	r16,164(sp)
 4016bcc:	e011883a 	mov	r8,fp
 4016bd0:	84003fcc 	andi	r16,r16,255
 4016bd4:	8007531e 	bne	r16,zero,4018924 <___vfprintf_internal_r+0x2278>
 4016bd8:	94800414 	ori	r18,r18,16
 4016bdc:	9080080c 	andi	r2,r18,32
 4016be0:	1003a326 	beq	r2,zero,4017a70 <___vfprintf_internal_r+0x13c4>
 4016be4:	d9002e17 	ldw	r4,184(sp)
 4016be8:	20800117 	ldw	r2,4(r4)
 4016bec:	24c00017 	ldw	r19,0(r4)
 4016bf0:	21000204 	addi	r4,r4,8
 4016bf4:	d9002e15 	stw	r4,184(sp)
 4016bf8:	102d883a 	mov	r22,r2
 4016bfc:	10047316 	blt	r2,zero,4017dcc <___vfprintf_internal_r+0x1720>
 4016c00:	d9002a17 	ldw	r4,168(sp)
 4016c04:	df002783 	ldbu	fp,158(sp)
 4016c08:	2003e416 	blt	r4,zero,4017b9c <___vfprintf_internal_r+0x14f0>
 4016c0c:	00ffdfc4 	movi	r3,-129
 4016c10:	9d84b03a 	or	r2,r19,r22
 4016c14:	90e4703a 	and	r18,r18,r3
 4016c18:	10018026 	beq	r2,zero,401721c <___vfprintf_internal_r+0xb70>
 4016c1c:	b003ab26 	beq	r22,zero,4017acc <___vfprintf_internal_r+0x1420>
 4016c20:	dc402915 	stw	r17,164(sp)
 4016c24:	dc001e04 	addi	r16,sp,120
 4016c28:	b023883a 	mov	r17,r22
 4016c2c:	402d883a 	mov	r22,r8
 4016c30:	9809883a 	mov	r4,r19
 4016c34:	880b883a 	mov	r5,r17
 4016c38:	01800284 	movi	r6,10
 4016c3c:	000f883a 	mov	r7,zero
 4016c40:	4021b9c0 	call	4021b9c <__umoddi3>
 4016c44:	10800c04 	addi	r2,r2,48
 4016c48:	843fffc4 	addi	r16,r16,-1
 4016c4c:	9809883a 	mov	r4,r19
 4016c50:	880b883a 	mov	r5,r17
 4016c54:	80800005 	stb	r2,0(r16)
 4016c58:	01800284 	movi	r6,10
 4016c5c:	000f883a 	mov	r7,zero
 4016c60:	40215a00 	call	40215a0 <__udivdi3>
 4016c64:	1027883a 	mov	r19,r2
 4016c68:	10c4b03a 	or	r2,r2,r3
 4016c6c:	1823883a 	mov	r17,r3
 4016c70:	103fef1e 	bne	r2,zero,4016c30 <__alt_mem_onchip_memory2_0+0xfc011a70>
 4016c74:	d8c02817 	ldw	r3,160(sp)
 4016c78:	dc402917 	ldw	r17,164(sp)
 4016c7c:	b011883a 	mov	r8,r22
 4016c80:	1c07c83a 	sub	r3,r3,r16
 4016c84:	d8c02b15 	stw	r3,172(sp)
 4016c88:	00005f06 	br	4016e08 <___vfprintf_internal_r+0x75c>
 4016c8c:	8025883a 	mov	r18,r16
 4016c90:	dc002903 	ldbu	r16,164(sp)
 4016c94:	e011883a 	mov	r8,fp
 4016c98:	84003fcc 	andi	r16,r16,255
 4016c9c:	80071e1e 	bne	r16,zero,4018918 <___vfprintf_internal_r+0x226c>
 4016ca0:	9080020c 	andi	r2,r18,8
 4016ca4:	1004af26 	beq	r2,zero,4017f64 <___vfprintf_internal_r+0x18b8>
 4016ca8:	d9002e17 	ldw	r4,184(sp)
 4016cac:	d9402e17 	ldw	r5,184(sp)
 4016cb0:	d8802e17 	ldw	r2,184(sp)
 4016cb4:	21000017 	ldw	r4,0(r4)
 4016cb8:	29400117 	ldw	r5,4(r5)
 4016cbc:	10800204 	addi	r2,r2,8
 4016cc0:	d9003615 	stw	r4,216(sp)
 4016cc4:	d9403815 	stw	r5,224(sp)
 4016cc8:	d8802e15 	stw	r2,184(sp)
 4016ccc:	d9003617 	ldw	r4,216(sp)
 4016cd0:	d9403817 	ldw	r5,224(sp)
 4016cd4:	da003d15 	stw	r8,244(sp)
 4016cd8:	04000044 	movi	r16,1
 4016cdc:	4010edc0 	call	4010edc <__fpclassifyd>
 4016ce0:	da003d17 	ldw	r8,244(sp)
 4016ce4:	1404441e 	bne	r2,r16,4017df8 <___vfprintf_internal_r+0x174c>
 4016ce8:	d9003617 	ldw	r4,216(sp)
 4016cec:	d9403817 	ldw	r5,224(sp)
 4016cf0:	000d883a 	mov	r6,zero
 4016cf4:	000f883a 	mov	r7,zero
 4016cf8:	4012c3c0 	call	4012c3c <__ledf2>
 4016cfc:	da003d17 	ldw	r8,244(sp)
 4016d00:	1005e316 	blt	r2,zero,4018490 <___vfprintf_internal_r+0x1de4>
 4016d04:	df002783 	ldbu	fp,158(sp)
 4016d08:	008011c4 	movi	r2,71
 4016d0c:	1445580e 	bge	r2,r17,4018270 <___vfprintf_internal_r+0x1bc4>
 4016d10:	040100b4 	movhi	r16,1026
 4016d14:	84157d04 	addi	r16,r16,22004
 4016d18:	00c000c4 	movi	r3,3
 4016d1c:	00bfdfc4 	movi	r2,-129
 4016d20:	d8c02915 	stw	r3,164(sp)
 4016d24:	90a4703a 	and	r18,r18,r2
 4016d28:	d8c02b15 	stw	r3,172(sp)
 4016d2c:	d8002a15 	stw	zero,168(sp)
 4016d30:	d8003215 	stw	zero,200(sp)
 4016d34:	00003a06 	br	4016e20 <___vfprintf_internal_r+0x774>
 4016d38:	84000214 	ori	r16,r16,8
 4016d3c:	ac400007 	ldb	r17,0(r21)
 4016d40:	003ebc06 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 4016d44:	8025883a 	mov	r18,r16
 4016d48:	dc002903 	ldbu	r16,164(sp)
 4016d4c:	e011883a 	mov	r8,fp
 4016d50:	84003fcc 	andi	r16,r16,255
 4016d54:	8007001e 	bne	r16,zero,4018958 <___vfprintf_internal_r+0x22ac>
 4016d58:	94800414 	ori	r18,r18,16
 4016d5c:	9080080c 	andi	r2,r18,32
 4016d60:	1002fa26 	beq	r2,zero,401794c <___vfprintf_internal_r+0x12a0>
 4016d64:	d9002e17 	ldw	r4,184(sp)
 4016d68:	d9402a17 	ldw	r5,168(sp)
 4016d6c:	d8002785 	stb	zero,158(sp)
 4016d70:	20800204 	addi	r2,r4,8
 4016d74:	24c00017 	ldw	r19,0(r4)
 4016d78:	25800117 	ldw	r22,4(r4)
 4016d7c:	2804b116 	blt	r5,zero,4018044 <___vfprintf_internal_r+0x1998>
 4016d80:	013fdfc4 	movi	r4,-129
 4016d84:	9d86b03a 	or	r3,r19,r22
 4016d88:	d8802e15 	stw	r2,184(sp)
 4016d8c:	9124703a 	and	r18,r18,r4
 4016d90:	1802fb1e 	bne	r3,zero,4017980 <___vfprintf_internal_r+0x12d4>
 4016d94:	d8c02a17 	ldw	r3,168(sp)
 4016d98:	0039883a 	mov	fp,zero
 4016d9c:	1805e526 	beq	r3,zero,4018534 <___vfprintf_internal_r+0x1e88>
 4016da0:	0027883a 	mov	r19,zero
 4016da4:	002d883a 	mov	r22,zero
 4016da8:	dc001e04 	addi	r16,sp,120
 4016dac:	9806d0fa 	srli	r3,r19,3
 4016db0:	b008977a 	slli	r4,r22,29
 4016db4:	b02cd0fa 	srli	r22,r22,3
 4016db8:	9cc001cc 	andi	r19,r19,7
 4016dbc:	98800c04 	addi	r2,r19,48
 4016dc0:	843fffc4 	addi	r16,r16,-1
 4016dc4:	20e6b03a 	or	r19,r4,r3
 4016dc8:	80800005 	stb	r2,0(r16)
 4016dcc:	9d86b03a 	or	r3,r19,r22
 4016dd0:	183ff61e 	bne	r3,zero,4016dac <__alt_mem_onchip_memory2_0+0xfc011bec>
 4016dd4:	90c0004c 	andi	r3,r18,1
 4016dd8:	18014126 	beq	r3,zero,40172e0 <___vfprintf_internal_r+0xc34>
 4016ddc:	10803fcc 	andi	r2,r2,255
 4016de0:	1080201c 	xori	r2,r2,128
 4016de4:	10bfe004 	addi	r2,r2,-128
 4016de8:	00c00c04 	movi	r3,48
 4016dec:	10c13c26 	beq	r2,r3,40172e0 <___vfprintf_internal_r+0xc34>
 4016df0:	80ffffc5 	stb	r3,-1(r16)
 4016df4:	d8c02817 	ldw	r3,160(sp)
 4016df8:	80bfffc4 	addi	r2,r16,-1
 4016dfc:	1021883a 	mov	r16,r2
 4016e00:	1887c83a 	sub	r3,r3,r2
 4016e04:	d8c02b15 	stw	r3,172(sp)
 4016e08:	d8802b17 	ldw	r2,172(sp)
 4016e0c:	d9002a17 	ldw	r4,168(sp)
 4016e10:	1100010e 	bge	r2,r4,4016e18 <___vfprintf_internal_r+0x76c>
 4016e14:	2005883a 	mov	r2,r4
 4016e18:	d8802915 	stw	r2,164(sp)
 4016e1c:	d8003215 	stw	zero,200(sp)
 4016e20:	e7003fcc 	andi	fp,fp,255
 4016e24:	e700201c 	xori	fp,fp,128
 4016e28:	e73fe004 	addi	fp,fp,-128
 4016e2c:	e0000326 	beq	fp,zero,4016e3c <___vfprintf_internal_r+0x790>
 4016e30:	d8c02917 	ldw	r3,164(sp)
 4016e34:	18c00044 	addi	r3,r3,1
 4016e38:	d8c02915 	stw	r3,164(sp)
 4016e3c:	90c0008c 	andi	r3,r18,2
 4016e40:	d8c02c15 	stw	r3,176(sp)
 4016e44:	18000326 	beq	r3,zero,4016e54 <___vfprintf_internal_r+0x7a8>
 4016e48:	d8c02917 	ldw	r3,164(sp)
 4016e4c:	18c00084 	addi	r3,r3,2
 4016e50:	d8c02915 	stw	r3,164(sp)
 4016e54:	90c0210c 	andi	r3,r18,132
 4016e58:	d8c03015 	stw	r3,192(sp)
 4016e5c:	1801c51e 	bne	r3,zero,4017574 <___vfprintf_internal_r+0xec8>
 4016e60:	d9003117 	ldw	r4,196(sp)
 4016e64:	d8c02917 	ldw	r3,164(sp)
 4016e68:	20e7c83a 	sub	r19,r4,r3
 4016e6c:	04c1c10e 	bge	zero,r19,4017574 <___vfprintf_internal_r+0xec8>
 4016e70:	02400404 	movi	r9,16
 4016e74:	d8c02017 	ldw	r3,128(sp)
 4016e78:	d8801f17 	ldw	r2,124(sp)
 4016e7c:	4cc52f0e 	bge	r9,r19,401833c <___vfprintf_internal_r+0x1c90>
 4016e80:	014100b4 	movhi	r5,1026
 4016e84:	295597c4 	addi	r5,r5,22111
 4016e88:	dc403b15 	stw	r17,236(sp)
 4016e8c:	d9403515 	stw	r5,212(sp)
 4016e90:	9823883a 	mov	r17,r19
 4016e94:	482d883a 	mov	r22,r9
 4016e98:	9027883a 	mov	r19,r18
 4016e9c:	070001c4 	movi	fp,7
 4016ea0:	8025883a 	mov	r18,r16
 4016ea4:	dc002d17 	ldw	r16,180(sp)
 4016ea8:	00000306 	br	4016eb8 <___vfprintf_internal_r+0x80c>
 4016eac:	8c7ffc04 	addi	r17,r17,-16
 4016eb0:	42000204 	addi	r8,r8,8
 4016eb4:	b440130e 	bge	r22,r17,4016f04 <___vfprintf_internal_r+0x858>
 4016eb8:	010100b4 	movhi	r4,1026
 4016ebc:	18c00404 	addi	r3,r3,16
 4016ec0:	10800044 	addi	r2,r2,1
 4016ec4:	211597c4 	addi	r4,r4,22111
 4016ec8:	41000015 	stw	r4,0(r8)
 4016ecc:	45800115 	stw	r22,4(r8)
 4016ed0:	d8c02015 	stw	r3,128(sp)
 4016ed4:	d8801f15 	stw	r2,124(sp)
 4016ed8:	e0bff40e 	bge	fp,r2,4016eac <__alt_mem_onchip_memory2_0+0xfc011cec>
 4016edc:	d9801e04 	addi	r6,sp,120
 4016ee0:	b80b883a 	mov	r5,r23
 4016ee4:	8009883a 	mov	r4,r16
 4016ee8:	401f54c0 	call	401f54c <__sprint_r>
 4016eec:	103ef31e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4016ef0:	8c7ffc04 	addi	r17,r17,-16
 4016ef4:	d8c02017 	ldw	r3,128(sp)
 4016ef8:	d8801f17 	ldw	r2,124(sp)
 4016efc:	da000404 	addi	r8,sp,16
 4016f00:	b47fed16 	blt	r22,r17,4016eb8 <__alt_mem_onchip_memory2_0+0xfc011cf8>
 4016f04:	9021883a 	mov	r16,r18
 4016f08:	9825883a 	mov	r18,r19
 4016f0c:	8827883a 	mov	r19,r17
 4016f10:	dc403b17 	ldw	r17,236(sp)
 4016f14:	d9403517 	ldw	r5,212(sp)
 4016f18:	98c7883a 	add	r3,r19,r3
 4016f1c:	10800044 	addi	r2,r2,1
 4016f20:	41400015 	stw	r5,0(r8)
 4016f24:	44c00115 	stw	r19,4(r8)
 4016f28:	d8c02015 	stw	r3,128(sp)
 4016f2c:	d8801f15 	stw	r2,124(sp)
 4016f30:	010001c4 	movi	r4,7
 4016f34:	2082c516 	blt	r4,r2,4017a4c <___vfprintf_internal_r+0x13a0>
 4016f38:	df002787 	ldb	fp,158(sp)
 4016f3c:	42000204 	addi	r8,r8,8
 4016f40:	e0000c26 	beq	fp,zero,4016f74 <___vfprintf_internal_r+0x8c8>
 4016f44:	d8801f17 	ldw	r2,124(sp)
 4016f48:	d9002784 	addi	r4,sp,158
 4016f4c:	18c00044 	addi	r3,r3,1
 4016f50:	10800044 	addi	r2,r2,1
 4016f54:	41000015 	stw	r4,0(r8)
 4016f58:	01000044 	movi	r4,1
 4016f5c:	41000115 	stw	r4,4(r8)
 4016f60:	d8c02015 	stw	r3,128(sp)
 4016f64:	d8801f15 	stw	r2,124(sp)
 4016f68:	010001c4 	movi	r4,7
 4016f6c:	20825e16 	blt	r4,r2,40178e8 <___vfprintf_internal_r+0x123c>
 4016f70:	42000204 	addi	r8,r8,8
 4016f74:	d8802c17 	ldw	r2,176(sp)
 4016f78:	10000c26 	beq	r2,zero,4016fac <___vfprintf_internal_r+0x900>
 4016f7c:	d8801f17 	ldw	r2,124(sp)
 4016f80:	d9002704 	addi	r4,sp,156
 4016f84:	18c00084 	addi	r3,r3,2
 4016f88:	10800044 	addi	r2,r2,1
 4016f8c:	41000015 	stw	r4,0(r8)
 4016f90:	01000084 	movi	r4,2
 4016f94:	41000115 	stw	r4,4(r8)
 4016f98:	d8c02015 	stw	r3,128(sp)
 4016f9c:	d8801f15 	stw	r2,124(sp)
 4016fa0:	010001c4 	movi	r4,7
 4016fa4:	20825816 	blt	r4,r2,4017908 <___vfprintf_internal_r+0x125c>
 4016fa8:	42000204 	addi	r8,r8,8
 4016fac:	d9003017 	ldw	r4,192(sp)
 4016fb0:	00802004 	movi	r2,128
 4016fb4:	2081bb26 	beq	r4,r2,40176a4 <___vfprintf_internal_r+0xff8>
 4016fb8:	d9402a17 	ldw	r5,168(sp)
 4016fbc:	d8802b17 	ldw	r2,172(sp)
 4016fc0:	28adc83a 	sub	r22,r5,r2
 4016fc4:	0580310e 	bge	zero,r22,401708c <___vfprintf_internal_r+0x9e0>
 4016fc8:	07000404 	movi	fp,16
 4016fcc:	d8801f17 	ldw	r2,124(sp)
 4016fd0:	e584360e 	bge	fp,r22,40180ac <___vfprintf_internal_r+0x1a00>
 4016fd4:	014100b4 	movhi	r5,1026
 4016fd8:	295593c4 	addi	r5,r5,22095
 4016fdc:	dc402a15 	stw	r17,168(sp)
 4016fe0:	d9402c15 	stw	r5,176(sp)
 4016fe4:	b023883a 	mov	r17,r22
 4016fe8:	04c001c4 	movi	r19,7
 4016fec:	a82d883a 	mov	r22,r21
 4016ff0:	902b883a 	mov	r21,r18
 4016ff4:	8025883a 	mov	r18,r16
 4016ff8:	dc002d17 	ldw	r16,180(sp)
 4016ffc:	00000306 	br	401700c <___vfprintf_internal_r+0x960>
 4017000:	8c7ffc04 	addi	r17,r17,-16
 4017004:	42000204 	addi	r8,r8,8
 4017008:	e440110e 	bge	fp,r17,4017050 <___vfprintf_internal_r+0x9a4>
 401700c:	18c00404 	addi	r3,r3,16
 4017010:	10800044 	addi	r2,r2,1
 4017014:	45000015 	stw	r20,0(r8)
 4017018:	47000115 	stw	fp,4(r8)
 401701c:	d8c02015 	stw	r3,128(sp)
 4017020:	d8801f15 	stw	r2,124(sp)
 4017024:	98bff60e 	bge	r19,r2,4017000 <__alt_mem_onchip_memory2_0+0xfc011e40>
 4017028:	d9801e04 	addi	r6,sp,120
 401702c:	b80b883a 	mov	r5,r23
 4017030:	8009883a 	mov	r4,r16
 4017034:	401f54c0 	call	401f54c <__sprint_r>
 4017038:	103ea01e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 401703c:	8c7ffc04 	addi	r17,r17,-16
 4017040:	d8c02017 	ldw	r3,128(sp)
 4017044:	d8801f17 	ldw	r2,124(sp)
 4017048:	da000404 	addi	r8,sp,16
 401704c:	e47fef16 	blt	fp,r17,401700c <__alt_mem_onchip_memory2_0+0xfc011e4c>
 4017050:	9021883a 	mov	r16,r18
 4017054:	a825883a 	mov	r18,r21
 4017058:	b02b883a 	mov	r21,r22
 401705c:	882d883a 	mov	r22,r17
 4017060:	dc402a17 	ldw	r17,168(sp)
 4017064:	d9002c17 	ldw	r4,176(sp)
 4017068:	1d87883a 	add	r3,r3,r22
 401706c:	10800044 	addi	r2,r2,1
 4017070:	41000015 	stw	r4,0(r8)
 4017074:	45800115 	stw	r22,4(r8)
 4017078:	d8c02015 	stw	r3,128(sp)
 401707c:	d8801f15 	stw	r2,124(sp)
 4017080:	010001c4 	movi	r4,7
 4017084:	20821016 	blt	r4,r2,40178c8 <___vfprintf_internal_r+0x121c>
 4017088:	42000204 	addi	r8,r8,8
 401708c:	9080400c 	andi	r2,r18,256
 4017090:	10013a1e 	bne	r2,zero,401757c <___vfprintf_internal_r+0xed0>
 4017094:	d9402b17 	ldw	r5,172(sp)
 4017098:	d8801f17 	ldw	r2,124(sp)
 401709c:	44000015 	stw	r16,0(r8)
 40170a0:	1947883a 	add	r3,r3,r5
 40170a4:	10800044 	addi	r2,r2,1
 40170a8:	41400115 	stw	r5,4(r8)
 40170ac:	d8c02015 	stw	r3,128(sp)
 40170b0:	d8801f15 	stw	r2,124(sp)
 40170b4:	010001c4 	movi	r4,7
 40170b8:	2081f516 	blt	r4,r2,4017890 <___vfprintf_internal_r+0x11e4>
 40170bc:	42000204 	addi	r8,r8,8
 40170c0:	9480010c 	andi	r18,r18,4
 40170c4:	90003226 	beq	r18,zero,4017190 <___vfprintf_internal_r+0xae4>
 40170c8:	d9403117 	ldw	r5,196(sp)
 40170cc:	d8802917 	ldw	r2,164(sp)
 40170d0:	28a1c83a 	sub	r16,r5,r2
 40170d4:	04002e0e 	bge	zero,r16,4017190 <___vfprintf_internal_r+0xae4>
 40170d8:	04400404 	movi	r17,16
 40170dc:	d8801f17 	ldw	r2,124(sp)
 40170e0:	8c04c40e 	bge	r17,r16,40183f4 <___vfprintf_internal_r+0x1d48>
 40170e4:	014100b4 	movhi	r5,1026
 40170e8:	295597c4 	addi	r5,r5,22111
 40170ec:	d9403515 	stw	r5,212(sp)
 40170f0:	048001c4 	movi	r18,7
 40170f4:	dcc02d17 	ldw	r19,180(sp)
 40170f8:	00000306 	br	4017108 <___vfprintf_internal_r+0xa5c>
 40170fc:	843ffc04 	addi	r16,r16,-16
 4017100:	42000204 	addi	r8,r8,8
 4017104:	8c00130e 	bge	r17,r16,4017154 <___vfprintf_internal_r+0xaa8>
 4017108:	010100b4 	movhi	r4,1026
 401710c:	18c00404 	addi	r3,r3,16
 4017110:	10800044 	addi	r2,r2,1
 4017114:	211597c4 	addi	r4,r4,22111
 4017118:	41000015 	stw	r4,0(r8)
 401711c:	44400115 	stw	r17,4(r8)
 4017120:	d8c02015 	stw	r3,128(sp)
 4017124:	d8801f15 	stw	r2,124(sp)
 4017128:	90bff40e 	bge	r18,r2,40170fc <__alt_mem_onchip_memory2_0+0xfc011f3c>
 401712c:	d9801e04 	addi	r6,sp,120
 4017130:	b80b883a 	mov	r5,r23
 4017134:	9809883a 	mov	r4,r19
 4017138:	401f54c0 	call	401f54c <__sprint_r>
 401713c:	103e5f1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017140:	843ffc04 	addi	r16,r16,-16
 4017144:	d8c02017 	ldw	r3,128(sp)
 4017148:	d8801f17 	ldw	r2,124(sp)
 401714c:	da000404 	addi	r8,sp,16
 4017150:	8c3fed16 	blt	r17,r16,4017108 <__alt_mem_onchip_memory2_0+0xfc011f48>
 4017154:	d9403517 	ldw	r5,212(sp)
 4017158:	1c07883a 	add	r3,r3,r16
 401715c:	10800044 	addi	r2,r2,1
 4017160:	41400015 	stw	r5,0(r8)
 4017164:	44000115 	stw	r16,4(r8)
 4017168:	d8c02015 	stw	r3,128(sp)
 401716c:	d8801f15 	stw	r2,124(sp)
 4017170:	010001c4 	movi	r4,7
 4017174:	2080060e 	bge	r4,r2,4017190 <___vfprintf_internal_r+0xae4>
 4017178:	d9002d17 	ldw	r4,180(sp)
 401717c:	d9801e04 	addi	r6,sp,120
 4017180:	b80b883a 	mov	r5,r23
 4017184:	401f54c0 	call	401f54c <__sprint_r>
 4017188:	103e4c1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 401718c:	d8c02017 	ldw	r3,128(sp)
 4017190:	d8803117 	ldw	r2,196(sp)
 4017194:	d9002917 	ldw	r4,164(sp)
 4017198:	1100010e 	bge	r2,r4,40171a0 <___vfprintf_internal_r+0xaf4>
 401719c:	2005883a 	mov	r2,r4
 40171a0:	d9402f17 	ldw	r5,188(sp)
 40171a4:	288b883a 	add	r5,r5,r2
 40171a8:	d9402f15 	stw	r5,188(sp)
 40171ac:	1801c01e 	bne	r3,zero,40178b0 <___vfprintf_internal_r+0x1204>
 40171b0:	a8800007 	ldb	r2,0(r21)
 40171b4:	d8001f15 	stw	zero,124(sp)
 40171b8:	da000404 	addi	r8,sp,16
 40171bc:	103d751e 	bne	r2,zero,4016794 <__alt_mem_onchip_memory2_0+0xfc0115d4>
 40171c0:	a823883a 	mov	r17,r21
 40171c4:	003d8b06 	br	40167f4 <__alt_mem_onchip_memory2_0+0xfc011634>
 40171c8:	8025883a 	mov	r18,r16
 40171cc:	dc002903 	ldbu	r16,164(sp)
 40171d0:	e011883a 	mov	r8,fp
 40171d4:	84003fcc 	andi	r16,r16,255
 40171d8:	8005e51e 	bne	r16,zero,4018970 <___vfprintf_internal_r+0x22c4>
 40171dc:	94800414 	ori	r18,r18,16
 40171e0:	9080080c 	andi	r2,r18,32
 40171e4:	10022b26 	beq	r2,zero,4017a94 <___vfprintf_internal_r+0x13e8>
 40171e8:	d9002e17 	ldw	r4,184(sp)
 40171ec:	d9402a17 	ldw	r5,168(sp)
 40171f0:	d8002785 	stb	zero,158(sp)
 40171f4:	20c00204 	addi	r3,r4,8
 40171f8:	24c00017 	ldw	r19,0(r4)
 40171fc:	25800117 	ldw	r22,4(r4)
 4017200:	28042e16 	blt	r5,zero,40182bc <___vfprintf_internal_r+0x1c10>
 4017204:	013fdfc4 	movi	r4,-129
 4017208:	9d84b03a 	or	r2,r19,r22
 401720c:	d8c02e15 	stw	r3,184(sp)
 4017210:	9124703a 	and	r18,r18,r4
 4017214:	0039883a 	mov	fp,zero
 4017218:	103e801e 	bne	r2,zero,4016c1c <__alt_mem_onchip_memory2_0+0xfc011a5c>
 401721c:	d9002a17 	ldw	r4,168(sp)
 4017220:	2002e01e 	bne	r4,zero,4017da4 <___vfprintf_internal_r+0x16f8>
 4017224:	d8002a15 	stw	zero,168(sp)
 4017228:	d8002b15 	stw	zero,172(sp)
 401722c:	dc001e04 	addi	r16,sp,120
 4017230:	003ef506 	br	4016e08 <__alt_mem_onchip_memory2_0+0xfc011c48>
 4017234:	8025883a 	mov	r18,r16
 4017238:	dc002903 	ldbu	r16,164(sp)
 401723c:	e011883a 	mov	r8,fp
 4017240:	84003fcc 	andi	r16,r16,255
 4017244:	8005ba1e 	bne	r16,zero,4018930 <___vfprintf_internal_r+0x2284>
 4017248:	010100b4 	movhi	r4,1026
 401724c:	21158004 	addi	r4,r4,22016
 4017250:	d9003915 	stw	r4,228(sp)
 4017254:	9080080c 	andi	r2,r18,32
 4017258:	10006126 	beq	r2,zero,40173e0 <___vfprintf_internal_r+0xd34>
 401725c:	d9402e17 	ldw	r5,184(sp)
 4017260:	2cc00017 	ldw	r19,0(r5)
 4017264:	2d800117 	ldw	r22,4(r5)
 4017268:	29400204 	addi	r5,r5,8
 401726c:	d9402e15 	stw	r5,184(sp)
 4017270:	9080004c 	andi	r2,r18,1
 4017274:	1001ac26 	beq	r2,zero,4017928 <___vfprintf_internal_r+0x127c>
 4017278:	9d84b03a 	or	r2,r19,r22
 401727c:	10038526 	beq	r2,zero,4018094 <___vfprintf_internal_r+0x19e8>
 4017280:	d8c02a17 	ldw	r3,168(sp)
 4017284:	00800c04 	movi	r2,48
 4017288:	d8802705 	stb	r2,156(sp)
 401728c:	dc402745 	stb	r17,157(sp)
 4017290:	d8002785 	stb	zero,158(sp)
 4017294:	90800094 	ori	r2,r18,2
 4017298:	18047916 	blt	r3,zero,4018480 <___vfprintf_internal_r+0x1dd4>
 401729c:	00bfdfc4 	movi	r2,-129
 40172a0:	90a4703a 	and	r18,r18,r2
 40172a4:	94800094 	ori	r18,r18,2
 40172a8:	0039883a 	mov	fp,zero
 40172ac:	d9003917 	ldw	r4,228(sp)
 40172b0:	dc001e04 	addi	r16,sp,120
 40172b4:	988003cc 	andi	r2,r19,15
 40172b8:	b006973a 	slli	r3,r22,28
 40172bc:	2085883a 	add	r2,r4,r2
 40172c0:	9826d13a 	srli	r19,r19,4
 40172c4:	10800003 	ldbu	r2,0(r2)
 40172c8:	b02cd13a 	srli	r22,r22,4
 40172cc:	843fffc4 	addi	r16,r16,-1
 40172d0:	1ce6b03a 	or	r19,r3,r19
 40172d4:	80800005 	stb	r2,0(r16)
 40172d8:	9d84b03a 	or	r2,r19,r22
 40172dc:	103ff51e 	bne	r2,zero,40172b4 <__alt_mem_onchip_memory2_0+0xfc0120f4>
 40172e0:	d8c02817 	ldw	r3,160(sp)
 40172e4:	1c07c83a 	sub	r3,r3,r16
 40172e8:	d8c02b15 	stw	r3,172(sp)
 40172ec:	003ec606 	br	4016e08 <__alt_mem_onchip_memory2_0+0xfc011c48>
 40172f0:	8025883a 	mov	r18,r16
 40172f4:	dc002903 	ldbu	r16,164(sp)
 40172f8:	e011883a 	mov	r8,fp
 40172fc:	84003fcc 	andi	r16,r16,255
 4017300:	803e9626 	beq	r16,zero,4016d5c <__alt_mem_onchip_memory2_0+0xfc011b9c>
 4017304:	d8c02b03 	ldbu	r3,172(sp)
 4017308:	d8c02785 	stb	r3,158(sp)
 401730c:	003e9306 	br	4016d5c <__alt_mem_onchip_memory2_0+0xfc011b9c>
 4017310:	00c00044 	movi	r3,1
 4017314:	d8c02905 	stb	r3,164(sp)
 4017318:	00c00ac4 	movi	r3,43
 401731c:	d8c02b05 	stb	r3,172(sp)
 4017320:	ac400007 	ldb	r17,0(r21)
 4017324:	003d4306 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 4017328:	84000814 	ori	r16,r16,32
 401732c:	ac400007 	ldb	r17,0(r21)
 4017330:	003d4006 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 4017334:	d8802e17 	ldw	r2,184(sp)
 4017338:	8025883a 	mov	r18,r16
 401733c:	d8002785 	stb	zero,158(sp)
 4017340:	14000017 	ldw	r16,0(r2)
 4017344:	e011883a 	mov	r8,fp
 4017348:	14c00104 	addi	r19,r2,4
 401734c:	80042d26 	beq	r16,zero,4018404 <___vfprintf_internal_r+0x1d58>
 4017350:	d8c02a17 	ldw	r3,168(sp)
 4017354:	1803e416 	blt	r3,zero,40182e8 <___vfprintf_internal_r+0x1c3c>
 4017358:	180d883a 	mov	r6,r3
 401735c:	000b883a 	mov	r5,zero
 4017360:	8009883a 	mov	r4,r16
 4017364:	df003d15 	stw	fp,244(sp)
 4017368:	401c0400 	call	401c040 <memchr>
 401736c:	da003d17 	ldw	r8,244(sp)
 4017370:	10046826 	beq	r2,zero,4018514 <___vfprintf_internal_r+0x1e68>
 4017374:	1405c83a 	sub	r2,r2,r16
 4017378:	d8802b15 	stw	r2,172(sp)
 401737c:	1003e016 	blt	r2,zero,4018300 <___vfprintf_internal_r+0x1c54>
 4017380:	df002783 	ldbu	fp,158(sp)
 4017384:	d8802915 	stw	r2,164(sp)
 4017388:	dcc02e15 	stw	r19,184(sp)
 401738c:	d8002a15 	stw	zero,168(sp)
 4017390:	d8003215 	stw	zero,200(sp)
 4017394:	003ea206 	br	4016e20 <__alt_mem_onchip_memory2_0+0xfc011c60>
 4017398:	8025883a 	mov	r18,r16
 401739c:	dc002903 	ldbu	r16,164(sp)
 40173a0:	e011883a 	mov	r8,fp
 40173a4:	84003fcc 	andi	r16,r16,255
 40173a8:	803f8d26 	beq	r16,zero,40171e0 <__alt_mem_onchip_memory2_0+0xfc012020>
 40173ac:	d8c02b03 	ldbu	r3,172(sp)
 40173b0:	d8c02785 	stb	r3,158(sp)
 40173b4:	003f8a06 	br	40171e0 <__alt_mem_onchip_memory2_0+0xfc012020>
 40173b8:	8025883a 	mov	r18,r16
 40173bc:	dc002903 	ldbu	r16,164(sp)
 40173c0:	e011883a 	mov	r8,fp
 40173c4:	84003fcc 	andi	r16,r16,255
 40173c8:	8005661e 	bne	r16,zero,4018964 <___vfprintf_internal_r+0x22b8>
 40173cc:	010100b4 	movhi	r4,1026
 40173d0:	21158504 	addi	r4,r4,22036
 40173d4:	d9003915 	stw	r4,228(sp)
 40173d8:	9080080c 	andi	r2,r18,32
 40173dc:	103f9f1e 	bne	r2,zero,401725c <__alt_mem_onchip_memory2_0+0xfc01209c>
 40173e0:	9080040c 	andi	r2,r18,16
 40173e4:	1002eb26 	beq	r2,zero,4017f94 <___vfprintf_internal_r+0x18e8>
 40173e8:	d8802e17 	ldw	r2,184(sp)
 40173ec:	002d883a 	mov	r22,zero
 40173f0:	14c00017 	ldw	r19,0(r2)
 40173f4:	10800104 	addi	r2,r2,4
 40173f8:	d8802e15 	stw	r2,184(sp)
 40173fc:	003f9c06 	br	4017270 <__alt_mem_onchip_memory2_0+0xfc0120b0>
 4017400:	d8802b07 	ldb	r2,172(sp)
 4017404:	1002e11e 	bne	r2,zero,4017f8c <___vfprintf_internal_r+0x18e0>
 4017408:	00c00044 	movi	r3,1
 401740c:	d8c02905 	stb	r3,164(sp)
 4017410:	00c00804 	movi	r3,32
 4017414:	d8c02b05 	stb	r3,172(sp)
 4017418:	ac400007 	ldb	r17,0(r21)
 401741c:	003d0506 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 4017420:	84000054 	ori	r16,r16,1
 4017424:	ac400007 	ldb	r17,0(r21)
 4017428:	003d0206 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 401742c:	8025883a 	mov	r18,r16
 4017430:	dc002903 	ldbu	r16,164(sp)
 4017434:	e011883a 	mov	r8,fp
 4017438:	84003fcc 	andi	r16,r16,255
 401743c:	803de726 	beq	r16,zero,4016bdc <__alt_mem_onchip_memory2_0+0xfc011a1c>
 4017440:	d8c02b03 	ldbu	r3,172(sp)
 4017444:	d8c02785 	stb	r3,158(sp)
 4017448:	003de406 	br	4016bdc <__alt_mem_onchip_memory2_0+0xfc011a1c>
 401744c:	84001014 	ori	r16,r16,64
 4017450:	ac400007 	ldb	r17,0(r21)
 4017454:	003cf706 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 4017458:	ac400007 	ldb	r17,0(r21)
 401745c:	00801b04 	movi	r2,108
 4017460:	88838f26 	beq	r17,r2,40182a0 <___vfprintf_internal_r+0x1bf4>
 4017464:	84000414 	ori	r16,r16,16
 4017468:	003cf206 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 401746c:	8025883a 	mov	r18,r16
 4017470:	dc002903 	ldbu	r16,164(sp)
 4017474:	e011883a 	mov	r8,fp
 4017478:	84003fcc 	andi	r16,r16,255
 401747c:	80053f1e 	bne	r16,zero,401897c <___vfprintf_internal_r+0x22d0>
 4017480:	9080080c 	andi	r2,r18,32
 4017484:	1002d226 	beq	r2,zero,4017fd0 <___vfprintf_internal_r+0x1924>
 4017488:	d9002e17 	ldw	r4,184(sp)
 401748c:	d9402f17 	ldw	r5,188(sp)
 4017490:	20800017 	ldw	r2,0(r4)
 4017494:	2807d7fa 	srai	r3,r5,31
 4017498:	21000104 	addi	r4,r4,4
 401749c:	d9002e15 	stw	r4,184(sp)
 40174a0:	11400015 	stw	r5,0(r2)
 40174a4:	10c00115 	stw	r3,4(r2)
 40174a8:	003cb806 	br	401678c <__alt_mem_onchip_memory2_0+0xfc0115cc>
 40174ac:	d8c02e17 	ldw	r3,184(sp)
 40174b0:	d9002e17 	ldw	r4,184(sp)
 40174b4:	8025883a 	mov	r18,r16
 40174b8:	18800017 	ldw	r2,0(r3)
 40174bc:	21000104 	addi	r4,r4,4
 40174c0:	00c00044 	movi	r3,1
 40174c4:	e011883a 	mov	r8,fp
 40174c8:	d8c02915 	stw	r3,164(sp)
 40174cc:	d8002785 	stb	zero,158(sp)
 40174d0:	d8801405 	stb	r2,80(sp)
 40174d4:	d9002e15 	stw	r4,184(sp)
 40174d8:	d8c02b15 	stw	r3,172(sp)
 40174dc:	d8002a15 	stw	zero,168(sp)
 40174e0:	d8003215 	stw	zero,200(sp)
 40174e4:	dc001404 	addi	r16,sp,80
 40174e8:	0039883a 	mov	fp,zero
 40174ec:	003e5306 	br	4016e3c <__alt_mem_onchip_memory2_0+0xfc011c7c>
 40174f0:	010100b4 	movhi	r4,1026
 40174f4:	21158504 	addi	r4,r4,22036
 40174f8:	0039883a 	mov	fp,zero
 40174fc:	d9003915 	stw	r4,228(sp)
 4017500:	04401e04 	movi	r17,120
 4017504:	003f6906 	br	40172ac <__alt_mem_onchip_memory2_0+0xfc0120ec>
 4017508:	8025883a 	mov	r18,r16
 401750c:	dc002903 	ldbu	r16,164(sp)
 4017510:	e011883a 	mov	r8,fp
 4017514:	84003fcc 	andi	r16,r16,255
 4017518:	8005081e 	bne	r16,zero,401893c <___vfprintf_internal_r+0x2290>
 401751c:	883d6126 	beq	r17,zero,4016aa4 <__alt_mem_onchip_memory2_0+0xfc0118e4>
 4017520:	00c00044 	movi	r3,1
 4017524:	d8c02915 	stw	r3,164(sp)
 4017528:	dc401405 	stb	r17,80(sp)
 401752c:	d8002785 	stb	zero,158(sp)
 4017530:	003fe906 	br	40174d8 <__alt_mem_onchip_memory2_0+0xfc012318>
 4017534:	014100b4 	movhi	r5,1026
 4017538:	29558504 	addi	r5,r5,22036
 401753c:	d9403915 	stw	r5,228(sp)
 4017540:	d8c02e15 	stw	r3,184(sp)
 4017544:	1025883a 	mov	r18,r2
 4017548:	04401e04 	movi	r17,120
 401754c:	9d84b03a 	or	r2,r19,r22
 4017550:	1000fc1e 	bne	r2,zero,4017944 <___vfprintf_internal_r+0x1298>
 4017554:	0039883a 	mov	fp,zero
 4017558:	00800084 	movi	r2,2
 401755c:	10803fcc 	andi	r2,r2,255
 4017560:	00c00044 	movi	r3,1
 4017564:	10c20f26 	beq	r2,r3,4017da4 <___vfprintf_internal_r+0x16f8>
 4017568:	00c00084 	movi	r3,2
 401756c:	10fd3326 	beq	r2,r3,4016a3c <__alt_mem_onchip_memory2_0+0xfc01187c>
 4017570:	003e0b06 	br	4016da0 <__alt_mem_onchip_memory2_0+0xfc011be0>
 4017574:	d8c02017 	ldw	r3,128(sp)
 4017578:	003e7106 	br	4016f40 <__alt_mem_onchip_memory2_0+0xfc011d80>
 401757c:	00801944 	movi	r2,101
 4017580:	14407e0e 	bge	r2,r17,401777c <___vfprintf_internal_r+0x10d0>
 4017584:	d9003617 	ldw	r4,216(sp)
 4017588:	d9403817 	ldw	r5,224(sp)
 401758c:	000d883a 	mov	r6,zero
 4017590:	000f883a 	mov	r7,zero
 4017594:	d8c03c15 	stw	r3,240(sp)
 4017598:	da003d15 	stw	r8,244(sp)
 401759c:	4012ad80 	call	4012ad8 <__eqdf2>
 40175a0:	d8c03c17 	ldw	r3,240(sp)
 40175a4:	da003d17 	ldw	r8,244(sp)
 40175a8:	1000f71e 	bne	r2,zero,4017988 <___vfprintf_internal_r+0x12dc>
 40175ac:	d8801f17 	ldw	r2,124(sp)
 40175b0:	010100b4 	movhi	r4,1026
 40175b4:	21153904 	addi	r4,r4,21732
 40175b8:	18c00044 	addi	r3,r3,1
 40175bc:	10800044 	addi	r2,r2,1
 40175c0:	41000015 	stw	r4,0(r8)
 40175c4:	01000044 	movi	r4,1
 40175c8:	41000115 	stw	r4,4(r8)
 40175cc:	d8c02015 	stw	r3,128(sp)
 40175d0:	d8801f15 	stw	r2,124(sp)
 40175d4:	010001c4 	movi	r4,7
 40175d8:	2082b816 	blt	r4,r2,40180bc <___vfprintf_internal_r+0x1a10>
 40175dc:	42000204 	addi	r8,r8,8
 40175e0:	d8802617 	ldw	r2,152(sp)
 40175e4:	d9403317 	ldw	r5,204(sp)
 40175e8:	11400216 	blt	r2,r5,40175f4 <___vfprintf_internal_r+0xf48>
 40175ec:	9080004c 	andi	r2,r18,1
 40175f0:	103eb326 	beq	r2,zero,40170c0 <__alt_mem_onchip_memory2_0+0xfc011f00>
 40175f4:	d8803717 	ldw	r2,220(sp)
 40175f8:	d9003417 	ldw	r4,208(sp)
 40175fc:	d9403717 	ldw	r5,220(sp)
 4017600:	1887883a 	add	r3,r3,r2
 4017604:	d8801f17 	ldw	r2,124(sp)
 4017608:	41000015 	stw	r4,0(r8)
 401760c:	41400115 	stw	r5,4(r8)
 4017610:	10800044 	addi	r2,r2,1
 4017614:	d8c02015 	stw	r3,128(sp)
 4017618:	d8801f15 	stw	r2,124(sp)
 401761c:	010001c4 	movi	r4,7
 4017620:	20832916 	blt	r4,r2,40182c8 <___vfprintf_internal_r+0x1c1c>
 4017624:	42000204 	addi	r8,r8,8
 4017628:	d8803317 	ldw	r2,204(sp)
 401762c:	143fffc4 	addi	r16,r2,-1
 4017630:	043ea30e 	bge	zero,r16,40170c0 <__alt_mem_onchip_memory2_0+0xfc011f00>
 4017634:	04400404 	movi	r17,16
 4017638:	d8801f17 	ldw	r2,124(sp)
 401763c:	8c00880e 	bge	r17,r16,4017860 <___vfprintf_internal_r+0x11b4>
 4017640:	014100b4 	movhi	r5,1026
 4017644:	295593c4 	addi	r5,r5,22095
 4017648:	d9402c15 	stw	r5,176(sp)
 401764c:	058001c4 	movi	r22,7
 4017650:	dcc02d17 	ldw	r19,180(sp)
 4017654:	00000306 	br	4017664 <___vfprintf_internal_r+0xfb8>
 4017658:	42000204 	addi	r8,r8,8
 401765c:	843ffc04 	addi	r16,r16,-16
 4017660:	8c00820e 	bge	r17,r16,401786c <___vfprintf_internal_r+0x11c0>
 4017664:	18c00404 	addi	r3,r3,16
 4017668:	10800044 	addi	r2,r2,1
 401766c:	45000015 	stw	r20,0(r8)
 4017670:	44400115 	stw	r17,4(r8)
 4017674:	d8c02015 	stw	r3,128(sp)
 4017678:	d8801f15 	stw	r2,124(sp)
 401767c:	b0bff60e 	bge	r22,r2,4017658 <__alt_mem_onchip_memory2_0+0xfc012498>
 4017680:	d9801e04 	addi	r6,sp,120
 4017684:	b80b883a 	mov	r5,r23
 4017688:	9809883a 	mov	r4,r19
 401768c:	401f54c0 	call	401f54c <__sprint_r>
 4017690:	103d0a1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017694:	d8c02017 	ldw	r3,128(sp)
 4017698:	d8801f17 	ldw	r2,124(sp)
 401769c:	da000404 	addi	r8,sp,16
 40176a0:	003fee06 	br	401765c <__alt_mem_onchip_memory2_0+0xfc01249c>
 40176a4:	d9403117 	ldw	r5,196(sp)
 40176a8:	d8802917 	ldw	r2,164(sp)
 40176ac:	28adc83a 	sub	r22,r5,r2
 40176b0:	05be410e 	bge	zero,r22,4016fb8 <__alt_mem_onchip_memory2_0+0xfc011df8>
 40176b4:	07000404 	movi	fp,16
 40176b8:	d8801f17 	ldw	r2,124(sp)
 40176bc:	e5838f0e 	bge	fp,r22,40184fc <___vfprintf_internal_r+0x1e50>
 40176c0:	014100b4 	movhi	r5,1026
 40176c4:	295593c4 	addi	r5,r5,22095
 40176c8:	dc403015 	stw	r17,192(sp)
 40176cc:	d9402c15 	stw	r5,176(sp)
 40176d0:	b023883a 	mov	r17,r22
 40176d4:	04c001c4 	movi	r19,7
 40176d8:	a82d883a 	mov	r22,r21
 40176dc:	902b883a 	mov	r21,r18
 40176e0:	8025883a 	mov	r18,r16
 40176e4:	dc002d17 	ldw	r16,180(sp)
 40176e8:	00000306 	br	40176f8 <___vfprintf_internal_r+0x104c>
 40176ec:	8c7ffc04 	addi	r17,r17,-16
 40176f0:	42000204 	addi	r8,r8,8
 40176f4:	e440110e 	bge	fp,r17,401773c <___vfprintf_internal_r+0x1090>
 40176f8:	18c00404 	addi	r3,r3,16
 40176fc:	10800044 	addi	r2,r2,1
 4017700:	45000015 	stw	r20,0(r8)
 4017704:	47000115 	stw	fp,4(r8)
 4017708:	d8c02015 	stw	r3,128(sp)
 401770c:	d8801f15 	stw	r2,124(sp)
 4017710:	98bff60e 	bge	r19,r2,40176ec <__alt_mem_onchip_memory2_0+0xfc01252c>
 4017714:	d9801e04 	addi	r6,sp,120
 4017718:	b80b883a 	mov	r5,r23
 401771c:	8009883a 	mov	r4,r16
 4017720:	401f54c0 	call	401f54c <__sprint_r>
 4017724:	103ce51e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017728:	8c7ffc04 	addi	r17,r17,-16
 401772c:	d8c02017 	ldw	r3,128(sp)
 4017730:	d8801f17 	ldw	r2,124(sp)
 4017734:	da000404 	addi	r8,sp,16
 4017738:	e47fef16 	blt	fp,r17,40176f8 <__alt_mem_onchip_memory2_0+0xfc012538>
 401773c:	9021883a 	mov	r16,r18
 4017740:	a825883a 	mov	r18,r21
 4017744:	b02b883a 	mov	r21,r22
 4017748:	882d883a 	mov	r22,r17
 401774c:	dc403017 	ldw	r17,192(sp)
 4017750:	d9002c17 	ldw	r4,176(sp)
 4017754:	1d87883a 	add	r3,r3,r22
 4017758:	10800044 	addi	r2,r2,1
 401775c:	41000015 	stw	r4,0(r8)
 4017760:	45800115 	stw	r22,4(r8)
 4017764:	d8c02015 	stw	r3,128(sp)
 4017768:	d8801f15 	stw	r2,124(sp)
 401776c:	010001c4 	movi	r4,7
 4017770:	20818e16 	blt	r4,r2,4017dac <___vfprintf_internal_r+0x1700>
 4017774:	42000204 	addi	r8,r8,8
 4017778:	003e0f06 	br	4016fb8 <__alt_mem_onchip_memory2_0+0xfc011df8>
 401777c:	d9403317 	ldw	r5,204(sp)
 4017780:	00800044 	movi	r2,1
 4017784:	18c00044 	addi	r3,r3,1
 4017788:	1141530e 	bge	r2,r5,4017cd8 <___vfprintf_internal_r+0x162c>
 401778c:	dc401f17 	ldw	r17,124(sp)
 4017790:	00800044 	movi	r2,1
 4017794:	40800115 	stw	r2,4(r8)
 4017798:	8c400044 	addi	r17,r17,1
 401779c:	44000015 	stw	r16,0(r8)
 40177a0:	d8c02015 	stw	r3,128(sp)
 40177a4:	dc401f15 	stw	r17,124(sp)
 40177a8:	008001c4 	movi	r2,7
 40177ac:	14416b16 	blt	r2,r17,4017d5c <___vfprintf_internal_r+0x16b0>
 40177b0:	42000204 	addi	r8,r8,8
 40177b4:	d8803717 	ldw	r2,220(sp)
 40177b8:	d9003417 	ldw	r4,208(sp)
 40177bc:	8c400044 	addi	r17,r17,1
 40177c0:	10c7883a 	add	r3,r2,r3
 40177c4:	40800115 	stw	r2,4(r8)
 40177c8:	41000015 	stw	r4,0(r8)
 40177cc:	d8c02015 	stw	r3,128(sp)
 40177d0:	dc401f15 	stw	r17,124(sp)
 40177d4:	008001c4 	movi	r2,7
 40177d8:	14416916 	blt	r2,r17,4017d80 <___vfprintf_internal_r+0x16d4>
 40177dc:	45800204 	addi	r22,r8,8
 40177e0:	d9003617 	ldw	r4,216(sp)
 40177e4:	d9403817 	ldw	r5,224(sp)
 40177e8:	000d883a 	mov	r6,zero
 40177ec:	000f883a 	mov	r7,zero
 40177f0:	d8c03c15 	stw	r3,240(sp)
 40177f4:	4012ad80 	call	4012ad8 <__eqdf2>
 40177f8:	d8c03c17 	ldw	r3,240(sp)
 40177fc:	1000bc26 	beq	r2,zero,4017af0 <___vfprintf_internal_r+0x1444>
 4017800:	d9403317 	ldw	r5,204(sp)
 4017804:	84000044 	addi	r16,r16,1
 4017808:	8c400044 	addi	r17,r17,1
 401780c:	28bfffc4 	addi	r2,r5,-1
 4017810:	1887883a 	add	r3,r3,r2
 4017814:	b0800115 	stw	r2,4(r22)
 4017818:	b4000015 	stw	r16,0(r22)
 401781c:	d8c02015 	stw	r3,128(sp)
 4017820:	dc401f15 	stw	r17,124(sp)
 4017824:	008001c4 	movi	r2,7
 4017828:	14414316 	blt	r2,r17,4017d38 <___vfprintf_internal_r+0x168c>
 401782c:	b5800204 	addi	r22,r22,8
 4017830:	d9003a17 	ldw	r4,232(sp)
 4017834:	df0022c4 	addi	fp,sp,139
 4017838:	8c400044 	addi	r17,r17,1
 401783c:	20c7883a 	add	r3,r4,r3
 4017840:	b7000015 	stw	fp,0(r22)
 4017844:	b1000115 	stw	r4,4(r22)
 4017848:	d8c02015 	stw	r3,128(sp)
 401784c:	dc401f15 	stw	r17,124(sp)
 4017850:	008001c4 	movi	r2,7
 4017854:	14400e16 	blt	r2,r17,4017890 <___vfprintf_internal_r+0x11e4>
 4017858:	b2000204 	addi	r8,r22,8
 401785c:	003e1806 	br	40170c0 <__alt_mem_onchip_memory2_0+0xfc011f00>
 4017860:	010100b4 	movhi	r4,1026
 4017864:	211593c4 	addi	r4,r4,22095
 4017868:	d9002c15 	stw	r4,176(sp)
 401786c:	d9002c17 	ldw	r4,176(sp)
 4017870:	1c07883a 	add	r3,r3,r16
 4017874:	44000115 	stw	r16,4(r8)
 4017878:	41000015 	stw	r4,0(r8)
 401787c:	10800044 	addi	r2,r2,1
 4017880:	d8c02015 	stw	r3,128(sp)
 4017884:	d8801f15 	stw	r2,124(sp)
 4017888:	010001c4 	movi	r4,7
 401788c:	20be0b0e 	bge	r4,r2,40170bc <__alt_mem_onchip_memory2_0+0xfc011efc>
 4017890:	d9002d17 	ldw	r4,180(sp)
 4017894:	d9801e04 	addi	r6,sp,120
 4017898:	b80b883a 	mov	r5,r23
 401789c:	401f54c0 	call	401f54c <__sprint_r>
 40178a0:	103c861e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40178a4:	d8c02017 	ldw	r3,128(sp)
 40178a8:	da000404 	addi	r8,sp,16
 40178ac:	003e0406 	br	40170c0 <__alt_mem_onchip_memory2_0+0xfc011f00>
 40178b0:	d9002d17 	ldw	r4,180(sp)
 40178b4:	d9801e04 	addi	r6,sp,120
 40178b8:	b80b883a 	mov	r5,r23
 40178bc:	401f54c0 	call	401f54c <__sprint_r>
 40178c0:	103e3b26 	beq	r2,zero,40171b0 <__alt_mem_onchip_memory2_0+0xfc011ff0>
 40178c4:	003c7d06 	br	4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40178c8:	d9002d17 	ldw	r4,180(sp)
 40178cc:	d9801e04 	addi	r6,sp,120
 40178d0:	b80b883a 	mov	r5,r23
 40178d4:	401f54c0 	call	401f54c <__sprint_r>
 40178d8:	103c781e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40178dc:	d8c02017 	ldw	r3,128(sp)
 40178e0:	da000404 	addi	r8,sp,16
 40178e4:	003de906 	br	401708c <__alt_mem_onchip_memory2_0+0xfc011ecc>
 40178e8:	d9002d17 	ldw	r4,180(sp)
 40178ec:	d9801e04 	addi	r6,sp,120
 40178f0:	b80b883a 	mov	r5,r23
 40178f4:	401f54c0 	call	401f54c <__sprint_r>
 40178f8:	103c701e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40178fc:	d8c02017 	ldw	r3,128(sp)
 4017900:	da000404 	addi	r8,sp,16
 4017904:	003d9b06 	br	4016f74 <__alt_mem_onchip_memory2_0+0xfc011db4>
 4017908:	d9002d17 	ldw	r4,180(sp)
 401790c:	d9801e04 	addi	r6,sp,120
 4017910:	b80b883a 	mov	r5,r23
 4017914:	401f54c0 	call	401f54c <__sprint_r>
 4017918:	103c681e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 401791c:	d8c02017 	ldw	r3,128(sp)
 4017920:	da000404 	addi	r8,sp,16
 4017924:	003da106 	br	4016fac <__alt_mem_onchip_memory2_0+0xfc011dec>
 4017928:	d9402a17 	ldw	r5,168(sp)
 401792c:	d8002785 	stb	zero,158(sp)
 4017930:	283f0616 	blt	r5,zero,401754c <__alt_mem_onchip_memory2_0+0xfc01238c>
 4017934:	00ffdfc4 	movi	r3,-129
 4017938:	9d84b03a 	or	r2,r19,r22
 401793c:	90e4703a 	and	r18,r18,r3
 4017940:	103c3b26 	beq	r2,zero,4016a30 <__alt_mem_onchip_memory2_0+0xfc011870>
 4017944:	0039883a 	mov	fp,zero
 4017948:	003e5806 	br	40172ac <__alt_mem_onchip_memory2_0+0xfc0120ec>
 401794c:	9080040c 	andi	r2,r18,16
 4017950:	1001b326 	beq	r2,zero,4018020 <___vfprintf_internal_r+0x1974>
 4017954:	d8c02e17 	ldw	r3,184(sp)
 4017958:	d9002a17 	ldw	r4,168(sp)
 401795c:	d8002785 	stb	zero,158(sp)
 4017960:	18800104 	addi	r2,r3,4
 4017964:	1cc00017 	ldw	r19,0(r3)
 4017968:	002d883a 	mov	r22,zero
 401796c:	2001b516 	blt	r4,zero,4018044 <___vfprintf_internal_r+0x1998>
 4017970:	00ffdfc4 	movi	r3,-129
 4017974:	d8802e15 	stw	r2,184(sp)
 4017978:	90e4703a 	and	r18,r18,r3
 401797c:	983d0526 	beq	r19,zero,4016d94 <__alt_mem_onchip_memory2_0+0xfc011bd4>
 4017980:	0039883a 	mov	fp,zero
 4017984:	003d0806 	br	4016da8 <__alt_mem_onchip_memory2_0+0xfc011be8>
 4017988:	dc402617 	ldw	r17,152(sp)
 401798c:	0441d30e 	bge	zero,r17,40180dc <___vfprintf_internal_r+0x1a30>
 4017990:	dc403217 	ldw	r17,200(sp)
 4017994:	d8803317 	ldw	r2,204(sp)
 4017998:	1440010e 	bge	r2,r17,40179a0 <___vfprintf_internal_r+0x12f4>
 401799c:	1023883a 	mov	r17,r2
 40179a0:	04400a0e 	bge	zero,r17,40179cc <___vfprintf_internal_r+0x1320>
 40179a4:	d8801f17 	ldw	r2,124(sp)
 40179a8:	1c47883a 	add	r3,r3,r17
 40179ac:	44000015 	stw	r16,0(r8)
 40179b0:	10800044 	addi	r2,r2,1
 40179b4:	44400115 	stw	r17,4(r8)
 40179b8:	d8c02015 	stw	r3,128(sp)
 40179bc:	d8801f15 	stw	r2,124(sp)
 40179c0:	010001c4 	movi	r4,7
 40179c4:	20826516 	blt	r4,r2,401835c <___vfprintf_internal_r+0x1cb0>
 40179c8:	42000204 	addi	r8,r8,8
 40179cc:	88026116 	blt	r17,zero,4018354 <___vfprintf_internal_r+0x1ca8>
 40179d0:	d9003217 	ldw	r4,200(sp)
 40179d4:	2463c83a 	sub	r17,r4,r17
 40179d8:	04407b0e 	bge	zero,r17,4017bc8 <___vfprintf_internal_r+0x151c>
 40179dc:	05800404 	movi	r22,16
 40179e0:	d8801f17 	ldw	r2,124(sp)
 40179e4:	b4419d0e 	bge	r22,r17,401805c <___vfprintf_internal_r+0x19b0>
 40179e8:	010100b4 	movhi	r4,1026
 40179ec:	211593c4 	addi	r4,r4,22095
 40179f0:	d9002c15 	stw	r4,176(sp)
 40179f4:	070001c4 	movi	fp,7
 40179f8:	dcc02d17 	ldw	r19,180(sp)
 40179fc:	00000306 	br	4017a0c <___vfprintf_internal_r+0x1360>
 4017a00:	42000204 	addi	r8,r8,8
 4017a04:	8c7ffc04 	addi	r17,r17,-16
 4017a08:	b441970e 	bge	r22,r17,4018068 <___vfprintf_internal_r+0x19bc>
 4017a0c:	18c00404 	addi	r3,r3,16
 4017a10:	10800044 	addi	r2,r2,1
 4017a14:	45000015 	stw	r20,0(r8)
 4017a18:	45800115 	stw	r22,4(r8)
 4017a1c:	d8c02015 	stw	r3,128(sp)
 4017a20:	d8801f15 	stw	r2,124(sp)
 4017a24:	e0bff60e 	bge	fp,r2,4017a00 <__alt_mem_onchip_memory2_0+0xfc012840>
 4017a28:	d9801e04 	addi	r6,sp,120
 4017a2c:	b80b883a 	mov	r5,r23
 4017a30:	9809883a 	mov	r4,r19
 4017a34:	401f54c0 	call	401f54c <__sprint_r>
 4017a38:	103c201e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017a3c:	d8c02017 	ldw	r3,128(sp)
 4017a40:	d8801f17 	ldw	r2,124(sp)
 4017a44:	da000404 	addi	r8,sp,16
 4017a48:	003fee06 	br	4017a04 <__alt_mem_onchip_memory2_0+0xfc012844>
 4017a4c:	d9002d17 	ldw	r4,180(sp)
 4017a50:	d9801e04 	addi	r6,sp,120
 4017a54:	b80b883a 	mov	r5,r23
 4017a58:	401f54c0 	call	401f54c <__sprint_r>
 4017a5c:	103c171e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017a60:	d8c02017 	ldw	r3,128(sp)
 4017a64:	df002787 	ldb	fp,158(sp)
 4017a68:	da000404 	addi	r8,sp,16
 4017a6c:	003d3406 	br	4016f40 <__alt_mem_onchip_memory2_0+0xfc011d80>
 4017a70:	9080040c 	andi	r2,r18,16
 4017a74:	10016126 	beq	r2,zero,4017ffc <___vfprintf_internal_r+0x1950>
 4017a78:	d9402e17 	ldw	r5,184(sp)
 4017a7c:	2cc00017 	ldw	r19,0(r5)
 4017a80:	29400104 	addi	r5,r5,4
 4017a84:	d9402e15 	stw	r5,184(sp)
 4017a88:	982dd7fa 	srai	r22,r19,31
 4017a8c:	b005883a 	mov	r2,r22
 4017a90:	003c5a06 	br	4016bfc <__alt_mem_onchip_memory2_0+0xfc011a3c>
 4017a94:	9080040c 	andi	r2,r18,16
 4017a98:	10003526 	beq	r2,zero,4017b70 <___vfprintf_internal_r+0x14c4>
 4017a9c:	d8c02e17 	ldw	r3,184(sp)
 4017aa0:	d9002a17 	ldw	r4,168(sp)
 4017aa4:	d8002785 	stb	zero,158(sp)
 4017aa8:	18800104 	addi	r2,r3,4
 4017aac:	1cc00017 	ldw	r19,0(r3)
 4017ab0:	002d883a 	mov	r22,zero
 4017ab4:	20003716 	blt	r4,zero,4017b94 <___vfprintf_internal_r+0x14e8>
 4017ab8:	00ffdfc4 	movi	r3,-129
 4017abc:	d8802e15 	stw	r2,184(sp)
 4017ac0:	90e4703a 	and	r18,r18,r3
 4017ac4:	0039883a 	mov	fp,zero
 4017ac8:	983dd426 	beq	r19,zero,401721c <__alt_mem_onchip_memory2_0+0xfc01205c>
 4017acc:	00800244 	movi	r2,9
 4017ad0:	14fc5336 	bltu	r2,r19,4016c20 <__alt_mem_onchip_memory2_0+0xfc011a60>
 4017ad4:	d8c02817 	ldw	r3,160(sp)
 4017ad8:	dc001dc4 	addi	r16,sp,119
 4017adc:	9cc00c04 	addi	r19,r19,48
 4017ae0:	1c07c83a 	sub	r3,r3,r16
 4017ae4:	dcc01dc5 	stb	r19,119(sp)
 4017ae8:	d8c02b15 	stw	r3,172(sp)
 4017aec:	003cc606 	br	4016e08 <__alt_mem_onchip_memory2_0+0xfc011c48>
 4017af0:	d8803317 	ldw	r2,204(sp)
 4017af4:	143fffc4 	addi	r16,r2,-1
 4017af8:	043f4d0e 	bge	zero,r16,4017830 <__alt_mem_onchip_memory2_0+0xfc012670>
 4017afc:	07000404 	movi	fp,16
 4017b00:	e400810e 	bge	fp,r16,4017d08 <___vfprintf_internal_r+0x165c>
 4017b04:	014100b4 	movhi	r5,1026
 4017b08:	295593c4 	addi	r5,r5,22095
 4017b0c:	d9402c15 	stw	r5,176(sp)
 4017b10:	01c001c4 	movi	r7,7
 4017b14:	dcc02d17 	ldw	r19,180(sp)
 4017b18:	00000306 	br	4017b28 <___vfprintf_internal_r+0x147c>
 4017b1c:	b5800204 	addi	r22,r22,8
 4017b20:	843ffc04 	addi	r16,r16,-16
 4017b24:	e4007b0e 	bge	fp,r16,4017d14 <___vfprintf_internal_r+0x1668>
 4017b28:	18c00404 	addi	r3,r3,16
 4017b2c:	8c400044 	addi	r17,r17,1
 4017b30:	b5000015 	stw	r20,0(r22)
 4017b34:	b7000115 	stw	fp,4(r22)
 4017b38:	d8c02015 	stw	r3,128(sp)
 4017b3c:	dc401f15 	stw	r17,124(sp)
 4017b40:	3c7ff60e 	bge	r7,r17,4017b1c <__alt_mem_onchip_memory2_0+0xfc01295c>
 4017b44:	d9801e04 	addi	r6,sp,120
 4017b48:	b80b883a 	mov	r5,r23
 4017b4c:	9809883a 	mov	r4,r19
 4017b50:	d9c03c15 	stw	r7,240(sp)
 4017b54:	401f54c0 	call	401f54c <__sprint_r>
 4017b58:	d9c03c17 	ldw	r7,240(sp)
 4017b5c:	103bd71e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017b60:	d8c02017 	ldw	r3,128(sp)
 4017b64:	dc401f17 	ldw	r17,124(sp)
 4017b68:	dd800404 	addi	r22,sp,16
 4017b6c:	003fec06 	br	4017b20 <__alt_mem_onchip_memory2_0+0xfc012960>
 4017b70:	9080100c 	andi	r2,r18,64
 4017b74:	d8002785 	stb	zero,158(sp)
 4017b78:	10010e26 	beq	r2,zero,4017fb4 <___vfprintf_internal_r+0x1908>
 4017b7c:	d9402e17 	ldw	r5,184(sp)
 4017b80:	d8c02a17 	ldw	r3,168(sp)
 4017b84:	002d883a 	mov	r22,zero
 4017b88:	28800104 	addi	r2,r5,4
 4017b8c:	2cc0000b 	ldhu	r19,0(r5)
 4017b90:	183fc90e 	bge	r3,zero,4017ab8 <__alt_mem_onchip_memory2_0+0xfc0128f8>
 4017b94:	d8802e15 	stw	r2,184(sp)
 4017b98:	0039883a 	mov	fp,zero
 4017b9c:	9d84b03a 	or	r2,r19,r22
 4017ba0:	103c1e1e 	bne	r2,zero,4016c1c <__alt_mem_onchip_memory2_0+0xfc011a5c>
 4017ba4:	00800044 	movi	r2,1
 4017ba8:	003e6c06 	br	401755c <__alt_mem_onchip_memory2_0+0xfc01239c>
 4017bac:	d9002d17 	ldw	r4,180(sp)
 4017bb0:	d9801e04 	addi	r6,sp,120
 4017bb4:	b80b883a 	mov	r5,r23
 4017bb8:	401f54c0 	call	401f54c <__sprint_r>
 4017bbc:	103bbf1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017bc0:	d8c02017 	ldw	r3,128(sp)
 4017bc4:	da000404 	addi	r8,sp,16
 4017bc8:	d9003217 	ldw	r4,200(sp)
 4017bcc:	d8802617 	ldw	r2,152(sp)
 4017bd0:	d9403317 	ldw	r5,204(sp)
 4017bd4:	8123883a 	add	r17,r16,r4
 4017bd8:	11400216 	blt	r2,r5,4017be4 <___vfprintf_internal_r+0x1538>
 4017bdc:	9100004c 	andi	r4,r18,1
 4017be0:	20000d26 	beq	r4,zero,4017c18 <___vfprintf_internal_r+0x156c>
 4017be4:	d9003717 	ldw	r4,220(sp)
 4017be8:	d9403417 	ldw	r5,208(sp)
 4017bec:	1907883a 	add	r3,r3,r4
 4017bf0:	d9001f17 	ldw	r4,124(sp)
 4017bf4:	41400015 	stw	r5,0(r8)
 4017bf8:	d9403717 	ldw	r5,220(sp)
 4017bfc:	21000044 	addi	r4,r4,1
 4017c00:	d8c02015 	stw	r3,128(sp)
 4017c04:	41400115 	stw	r5,4(r8)
 4017c08:	d9001f15 	stw	r4,124(sp)
 4017c0c:	014001c4 	movi	r5,7
 4017c10:	2901e816 	blt	r5,r4,40183b4 <___vfprintf_internal_r+0x1d08>
 4017c14:	42000204 	addi	r8,r8,8
 4017c18:	d9003317 	ldw	r4,204(sp)
 4017c1c:	8121883a 	add	r16,r16,r4
 4017c20:	2085c83a 	sub	r2,r4,r2
 4017c24:	8461c83a 	sub	r16,r16,r17
 4017c28:	1400010e 	bge	r2,r16,4017c30 <___vfprintf_internal_r+0x1584>
 4017c2c:	1021883a 	mov	r16,r2
 4017c30:	04000a0e 	bge	zero,r16,4017c5c <___vfprintf_internal_r+0x15b0>
 4017c34:	d9001f17 	ldw	r4,124(sp)
 4017c38:	1c07883a 	add	r3,r3,r16
 4017c3c:	44400015 	stw	r17,0(r8)
 4017c40:	21000044 	addi	r4,r4,1
 4017c44:	44000115 	stw	r16,4(r8)
 4017c48:	d8c02015 	stw	r3,128(sp)
 4017c4c:	d9001f15 	stw	r4,124(sp)
 4017c50:	014001c4 	movi	r5,7
 4017c54:	2901fb16 	blt	r5,r4,4018444 <___vfprintf_internal_r+0x1d98>
 4017c58:	42000204 	addi	r8,r8,8
 4017c5c:	8001f716 	blt	r16,zero,401843c <___vfprintf_internal_r+0x1d90>
 4017c60:	1421c83a 	sub	r16,r2,r16
 4017c64:	043d160e 	bge	zero,r16,40170c0 <__alt_mem_onchip_memory2_0+0xfc011f00>
 4017c68:	04400404 	movi	r17,16
 4017c6c:	d8801f17 	ldw	r2,124(sp)
 4017c70:	8c3efb0e 	bge	r17,r16,4017860 <__alt_mem_onchip_memory2_0+0xfc0126a0>
 4017c74:	014100b4 	movhi	r5,1026
 4017c78:	295593c4 	addi	r5,r5,22095
 4017c7c:	d9402c15 	stw	r5,176(sp)
 4017c80:	058001c4 	movi	r22,7
 4017c84:	dcc02d17 	ldw	r19,180(sp)
 4017c88:	00000306 	br	4017c98 <___vfprintf_internal_r+0x15ec>
 4017c8c:	42000204 	addi	r8,r8,8
 4017c90:	843ffc04 	addi	r16,r16,-16
 4017c94:	8c3ef50e 	bge	r17,r16,401786c <__alt_mem_onchip_memory2_0+0xfc0126ac>
 4017c98:	18c00404 	addi	r3,r3,16
 4017c9c:	10800044 	addi	r2,r2,1
 4017ca0:	45000015 	stw	r20,0(r8)
 4017ca4:	44400115 	stw	r17,4(r8)
 4017ca8:	d8c02015 	stw	r3,128(sp)
 4017cac:	d8801f15 	stw	r2,124(sp)
 4017cb0:	b0bff60e 	bge	r22,r2,4017c8c <__alt_mem_onchip_memory2_0+0xfc012acc>
 4017cb4:	d9801e04 	addi	r6,sp,120
 4017cb8:	b80b883a 	mov	r5,r23
 4017cbc:	9809883a 	mov	r4,r19
 4017cc0:	401f54c0 	call	401f54c <__sprint_r>
 4017cc4:	103b7d1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017cc8:	d8c02017 	ldw	r3,128(sp)
 4017ccc:	d8801f17 	ldw	r2,124(sp)
 4017cd0:	da000404 	addi	r8,sp,16
 4017cd4:	003fee06 	br	4017c90 <__alt_mem_onchip_memory2_0+0xfc012ad0>
 4017cd8:	9088703a 	and	r4,r18,r2
 4017cdc:	203eab1e 	bne	r4,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0125cc>
 4017ce0:	dc401f17 	ldw	r17,124(sp)
 4017ce4:	40800115 	stw	r2,4(r8)
 4017ce8:	44000015 	stw	r16,0(r8)
 4017cec:	8c400044 	addi	r17,r17,1
 4017cf0:	d8c02015 	stw	r3,128(sp)
 4017cf4:	dc401f15 	stw	r17,124(sp)
 4017cf8:	008001c4 	movi	r2,7
 4017cfc:	14400e16 	blt	r2,r17,4017d38 <___vfprintf_internal_r+0x168c>
 4017d00:	45800204 	addi	r22,r8,8
 4017d04:	003eca06 	br	4017830 <__alt_mem_onchip_memory2_0+0xfc012670>
 4017d08:	010100b4 	movhi	r4,1026
 4017d0c:	211593c4 	addi	r4,r4,22095
 4017d10:	d9002c15 	stw	r4,176(sp)
 4017d14:	d8802c17 	ldw	r2,176(sp)
 4017d18:	1c07883a 	add	r3,r3,r16
 4017d1c:	8c400044 	addi	r17,r17,1
 4017d20:	b0800015 	stw	r2,0(r22)
 4017d24:	b4000115 	stw	r16,4(r22)
 4017d28:	d8c02015 	stw	r3,128(sp)
 4017d2c:	dc401f15 	stw	r17,124(sp)
 4017d30:	008001c4 	movi	r2,7
 4017d34:	147ebd0e 	bge	r2,r17,401782c <__alt_mem_onchip_memory2_0+0xfc01266c>
 4017d38:	d9002d17 	ldw	r4,180(sp)
 4017d3c:	d9801e04 	addi	r6,sp,120
 4017d40:	b80b883a 	mov	r5,r23
 4017d44:	401f54c0 	call	401f54c <__sprint_r>
 4017d48:	103b5c1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017d4c:	d8c02017 	ldw	r3,128(sp)
 4017d50:	dc401f17 	ldw	r17,124(sp)
 4017d54:	dd800404 	addi	r22,sp,16
 4017d58:	003eb506 	br	4017830 <__alt_mem_onchip_memory2_0+0xfc012670>
 4017d5c:	d9002d17 	ldw	r4,180(sp)
 4017d60:	d9801e04 	addi	r6,sp,120
 4017d64:	b80b883a 	mov	r5,r23
 4017d68:	401f54c0 	call	401f54c <__sprint_r>
 4017d6c:	103b531e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017d70:	d8c02017 	ldw	r3,128(sp)
 4017d74:	dc401f17 	ldw	r17,124(sp)
 4017d78:	da000404 	addi	r8,sp,16
 4017d7c:	003e8d06 	br	40177b4 <__alt_mem_onchip_memory2_0+0xfc0125f4>
 4017d80:	d9002d17 	ldw	r4,180(sp)
 4017d84:	d9801e04 	addi	r6,sp,120
 4017d88:	b80b883a 	mov	r5,r23
 4017d8c:	401f54c0 	call	401f54c <__sprint_r>
 4017d90:	103b4a1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017d94:	d8c02017 	ldw	r3,128(sp)
 4017d98:	dc401f17 	ldw	r17,124(sp)
 4017d9c:	dd800404 	addi	r22,sp,16
 4017da0:	003e8f06 	br	40177e0 <__alt_mem_onchip_memory2_0+0xfc012620>
 4017da4:	0027883a 	mov	r19,zero
 4017da8:	003f4a06 	br	4017ad4 <__alt_mem_onchip_memory2_0+0xfc012914>
 4017dac:	d9002d17 	ldw	r4,180(sp)
 4017db0:	d9801e04 	addi	r6,sp,120
 4017db4:	b80b883a 	mov	r5,r23
 4017db8:	401f54c0 	call	401f54c <__sprint_r>
 4017dbc:	103b3f1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4017dc0:	d8c02017 	ldw	r3,128(sp)
 4017dc4:	da000404 	addi	r8,sp,16
 4017dc8:	003c7b06 	br	4016fb8 <__alt_mem_onchip_memory2_0+0xfc011df8>
 4017dcc:	d9402a17 	ldw	r5,168(sp)
 4017dd0:	04e7c83a 	sub	r19,zero,r19
 4017dd4:	07000b44 	movi	fp,45
 4017dd8:	9804c03a 	cmpne	r2,r19,zero
 4017ddc:	05adc83a 	sub	r22,zero,r22
 4017de0:	df002785 	stb	fp,158(sp)
 4017de4:	b0adc83a 	sub	r22,r22,r2
 4017de8:	28017b16 	blt	r5,zero,40183d8 <___vfprintf_internal_r+0x1d2c>
 4017dec:	00bfdfc4 	movi	r2,-129
 4017df0:	90a4703a 	and	r18,r18,r2
 4017df4:	003b8906 	br	4016c1c <__alt_mem_onchip_memory2_0+0xfc011a5c>
 4017df8:	d9003617 	ldw	r4,216(sp)
 4017dfc:	d9403817 	ldw	r5,224(sp)
 4017e00:	da003d15 	stw	r8,244(sp)
 4017e04:	4010edc0 	call	4010edc <__fpclassifyd>
 4017e08:	da003d17 	ldw	r8,244(sp)
 4017e0c:	1000f026 	beq	r2,zero,40181d0 <___vfprintf_internal_r+0x1b24>
 4017e10:	d9002a17 	ldw	r4,168(sp)
 4017e14:	05bff7c4 	movi	r22,-33
 4017e18:	00bfffc4 	movi	r2,-1
 4017e1c:	8dac703a 	and	r22,r17,r22
 4017e20:	20820026 	beq	r4,r2,4018624 <___vfprintf_internal_r+0x1f78>
 4017e24:	008011c4 	movi	r2,71
 4017e28:	b081f726 	beq	r22,r2,4018608 <___vfprintf_internal_r+0x1f5c>
 4017e2c:	d9003817 	ldw	r4,224(sp)
 4017e30:	90c04014 	ori	r3,r18,256
 4017e34:	d8c02c15 	stw	r3,176(sp)
 4017e38:	20021516 	blt	r4,zero,4018690 <___vfprintf_internal_r+0x1fe4>
 4017e3c:	dcc03817 	ldw	r19,224(sp)
 4017e40:	d8002905 	stb	zero,164(sp)
 4017e44:	00801984 	movi	r2,102
 4017e48:	8881f926 	beq	r17,r2,4018630 <___vfprintf_internal_r+0x1f84>
 4017e4c:	00801184 	movi	r2,70
 4017e50:	88821c26 	beq	r17,r2,40186c4 <___vfprintf_internal_r+0x2018>
 4017e54:	00801144 	movi	r2,69
 4017e58:	b081ef26 	beq	r22,r2,4018618 <___vfprintf_internal_r+0x1f6c>
 4017e5c:	d8c02a17 	ldw	r3,168(sp)
 4017e60:	d8802104 	addi	r2,sp,132
 4017e64:	d8800315 	stw	r2,12(sp)
 4017e68:	d9403617 	ldw	r5,216(sp)
 4017e6c:	d8802504 	addi	r2,sp,148
 4017e70:	d9002d17 	ldw	r4,180(sp)
 4017e74:	d8800215 	stw	r2,8(sp)
 4017e78:	d8802604 	addi	r2,sp,152
 4017e7c:	d8c00015 	stw	r3,0(sp)
 4017e80:	d8800115 	stw	r2,4(sp)
 4017e84:	01c00084 	movi	r7,2
 4017e88:	980d883a 	mov	r6,r19
 4017e8c:	d8c03c15 	stw	r3,240(sp)
 4017e90:	da003d15 	stw	r8,244(sp)
 4017e94:	4018ddc0 	call	4018ddc <_dtoa_r>
 4017e98:	1021883a 	mov	r16,r2
 4017e9c:	008019c4 	movi	r2,103
 4017ea0:	d8c03c17 	ldw	r3,240(sp)
 4017ea4:	da003d17 	ldw	r8,244(sp)
 4017ea8:	88817126 	beq	r17,r2,4018470 <___vfprintf_internal_r+0x1dc4>
 4017eac:	008011c4 	movi	r2,71
 4017eb0:	88829126 	beq	r17,r2,40188f8 <___vfprintf_internal_r+0x224c>
 4017eb4:	80f9883a 	add	fp,r16,r3
 4017eb8:	d9003617 	ldw	r4,216(sp)
 4017ebc:	000d883a 	mov	r6,zero
 4017ec0:	000f883a 	mov	r7,zero
 4017ec4:	980b883a 	mov	r5,r19
 4017ec8:	da003d15 	stw	r8,244(sp)
 4017ecc:	4012ad80 	call	4012ad8 <__eqdf2>
 4017ed0:	da003d17 	ldw	r8,244(sp)
 4017ed4:	10018d26 	beq	r2,zero,401850c <___vfprintf_internal_r+0x1e60>
 4017ed8:	d8802117 	ldw	r2,132(sp)
 4017edc:	1700062e 	bgeu	r2,fp,4017ef8 <___vfprintf_internal_r+0x184c>
 4017ee0:	01000c04 	movi	r4,48
 4017ee4:	10c00044 	addi	r3,r2,1
 4017ee8:	d8c02115 	stw	r3,132(sp)
 4017eec:	11000005 	stb	r4,0(r2)
 4017ef0:	d8802117 	ldw	r2,132(sp)
 4017ef4:	173ffb36 	bltu	r2,fp,4017ee4 <__alt_mem_onchip_memory2_0+0xfc012d24>
 4017ef8:	1405c83a 	sub	r2,r2,r16
 4017efc:	d8803315 	stw	r2,204(sp)
 4017f00:	008011c4 	movi	r2,71
 4017f04:	b0817626 	beq	r22,r2,40184e0 <___vfprintf_internal_r+0x1e34>
 4017f08:	00801944 	movi	r2,101
 4017f0c:	1442800e 	bge	r2,r17,4018910 <___vfprintf_internal_r+0x2264>
 4017f10:	d8c02617 	ldw	r3,152(sp)
 4017f14:	00801984 	movi	r2,102
 4017f18:	d8c03215 	stw	r3,200(sp)
 4017f1c:	8881fe26 	beq	r17,r2,4018718 <___vfprintf_internal_r+0x206c>
 4017f20:	d8c03217 	ldw	r3,200(sp)
 4017f24:	d9003317 	ldw	r4,204(sp)
 4017f28:	1901dd16 	blt	r3,r4,40186a0 <___vfprintf_internal_r+0x1ff4>
 4017f2c:	9480004c 	andi	r18,r18,1
 4017f30:	90022b1e 	bne	r18,zero,40187e0 <___vfprintf_internal_r+0x2134>
 4017f34:	1805883a 	mov	r2,r3
 4017f38:	18028316 	blt	r3,zero,4018948 <___vfprintf_internal_r+0x229c>
 4017f3c:	d8c03217 	ldw	r3,200(sp)
 4017f40:	044019c4 	movi	r17,103
 4017f44:	d8c02b15 	stw	r3,172(sp)
 4017f48:	df002907 	ldb	fp,164(sp)
 4017f4c:	e001531e 	bne	fp,zero,401849c <___vfprintf_internal_r+0x1df0>
 4017f50:	df002783 	ldbu	fp,158(sp)
 4017f54:	d8802915 	stw	r2,164(sp)
 4017f58:	dc802c17 	ldw	r18,176(sp)
 4017f5c:	d8002a15 	stw	zero,168(sp)
 4017f60:	003baf06 	br	4016e20 <__alt_mem_onchip_memory2_0+0xfc011c60>
 4017f64:	d8c02e17 	ldw	r3,184(sp)
 4017f68:	d9002e17 	ldw	r4,184(sp)
 4017f6c:	d9402e17 	ldw	r5,184(sp)
 4017f70:	18c00017 	ldw	r3,0(r3)
 4017f74:	21000117 	ldw	r4,4(r4)
 4017f78:	29400204 	addi	r5,r5,8
 4017f7c:	d8c03615 	stw	r3,216(sp)
 4017f80:	d9003815 	stw	r4,224(sp)
 4017f84:	d9402e15 	stw	r5,184(sp)
 4017f88:	003b5006 	br	4016ccc <__alt_mem_onchip_memory2_0+0xfc011b0c>
 4017f8c:	ac400007 	ldb	r17,0(r21)
 4017f90:	003a2806 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 4017f94:	9080100c 	andi	r2,r18,64
 4017f98:	1000a826 	beq	r2,zero,401823c <___vfprintf_internal_r+0x1b90>
 4017f9c:	d8c02e17 	ldw	r3,184(sp)
 4017fa0:	002d883a 	mov	r22,zero
 4017fa4:	1cc0000b 	ldhu	r19,0(r3)
 4017fa8:	18c00104 	addi	r3,r3,4
 4017fac:	d8c02e15 	stw	r3,184(sp)
 4017fb0:	003caf06 	br	4017270 <__alt_mem_onchip_memory2_0+0xfc0120b0>
 4017fb4:	d9002e17 	ldw	r4,184(sp)
 4017fb8:	d9402a17 	ldw	r5,168(sp)
 4017fbc:	002d883a 	mov	r22,zero
 4017fc0:	20800104 	addi	r2,r4,4
 4017fc4:	24c00017 	ldw	r19,0(r4)
 4017fc8:	283ebb0e 	bge	r5,zero,4017ab8 <__alt_mem_onchip_memory2_0+0xfc0128f8>
 4017fcc:	003ef106 	br	4017b94 <__alt_mem_onchip_memory2_0+0xfc0129d4>
 4017fd0:	9080040c 	andi	r2,r18,16
 4017fd4:	1000921e 	bne	r2,zero,4018220 <___vfprintf_internal_r+0x1b74>
 4017fd8:	9480100c 	andi	r18,r18,64
 4017fdc:	90013926 	beq	r18,zero,40184c4 <___vfprintf_internal_r+0x1e18>
 4017fe0:	d9402e17 	ldw	r5,184(sp)
 4017fe4:	d8c02f17 	ldw	r3,188(sp)
 4017fe8:	28800017 	ldw	r2,0(r5)
 4017fec:	29400104 	addi	r5,r5,4
 4017ff0:	d9402e15 	stw	r5,184(sp)
 4017ff4:	10c0000d 	sth	r3,0(r2)
 4017ff8:	0039e406 	br	401678c <__alt_mem_onchip_memory2_0+0xfc0115cc>
 4017ffc:	9080100c 	andi	r2,r18,64
 4018000:	10008026 	beq	r2,zero,4018204 <___vfprintf_internal_r+0x1b58>
 4018004:	d8802e17 	ldw	r2,184(sp)
 4018008:	14c0000f 	ldh	r19,0(r2)
 401800c:	10800104 	addi	r2,r2,4
 4018010:	d8802e15 	stw	r2,184(sp)
 4018014:	982dd7fa 	srai	r22,r19,31
 4018018:	b005883a 	mov	r2,r22
 401801c:	003af706 	br	4016bfc <__alt_mem_onchip_memory2_0+0xfc011a3c>
 4018020:	9080100c 	andi	r2,r18,64
 4018024:	d8002785 	stb	zero,158(sp)
 4018028:	10008a1e 	bne	r2,zero,4018254 <___vfprintf_internal_r+0x1ba8>
 401802c:	d9002e17 	ldw	r4,184(sp)
 4018030:	d9402a17 	ldw	r5,168(sp)
 4018034:	002d883a 	mov	r22,zero
 4018038:	20800104 	addi	r2,r4,4
 401803c:	24c00017 	ldw	r19,0(r4)
 4018040:	283e4b0e 	bge	r5,zero,4017970 <__alt_mem_onchip_memory2_0+0xfc0127b0>
 4018044:	9d86b03a 	or	r3,r19,r22
 4018048:	d8802e15 	stw	r2,184(sp)
 401804c:	183e4c1e 	bne	r3,zero,4017980 <__alt_mem_onchip_memory2_0+0xfc0127c0>
 4018050:	0039883a 	mov	fp,zero
 4018054:	0005883a 	mov	r2,zero
 4018058:	003d4006 	br	401755c <__alt_mem_onchip_memory2_0+0xfc01239c>
 401805c:	014100b4 	movhi	r5,1026
 4018060:	295593c4 	addi	r5,r5,22095
 4018064:	d9402c15 	stw	r5,176(sp)
 4018068:	d9402c17 	ldw	r5,176(sp)
 401806c:	1c47883a 	add	r3,r3,r17
 4018070:	10800044 	addi	r2,r2,1
 4018074:	41400015 	stw	r5,0(r8)
 4018078:	44400115 	stw	r17,4(r8)
 401807c:	d8c02015 	stw	r3,128(sp)
 4018080:	d8801f15 	stw	r2,124(sp)
 4018084:	010001c4 	movi	r4,7
 4018088:	20bec816 	blt	r4,r2,4017bac <__alt_mem_onchip_memory2_0+0xfc0129ec>
 401808c:	42000204 	addi	r8,r8,8
 4018090:	003ecd06 	br	4017bc8 <__alt_mem_onchip_memory2_0+0xfc012a08>
 4018094:	d9002a17 	ldw	r4,168(sp)
 4018098:	d8002785 	stb	zero,158(sp)
 401809c:	203d2d16 	blt	r4,zero,4017554 <__alt_mem_onchip_memory2_0+0xfc012394>
 40180a0:	00bfdfc4 	movi	r2,-129
 40180a4:	90a4703a 	and	r18,r18,r2
 40180a8:	003a6106 	br	4016a30 <__alt_mem_onchip_memory2_0+0xfc011870>
 40180ac:	010100b4 	movhi	r4,1026
 40180b0:	211593c4 	addi	r4,r4,22095
 40180b4:	d9002c15 	stw	r4,176(sp)
 40180b8:	003bea06 	br	4017064 <__alt_mem_onchip_memory2_0+0xfc011ea4>
 40180bc:	d9002d17 	ldw	r4,180(sp)
 40180c0:	d9801e04 	addi	r6,sp,120
 40180c4:	b80b883a 	mov	r5,r23
 40180c8:	401f54c0 	call	401f54c <__sprint_r>
 40180cc:	103a7b1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40180d0:	d8c02017 	ldw	r3,128(sp)
 40180d4:	da000404 	addi	r8,sp,16
 40180d8:	003d4106 	br	40175e0 <__alt_mem_onchip_memory2_0+0xfc012420>
 40180dc:	d8801f17 	ldw	r2,124(sp)
 40180e0:	014100b4 	movhi	r5,1026
 40180e4:	01000044 	movi	r4,1
 40180e8:	18c00044 	addi	r3,r3,1
 40180ec:	10800044 	addi	r2,r2,1
 40180f0:	29553904 	addi	r5,r5,21732
 40180f4:	41000115 	stw	r4,4(r8)
 40180f8:	41400015 	stw	r5,0(r8)
 40180fc:	d8c02015 	stw	r3,128(sp)
 4018100:	d8801f15 	stw	r2,124(sp)
 4018104:	010001c4 	movi	r4,7
 4018108:	20805c16 	blt	r4,r2,401827c <___vfprintf_internal_r+0x1bd0>
 401810c:	42000204 	addi	r8,r8,8
 4018110:	8800041e 	bne	r17,zero,4018124 <___vfprintf_internal_r+0x1a78>
 4018114:	d8803317 	ldw	r2,204(sp)
 4018118:	1000021e 	bne	r2,zero,4018124 <___vfprintf_internal_r+0x1a78>
 401811c:	9080004c 	andi	r2,r18,1
 4018120:	103be726 	beq	r2,zero,40170c0 <__alt_mem_onchip_memory2_0+0xfc011f00>
 4018124:	d9003717 	ldw	r4,220(sp)
 4018128:	d8801f17 	ldw	r2,124(sp)
 401812c:	d9403417 	ldw	r5,208(sp)
 4018130:	20c7883a 	add	r3,r4,r3
 4018134:	10800044 	addi	r2,r2,1
 4018138:	41000115 	stw	r4,4(r8)
 401813c:	41400015 	stw	r5,0(r8)
 4018140:	d8c02015 	stw	r3,128(sp)
 4018144:	d8801f15 	stw	r2,124(sp)
 4018148:	010001c4 	movi	r4,7
 401814c:	20812116 	blt	r4,r2,40185d4 <___vfprintf_internal_r+0x1f28>
 4018150:	42000204 	addi	r8,r8,8
 4018154:	0463c83a 	sub	r17,zero,r17
 4018158:	0440730e 	bge	zero,r17,4018328 <___vfprintf_internal_r+0x1c7c>
 401815c:	05800404 	movi	r22,16
 4018160:	b440860e 	bge	r22,r17,401837c <___vfprintf_internal_r+0x1cd0>
 4018164:	014100b4 	movhi	r5,1026
 4018168:	295593c4 	addi	r5,r5,22095
 401816c:	d9402c15 	stw	r5,176(sp)
 4018170:	070001c4 	movi	fp,7
 4018174:	dcc02d17 	ldw	r19,180(sp)
 4018178:	00000306 	br	4018188 <___vfprintf_internal_r+0x1adc>
 401817c:	42000204 	addi	r8,r8,8
 4018180:	8c7ffc04 	addi	r17,r17,-16
 4018184:	b440800e 	bge	r22,r17,4018388 <___vfprintf_internal_r+0x1cdc>
 4018188:	18c00404 	addi	r3,r3,16
 401818c:	10800044 	addi	r2,r2,1
 4018190:	45000015 	stw	r20,0(r8)
 4018194:	45800115 	stw	r22,4(r8)
 4018198:	d8c02015 	stw	r3,128(sp)
 401819c:	d8801f15 	stw	r2,124(sp)
 40181a0:	e0bff60e 	bge	fp,r2,401817c <__alt_mem_onchip_memory2_0+0xfc012fbc>
 40181a4:	d9801e04 	addi	r6,sp,120
 40181a8:	b80b883a 	mov	r5,r23
 40181ac:	9809883a 	mov	r4,r19
 40181b0:	401f54c0 	call	401f54c <__sprint_r>
 40181b4:	103a411e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40181b8:	d8c02017 	ldw	r3,128(sp)
 40181bc:	d8801f17 	ldw	r2,124(sp)
 40181c0:	da000404 	addi	r8,sp,16
 40181c4:	003fee06 	br	4018180 <__alt_mem_onchip_memory2_0+0xfc012fc0>
 40181c8:	00bfffc4 	movi	r2,-1
 40181cc:	003a3f06 	br	4016acc <__alt_mem_onchip_memory2_0+0xfc01190c>
 40181d0:	008011c4 	movi	r2,71
 40181d4:	1440b816 	blt	r2,r17,40184b8 <___vfprintf_internal_r+0x1e0c>
 40181d8:	040100b4 	movhi	r16,1026
 40181dc:	84157e04 	addi	r16,r16,22008
 40181e0:	00c000c4 	movi	r3,3
 40181e4:	00bfdfc4 	movi	r2,-129
 40181e8:	d8c02915 	stw	r3,164(sp)
 40181ec:	90a4703a 	and	r18,r18,r2
 40181f0:	df002783 	ldbu	fp,158(sp)
 40181f4:	d8c02b15 	stw	r3,172(sp)
 40181f8:	d8002a15 	stw	zero,168(sp)
 40181fc:	d8003215 	stw	zero,200(sp)
 4018200:	003b0706 	br	4016e20 <__alt_mem_onchip_memory2_0+0xfc011c60>
 4018204:	d8c02e17 	ldw	r3,184(sp)
 4018208:	1cc00017 	ldw	r19,0(r3)
 401820c:	18c00104 	addi	r3,r3,4
 4018210:	d8c02e15 	stw	r3,184(sp)
 4018214:	982dd7fa 	srai	r22,r19,31
 4018218:	b005883a 	mov	r2,r22
 401821c:	003a7706 	br	4016bfc <__alt_mem_onchip_memory2_0+0xfc011a3c>
 4018220:	d8c02e17 	ldw	r3,184(sp)
 4018224:	d9002f17 	ldw	r4,188(sp)
 4018228:	18800017 	ldw	r2,0(r3)
 401822c:	18c00104 	addi	r3,r3,4
 4018230:	d8c02e15 	stw	r3,184(sp)
 4018234:	11000015 	stw	r4,0(r2)
 4018238:	00395406 	br	401678c <__alt_mem_onchip_memory2_0+0xfc0115cc>
 401823c:	d9002e17 	ldw	r4,184(sp)
 4018240:	002d883a 	mov	r22,zero
 4018244:	24c00017 	ldw	r19,0(r4)
 4018248:	21000104 	addi	r4,r4,4
 401824c:	d9002e15 	stw	r4,184(sp)
 4018250:	003c0706 	br	4017270 <__alt_mem_onchip_memory2_0+0xfc0120b0>
 4018254:	d9402e17 	ldw	r5,184(sp)
 4018258:	d8c02a17 	ldw	r3,168(sp)
 401825c:	002d883a 	mov	r22,zero
 4018260:	28800104 	addi	r2,r5,4
 4018264:	2cc0000b 	ldhu	r19,0(r5)
 4018268:	183dc10e 	bge	r3,zero,4017970 <__alt_mem_onchip_memory2_0+0xfc0127b0>
 401826c:	003f7506 	br	4018044 <__alt_mem_onchip_memory2_0+0xfc012e84>
 4018270:	040100b4 	movhi	r16,1026
 4018274:	84157c04 	addi	r16,r16,22000
 4018278:	003aa706 	br	4016d18 <__alt_mem_onchip_memory2_0+0xfc011b58>
 401827c:	d9002d17 	ldw	r4,180(sp)
 4018280:	d9801e04 	addi	r6,sp,120
 4018284:	b80b883a 	mov	r5,r23
 4018288:	401f54c0 	call	401f54c <__sprint_r>
 401828c:	103a0b1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4018290:	dc402617 	ldw	r17,152(sp)
 4018294:	d8c02017 	ldw	r3,128(sp)
 4018298:	da000404 	addi	r8,sp,16
 401829c:	003f9c06 	br	4018110 <__alt_mem_onchip_memory2_0+0xfc012f50>
 40182a0:	ac400043 	ldbu	r17,1(r21)
 40182a4:	84000814 	ori	r16,r16,32
 40182a8:	ad400044 	addi	r21,r21,1
 40182ac:	8c403fcc 	andi	r17,r17,255
 40182b0:	8c40201c 	xori	r17,r17,128
 40182b4:	8c7fe004 	addi	r17,r17,-128
 40182b8:	00395e06 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 40182bc:	d8c02e15 	stw	r3,184(sp)
 40182c0:	0039883a 	mov	fp,zero
 40182c4:	003e3506 	br	4017b9c <__alt_mem_onchip_memory2_0+0xfc0129dc>
 40182c8:	d9002d17 	ldw	r4,180(sp)
 40182cc:	d9801e04 	addi	r6,sp,120
 40182d0:	b80b883a 	mov	r5,r23
 40182d4:	401f54c0 	call	401f54c <__sprint_r>
 40182d8:	1039f81e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40182dc:	d8c02017 	ldw	r3,128(sp)
 40182e0:	da000404 	addi	r8,sp,16
 40182e4:	003cd006 	br	4017628 <__alt_mem_onchip_memory2_0+0xfc012468>
 40182e8:	8009883a 	mov	r4,r16
 40182ec:	df003d15 	stw	fp,244(sp)
 40182f0:	40143080 	call	4014308 <strlen>
 40182f4:	d8802b15 	stw	r2,172(sp)
 40182f8:	da003d17 	ldw	r8,244(sp)
 40182fc:	103c200e 	bge	r2,zero,4017380 <__alt_mem_onchip_memory2_0+0xfc0121c0>
 4018300:	0005883a 	mov	r2,zero
 4018304:	003c1e06 	br	4017380 <__alt_mem_onchip_memory2_0+0xfc0121c0>
 4018308:	d9002d17 	ldw	r4,180(sp)
 401830c:	d9801e04 	addi	r6,sp,120
 4018310:	b80b883a 	mov	r5,r23
 4018314:	401f54c0 	call	401f54c <__sprint_r>
 4018318:	1039e81e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 401831c:	d8c02017 	ldw	r3,128(sp)
 4018320:	d8801f17 	ldw	r2,124(sp)
 4018324:	da000404 	addi	r8,sp,16
 4018328:	d9403317 	ldw	r5,204(sp)
 401832c:	10800044 	addi	r2,r2,1
 4018330:	44000015 	stw	r16,0(r8)
 4018334:	28c7883a 	add	r3,r5,r3
 4018338:	003b5b06 	br	40170a8 <__alt_mem_onchip_memory2_0+0xfc011ee8>
 401833c:	010100b4 	movhi	r4,1026
 4018340:	211597c4 	addi	r4,r4,22111
 4018344:	d9003515 	stw	r4,212(sp)
 4018348:	003af206 	br	4016f14 <__alt_mem_onchip_memory2_0+0xfc011d54>
 401834c:	013fffc4 	movi	r4,-1
 4018350:	003a0806 	br	4016b74 <__alt_mem_onchip_memory2_0+0xfc0119b4>
 4018354:	0023883a 	mov	r17,zero
 4018358:	003d9d06 	br	40179d0 <__alt_mem_onchip_memory2_0+0xfc012810>
 401835c:	d9002d17 	ldw	r4,180(sp)
 4018360:	d9801e04 	addi	r6,sp,120
 4018364:	b80b883a 	mov	r5,r23
 4018368:	401f54c0 	call	401f54c <__sprint_r>
 401836c:	1039d31e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4018370:	d8c02017 	ldw	r3,128(sp)
 4018374:	da000404 	addi	r8,sp,16
 4018378:	003d9406 	br	40179cc <__alt_mem_onchip_memory2_0+0xfc01280c>
 401837c:	010100b4 	movhi	r4,1026
 4018380:	211593c4 	addi	r4,r4,22095
 4018384:	d9002c15 	stw	r4,176(sp)
 4018388:	d9002c17 	ldw	r4,176(sp)
 401838c:	1c47883a 	add	r3,r3,r17
 4018390:	10800044 	addi	r2,r2,1
 4018394:	41000015 	stw	r4,0(r8)
 4018398:	44400115 	stw	r17,4(r8)
 401839c:	d8c02015 	stw	r3,128(sp)
 40183a0:	d8801f15 	stw	r2,124(sp)
 40183a4:	010001c4 	movi	r4,7
 40183a8:	20bfd716 	blt	r4,r2,4018308 <__alt_mem_onchip_memory2_0+0xfc013148>
 40183ac:	42000204 	addi	r8,r8,8
 40183b0:	003fdd06 	br	4018328 <__alt_mem_onchip_memory2_0+0xfc013168>
 40183b4:	d9002d17 	ldw	r4,180(sp)
 40183b8:	d9801e04 	addi	r6,sp,120
 40183bc:	b80b883a 	mov	r5,r23
 40183c0:	401f54c0 	call	401f54c <__sprint_r>
 40183c4:	1039bd1e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40183c8:	d8802617 	ldw	r2,152(sp)
 40183cc:	d8c02017 	ldw	r3,128(sp)
 40183d0:	da000404 	addi	r8,sp,16
 40183d4:	003e1006 	br	4017c18 <__alt_mem_onchip_memory2_0+0xfc012a58>
 40183d8:	00800044 	movi	r2,1
 40183dc:	10803fcc 	andi	r2,r2,255
 40183e0:	00c00044 	movi	r3,1
 40183e4:	10fa0d26 	beq	r2,r3,4016c1c <__alt_mem_onchip_memory2_0+0xfc011a5c>
 40183e8:	00c00084 	movi	r3,2
 40183ec:	10fbaf26 	beq	r2,r3,40172ac <__alt_mem_onchip_memory2_0+0xfc0120ec>
 40183f0:	003a6d06 	br	4016da8 <__alt_mem_onchip_memory2_0+0xfc011be8>
 40183f4:	010100b4 	movhi	r4,1026
 40183f8:	211597c4 	addi	r4,r4,22111
 40183fc:	d9003515 	stw	r4,212(sp)
 4018400:	003b5406 	br	4017154 <__alt_mem_onchip_memory2_0+0xfc011f94>
 4018404:	d8802a17 	ldw	r2,168(sp)
 4018408:	00c00184 	movi	r3,6
 401840c:	1880012e 	bgeu	r3,r2,4018414 <___vfprintf_internal_r+0x1d68>
 4018410:	1805883a 	mov	r2,r3
 4018414:	d8802b15 	stw	r2,172(sp)
 4018418:	1000ef16 	blt	r2,zero,40187d8 <___vfprintf_internal_r+0x212c>
 401841c:	040100b4 	movhi	r16,1026
 4018420:	d8802915 	stw	r2,164(sp)
 4018424:	dcc02e15 	stw	r19,184(sp)
 4018428:	d8002a15 	stw	zero,168(sp)
 401842c:	d8003215 	stw	zero,200(sp)
 4018430:	84158a04 	addi	r16,r16,22056
 4018434:	0039883a 	mov	fp,zero
 4018438:	003a8006 	br	4016e3c <__alt_mem_onchip_memory2_0+0xfc011c7c>
 401843c:	0021883a 	mov	r16,zero
 4018440:	003e0706 	br	4017c60 <__alt_mem_onchip_memory2_0+0xfc012aa0>
 4018444:	d9002d17 	ldw	r4,180(sp)
 4018448:	d9801e04 	addi	r6,sp,120
 401844c:	b80b883a 	mov	r5,r23
 4018450:	401f54c0 	call	401f54c <__sprint_r>
 4018454:	1039991e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4018458:	d8802617 	ldw	r2,152(sp)
 401845c:	d9403317 	ldw	r5,204(sp)
 4018460:	d8c02017 	ldw	r3,128(sp)
 4018464:	da000404 	addi	r8,sp,16
 4018468:	2885c83a 	sub	r2,r5,r2
 401846c:	003dfb06 	br	4017c5c <__alt_mem_onchip_memory2_0+0xfc012a9c>
 4018470:	9080004c 	andi	r2,r18,1
 4018474:	103e8f1e 	bne	r2,zero,4017eb4 <__alt_mem_onchip_memory2_0+0xfc012cf4>
 4018478:	d8802117 	ldw	r2,132(sp)
 401847c:	003e9e06 	br	4017ef8 <__alt_mem_onchip_memory2_0+0xfc012d38>
 4018480:	1025883a 	mov	r18,r2
 4018484:	0039883a 	mov	fp,zero
 4018488:	00800084 	movi	r2,2
 401848c:	003fd306 	br	40183dc <__alt_mem_onchip_memory2_0+0xfc01321c>
 4018490:	07000b44 	movi	fp,45
 4018494:	df002785 	stb	fp,158(sp)
 4018498:	003a1b06 	br	4016d08 <__alt_mem_onchip_memory2_0+0xfc011b48>
 401849c:	00c00b44 	movi	r3,45
 40184a0:	d8c02785 	stb	r3,158(sp)
 40184a4:	d8802915 	stw	r2,164(sp)
 40184a8:	dc802c17 	ldw	r18,176(sp)
 40184ac:	d8002a15 	stw	zero,168(sp)
 40184b0:	07000b44 	movi	fp,45
 40184b4:	003a5e06 	br	4016e30 <__alt_mem_onchip_memory2_0+0xfc011c70>
 40184b8:	040100b4 	movhi	r16,1026
 40184bc:	84157f04 	addi	r16,r16,22012
 40184c0:	003f4706 	br	40181e0 <__alt_mem_onchip_memory2_0+0xfc013020>
 40184c4:	d9002e17 	ldw	r4,184(sp)
 40184c8:	d9402f17 	ldw	r5,188(sp)
 40184cc:	20800017 	ldw	r2,0(r4)
 40184d0:	21000104 	addi	r4,r4,4
 40184d4:	d9002e15 	stw	r4,184(sp)
 40184d8:	11400015 	stw	r5,0(r2)
 40184dc:	0038ab06 	br	401678c <__alt_mem_onchip_memory2_0+0xfc0115cc>
 40184e0:	dd802617 	ldw	r22,152(sp)
 40184e4:	00bfff44 	movi	r2,-3
 40184e8:	b0801c16 	blt	r22,r2,401855c <___vfprintf_internal_r+0x1eb0>
 40184ec:	d9402a17 	ldw	r5,168(sp)
 40184f0:	2d801a16 	blt	r5,r22,401855c <___vfprintf_internal_r+0x1eb0>
 40184f4:	dd803215 	stw	r22,200(sp)
 40184f8:	003e8906 	br	4017f20 <__alt_mem_onchip_memory2_0+0xfc012d60>
 40184fc:	010100b4 	movhi	r4,1026
 4018500:	211593c4 	addi	r4,r4,22095
 4018504:	d9002c15 	stw	r4,176(sp)
 4018508:	003c9106 	br	4017750 <__alt_mem_onchip_memory2_0+0xfc012590>
 401850c:	e005883a 	mov	r2,fp
 4018510:	003e7906 	br	4017ef8 <__alt_mem_onchip_memory2_0+0xfc012d38>
 4018514:	d9002a17 	ldw	r4,168(sp)
 4018518:	df002783 	ldbu	fp,158(sp)
 401851c:	dcc02e15 	stw	r19,184(sp)
 4018520:	d9002915 	stw	r4,164(sp)
 4018524:	d9002b15 	stw	r4,172(sp)
 4018528:	d8002a15 	stw	zero,168(sp)
 401852c:	d8003215 	stw	zero,200(sp)
 4018530:	003a3b06 	br	4016e20 <__alt_mem_onchip_memory2_0+0xfc011c60>
 4018534:	9080004c 	andi	r2,r18,1
 4018538:	0039883a 	mov	fp,zero
 401853c:	10000426 	beq	r2,zero,4018550 <___vfprintf_internal_r+0x1ea4>
 4018540:	00800c04 	movi	r2,48
 4018544:	dc001dc4 	addi	r16,sp,119
 4018548:	d8801dc5 	stb	r2,119(sp)
 401854c:	003b6406 	br	40172e0 <__alt_mem_onchip_memory2_0+0xfc012120>
 4018550:	d8002b15 	stw	zero,172(sp)
 4018554:	dc001e04 	addi	r16,sp,120
 4018558:	003a2b06 	br	4016e08 <__alt_mem_onchip_memory2_0+0xfc011c48>
 401855c:	8c7fff84 	addi	r17,r17,-2
 4018560:	b5bfffc4 	addi	r22,r22,-1
 4018564:	dd802615 	stw	r22,152(sp)
 4018568:	dc4022c5 	stb	r17,139(sp)
 401856c:	b000bf16 	blt	r22,zero,401886c <___vfprintf_internal_r+0x21c0>
 4018570:	00800ac4 	movi	r2,43
 4018574:	d8802305 	stb	r2,140(sp)
 4018578:	00800244 	movi	r2,9
 401857c:	15807016 	blt	r2,r22,4018740 <___vfprintf_internal_r+0x2094>
 4018580:	00800c04 	movi	r2,48
 4018584:	b5800c04 	addi	r22,r22,48
 4018588:	d8802345 	stb	r2,141(sp)
 401858c:	dd802385 	stb	r22,142(sp)
 4018590:	d88023c4 	addi	r2,sp,143
 4018594:	df0022c4 	addi	fp,sp,139
 4018598:	d8c03317 	ldw	r3,204(sp)
 401859c:	1739c83a 	sub	fp,r2,fp
 40185a0:	d9003317 	ldw	r4,204(sp)
 40185a4:	e0c7883a 	add	r3,fp,r3
 40185a8:	df003a15 	stw	fp,232(sp)
 40185ac:	d8c02b15 	stw	r3,172(sp)
 40185b0:	00800044 	movi	r2,1
 40185b4:	1100b30e 	bge	r2,r4,4018884 <___vfprintf_internal_r+0x21d8>
 40185b8:	d8c02b17 	ldw	r3,172(sp)
 40185bc:	18c00044 	addi	r3,r3,1
 40185c0:	d8c02b15 	stw	r3,172(sp)
 40185c4:	1805883a 	mov	r2,r3
 40185c8:	1800ac16 	blt	r3,zero,401887c <___vfprintf_internal_r+0x21d0>
 40185cc:	d8003215 	stw	zero,200(sp)
 40185d0:	003e5d06 	br	4017f48 <__alt_mem_onchip_memory2_0+0xfc012d88>
 40185d4:	d9002d17 	ldw	r4,180(sp)
 40185d8:	d9801e04 	addi	r6,sp,120
 40185dc:	b80b883a 	mov	r5,r23
 40185e0:	401f54c0 	call	401f54c <__sprint_r>
 40185e4:	1039351e 	bne	r2,zero,4016abc <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40185e8:	dc402617 	ldw	r17,152(sp)
 40185ec:	d8c02017 	ldw	r3,128(sp)
 40185f0:	d8801f17 	ldw	r2,124(sp)
 40185f4:	da000404 	addi	r8,sp,16
 40185f8:	003ed606 	br	4018154 <__alt_mem_onchip_memory2_0+0xfc012f94>
 40185fc:	182b883a 	mov	r21,r3
 4018600:	d8002a15 	stw	zero,168(sp)
 4018604:	00388c06 	br	4016838 <__alt_mem_onchip_memory2_0+0xfc011678>
 4018608:	d8802a17 	ldw	r2,168(sp)
 401860c:	103e071e 	bne	r2,zero,4017e2c <__alt_mem_onchip_memory2_0+0xfc012c6c>
 4018610:	dc002a15 	stw	r16,168(sp)
 4018614:	003e0506 	br	4017e2c <__alt_mem_onchip_memory2_0+0xfc012c6c>
 4018618:	d9002a17 	ldw	r4,168(sp)
 401861c:	20c00044 	addi	r3,r4,1
 4018620:	003e0f06 	br	4017e60 <__alt_mem_onchip_memory2_0+0xfc012ca0>
 4018624:	01400184 	movi	r5,6
 4018628:	d9402a15 	stw	r5,168(sp)
 401862c:	003dff06 	br	4017e2c <__alt_mem_onchip_memory2_0+0xfc012c6c>
 4018630:	d8802104 	addi	r2,sp,132
 4018634:	d8800315 	stw	r2,12(sp)
 4018638:	d8802504 	addi	r2,sp,148
 401863c:	d8800215 	stw	r2,8(sp)
 4018640:	d8802604 	addi	r2,sp,152
 4018644:	d8800115 	stw	r2,4(sp)
 4018648:	d8802a17 	ldw	r2,168(sp)
 401864c:	d9403617 	ldw	r5,216(sp)
 4018650:	d9002d17 	ldw	r4,180(sp)
 4018654:	d8800015 	stw	r2,0(sp)
 4018658:	01c000c4 	movi	r7,3
 401865c:	980d883a 	mov	r6,r19
 4018660:	da003d15 	stw	r8,244(sp)
 4018664:	4018ddc0 	call	4018ddc <_dtoa_r>
 4018668:	d8c02a17 	ldw	r3,168(sp)
 401866c:	da003d17 	ldw	r8,244(sp)
 4018670:	1021883a 	mov	r16,r2
 4018674:	10f9883a 	add	fp,r2,r3
 4018678:	81000007 	ldb	r4,0(r16)
 401867c:	00800c04 	movi	r2,48
 4018680:	20805e26 	beq	r4,r2,40187fc <___vfprintf_internal_r+0x2150>
 4018684:	d8c02617 	ldw	r3,152(sp)
 4018688:	e0f9883a 	add	fp,fp,r3
 401868c:	003e0a06 	br	4017eb8 <__alt_mem_onchip_memory2_0+0xfc012cf8>
 4018690:	00c00b44 	movi	r3,45
 4018694:	24e0003c 	xorhi	r19,r4,32768
 4018698:	d8c02905 	stb	r3,164(sp)
 401869c:	003de906 	br	4017e44 <__alt_mem_onchip_memory2_0+0xfc012c84>
 40186a0:	d8c03217 	ldw	r3,200(sp)
 40186a4:	00c07a0e 	bge	zero,r3,4018890 <___vfprintf_internal_r+0x21e4>
 40186a8:	00800044 	movi	r2,1
 40186ac:	d9003317 	ldw	r4,204(sp)
 40186b0:	1105883a 	add	r2,r2,r4
 40186b4:	d8802b15 	stw	r2,172(sp)
 40186b8:	10004e16 	blt	r2,zero,40187f4 <___vfprintf_internal_r+0x2148>
 40186bc:	044019c4 	movi	r17,103
 40186c0:	003e2106 	br	4017f48 <__alt_mem_onchip_memory2_0+0xfc012d88>
 40186c4:	d9002a17 	ldw	r4,168(sp)
 40186c8:	d8802104 	addi	r2,sp,132
 40186cc:	d8800315 	stw	r2,12(sp)
 40186d0:	d9000015 	stw	r4,0(sp)
 40186d4:	d8802504 	addi	r2,sp,148
 40186d8:	d9403617 	ldw	r5,216(sp)
 40186dc:	d9002d17 	ldw	r4,180(sp)
 40186e0:	d8800215 	stw	r2,8(sp)
 40186e4:	d8802604 	addi	r2,sp,152
 40186e8:	d8800115 	stw	r2,4(sp)
 40186ec:	01c000c4 	movi	r7,3
 40186f0:	980d883a 	mov	r6,r19
 40186f4:	da003d15 	stw	r8,244(sp)
 40186f8:	4018ddc0 	call	4018ddc <_dtoa_r>
 40186fc:	d8c02a17 	ldw	r3,168(sp)
 4018700:	da003d17 	ldw	r8,244(sp)
 4018704:	1021883a 	mov	r16,r2
 4018708:	00801184 	movi	r2,70
 401870c:	80f9883a 	add	fp,r16,r3
 4018710:	88bfd926 	beq	r17,r2,4018678 <__alt_mem_onchip_memory2_0+0xfc0134b8>
 4018714:	003de806 	br	4017eb8 <__alt_mem_onchip_memory2_0+0xfc012cf8>
 4018718:	d9002a17 	ldw	r4,168(sp)
 401871c:	00c04d0e 	bge	zero,r3,4018854 <___vfprintf_internal_r+0x21a8>
 4018720:	2000441e 	bne	r4,zero,4018834 <___vfprintf_internal_r+0x2188>
 4018724:	9480004c 	andi	r18,r18,1
 4018728:	9000421e 	bne	r18,zero,4018834 <___vfprintf_internal_r+0x2188>
 401872c:	1805883a 	mov	r2,r3
 4018730:	18006f16 	blt	r3,zero,40188f0 <___vfprintf_internal_r+0x2244>
 4018734:	d8c03217 	ldw	r3,200(sp)
 4018738:	d8c02b15 	stw	r3,172(sp)
 401873c:	003e0206 	br	4017f48 <__alt_mem_onchip_memory2_0+0xfc012d88>
 4018740:	df0022c4 	addi	fp,sp,139
 4018744:	dc002a15 	stw	r16,168(sp)
 4018748:	4027883a 	mov	r19,r8
 401874c:	e021883a 	mov	r16,fp
 4018750:	b009883a 	mov	r4,r22
 4018754:	01400284 	movi	r5,10
 4018758:	40117040 	call	4011704 <__modsi3>
 401875c:	10800c04 	addi	r2,r2,48
 4018760:	843fffc4 	addi	r16,r16,-1
 4018764:	b009883a 	mov	r4,r22
 4018768:	01400284 	movi	r5,10
 401876c:	80800005 	stb	r2,0(r16)
 4018770:	40116800 	call	4011680 <__divsi3>
 4018774:	102d883a 	mov	r22,r2
 4018778:	00800244 	movi	r2,9
 401877c:	15bff416 	blt	r2,r22,4018750 <__alt_mem_onchip_memory2_0+0xfc013590>
 4018780:	9811883a 	mov	r8,r19
 4018784:	b0800c04 	addi	r2,r22,48
 4018788:	8027883a 	mov	r19,r16
 401878c:	997fffc4 	addi	r5,r19,-1
 4018790:	98bfffc5 	stb	r2,-1(r19)
 4018794:	dc002a17 	ldw	r16,168(sp)
 4018798:	2f006d2e 	bgeu	r5,fp,4018950 <___vfprintf_internal_r+0x22a4>
 401879c:	d9c02384 	addi	r7,sp,142
 40187a0:	3ccfc83a 	sub	r7,r7,r19
 40187a4:	d9002344 	addi	r4,sp,141
 40187a8:	e1cf883a 	add	r7,fp,r7
 40187ac:	00000106 	br	40187b4 <___vfprintf_internal_r+0x2108>
 40187b0:	28800003 	ldbu	r2,0(r5)
 40187b4:	20800005 	stb	r2,0(r4)
 40187b8:	21000044 	addi	r4,r4,1
 40187bc:	29400044 	addi	r5,r5,1
 40187c0:	393ffb1e 	bne	r7,r4,40187b0 <__alt_mem_onchip_memory2_0+0xfc0135f0>
 40187c4:	d8802304 	addi	r2,sp,140
 40187c8:	14c5c83a 	sub	r2,r2,r19
 40187cc:	d8c02344 	addi	r3,sp,141
 40187d0:	1885883a 	add	r2,r3,r2
 40187d4:	003f7006 	br	4018598 <__alt_mem_onchip_memory2_0+0xfc0133d8>
 40187d8:	0005883a 	mov	r2,zero
 40187dc:	003f0f06 	br	401841c <__alt_mem_onchip_memory2_0+0xfc01325c>
 40187e0:	d8c03217 	ldw	r3,200(sp)
 40187e4:	18c00044 	addi	r3,r3,1
 40187e8:	d8c02b15 	stw	r3,172(sp)
 40187ec:	1805883a 	mov	r2,r3
 40187f0:	183fb20e 	bge	r3,zero,40186bc <__alt_mem_onchip_memory2_0+0xfc0134fc>
 40187f4:	0005883a 	mov	r2,zero
 40187f8:	003fb006 	br	40186bc <__alt_mem_onchip_memory2_0+0xfc0134fc>
 40187fc:	d9003617 	ldw	r4,216(sp)
 4018800:	000d883a 	mov	r6,zero
 4018804:	000f883a 	mov	r7,zero
 4018808:	980b883a 	mov	r5,r19
 401880c:	d8c03c15 	stw	r3,240(sp)
 4018810:	da003d15 	stw	r8,244(sp)
 4018814:	4012ad80 	call	4012ad8 <__eqdf2>
 4018818:	d8c03c17 	ldw	r3,240(sp)
 401881c:	da003d17 	ldw	r8,244(sp)
 4018820:	103f9826 	beq	r2,zero,4018684 <__alt_mem_onchip_memory2_0+0xfc0134c4>
 4018824:	00800044 	movi	r2,1
 4018828:	10c7c83a 	sub	r3,r2,r3
 401882c:	d8c02615 	stw	r3,152(sp)
 4018830:	003f9506 	br	4018688 <__alt_mem_onchip_memory2_0+0xfc0134c8>
 4018834:	d9002a17 	ldw	r4,168(sp)
 4018838:	d8c03217 	ldw	r3,200(sp)
 401883c:	20800044 	addi	r2,r4,1
 4018840:	1885883a 	add	r2,r3,r2
 4018844:	d8802b15 	stw	r2,172(sp)
 4018848:	103dbf0e 	bge	r2,zero,4017f48 <__alt_mem_onchip_memory2_0+0xfc012d88>
 401884c:	0005883a 	mov	r2,zero
 4018850:	003dbd06 	br	4017f48 <__alt_mem_onchip_memory2_0+0xfc012d88>
 4018854:	2000201e 	bne	r4,zero,40188d8 <___vfprintf_internal_r+0x222c>
 4018858:	9480004c 	andi	r18,r18,1
 401885c:	90001e1e 	bne	r18,zero,40188d8 <___vfprintf_internal_r+0x222c>
 4018860:	00800044 	movi	r2,1
 4018864:	d8802b15 	stw	r2,172(sp)
 4018868:	003db706 	br	4017f48 <__alt_mem_onchip_memory2_0+0xfc012d88>
 401886c:	00800b44 	movi	r2,45
 4018870:	05adc83a 	sub	r22,zero,r22
 4018874:	d8802305 	stb	r2,140(sp)
 4018878:	003f3f06 	br	4018578 <__alt_mem_onchip_memory2_0+0xfc0133b8>
 401887c:	0005883a 	mov	r2,zero
 4018880:	003f5206 	br	40185cc <__alt_mem_onchip_memory2_0+0xfc01340c>
 4018884:	90a4703a 	and	r18,r18,r2
 4018888:	903f4e26 	beq	r18,zero,40185c4 <__alt_mem_onchip_memory2_0+0xfc013404>
 401888c:	003f4a06 	br	40185b8 <__alt_mem_onchip_memory2_0+0xfc0133f8>
 4018890:	00800084 	movi	r2,2
 4018894:	10c5c83a 	sub	r2,r2,r3
 4018898:	003f8406 	br	40186ac <__alt_mem_onchip_memory2_0+0xfc0134ec>
 401889c:	d9402e17 	ldw	r5,184(sp)
 40188a0:	d9002e17 	ldw	r4,184(sp)
 40188a4:	ac400043 	ldbu	r17,1(r21)
 40188a8:	29400017 	ldw	r5,0(r5)
 40188ac:	20800104 	addi	r2,r4,4
 40188b0:	d8802e15 	stw	r2,184(sp)
 40188b4:	d9402a15 	stw	r5,168(sp)
 40188b8:	182b883a 	mov	r21,r3
 40188bc:	283e7b0e 	bge	r5,zero,40182ac <__alt_mem_onchip_memory2_0+0xfc0130ec>
 40188c0:	8c403fcc 	andi	r17,r17,255
 40188c4:	017fffc4 	movi	r5,-1
 40188c8:	8c40201c 	xori	r17,r17,128
 40188cc:	d9402a15 	stw	r5,168(sp)
 40188d0:	8c7fe004 	addi	r17,r17,-128
 40188d4:	0037d706 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 40188d8:	d8c02a17 	ldw	r3,168(sp)
 40188dc:	18c00084 	addi	r3,r3,2
 40188e0:	d8c02b15 	stw	r3,172(sp)
 40188e4:	1805883a 	mov	r2,r3
 40188e8:	183d970e 	bge	r3,zero,4017f48 <__alt_mem_onchip_memory2_0+0xfc012d88>
 40188ec:	003fd706 	br	401884c <__alt_mem_onchip_memory2_0+0xfc01368c>
 40188f0:	0005883a 	mov	r2,zero
 40188f4:	003f8f06 	br	4018734 <__alt_mem_onchip_memory2_0+0xfc013574>
 40188f8:	9080004c 	andi	r2,r18,1
 40188fc:	103f821e 	bne	r2,zero,4018708 <__alt_mem_onchip_memory2_0+0xfc013548>
 4018900:	d8802117 	ldw	r2,132(sp)
 4018904:	1405c83a 	sub	r2,r2,r16
 4018908:	d8803315 	stw	r2,204(sp)
 401890c:	b47ef426 	beq	r22,r17,40184e0 <__alt_mem_onchip_memory2_0+0xfc013320>
 4018910:	dd802617 	ldw	r22,152(sp)
 4018914:	003f1206 	br	4018560 <__alt_mem_onchip_memory2_0+0xfc0133a0>
 4018918:	d8c02b03 	ldbu	r3,172(sp)
 401891c:	d8c02785 	stb	r3,158(sp)
 4018920:	0038df06 	br	4016ca0 <__alt_mem_onchip_memory2_0+0xfc011ae0>
 4018924:	d8c02b03 	ldbu	r3,172(sp)
 4018928:	d8c02785 	stb	r3,158(sp)
 401892c:	0038aa06 	br	4016bd8 <__alt_mem_onchip_memory2_0+0xfc011a18>
 4018930:	d8c02b03 	ldbu	r3,172(sp)
 4018934:	d8c02785 	stb	r3,158(sp)
 4018938:	003a4306 	br	4017248 <__alt_mem_onchip_memory2_0+0xfc012088>
 401893c:	d8c02b03 	ldbu	r3,172(sp)
 4018940:	d8c02785 	stb	r3,158(sp)
 4018944:	003af506 	br	401751c <__alt_mem_onchip_memory2_0+0xfc01235c>
 4018948:	0005883a 	mov	r2,zero
 401894c:	003d7b06 	br	4017f3c <__alt_mem_onchip_memory2_0+0xfc012d7c>
 4018950:	d8802344 	addi	r2,sp,141
 4018954:	003f1006 	br	4018598 <__alt_mem_onchip_memory2_0+0xfc0133d8>
 4018958:	d8c02b03 	ldbu	r3,172(sp)
 401895c:	d8c02785 	stb	r3,158(sp)
 4018960:	0038fd06 	br	4016d58 <__alt_mem_onchip_memory2_0+0xfc011b98>
 4018964:	d8c02b03 	ldbu	r3,172(sp)
 4018968:	d8c02785 	stb	r3,158(sp)
 401896c:	003a9706 	br	40173cc <__alt_mem_onchip_memory2_0+0xfc01220c>
 4018970:	d8c02b03 	ldbu	r3,172(sp)
 4018974:	d8c02785 	stb	r3,158(sp)
 4018978:	003a1806 	br	40171dc <__alt_mem_onchip_memory2_0+0xfc01201c>
 401897c:	d8c02b03 	ldbu	r3,172(sp)
 4018980:	d8c02785 	stb	r3,158(sp)
 4018984:	003abe06 	br	4017480 <__alt_mem_onchip_memory2_0+0xfc0122c0>

04018988 <__vfprintf_internal>:
 4018988:	008100b4 	movhi	r2,1026
 401898c:	109ddd04 	addi	r2,r2,30580
 4018990:	300f883a 	mov	r7,r6
 4018994:	280d883a 	mov	r6,r5
 4018998:	200b883a 	mov	r5,r4
 401899c:	11000017 	ldw	r4,0(r2)
 40189a0:	40166ac1 	jmpi	40166ac <___vfprintf_internal_r>

040189a4 <__sbprintf>:
 40189a4:	2880030b 	ldhu	r2,12(r5)
 40189a8:	2ac01917 	ldw	r11,100(r5)
 40189ac:	2a80038b 	ldhu	r10,14(r5)
 40189b0:	2a400717 	ldw	r9,28(r5)
 40189b4:	2a000917 	ldw	r8,36(r5)
 40189b8:	defee204 	addi	sp,sp,-1144
 40189bc:	00c10004 	movi	r3,1024
 40189c0:	dc011a15 	stw	r16,1128(sp)
 40189c4:	10bfff4c 	andi	r2,r2,65533
 40189c8:	2821883a 	mov	r16,r5
 40189cc:	d8cb883a 	add	r5,sp,r3
 40189d0:	dc811c15 	stw	r18,1136(sp)
 40189d4:	dc411b15 	stw	r17,1132(sp)
 40189d8:	dfc11d15 	stw	ra,1140(sp)
 40189dc:	2025883a 	mov	r18,r4
 40189e0:	d881030d 	sth	r2,1036(sp)
 40189e4:	dac11915 	stw	r11,1124(sp)
 40189e8:	da81038d 	sth	r10,1038(sp)
 40189ec:	da410715 	stw	r9,1052(sp)
 40189f0:	da010915 	stw	r8,1060(sp)
 40189f4:	dec10015 	stw	sp,1024(sp)
 40189f8:	dec10415 	stw	sp,1040(sp)
 40189fc:	d8c10215 	stw	r3,1032(sp)
 4018a00:	d8c10515 	stw	r3,1044(sp)
 4018a04:	d8010615 	stw	zero,1048(sp)
 4018a08:	40166ac0 	call	40166ac <___vfprintf_internal_r>
 4018a0c:	1023883a 	mov	r17,r2
 4018a10:	10000416 	blt	r2,zero,4018a24 <__sbprintf+0x80>
 4018a14:	d9410004 	addi	r5,sp,1024
 4018a18:	9009883a 	mov	r4,r18
 4018a1c:	401a6800 	call	401a680 <_fflush_r>
 4018a20:	10000d1e 	bne	r2,zero,4018a58 <__sbprintf+0xb4>
 4018a24:	d881030b 	ldhu	r2,1036(sp)
 4018a28:	1080100c 	andi	r2,r2,64
 4018a2c:	10000326 	beq	r2,zero,4018a3c <__sbprintf+0x98>
 4018a30:	8080030b 	ldhu	r2,12(r16)
 4018a34:	10801014 	ori	r2,r2,64
 4018a38:	8080030d 	sth	r2,12(r16)
 4018a3c:	8805883a 	mov	r2,r17
 4018a40:	dfc11d17 	ldw	ra,1140(sp)
 4018a44:	dc811c17 	ldw	r18,1136(sp)
 4018a48:	dc411b17 	ldw	r17,1132(sp)
 4018a4c:	dc011a17 	ldw	r16,1128(sp)
 4018a50:	dec11e04 	addi	sp,sp,1144
 4018a54:	f800283a 	ret
 4018a58:	047fffc4 	movi	r17,-1
 4018a5c:	003ff106 	br	4018a24 <__alt_mem_onchip_memory2_0+0xfc013864>

04018a60 <__swsetup_r>:
 4018a60:	008100b4 	movhi	r2,1026
 4018a64:	defffd04 	addi	sp,sp,-12
 4018a68:	109ddd04 	addi	r2,r2,30580
 4018a6c:	dc400115 	stw	r17,4(sp)
 4018a70:	2023883a 	mov	r17,r4
 4018a74:	11000017 	ldw	r4,0(r2)
 4018a78:	dc000015 	stw	r16,0(sp)
 4018a7c:	dfc00215 	stw	ra,8(sp)
 4018a80:	2821883a 	mov	r16,r5
 4018a84:	20000226 	beq	r4,zero,4018a90 <__swsetup_r+0x30>
 4018a88:	20800e17 	ldw	r2,56(r4)
 4018a8c:	10003126 	beq	r2,zero,4018b54 <__swsetup_r+0xf4>
 4018a90:	8080030b 	ldhu	r2,12(r16)
 4018a94:	10c0020c 	andi	r3,r2,8
 4018a98:	1009883a 	mov	r4,r2
 4018a9c:	18000f26 	beq	r3,zero,4018adc <__swsetup_r+0x7c>
 4018aa0:	80c00417 	ldw	r3,16(r16)
 4018aa4:	18001526 	beq	r3,zero,4018afc <__swsetup_r+0x9c>
 4018aa8:	1100004c 	andi	r4,r2,1
 4018aac:	20001c1e 	bne	r4,zero,4018b20 <__swsetup_r+0xc0>
 4018ab0:	1080008c 	andi	r2,r2,2
 4018ab4:	1000291e 	bne	r2,zero,4018b5c <__swsetup_r+0xfc>
 4018ab8:	80800517 	ldw	r2,20(r16)
 4018abc:	80800215 	stw	r2,8(r16)
 4018ac0:	18001c26 	beq	r3,zero,4018b34 <__swsetup_r+0xd4>
 4018ac4:	0005883a 	mov	r2,zero
 4018ac8:	dfc00217 	ldw	ra,8(sp)
 4018acc:	dc400117 	ldw	r17,4(sp)
 4018ad0:	dc000017 	ldw	r16,0(sp)
 4018ad4:	dec00304 	addi	sp,sp,12
 4018ad8:	f800283a 	ret
 4018adc:	2080040c 	andi	r2,r4,16
 4018ae0:	10002e26 	beq	r2,zero,4018b9c <__swsetup_r+0x13c>
 4018ae4:	2080010c 	andi	r2,r4,4
 4018ae8:	10001e1e 	bne	r2,zero,4018b64 <__swsetup_r+0x104>
 4018aec:	80c00417 	ldw	r3,16(r16)
 4018af0:	20800214 	ori	r2,r4,8
 4018af4:	8080030d 	sth	r2,12(r16)
 4018af8:	183feb1e 	bne	r3,zero,4018aa8 <__alt_mem_onchip_memory2_0+0xfc0138e8>
 4018afc:	1100a00c 	andi	r4,r2,640
 4018b00:	01408004 	movi	r5,512
 4018b04:	217fe826 	beq	r4,r5,4018aa8 <__alt_mem_onchip_memory2_0+0xfc0138e8>
 4018b08:	800b883a 	mov	r5,r16
 4018b0c:	8809883a 	mov	r4,r17
 4018b10:	401b6780 	call	401b678 <__smakebuf_r>
 4018b14:	8080030b 	ldhu	r2,12(r16)
 4018b18:	80c00417 	ldw	r3,16(r16)
 4018b1c:	003fe206 	br	4018aa8 <__alt_mem_onchip_memory2_0+0xfc0138e8>
 4018b20:	80800517 	ldw	r2,20(r16)
 4018b24:	80000215 	stw	zero,8(r16)
 4018b28:	0085c83a 	sub	r2,zero,r2
 4018b2c:	80800615 	stw	r2,24(r16)
 4018b30:	183fe41e 	bne	r3,zero,4018ac4 <__alt_mem_onchip_memory2_0+0xfc013904>
 4018b34:	80c0030b 	ldhu	r3,12(r16)
 4018b38:	0005883a 	mov	r2,zero
 4018b3c:	1900200c 	andi	r4,r3,128
 4018b40:	203fe126 	beq	r4,zero,4018ac8 <__alt_mem_onchip_memory2_0+0xfc013908>
 4018b44:	18c01014 	ori	r3,r3,64
 4018b48:	80c0030d 	sth	r3,12(r16)
 4018b4c:	00bfffc4 	movi	r2,-1
 4018b50:	003fdd06 	br	4018ac8 <__alt_mem_onchip_memory2_0+0xfc013908>
 4018b54:	401aa6c0 	call	401aa6c <__sinit>
 4018b58:	003fcd06 	br	4018a90 <__alt_mem_onchip_memory2_0+0xfc0138d0>
 4018b5c:	0005883a 	mov	r2,zero
 4018b60:	003fd606 	br	4018abc <__alt_mem_onchip_memory2_0+0xfc0138fc>
 4018b64:	81400c17 	ldw	r5,48(r16)
 4018b68:	28000626 	beq	r5,zero,4018b84 <__swsetup_r+0x124>
 4018b6c:	80801004 	addi	r2,r16,64
 4018b70:	28800326 	beq	r5,r2,4018b80 <__swsetup_r+0x120>
 4018b74:	8809883a 	mov	r4,r17
 4018b78:	401abe00 	call	401abe0 <_free_r>
 4018b7c:	8100030b 	ldhu	r4,12(r16)
 4018b80:	80000c15 	stw	zero,48(r16)
 4018b84:	80c00417 	ldw	r3,16(r16)
 4018b88:	00bff6c4 	movi	r2,-37
 4018b8c:	1108703a 	and	r4,r2,r4
 4018b90:	80000115 	stw	zero,4(r16)
 4018b94:	80c00015 	stw	r3,0(r16)
 4018b98:	003fd506 	br	4018af0 <__alt_mem_onchip_memory2_0+0xfc013930>
 4018b9c:	00800244 	movi	r2,9
 4018ba0:	88800015 	stw	r2,0(r17)
 4018ba4:	20801014 	ori	r2,r4,64
 4018ba8:	8080030d 	sth	r2,12(r16)
 4018bac:	00bfffc4 	movi	r2,-1
 4018bb0:	003fc506 	br	4018ac8 <__alt_mem_onchip_memory2_0+0xfc013908>

04018bb4 <quorem>:
 4018bb4:	defff204 	addi	sp,sp,-56
 4018bb8:	ddc00b15 	stw	r23,44(sp)
 4018bbc:	20800417 	ldw	r2,16(r4)
 4018bc0:	2dc00417 	ldw	r23,16(r5)
 4018bc4:	dfc00d15 	stw	ra,52(sp)
 4018bc8:	df000c15 	stw	fp,48(sp)
 4018bcc:	dd800a15 	stw	r22,40(sp)
 4018bd0:	dd400915 	stw	r21,36(sp)
 4018bd4:	dd000815 	stw	r20,32(sp)
 4018bd8:	dcc00715 	stw	r19,28(sp)
 4018bdc:	dc800615 	stw	r18,24(sp)
 4018be0:	dc400515 	stw	r17,20(sp)
 4018be4:	dc000415 	stw	r16,16(sp)
 4018be8:	15c07a16 	blt	r2,r23,4018dd4 <quorem+0x220>
 4018bec:	bdffffc4 	addi	r23,r23,-1
 4018bf0:	bde9883a 	add	r20,r23,r23
 4018bf4:	28c00504 	addi	r3,r5,20
 4018bf8:	a529883a 	add	r20,r20,r20
 4018bfc:	1d39883a 	add	fp,r3,r20
 4018c00:	24c00504 	addi	r19,r4,20
 4018c04:	d9400215 	stw	r5,8(sp)
 4018c08:	9d29883a 	add	r20,r19,r20
 4018c0c:	e1400017 	ldw	r5,0(fp)
 4018c10:	d9000015 	stw	r4,0(sp)
 4018c14:	a1000017 	ldw	r4,0(r20)
 4018c18:	29400044 	addi	r5,r5,1
 4018c1c:	d8c00115 	stw	r3,4(sp)
 4018c20:	dd000315 	stw	r20,12(sp)
 4018c24:	40117780 	call	4011778 <__udivsi3>
 4018c28:	1025883a 	mov	r18,r2
 4018c2c:	10003026 	beq	r2,zero,4018cf0 <quorem+0x13c>
 4018c30:	dc400117 	ldw	r17,4(sp)
 4018c34:	9829883a 	mov	r20,r19
 4018c38:	002d883a 	mov	r22,zero
 4018c3c:	0021883a 	mov	r16,zero
 4018c40:	8d400017 	ldw	r21,0(r17)
 4018c44:	900b883a 	mov	r5,r18
 4018c48:	8c400104 	addi	r17,r17,4
 4018c4c:	a93fffcc 	andi	r4,r21,65535
 4018c50:	40118340 	call	4011834 <__mulsi3>
 4018c54:	a808d43a 	srli	r4,r21,16
 4018c58:	900b883a 	mov	r5,r18
 4018c5c:	15ad883a 	add	r22,r2,r22
 4018c60:	40118340 	call	4011834 <__mulsi3>
 4018c64:	a1000017 	ldw	r4,0(r20)
 4018c68:	b00cd43a 	srli	r6,r22,16
 4018c6c:	b0ffffcc 	andi	r3,r22,65535
 4018c70:	217fffcc 	andi	r5,r4,65535
 4018c74:	2c21883a 	add	r16,r5,r16
 4018c78:	80c7c83a 	sub	r3,r16,r3
 4018c7c:	2008d43a 	srli	r4,r4,16
 4018c80:	1185883a 	add	r2,r2,r6
 4018c84:	1821d43a 	srai	r16,r3,16
 4018c88:	117fffcc 	andi	r5,r2,65535
 4018c8c:	2149c83a 	sub	r4,r4,r5
 4018c90:	2421883a 	add	r16,r4,r16
 4018c94:	8008943a 	slli	r4,r16,16
 4018c98:	18ffffcc 	andi	r3,r3,65535
 4018c9c:	102cd43a 	srli	r22,r2,16
 4018ca0:	20c8b03a 	or	r4,r4,r3
 4018ca4:	a1000015 	stw	r4,0(r20)
 4018ca8:	8021d43a 	srai	r16,r16,16
 4018cac:	a5000104 	addi	r20,r20,4
 4018cb0:	e47fe32e 	bgeu	fp,r17,4018c40 <__alt_mem_onchip_memory2_0+0xfc013a80>
 4018cb4:	d8c00317 	ldw	r3,12(sp)
 4018cb8:	18800017 	ldw	r2,0(r3)
 4018cbc:	10000c1e 	bne	r2,zero,4018cf0 <quorem+0x13c>
 4018cc0:	18bfff04 	addi	r2,r3,-4
 4018cc4:	9880082e 	bgeu	r19,r2,4018ce8 <quorem+0x134>
 4018cc8:	18ffff17 	ldw	r3,-4(r3)
 4018ccc:	18000326 	beq	r3,zero,4018cdc <quorem+0x128>
 4018cd0:	00000506 	br	4018ce8 <quorem+0x134>
 4018cd4:	10c00017 	ldw	r3,0(r2)
 4018cd8:	1800031e 	bne	r3,zero,4018ce8 <quorem+0x134>
 4018cdc:	10bfff04 	addi	r2,r2,-4
 4018ce0:	bdffffc4 	addi	r23,r23,-1
 4018ce4:	98bffb36 	bltu	r19,r2,4018cd4 <__alt_mem_onchip_memory2_0+0xfc013b14>
 4018ce8:	d8c00017 	ldw	r3,0(sp)
 4018cec:	1dc00415 	stw	r23,16(r3)
 4018cf0:	d9400217 	ldw	r5,8(sp)
 4018cf4:	d9000017 	ldw	r4,0(sp)
 4018cf8:	401ce740 	call	401ce74 <__mcmp>
 4018cfc:	10002816 	blt	r2,zero,4018da0 <quorem+0x1ec>
 4018d00:	dc400117 	ldw	r17,4(sp)
 4018d04:	94800044 	addi	r18,r18,1
 4018d08:	980d883a 	mov	r6,r19
 4018d0c:	0007883a 	mov	r3,zero
 4018d10:	31000017 	ldw	r4,0(r6)
 4018d14:	89400017 	ldw	r5,0(r17)
 4018d18:	31800104 	addi	r6,r6,4
 4018d1c:	20bfffcc 	andi	r2,r4,65535
 4018d20:	10c7883a 	add	r3,r2,r3
 4018d24:	28bfffcc 	andi	r2,r5,65535
 4018d28:	1885c83a 	sub	r2,r3,r2
 4018d2c:	280ad43a 	srli	r5,r5,16
 4018d30:	2008d43a 	srli	r4,r4,16
 4018d34:	1007d43a 	srai	r3,r2,16
 4018d38:	10bfffcc 	andi	r2,r2,65535
 4018d3c:	2149c83a 	sub	r4,r4,r5
 4018d40:	20c9883a 	add	r4,r4,r3
 4018d44:	200a943a 	slli	r5,r4,16
 4018d48:	8c400104 	addi	r17,r17,4
 4018d4c:	2007d43a 	srai	r3,r4,16
 4018d50:	2884b03a 	or	r2,r5,r2
 4018d54:	30bfff15 	stw	r2,-4(r6)
 4018d58:	e47fed2e 	bgeu	fp,r17,4018d10 <__alt_mem_onchip_memory2_0+0xfc013b50>
 4018d5c:	bdc5883a 	add	r2,r23,r23
 4018d60:	1085883a 	add	r2,r2,r2
 4018d64:	9887883a 	add	r3,r19,r2
 4018d68:	18800017 	ldw	r2,0(r3)
 4018d6c:	10000c1e 	bne	r2,zero,4018da0 <quorem+0x1ec>
 4018d70:	18bfff04 	addi	r2,r3,-4
 4018d74:	9880082e 	bgeu	r19,r2,4018d98 <quorem+0x1e4>
 4018d78:	18ffff17 	ldw	r3,-4(r3)
 4018d7c:	18000326 	beq	r3,zero,4018d8c <quorem+0x1d8>
 4018d80:	00000506 	br	4018d98 <quorem+0x1e4>
 4018d84:	10c00017 	ldw	r3,0(r2)
 4018d88:	1800031e 	bne	r3,zero,4018d98 <quorem+0x1e4>
 4018d8c:	10bfff04 	addi	r2,r2,-4
 4018d90:	bdffffc4 	addi	r23,r23,-1
 4018d94:	98bffb36 	bltu	r19,r2,4018d84 <__alt_mem_onchip_memory2_0+0xfc013bc4>
 4018d98:	d8c00017 	ldw	r3,0(sp)
 4018d9c:	1dc00415 	stw	r23,16(r3)
 4018da0:	9005883a 	mov	r2,r18
 4018da4:	dfc00d17 	ldw	ra,52(sp)
 4018da8:	df000c17 	ldw	fp,48(sp)
 4018dac:	ddc00b17 	ldw	r23,44(sp)
 4018db0:	dd800a17 	ldw	r22,40(sp)
 4018db4:	dd400917 	ldw	r21,36(sp)
 4018db8:	dd000817 	ldw	r20,32(sp)
 4018dbc:	dcc00717 	ldw	r19,28(sp)
 4018dc0:	dc800617 	ldw	r18,24(sp)
 4018dc4:	dc400517 	ldw	r17,20(sp)
 4018dc8:	dc000417 	ldw	r16,16(sp)
 4018dcc:	dec00e04 	addi	sp,sp,56
 4018dd0:	f800283a 	ret
 4018dd4:	0005883a 	mov	r2,zero
 4018dd8:	003ff206 	br	4018da4 <__alt_mem_onchip_memory2_0+0xfc013be4>

04018ddc <_dtoa_r>:
 4018ddc:	20801017 	ldw	r2,64(r4)
 4018de0:	deffde04 	addi	sp,sp,-136
 4018de4:	df002015 	stw	fp,128(sp)
 4018de8:	dcc01b15 	stw	r19,108(sp)
 4018dec:	dc801a15 	stw	r18,104(sp)
 4018df0:	dc401915 	stw	r17,100(sp)
 4018df4:	dc001815 	stw	r16,96(sp)
 4018df8:	dfc02115 	stw	ra,132(sp)
 4018dfc:	ddc01f15 	stw	r23,124(sp)
 4018e00:	dd801e15 	stw	r22,120(sp)
 4018e04:	dd401d15 	stw	r21,116(sp)
 4018e08:	dd001c15 	stw	r20,112(sp)
 4018e0c:	d9c00315 	stw	r7,12(sp)
 4018e10:	2039883a 	mov	fp,r4
 4018e14:	3023883a 	mov	r17,r6
 4018e18:	2825883a 	mov	r18,r5
 4018e1c:	dc002417 	ldw	r16,144(sp)
 4018e20:	3027883a 	mov	r19,r6
 4018e24:	10000826 	beq	r2,zero,4018e48 <_dtoa_r+0x6c>
 4018e28:	21801117 	ldw	r6,68(r4)
 4018e2c:	00c00044 	movi	r3,1
 4018e30:	100b883a 	mov	r5,r2
 4018e34:	1986983a 	sll	r3,r3,r6
 4018e38:	11800115 	stw	r6,4(r2)
 4018e3c:	10c00215 	stw	r3,8(r2)
 4018e40:	401c5980 	call	401c598 <_Bfree>
 4018e44:	e0001015 	stw	zero,64(fp)
 4018e48:	88002e16 	blt	r17,zero,4018f04 <_dtoa_r+0x128>
 4018e4c:	80000015 	stw	zero,0(r16)
 4018e50:	889ffc2c 	andhi	r2,r17,32752
 4018e54:	00dffc34 	movhi	r3,32752
 4018e58:	10c01c26 	beq	r2,r3,4018ecc <_dtoa_r+0xf0>
 4018e5c:	000d883a 	mov	r6,zero
 4018e60:	000f883a 	mov	r7,zero
 4018e64:	9009883a 	mov	r4,r18
 4018e68:	980b883a 	mov	r5,r19
 4018e6c:	4012ad80 	call	4012ad8 <__eqdf2>
 4018e70:	10002b1e 	bne	r2,zero,4018f20 <_dtoa_r+0x144>
 4018e74:	d9c02317 	ldw	r7,140(sp)
 4018e78:	00800044 	movi	r2,1
 4018e7c:	38800015 	stw	r2,0(r7)
 4018e80:	d8802517 	ldw	r2,148(sp)
 4018e84:	10019e26 	beq	r2,zero,4019500 <_dtoa_r+0x724>
 4018e88:	d8c02517 	ldw	r3,148(sp)
 4018e8c:	008100b4 	movhi	r2,1026
 4018e90:	10953944 	addi	r2,r2,21733
 4018e94:	18800015 	stw	r2,0(r3)
 4018e98:	10bfffc4 	addi	r2,r2,-1
 4018e9c:	dfc02117 	ldw	ra,132(sp)
 4018ea0:	df002017 	ldw	fp,128(sp)
 4018ea4:	ddc01f17 	ldw	r23,124(sp)
 4018ea8:	dd801e17 	ldw	r22,120(sp)
 4018eac:	dd401d17 	ldw	r21,116(sp)
 4018eb0:	dd001c17 	ldw	r20,112(sp)
 4018eb4:	dcc01b17 	ldw	r19,108(sp)
 4018eb8:	dc801a17 	ldw	r18,104(sp)
 4018ebc:	dc401917 	ldw	r17,100(sp)
 4018ec0:	dc001817 	ldw	r16,96(sp)
 4018ec4:	dec02204 	addi	sp,sp,136
 4018ec8:	f800283a 	ret
 4018ecc:	d8c02317 	ldw	r3,140(sp)
 4018ed0:	0089c3c4 	movi	r2,9999
 4018ed4:	18800015 	stw	r2,0(r3)
 4018ed8:	90017726 	beq	r18,zero,40194b8 <_dtoa_r+0x6dc>
 4018edc:	008100b4 	movhi	r2,1026
 4018ee0:	10959f04 	addi	r2,r2,22140
 4018ee4:	d9002517 	ldw	r4,148(sp)
 4018ee8:	203fec26 	beq	r4,zero,4018e9c <__alt_mem_onchip_memory2_0+0xfc013cdc>
 4018eec:	10c000c7 	ldb	r3,3(r2)
 4018ef0:	1801781e 	bne	r3,zero,40194d4 <_dtoa_r+0x6f8>
 4018ef4:	10c000c4 	addi	r3,r2,3
 4018ef8:	d9802517 	ldw	r6,148(sp)
 4018efc:	30c00015 	stw	r3,0(r6)
 4018f00:	003fe606 	br	4018e9c <__alt_mem_onchip_memory2_0+0xfc013cdc>
 4018f04:	04e00034 	movhi	r19,32768
 4018f08:	9cffffc4 	addi	r19,r19,-1
 4018f0c:	00800044 	movi	r2,1
 4018f10:	8ce6703a 	and	r19,r17,r19
 4018f14:	80800015 	stw	r2,0(r16)
 4018f18:	9823883a 	mov	r17,r19
 4018f1c:	003fcc06 	br	4018e50 <__alt_mem_onchip_memory2_0+0xfc013c90>
 4018f20:	d8800204 	addi	r2,sp,8
 4018f24:	d8800015 	stw	r2,0(sp)
 4018f28:	d9c00104 	addi	r7,sp,4
 4018f2c:	900b883a 	mov	r5,r18
 4018f30:	980d883a 	mov	r6,r19
 4018f34:	e009883a 	mov	r4,fp
 4018f38:	8820d53a 	srli	r16,r17,20
 4018f3c:	401d2400 	call	401d240 <__d2b>
 4018f40:	d8800915 	stw	r2,36(sp)
 4018f44:	8001651e 	bne	r16,zero,40194dc <_dtoa_r+0x700>
 4018f48:	dd800217 	ldw	r22,8(sp)
 4018f4c:	dc000117 	ldw	r16,4(sp)
 4018f50:	00800804 	movi	r2,32
 4018f54:	b421883a 	add	r16,r22,r16
 4018f58:	80c10c84 	addi	r3,r16,1074
 4018f5c:	10c2d10e 	bge	r2,r3,4019aa4 <_dtoa_r+0xcc8>
 4018f60:	00801004 	movi	r2,64
 4018f64:	81010484 	addi	r4,r16,1042
 4018f68:	10c7c83a 	sub	r3,r2,r3
 4018f6c:	9108d83a 	srl	r4,r18,r4
 4018f70:	88e2983a 	sll	r17,r17,r3
 4018f74:	2448b03a 	or	r4,r4,r17
 4018f78:	40221600 	call	4022160 <__floatunsidf>
 4018f7c:	017f8434 	movhi	r5,65040
 4018f80:	01800044 	movi	r6,1
 4018f84:	1009883a 	mov	r4,r2
 4018f88:	194b883a 	add	r5,r3,r5
 4018f8c:	843fffc4 	addi	r16,r16,-1
 4018f90:	d9801115 	stw	r6,68(sp)
 4018f94:	000d883a 	mov	r6,zero
 4018f98:	01cffe34 	movhi	r7,16376
 4018f9c:	401359c0 	call	401359c <__subdf3>
 4018fa0:	0198dbf4 	movhi	r6,25455
 4018fa4:	01cff4f4 	movhi	r7,16339
 4018fa8:	3190d844 	addi	r6,r6,17249
 4018fac:	39e1e9c4 	addi	r7,r7,-30809
 4018fb0:	1009883a 	mov	r4,r2
 4018fb4:	180b883a 	mov	r5,r3
 4018fb8:	4012d300 	call	4012d30 <__muldf3>
 4018fbc:	01a2d874 	movhi	r6,35681
 4018fc0:	01cff1f4 	movhi	r7,16327
 4018fc4:	31b22cc4 	addi	r6,r6,-14157
 4018fc8:	39e28a04 	addi	r7,r7,-30168
 4018fcc:	180b883a 	mov	r5,r3
 4018fd0:	1009883a 	mov	r4,r2
 4018fd4:	401185c0 	call	401185c <__adddf3>
 4018fd8:	8009883a 	mov	r4,r16
 4018fdc:	1029883a 	mov	r20,r2
 4018fe0:	1823883a 	mov	r17,r3
 4018fe4:	4013f180 	call	4013f18 <__floatsidf>
 4018fe8:	019427f4 	movhi	r6,20639
 4018fec:	01cff4f4 	movhi	r7,16339
 4018ff0:	319e7ec4 	addi	r6,r6,31227
 4018ff4:	39d104c4 	addi	r7,r7,17427
 4018ff8:	1009883a 	mov	r4,r2
 4018ffc:	180b883a 	mov	r5,r3
 4019000:	4012d300 	call	4012d30 <__muldf3>
 4019004:	100d883a 	mov	r6,r2
 4019008:	180f883a 	mov	r7,r3
 401900c:	a009883a 	mov	r4,r20
 4019010:	880b883a 	mov	r5,r17
 4019014:	401185c0 	call	401185c <__adddf3>
 4019018:	1009883a 	mov	r4,r2
 401901c:	180b883a 	mov	r5,r3
 4019020:	1029883a 	mov	r20,r2
 4019024:	1823883a 	mov	r17,r3
 4019028:	4013e980 	call	4013e98 <__fixdfsi>
 401902c:	000d883a 	mov	r6,zero
 4019030:	000f883a 	mov	r7,zero
 4019034:	a009883a 	mov	r4,r20
 4019038:	880b883a 	mov	r5,r17
 401903c:	d8800515 	stw	r2,20(sp)
 4019040:	4012c3c0 	call	4012c3c <__ledf2>
 4019044:	10028716 	blt	r2,zero,4019a64 <_dtoa_r+0xc88>
 4019048:	d8c00517 	ldw	r3,20(sp)
 401904c:	00800584 	movi	r2,22
 4019050:	10c27536 	bltu	r2,r3,4019a28 <_dtoa_r+0xc4c>
 4019054:	180490fa 	slli	r2,r3,3
 4019058:	00c100b4 	movhi	r3,1026
 401905c:	18d5ba04 	addi	r3,r3,22248
 4019060:	1885883a 	add	r2,r3,r2
 4019064:	11000017 	ldw	r4,0(r2)
 4019068:	11400117 	ldw	r5,4(r2)
 401906c:	900d883a 	mov	r6,r18
 4019070:	980f883a 	mov	r7,r19
 4019074:	4012b600 	call	4012b60 <__gedf2>
 4019078:	00828d0e 	bge	zero,r2,4019ab0 <_dtoa_r+0xcd4>
 401907c:	d9000517 	ldw	r4,20(sp)
 4019080:	d8000e15 	stw	zero,56(sp)
 4019084:	213fffc4 	addi	r4,r4,-1
 4019088:	d9000515 	stw	r4,20(sp)
 401908c:	b42dc83a 	sub	r22,r22,r16
 4019090:	b5bfffc4 	addi	r22,r22,-1
 4019094:	b0026f16 	blt	r22,zero,4019a54 <_dtoa_r+0xc78>
 4019098:	d8000815 	stw	zero,32(sp)
 401909c:	d9c00517 	ldw	r7,20(sp)
 40190a0:	38026416 	blt	r7,zero,4019a34 <_dtoa_r+0xc58>
 40190a4:	b1ed883a 	add	r22,r22,r7
 40190a8:	d9c00d15 	stw	r7,52(sp)
 40190ac:	d8000a15 	stw	zero,40(sp)
 40190b0:	d9800317 	ldw	r6,12(sp)
 40190b4:	00800244 	movi	r2,9
 40190b8:	11811436 	bltu	r2,r6,401950c <_dtoa_r+0x730>
 40190bc:	00800144 	movi	r2,5
 40190c0:	1184e10e 	bge	r2,r6,401a448 <_dtoa_r+0x166c>
 40190c4:	31bfff04 	addi	r6,r6,-4
 40190c8:	d9800315 	stw	r6,12(sp)
 40190cc:	0023883a 	mov	r17,zero
 40190d0:	d9800317 	ldw	r6,12(sp)
 40190d4:	008000c4 	movi	r2,3
 40190d8:	30836726 	beq	r6,r2,4019e78 <_dtoa_r+0x109c>
 40190dc:	1183410e 	bge	r2,r6,4019de4 <_dtoa_r+0x1008>
 40190e0:	d9c00317 	ldw	r7,12(sp)
 40190e4:	00800104 	movi	r2,4
 40190e8:	38827c26 	beq	r7,r2,4019adc <_dtoa_r+0xd00>
 40190ec:	00800144 	movi	r2,5
 40190f0:	3884c41e 	bne	r7,r2,401a404 <_dtoa_r+0x1628>
 40190f4:	00800044 	movi	r2,1
 40190f8:	d8800b15 	stw	r2,44(sp)
 40190fc:	d8c00517 	ldw	r3,20(sp)
 4019100:	d9002217 	ldw	r4,136(sp)
 4019104:	1907883a 	add	r3,r3,r4
 4019108:	19800044 	addi	r6,r3,1
 401910c:	d8c00c15 	stw	r3,48(sp)
 4019110:	d9800615 	stw	r6,24(sp)
 4019114:	0183a40e 	bge	zero,r6,4019fa8 <_dtoa_r+0x11cc>
 4019118:	d9800617 	ldw	r6,24(sp)
 401911c:	3021883a 	mov	r16,r6
 4019120:	e0001115 	stw	zero,68(fp)
 4019124:	008005c4 	movi	r2,23
 4019128:	1184c92e 	bgeu	r2,r6,401a450 <_dtoa_r+0x1674>
 401912c:	00c00044 	movi	r3,1
 4019130:	00800104 	movi	r2,4
 4019134:	1085883a 	add	r2,r2,r2
 4019138:	11000504 	addi	r4,r2,20
 401913c:	180b883a 	mov	r5,r3
 4019140:	18c00044 	addi	r3,r3,1
 4019144:	313ffb2e 	bgeu	r6,r4,4019134 <__alt_mem_onchip_memory2_0+0xfc013f74>
 4019148:	e1401115 	stw	r5,68(fp)
 401914c:	e009883a 	mov	r4,fp
 4019150:	401c4f00 	call	401c4f0 <_Balloc>
 4019154:	d8800715 	stw	r2,28(sp)
 4019158:	e0801015 	stw	r2,64(fp)
 401915c:	00800384 	movi	r2,14
 4019160:	1400f736 	bltu	r2,r16,4019540 <_dtoa_r+0x764>
 4019164:	8800f626 	beq	r17,zero,4019540 <_dtoa_r+0x764>
 4019168:	d9c00517 	ldw	r7,20(sp)
 401916c:	01c39a0e 	bge	zero,r7,4019fd8 <_dtoa_r+0x11fc>
 4019170:	388003cc 	andi	r2,r7,15
 4019174:	100490fa 	slli	r2,r2,3
 4019178:	382bd13a 	srai	r21,r7,4
 401917c:	00c100b4 	movhi	r3,1026
 4019180:	18d5ba04 	addi	r3,r3,22248
 4019184:	1885883a 	add	r2,r3,r2
 4019188:	a8c0040c 	andi	r3,r21,16
 401918c:	12400017 	ldw	r9,0(r2)
 4019190:	12000117 	ldw	r8,4(r2)
 4019194:	18037926 	beq	r3,zero,4019f7c <_dtoa_r+0x11a0>
 4019198:	008100b4 	movhi	r2,1026
 401919c:	1095b004 	addi	r2,r2,22208
 40191a0:	11800817 	ldw	r6,32(r2)
 40191a4:	11c00917 	ldw	r7,36(r2)
 40191a8:	9009883a 	mov	r4,r18
 40191ac:	980b883a 	mov	r5,r19
 40191b0:	da001715 	stw	r8,92(sp)
 40191b4:	da401615 	stw	r9,88(sp)
 40191b8:	40121080 	call	4012108 <__divdf3>
 40191bc:	da001717 	ldw	r8,92(sp)
 40191c0:	da401617 	ldw	r9,88(sp)
 40191c4:	ad4003cc 	andi	r21,r21,15
 40191c8:	040000c4 	movi	r16,3
 40191cc:	1023883a 	mov	r17,r2
 40191d0:	1829883a 	mov	r20,r3
 40191d4:	a8001126 	beq	r21,zero,401921c <_dtoa_r+0x440>
 40191d8:	05c100b4 	movhi	r23,1026
 40191dc:	bdd5b004 	addi	r23,r23,22208
 40191e0:	4805883a 	mov	r2,r9
 40191e4:	4007883a 	mov	r3,r8
 40191e8:	a980004c 	andi	r6,r21,1
 40191ec:	1009883a 	mov	r4,r2
 40191f0:	a82bd07a 	srai	r21,r21,1
 40191f4:	180b883a 	mov	r5,r3
 40191f8:	30000426 	beq	r6,zero,401920c <_dtoa_r+0x430>
 40191fc:	b9800017 	ldw	r6,0(r23)
 4019200:	b9c00117 	ldw	r7,4(r23)
 4019204:	84000044 	addi	r16,r16,1
 4019208:	4012d300 	call	4012d30 <__muldf3>
 401920c:	bdc00204 	addi	r23,r23,8
 4019210:	a83ff51e 	bne	r21,zero,40191e8 <__alt_mem_onchip_memory2_0+0xfc014028>
 4019214:	1013883a 	mov	r9,r2
 4019218:	1811883a 	mov	r8,r3
 401921c:	480d883a 	mov	r6,r9
 4019220:	400f883a 	mov	r7,r8
 4019224:	8809883a 	mov	r4,r17
 4019228:	a00b883a 	mov	r5,r20
 401922c:	40121080 	call	4012108 <__divdf3>
 4019230:	d8800f15 	stw	r2,60(sp)
 4019234:	d8c01015 	stw	r3,64(sp)
 4019238:	d8c00e17 	ldw	r3,56(sp)
 401923c:	18000626 	beq	r3,zero,4019258 <_dtoa_r+0x47c>
 4019240:	d9000f17 	ldw	r4,60(sp)
 4019244:	d9401017 	ldw	r5,64(sp)
 4019248:	000d883a 	mov	r6,zero
 401924c:	01cffc34 	movhi	r7,16368
 4019250:	4012c3c0 	call	4012c3c <__ledf2>
 4019254:	10040b16 	blt	r2,zero,401a284 <_dtoa_r+0x14a8>
 4019258:	8009883a 	mov	r4,r16
 401925c:	4013f180 	call	4013f18 <__floatsidf>
 4019260:	d9800f17 	ldw	r6,60(sp)
 4019264:	d9c01017 	ldw	r7,64(sp)
 4019268:	1009883a 	mov	r4,r2
 401926c:	180b883a 	mov	r5,r3
 4019270:	4012d300 	call	4012d30 <__muldf3>
 4019274:	000d883a 	mov	r6,zero
 4019278:	01d00734 	movhi	r7,16412
 401927c:	1009883a 	mov	r4,r2
 4019280:	180b883a 	mov	r5,r3
 4019284:	401185c0 	call	401185c <__adddf3>
 4019288:	1021883a 	mov	r16,r2
 401928c:	d8800617 	ldw	r2,24(sp)
 4019290:	047f3034 	movhi	r17,64704
 4019294:	1c63883a 	add	r17,r3,r17
 4019298:	10031826 	beq	r2,zero,4019efc <_dtoa_r+0x1120>
 401929c:	d8c00517 	ldw	r3,20(sp)
 40192a0:	db000617 	ldw	r12,24(sp)
 40192a4:	d8c01315 	stw	r3,76(sp)
 40192a8:	d9000b17 	ldw	r4,44(sp)
 40192ac:	20038f26 	beq	r4,zero,401a0ec <_dtoa_r+0x1310>
 40192b0:	60bfffc4 	addi	r2,r12,-1
 40192b4:	100490fa 	slli	r2,r2,3
 40192b8:	00c100b4 	movhi	r3,1026
 40192bc:	18d5ba04 	addi	r3,r3,22248
 40192c0:	1885883a 	add	r2,r3,r2
 40192c4:	11800017 	ldw	r6,0(r2)
 40192c8:	11c00117 	ldw	r7,4(r2)
 40192cc:	d8800717 	ldw	r2,28(sp)
 40192d0:	0009883a 	mov	r4,zero
 40192d4:	014ff834 	movhi	r5,16352
 40192d8:	db001615 	stw	r12,88(sp)
 40192dc:	15c00044 	addi	r23,r2,1
 40192e0:	40121080 	call	4012108 <__divdf3>
 40192e4:	800d883a 	mov	r6,r16
 40192e8:	880f883a 	mov	r7,r17
 40192ec:	1009883a 	mov	r4,r2
 40192f0:	180b883a 	mov	r5,r3
 40192f4:	401359c0 	call	401359c <__subdf3>
 40192f8:	d9401017 	ldw	r5,64(sp)
 40192fc:	d9000f17 	ldw	r4,60(sp)
 4019300:	102b883a 	mov	r21,r2
 4019304:	d8c01215 	stw	r3,72(sp)
 4019308:	4013e980 	call	4013e98 <__fixdfsi>
 401930c:	1009883a 	mov	r4,r2
 4019310:	1029883a 	mov	r20,r2
 4019314:	4013f180 	call	4013f18 <__floatsidf>
 4019318:	d9000f17 	ldw	r4,60(sp)
 401931c:	d9401017 	ldw	r5,64(sp)
 4019320:	100d883a 	mov	r6,r2
 4019324:	180f883a 	mov	r7,r3
 4019328:	401359c0 	call	401359c <__subdf3>
 401932c:	1823883a 	mov	r17,r3
 4019330:	d8c00717 	ldw	r3,28(sp)
 4019334:	d9401217 	ldw	r5,72(sp)
 4019338:	a2000c04 	addi	r8,r20,48
 401933c:	1021883a 	mov	r16,r2
 4019340:	1a000005 	stb	r8,0(r3)
 4019344:	800d883a 	mov	r6,r16
 4019348:	880f883a 	mov	r7,r17
 401934c:	a809883a 	mov	r4,r21
 4019350:	4029883a 	mov	r20,r8
 4019354:	4012b600 	call	4012b60 <__gedf2>
 4019358:	00841d16 	blt	zero,r2,401a3d0 <_dtoa_r+0x15f4>
 401935c:	800d883a 	mov	r6,r16
 4019360:	880f883a 	mov	r7,r17
 4019364:	0009883a 	mov	r4,zero
 4019368:	014ffc34 	movhi	r5,16368
 401936c:	401359c0 	call	401359c <__subdf3>
 4019370:	d9401217 	ldw	r5,72(sp)
 4019374:	100d883a 	mov	r6,r2
 4019378:	180f883a 	mov	r7,r3
 401937c:	a809883a 	mov	r4,r21
 4019380:	4012b600 	call	4012b60 <__gedf2>
 4019384:	db001617 	ldw	r12,88(sp)
 4019388:	00840e16 	blt	zero,r2,401a3c4 <_dtoa_r+0x15e8>
 401938c:	00800044 	movi	r2,1
 4019390:	13006b0e 	bge	r2,r12,4019540 <_dtoa_r+0x764>
 4019394:	d9000717 	ldw	r4,28(sp)
 4019398:	dd800f15 	stw	r22,60(sp)
 401939c:	dcc01015 	stw	r19,64(sp)
 40193a0:	2319883a 	add	r12,r4,r12
 40193a4:	dcc01217 	ldw	r19,72(sp)
 40193a8:	602d883a 	mov	r22,r12
 40193ac:	dc801215 	stw	r18,72(sp)
 40193b0:	b825883a 	mov	r18,r23
 40193b4:	00000906 	br	40193dc <_dtoa_r+0x600>
 40193b8:	401359c0 	call	401359c <__subdf3>
 40193bc:	a80d883a 	mov	r6,r21
 40193c0:	980f883a 	mov	r7,r19
 40193c4:	1009883a 	mov	r4,r2
 40193c8:	180b883a 	mov	r5,r3
 40193cc:	4012c3c0 	call	4012c3c <__ledf2>
 40193d0:	1003e816 	blt	r2,zero,401a374 <_dtoa_r+0x1598>
 40193d4:	b825883a 	mov	r18,r23
 40193d8:	bd83e926 	beq	r23,r22,401a380 <_dtoa_r+0x15a4>
 40193dc:	a809883a 	mov	r4,r21
 40193e0:	980b883a 	mov	r5,r19
 40193e4:	000d883a 	mov	r6,zero
 40193e8:	01d00934 	movhi	r7,16420
 40193ec:	4012d300 	call	4012d30 <__muldf3>
 40193f0:	000d883a 	mov	r6,zero
 40193f4:	01d00934 	movhi	r7,16420
 40193f8:	8009883a 	mov	r4,r16
 40193fc:	880b883a 	mov	r5,r17
 4019400:	102b883a 	mov	r21,r2
 4019404:	1827883a 	mov	r19,r3
 4019408:	4012d300 	call	4012d30 <__muldf3>
 401940c:	180b883a 	mov	r5,r3
 4019410:	1009883a 	mov	r4,r2
 4019414:	1821883a 	mov	r16,r3
 4019418:	1023883a 	mov	r17,r2
 401941c:	4013e980 	call	4013e98 <__fixdfsi>
 4019420:	1009883a 	mov	r4,r2
 4019424:	1029883a 	mov	r20,r2
 4019428:	4013f180 	call	4013f18 <__floatsidf>
 401942c:	8809883a 	mov	r4,r17
 4019430:	800b883a 	mov	r5,r16
 4019434:	100d883a 	mov	r6,r2
 4019438:	180f883a 	mov	r7,r3
 401943c:	401359c0 	call	401359c <__subdf3>
 4019440:	a5000c04 	addi	r20,r20,48
 4019444:	a80d883a 	mov	r6,r21
 4019448:	980f883a 	mov	r7,r19
 401944c:	1009883a 	mov	r4,r2
 4019450:	180b883a 	mov	r5,r3
 4019454:	95000005 	stb	r20,0(r18)
 4019458:	1021883a 	mov	r16,r2
 401945c:	1823883a 	mov	r17,r3
 4019460:	4012c3c0 	call	4012c3c <__ledf2>
 4019464:	bdc00044 	addi	r23,r23,1
 4019468:	800d883a 	mov	r6,r16
 401946c:	880f883a 	mov	r7,r17
 4019470:	0009883a 	mov	r4,zero
 4019474:	014ffc34 	movhi	r5,16368
 4019478:	103fcf0e 	bge	r2,zero,40193b8 <__alt_mem_onchip_memory2_0+0xfc0141f8>
 401947c:	d8c01317 	ldw	r3,76(sp)
 4019480:	d8c00515 	stw	r3,20(sp)
 4019484:	d9400917 	ldw	r5,36(sp)
 4019488:	e009883a 	mov	r4,fp
 401948c:	401c5980 	call	401c598 <_Bfree>
 4019490:	d9000517 	ldw	r4,20(sp)
 4019494:	d9802317 	ldw	r6,140(sp)
 4019498:	d9c02517 	ldw	r7,148(sp)
 401949c:	b8000005 	stb	zero,0(r23)
 40194a0:	20800044 	addi	r2,r4,1
 40194a4:	30800015 	stw	r2,0(r6)
 40194a8:	3802aa26 	beq	r7,zero,4019f54 <_dtoa_r+0x1178>
 40194ac:	3dc00015 	stw	r23,0(r7)
 40194b0:	d8800717 	ldw	r2,28(sp)
 40194b4:	003e7906 	br	4018e9c <__alt_mem_onchip_memory2_0+0xfc013cdc>
 40194b8:	00800434 	movhi	r2,16
 40194bc:	10bfffc4 	addi	r2,r2,-1
 40194c0:	88a2703a 	and	r17,r17,r2
 40194c4:	883e851e 	bne	r17,zero,4018edc <__alt_mem_onchip_memory2_0+0xfc013d1c>
 40194c8:	008100b4 	movhi	r2,1026
 40194cc:	10959c04 	addi	r2,r2,22128
 40194d0:	003e8406 	br	4018ee4 <__alt_mem_onchip_memory2_0+0xfc013d24>
 40194d4:	10c00204 	addi	r3,r2,8
 40194d8:	003e8706 	br	4018ef8 <__alt_mem_onchip_memory2_0+0xfc013d38>
 40194dc:	01400434 	movhi	r5,16
 40194e0:	297fffc4 	addi	r5,r5,-1
 40194e4:	994a703a 	and	r5,r19,r5
 40194e8:	9009883a 	mov	r4,r18
 40194ec:	843f0044 	addi	r16,r16,-1023
 40194f0:	294ffc34 	orhi	r5,r5,16368
 40194f4:	dd800217 	ldw	r22,8(sp)
 40194f8:	d8001115 	stw	zero,68(sp)
 40194fc:	003ea506 	br	4018f94 <__alt_mem_onchip_memory2_0+0xfc013dd4>
 4019500:	008100b4 	movhi	r2,1026
 4019504:	10953904 	addi	r2,r2,21732
 4019508:	003e6406 	br	4018e9c <__alt_mem_onchip_memory2_0+0xfc013cdc>
 401950c:	e0001115 	stw	zero,68(fp)
 4019510:	000b883a 	mov	r5,zero
 4019514:	e009883a 	mov	r4,fp
 4019518:	401c4f00 	call	401c4f0 <_Balloc>
 401951c:	01bfffc4 	movi	r6,-1
 4019520:	01c00044 	movi	r7,1
 4019524:	d8800715 	stw	r2,28(sp)
 4019528:	d9800c15 	stw	r6,48(sp)
 401952c:	e0801015 	stw	r2,64(fp)
 4019530:	d8000315 	stw	zero,12(sp)
 4019534:	d9c00b15 	stw	r7,44(sp)
 4019538:	d9800615 	stw	r6,24(sp)
 401953c:	d8002215 	stw	zero,136(sp)
 4019540:	d8800117 	ldw	r2,4(sp)
 4019544:	10008916 	blt	r2,zero,401976c <_dtoa_r+0x990>
 4019548:	d9000517 	ldw	r4,20(sp)
 401954c:	00c00384 	movi	r3,14
 4019550:	19008616 	blt	r3,r4,401976c <_dtoa_r+0x990>
 4019554:	200490fa 	slli	r2,r4,3
 4019558:	00c100b4 	movhi	r3,1026
 401955c:	d9802217 	ldw	r6,136(sp)
 4019560:	18d5ba04 	addi	r3,r3,22248
 4019564:	1885883a 	add	r2,r3,r2
 4019568:	14000017 	ldw	r16,0(r2)
 401956c:	14400117 	ldw	r17,4(r2)
 4019570:	30016316 	blt	r6,zero,4019b00 <_dtoa_r+0xd24>
 4019574:	800d883a 	mov	r6,r16
 4019578:	880f883a 	mov	r7,r17
 401957c:	9009883a 	mov	r4,r18
 4019580:	980b883a 	mov	r5,r19
 4019584:	40121080 	call	4012108 <__divdf3>
 4019588:	180b883a 	mov	r5,r3
 401958c:	1009883a 	mov	r4,r2
 4019590:	4013e980 	call	4013e98 <__fixdfsi>
 4019594:	1009883a 	mov	r4,r2
 4019598:	102b883a 	mov	r21,r2
 401959c:	4013f180 	call	4013f18 <__floatsidf>
 40195a0:	800d883a 	mov	r6,r16
 40195a4:	880f883a 	mov	r7,r17
 40195a8:	1009883a 	mov	r4,r2
 40195ac:	180b883a 	mov	r5,r3
 40195b0:	4012d300 	call	4012d30 <__muldf3>
 40195b4:	100d883a 	mov	r6,r2
 40195b8:	180f883a 	mov	r7,r3
 40195bc:	9009883a 	mov	r4,r18
 40195c0:	980b883a 	mov	r5,r19
 40195c4:	401359c0 	call	401359c <__subdf3>
 40195c8:	d9c00717 	ldw	r7,28(sp)
 40195cc:	1009883a 	mov	r4,r2
 40195d0:	a8800c04 	addi	r2,r21,48
 40195d4:	38800005 	stb	r2,0(r7)
 40195d8:	3dc00044 	addi	r23,r7,1
 40195dc:	d9c00617 	ldw	r7,24(sp)
 40195e0:	01800044 	movi	r6,1
 40195e4:	180b883a 	mov	r5,r3
 40195e8:	2005883a 	mov	r2,r4
 40195ec:	39803826 	beq	r7,r6,40196d0 <_dtoa_r+0x8f4>
 40195f0:	000d883a 	mov	r6,zero
 40195f4:	01d00934 	movhi	r7,16420
 40195f8:	4012d300 	call	4012d30 <__muldf3>
 40195fc:	000d883a 	mov	r6,zero
 4019600:	000f883a 	mov	r7,zero
 4019604:	1009883a 	mov	r4,r2
 4019608:	180b883a 	mov	r5,r3
 401960c:	1025883a 	mov	r18,r2
 4019610:	1827883a 	mov	r19,r3
 4019614:	4012ad80 	call	4012ad8 <__eqdf2>
 4019618:	103f9a26 	beq	r2,zero,4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 401961c:	d9c00617 	ldw	r7,24(sp)
 4019620:	d8c00717 	ldw	r3,28(sp)
 4019624:	b829883a 	mov	r20,r23
 4019628:	38bfffc4 	addi	r2,r7,-1
 401962c:	18ad883a 	add	r22,r3,r2
 4019630:	00000a06 	br	401965c <_dtoa_r+0x880>
 4019634:	4012d300 	call	4012d30 <__muldf3>
 4019638:	000d883a 	mov	r6,zero
 401963c:	000f883a 	mov	r7,zero
 4019640:	1009883a 	mov	r4,r2
 4019644:	180b883a 	mov	r5,r3
 4019648:	1025883a 	mov	r18,r2
 401964c:	1827883a 	mov	r19,r3
 4019650:	b829883a 	mov	r20,r23
 4019654:	4012ad80 	call	4012ad8 <__eqdf2>
 4019658:	103f8a26 	beq	r2,zero,4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 401965c:	800d883a 	mov	r6,r16
 4019660:	880f883a 	mov	r7,r17
 4019664:	9009883a 	mov	r4,r18
 4019668:	980b883a 	mov	r5,r19
 401966c:	40121080 	call	4012108 <__divdf3>
 4019670:	180b883a 	mov	r5,r3
 4019674:	1009883a 	mov	r4,r2
 4019678:	4013e980 	call	4013e98 <__fixdfsi>
 401967c:	1009883a 	mov	r4,r2
 4019680:	102b883a 	mov	r21,r2
 4019684:	4013f180 	call	4013f18 <__floatsidf>
 4019688:	800d883a 	mov	r6,r16
 401968c:	880f883a 	mov	r7,r17
 4019690:	1009883a 	mov	r4,r2
 4019694:	180b883a 	mov	r5,r3
 4019698:	4012d300 	call	4012d30 <__muldf3>
 401969c:	100d883a 	mov	r6,r2
 40196a0:	180f883a 	mov	r7,r3
 40196a4:	9009883a 	mov	r4,r18
 40196a8:	980b883a 	mov	r5,r19
 40196ac:	401359c0 	call	401359c <__subdf3>
 40196b0:	aa000c04 	addi	r8,r21,48
 40196b4:	a2000005 	stb	r8,0(r20)
 40196b8:	000d883a 	mov	r6,zero
 40196bc:	01d00934 	movhi	r7,16420
 40196c0:	1009883a 	mov	r4,r2
 40196c4:	180b883a 	mov	r5,r3
 40196c8:	a5c00044 	addi	r23,r20,1
 40196cc:	b53fd91e 	bne	r22,r20,4019634 <__alt_mem_onchip_memory2_0+0xfc014474>
 40196d0:	100d883a 	mov	r6,r2
 40196d4:	180f883a 	mov	r7,r3
 40196d8:	1009883a 	mov	r4,r2
 40196dc:	180b883a 	mov	r5,r3
 40196e0:	401185c0 	call	401185c <__adddf3>
 40196e4:	100d883a 	mov	r6,r2
 40196e8:	180f883a 	mov	r7,r3
 40196ec:	8009883a 	mov	r4,r16
 40196f0:	880b883a 	mov	r5,r17
 40196f4:	1027883a 	mov	r19,r2
 40196f8:	1825883a 	mov	r18,r3
 40196fc:	4012c3c0 	call	4012c3c <__ledf2>
 4019700:	10000816 	blt	r2,zero,4019724 <_dtoa_r+0x948>
 4019704:	980d883a 	mov	r6,r19
 4019708:	900f883a 	mov	r7,r18
 401970c:	8009883a 	mov	r4,r16
 4019710:	880b883a 	mov	r5,r17
 4019714:	4012ad80 	call	4012ad8 <__eqdf2>
 4019718:	103f5a1e 	bne	r2,zero,4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 401971c:	ad40004c 	andi	r21,r21,1
 4019720:	a83f5826 	beq	r21,zero,4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 4019724:	bd3fffc3 	ldbu	r20,-1(r23)
 4019728:	b8bfffc4 	addi	r2,r23,-1
 401972c:	1007883a 	mov	r3,r2
 4019730:	01400e44 	movi	r5,57
 4019734:	d9800717 	ldw	r6,28(sp)
 4019738:	00000506 	br	4019750 <_dtoa_r+0x974>
 401973c:	18ffffc4 	addi	r3,r3,-1
 4019740:	11824726 	beq	r2,r6,401a060 <_dtoa_r+0x1284>
 4019744:	1d000003 	ldbu	r20,0(r3)
 4019748:	102f883a 	mov	r23,r2
 401974c:	10bfffc4 	addi	r2,r2,-1
 4019750:	a1003fcc 	andi	r4,r20,255
 4019754:	2100201c 	xori	r4,r4,128
 4019758:	213fe004 	addi	r4,r4,-128
 401975c:	217ff726 	beq	r4,r5,401973c <__alt_mem_onchip_memory2_0+0xfc01457c>
 4019760:	a2000044 	addi	r8,r20,1
 4019764:	12000005 	stb	r8,0(r2)
 4019768:	003f4606 	br	4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 401976c:	d9000b17 	ldw	r4,44(sp)
 4019770:	2000c826 	beq	r4,zero,4019a94 <_dtoa_r+0xcb8>
 4019774:	d9800317 	ldw	r6,12(sp)
 4019778:	00c00044 	movi	r3,1
 401977c:	1980f90e 	bge	r3,r6,4019b64 <_dtoa_r+0xd88>
 4019780:	d8800617 	ldw	r2,24(sp)
 4019784:	d8c00a17 	ldw	r3,40(sp)
 4019788:	157fffc4 	addi	r21,r2,-1
 401978c:	1d41f316 	blt	r3,r21,4019f5c <_dtoa_r+0x1180>
 4019790:	1d6bc83a 	sub	r21,r3,r21
 4019794:	d9c00617 	ldw	r7,24(sp)
 4019798:	3802aa16 	blt	r7,zero,401a244 <_dtoa_r+0x1468>
 401979c:	dd000817 	ldw	r20,32(sp)
 40197a0:	d8800617 	ldw	r2,24(sp)
 40197a4:	d8c00817 	ldw	r3,32(sp)
 40197a8:	01400044 	movi	r5,1
 40197ac:	e009883a 	mov	r4,fp
 40197b0:	1887883a 	add	r3,r3,r2
 40197b4:	d8c00815 	stw	r3,32(sp)
 40197b8:	b0ad883a 	add	r22,r22,r2
 40197bc:	401c9240 	call	401c924 <__i2b>
 40197c0:	1023883a 	mov	r17,r2
 40197c4:	a0000826 	beq	r20,zero,40197e8 <_dtoa_r+0xa0c>
 40197c8:	0580070e 	bge	zero,r22,40197e8 <_dtoa_r+0xa0c>
 40197cc:	a005883a 	mov	r2,r20
 40197d0:	b500b916 	blt	r22,r20,4019ab8 <_dtoa_r+0xcdc>
 40197d4:	d9000817 	ldw	r4,32(sp)
 40197d8:	a0a9c83a 	sub	r20,r20,r2
 40197dc:	b0adc83a 	sub	r22,r22,r2
 40197e0:	2089c83a 	sub	r4,r4,r2
 40197e4:	d9000815 	stw	r4,32(sp)
 40197e8:	d9800a17 	ldw	r6,40(sp)
 40197ec:	0181810e 	bge	zero,r6,4019df4 <_dtoa_r+0x1018>
 40197f0:	d9c00b17 	ldw	r7,44(sp)
 40197f4:	3800b326 	beq	r7,zero,4019ac4 <_dtoa_r+0xce8>
 40197f8:	a800b226 	beq	r21,zero,4019ac4 <_dtoa_r+0xce8>
 40197fc:	880b883a 	mov	r5,r17
 4019800:	a80d883a 	mov	r6,r21
 4019804:	e009883a 	mov	r4,fp
 4019808:	401cbec0 	call	401cbec <__pow5mult>
 401980c:	d9800917 	ldw	r6,36(sp)
 4019810:	100b883a 	mov	r5,r2
 4019814:	e009883a 	mov	r4,fp
 4019818:	1023883a 	mov	r17,r2
 401981c:	401c9600 	call	401c960 <__multiply>
 4019820:	1021883a 	mov	r16,r2
 4019824:	d8800a17 	ldw	r2,40(sp)
 4019828:	d9400917 	ldw	r5,36(sp)
 401982c:	e009883a 	mov	r4,fp
 4019830:	1545c83a 	sub	r2,r2,r21
 4019834:	d8800a15 	stw	r2,40(sp)
 4019838:	401c5980 	call	401c598 <_Bfree>
 401983c:	d8c00a17 	ldw	r3,40(sp)
 4019840:	18009f1e 	bne	r3,zero,4019ac0 <_dtoa_r+0xce4>
 4019844:	05c00044 	movi	r23,1
 4019848:	e009883a 	mov	r4,fp
 401984c:	b80b883a 	mov	r5,r23
 4019850:	401c9240 	call	401c924 <__i2b>
 4019854:	d9000d17 	ldw	r4,52(sp)
 4019858:	102b883a 	mov	r21,r2
 401985c:	2000ce26 	beq	r4,zero,4019b98 <_dtoa_r+0xdbc>
 4019860:	200d883a 	mov	r6,r4
 4019864:	100b883a 	mov	r5,r2
 4019868:	e009883a 	mov	r4,fp
 401986c:	401cbec0 	call	401cbec <__pow5mult>
 4019870:	d9800317 	ldw	r6,12(sp)
 4019874:	102b883a 	mov	r21,r2
 4019878:	b981810e 	bge	r23,r6,4019e80 <_dtoa_r+0x10a4>
 401987c:	0027883a 	mov	r19,zero
 4019880:	a8800417 	ldw	r2,16(r21)
 4019884:	05c00804 	movi	r23,32
 4019888:	10800104 	addi	r2,r2,4
 401988c:	1085883a 	add	r2,r2,r2
 4019890:	1085883a 	add	r2,r2,r2
 4019894:	a885883a 	add	r2,r21,r2
 4019898:	11000017 	ldw	r4,0(r2)
 401989c:	401c80c0 	call	401c80c <__hi0bits>
 40198a0:	b885c83a 	sub	r2,r23,r2
 40198a4:	1585883a 	add	r2,r2,r22
 40198a8:	108007cc 	andi	r2,r2,31
 40198ac:	1000b326 	beq	r2,zero,4019b7c <_dtoa_r+0xda0>
 40198b0:	00c00804 	movi	r3,32
 40198b4:	1887c83a 	sub	r3,r3,r2
 40198b8:	01000104 	movi	r4,4
 40198bc:	20c2cd0e 	bge	r4,r3,401a3f4 <_dtoa_r+0x1618>
 40198c0:	00c00704 	movi	r3,28
 40198c4:	1885c83a 	sub	r2,r3,r2
 40198c8:	d8c00817 	ldw	r3,32(sp)
 40198cc:	a0a9883a 	add	r20,r20,r2
 40198d0:	b0ad883a 	add	r22,r22,r2
 40198d4:	1887883a 	add	r3,r3,r2
 40198d8:	d8c00815 	stw	r3,32(sp)
 40198dc:	d9800817 	ldw	r6,32(sp)
 40198e0:	0180040e 	bge	zero,r6,40198f4 <_dtoa_r+0xb18>
 40198e4:	800b883a 	mov	r5,r16
 40198e8:	e009883a 	mov	r4,fp
 40198ec:	401cd2c0 	call	401cd2c <__lshift>
 40198f0:	1021883a 	mov	r16,r2
 40198f4:	0580050e 	bge	zero,r22,401990c <_dtoa_r+0xb30>
 40198f8:	a80b883a 	mov	r5,r21
 40198fc:	b00d883a 	mov	r6,r22
 4019900:	e009883a 	mov	r4,fp
 4019904:	401cd2c0 	call	401cd2c <__lshift>
 4019908:	102b883a 	mov	r21,r2
 401990c:	d9c00e17 	ldw	r7,56(sp)
 4019910:	3801211e 	bne	r7,zero,4019d98 <_dtoa_r+0xfbc>
 4019914:	d9800617 	ldw	r6,24(sp)
 4019918:	0181380e 	bge	zero,r6,4019dfc <_dtoa_r+0x1020>
 401991c:	d8c00b17 	ldw	r3,44(sp)
 4019920:	1800ab1e 	bne	r3,zero,4019bd0 <_dtoa_r+0xdf4>
 4019924:	dc800717 	ldw	r18,28(sp)
 4019928:	dcc00617 	ldw	r19,24(sp)
 401992c:	9029883a 	mov	r20,r18
 4019930:	00000206 	br	401993c <_dtoa_r+0xb60>
 4019934:	401c5c00 	call	401c5c0 <__multadd>
 4019938:	1021883a 	mov	r16,r2
 401993c:	a80b883a 	mov	r5,r21
 4019940:	8009883a 	mov	r4,r16
 4019944:	4018bb40 	call	4018bb4 <quorem>
 4019948:	10800c04 	addi	r2,r2,48
 401994c:	90800005 	stb	r2,0(r18)
 4019950:	94800044 	addi	r18,r18,1
 4019954:	9507c83a 	sub	r3,r18,r20
 4019958:	000f883a 	mov	r7,zero
 401995c:	01800284 	movi	r6,10
 4019960:	800b883a 	mov	r5,r16
 4019964:	e009883a 	mov	r4,fp
 4019968:	1cfff216 	blt	r3,r19,4019934 <__alt_mem_onchip_memory2_0+0xfc014774>
 401996c:	1011883a 	mov	r8,r2
 4019970:	d8800617 	ldw	r2,24(sp)
 4019974:	0082370e 	bge	zero,r2,401a254 <_dtoa_r+0x1478>
 4019978:	d9000717 	ldw	r4,28(sp)
 401997c:	0025883a 	mov	r18,zero
 4019980:	20af883a 	add	r23,r4,r2
 4019984:	01800044 	movi	r6,1
 4019988:	800b883a 	mov	r5,r16
 401998c:	e009883a 	mov	r4,fp
 4019990:	da001715 	stw	r8,92(sp)
 4019994:	401cd2c0 	call	401cd2c <__lshift>
 4019998:	a80b883a 	mov	r5,r21
 401999c:	1009883a 	mov	r4,r2
 40199a0:	d8800915 	stw	r2,36(sp)
 40199a4:	401ce740 	call	401ce74 <__mcmp>
 40199a8:	da001717 	ldw	r8,92(sp)
 40199ac:	0081800e 	bge	zero,r2,4019fb0 <_dtoa_r+0x11d4>
 40199b0:	b93fffc3 	ldbu	r4,-1(r23)
 40199b4:	b8bfffc4 	addi	r2,r23,-1
 40199b8:	1007883a 	mov	r3,r2
 40199bc:	01800e44 	movi	r6,57
 40199c0:	d9c00717 	ldw	r7,28(sp)
 40199c4:	00000506 	br	40199dc <_dtoa_r+0xc00>
 40199c8:	18ffffc4 	addi	r3,r3,-1
 40199cc:	11c12326 	beq	r2,r7,4019e5c <_dtoa_r+0x1080>
 40199d0:	19000003 	ldbu	r4,0(r3)
 40199d4:	102f883a 	mov	r23,r2
 40199d8:	10bfffc4 	addi	r2,r2,-1
 40199dc:	21403fcc 	andi	r5,r4,255
 40199e0:	2940201c 	xori	r5,r5,128
 40199e4:	297fe004 	addi	r5,r5,-128
 40199e8:	29bff726 	beq	r5,r6,40199c8 <__alt_mem_onchip_memory2_0+0xfc014808>
 40199ec:	21000044 	addi	r4,r4,1
 40199f0:	11000005 	stb	r4,0(r2)
 40199f4:	a80b883a 	mov	r5,r21
 40199f8:	e009883a 	mov	r4,fp
 40199fc:	401c5980 	call	401c598 <_Bfree>
 4019a00:	883ea026 	beq	r17,zero,4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 4019a04:	90000426 	beq	r18,zero,4019a18 <_dtoa_r+0xc3c>
 4019a08:	94400326 	beq	r18,r17,4019a18 <_dtoa_r+0xc3c>
 4019a0c:	900b883a 	mov	r5,r18
 4019a10:	e009883a 	mov	r4,fp
 4019a14:	401c5980 	call	401c598 <_Bfree>
 4019a18:	880b883a 	mov	r5,r17
 4019a1c:	e009883a 	mov	r4,fp
 4019a20:	401c5980 	call	401c598 <_Bfree>
 4019a24:	003e9706 	br	4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 4019a28:	01800044 	movi	r6,1
 4019a2c:	d9800e15 	stw	r6,56(sp)
 4019a30:	003d9606 	br	401908c <__alt_mem_onchip_memory2_0+0xfc013ecc>
 4019a34:	d8800817 	ldw	r2,32(sp)
 4019a38:	d8c00517 	ldw	r3,20(sp)
 4019a3c:	d8000d15 	stw	zero,52(sp)
 4019a40:	10c5c83a 	sub	r2,r2,r3
 4019a44:	00c9c83a 	sub	r4,zero,r3
 4019a48:	d8800815 	stw	r2,32(sp)
 4019a4c:	d9000a15 	stw	r4,40(sp)
 4019a50:	003d9706 	br	40190b0 <__alt_mem_onchip_memory2_0+0xfc013ef0>
 4019a54:	05adc83a 	sub	r22,zero,r22
 4019a58:	dd800815 	stw	r22,32(sp)
 4019a5c:	002d883a 	mov	r22,zero
 4019a60:	003d8e06 	br	401909c <__alt_mem_onchip_memory2_0+0xfc013edc>
 4019a64:	d9000517 	ldw	r4,20(sp)
 4019a68:	4013f180 	call	4013f18 <__floatsidf>
 4019a6c:	100d883a 	mov	r6,r2
 4019a70:	180f883a 	mov	r7,r3
 4019a74:	a009883a 	mov	r4,r20
 4019a78:	880b883a 	mov	r5,r17
 4019a7c:	4012ad80 	call	4012ad8 <__eqdf2>
 4019a80:	103d7126 	beq	r2,zero,4019048 <__alt_mem_onchip_memory2_0+0xfc013e88>
 4019a84:	d9c00517 	ldw	r7,20(sp)
 4019a88:	39ffffc4 	addi	r7,r7,-1
 4019a8c:	d9c00515 	stw	r7,20(sp)
 4019a90:	003d6d06 	br	4019048 <__alt_mem_onchip_memory2_0+0xfc013e88>
 4019a94:	dd400a17 	ldw	r21,40(sp)
 4019a98:	dd000817 	ldw	r20,32(sp)
 4019a9c:	0023883a 	mov	r17,zero
 4019aa0:	003f4806 	br	40197c4 <__alt_mem_onchip_memory2_0+0xfc014604>
 4019aa4:	10e3c83a 	sub	r17,r2,r3
 4019aa8:	9448983a 	sll	r4,r18,r17
 4019aac:	003d3206 	br	4018f78 <__alt_mem_onchip_memory2_0+0xfc013db8>
 4019ab0:	d8000e15 	stw	zero,56(sp)
 4019ab4:	003d7506 	br	401908c <__alt_mem_onchip_memory2_0+0xfc013ecc>
 4019ab8:	b005883a 	mov	r2,r22
 4019abc:	003f4506 	br	40197d4 <__alt_mem_onchip_memory2_0+0xfc014614>
 4019ac0:	dc000915 	stw	r16,36(sp)
 4019ac4:	d9800a17 	ldw	r6,40(sp)
 4019ac8:	d9400917 	ldw	r5,36(sp)
 4019acc:	e009883a 	mov	r4,fp
 4019ad0:	401cbec0 	call	401cbec <__pow5mult>
 4019ad4:	1021883a 	mov	r16,r2
 4019ad8:	003f5a06 	br	4019844 <__alt_mem_onchip_memory2_0+0xfc014684>
 4019adc:	01c00044 	movi	r7,1
 4019ae0:	d9c00b15 	stw	r7,44(sp)
 4019ae4:	d8802217 	ldw	r2,136(sp)
 4019ae8:	0081280e 	bge	zero,r2,4019f8c <_dtoa_r+0x11b0>
 4019aec:	100d883a 	mov	r6,r2
 4019af0:	1021883a 	mov	r16,r2
 4019af4:	d8800c15 	stw	r2,48(sp)
 4019af8:	d8800615 	stw	r2,24(sp)
 4019afc:	003d8806 	br	4019120 <__alt_mem_onchip_memory2_0+0xfc013f60>
 4019b00:	d8800617 	ldw	r2,24(sp)
 4019b04:	00be9b16 	blt	zero,r2,4019574 <__alt_mem_onchip_memory2_0+0xfc0143b4>
 4019b08:	10010f1e 	bne	r2,zero,4019f48 <_dtoa_r+0x116c>
 4019b0c:	880b883a 	mov	r5,r17
 4019b10:	000d883a 	mov	r6,zero
 4019b14:	01d00534 	movhi	r7,16404
 4019b18:	8009883a 	mov	r4,r16
 4019b1c:	4012d300 	call	4012d30 <__muldf3>
 4019b20:	900d883a 	mov	r6,r18
 4019b24:	980f883a 	mov	r7,r19
 4019b28:	1009883a 	mov	r4,r2
 4019b2c:	180b883a 	mov	r5,r3
 4019b30:	4012b600 	call	4012b60 <__gedf2>
 4019b34:	002b883a 	mov	r21,zero
 4019b38:	0023883a 	mov	r17,zero
 4019b3c:	1000bf16 	blt	r2,zero,4019e3c <_dtoa_r+0x1060>
 4019b40:	d9802217 	ldw	r6,136(sp)
 4019b44:	ddc00717 	ldw	r23,28(sp)
 4019b48:	018c303a 	nor	r6,zero,r6
 4019b4c:	d9800515 	stw	r6,20(sp)
 4019b50:	a80b883a 	mov	r5,r21
 4019b54:	e009883a 	mov	r4,fp
 4019b58:	401c5980 	call	401c598 <_Bfree>
 4019b5c:	883e4926 	beq	r17,zero,4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 4019b60:	003fad06 	br	4019a18 <__alt_mem_onchip_memory2_0+0xfc014858>
 4019b64:	d9c01117 	ldw	r7,68(sp)
 4019b68:	3801bc26 	beq	r7,zero,401a25c <_dtoa_r+0x1480>
 4019b6c:	10810cc4 	addi	r2,r2,1075
 4019b70:	dd400a17 	ldw	r21,40(sp)
 4019b74:	dd000817 	ldw	r20,32(sp)
 4019b78:	003f0a06 	br	40197a4 <__alt_mem_onchip_memory2_0+0xfc0145e4>
 4019b7c:	00800704 	movi	r2,28
 4019b80:	d9000817 	ldw	r4,32(sp)
 4019b84:	a0a9883a 	add	r20,r20,r2
 4019b88:	b0ad883a 	add	r22,r22,r2
 4019b8c:	2089883a 	add	r4,r4,r2
 4019b90:	d9000815 	stw	r4,32(sp)
 4019b94:	003f5106 	br	40198dc <__alt_mem_onchip_memory2_0+0xfc01471c>
 4019b98:	d8c00317 	ldw	r3,12(sp)
 4019b9c:	b8c1fc0e 	bge	r23,r3,401a390 <_dtoa_r+0x15b4>
 4019ba0:	0027883a 	mov	r19,zero
 4019ba4:	b805883a 	mov	r2,r23
 4019ba8:	003f3e06 	br	40198a4 <__alt_mem_onchip_memory2_0+0xfc0146e4>
 4019bac:	880b883a 	mov	r5,r17
 4019bb0:	e009883a 	mov	r4,fp
 4019bb4:	000f883a 	mov	r7,zero
 4019bb8:	01800284 	movi	r6,10
 4019bbc:	401c5c00 	call	401c5c0 <__multadd>
 4019bc0:	d9000c17 	ldw	r4,48(sp)
 4019bc4:	1023883a 	mov	r17,r2
 4019bc8:	0102040e 	bge	zero,r4,401a3dc <_dtoa_r+0x1600>
 4019bcc:	d9000615 	stw	r4,24(sp)
 4019bd0:	0500050e 	bge	zero,r20,4019be8 <_dtoa_r+0xe0c>
 4019bd4:	880b883a 	mov	r5,r17
 4019bd8:	a00d883a 	mov	r6,r20
 4019bdc:	e009883a 	mov	r4,fp
 4019be0:	401cd2c0 	call	401cd2c <__lshift>
 4019be4:	1023883a 	mov	r17,r2
 4019be8:	9801241e 	bne	r19,zero,401a07c <_dtoa_r+0x12a0>
 4019bec:	8829883a 	mov	r20,r17
 4019bf0:	d9000617 	ldw	r4,24(sp)
 4019bf4:	dcc00717 	ldw	r19,28(sp)
 4019bf8:	9480004c 	andi	r18,r18,1
 4019bfc:	20bfffc4 	addi	r2,r4,-1
 4019c00:	9885883a 	add	r2,r19,r2
 4019c04:	d8800415 	stw	r2,16(sp)
 4019c08:	dc800615 	stw	r18,24(sp)
 4019c0c:	a80b883a 	mov	r5,r21
 4019c10:	8009883a 	mov	r4,r16
 4019c14:	4018bb40 	call	4018bb4 <quorem>
 4019c18:	880b883a 	mov	r5,r17
 4019c1c:	8009883a 	mov	r4,r16
 4019c20:	102f883a 	mov	r23,r2
 4019c24:	401ce740 	call	401ce74 <__mcmp>
 4019c28:	a80b883a 	mov	r5,r21
 4019c2c:	a00d883a 	mov	r6,r20
 4019c30:	e009883a 	mov	r4,fp
 4019c34:	102d883a 	mov	r22,r2
 4019c38:	401ced40 	call	401ced4 <__mdiff>
 4019c3c:	1007883a 	mov	r3,r2
 4019c40:	10800317 	ldw	r2,12(r2)
 4019c44:	bc800c04 	addi	r18,r23,48
 4019c48:	180b883a 	mov	r5,r3
 4019c4c:	10004e1e 	bne	r2,zero,4019d88 <_dtoa_r+0xfac>
 4019c50:	8009883a 	mov	r4,r16
 4019c54:	d8c01615 	stw	r3,88(sp)
 4019c58:	401ce740 	call	401ce74 <__mcmp>
 4019c5c:	d8c01617 	ldw	r3,88(sp)
 4019c60:	e009883a 	mov	r4,fp
 4019c64:	d8801615 	stw	r2,88(sp)
 4019c68:	180b883a 	mov	r5,r3
 4019c6c:	401c5980 	call	401c598 <_Bfree>
 4019c70:	d8801617 	ldw	r2,88(sp)
 4019c74:	1000041e 	bne	r2,zero,4019c88 <_dtoa_r+0xeac>
 4019c78:	d9800317 	ldw	r6,12(sp)
 4019c7c:	3000021e 	bne	r6,zero,4019c88 <_dtoa_r+0xeac>
 4019c80:	d8c00617 	ldw	r3,24(sp)
 4019c84:	18003726 	beq	r3,zero,4019d64 <_dtoa_r+0xf88>
 4019c88:	b0002016 	blt	r22,zero,4019d0c <_dtoa_r+0xf30>
 4019c8c:	b000041e 	bne	r22,zero,4019ca0 <_dtoa_r+0xec4>
 4019c90:	d9000317 	ldw	r4,12(sp)
 4019c94:	2000021e 	bne	r4,zero,4019ca0 <_dtoa_r+0xec4>
 4019c98:	d8c00617 	ldw	r3,24(sp)
 4019c9c:	18001b26 	beq	r3,zero,4019d0c <_dtoa_r+0xf30>
 4019ca0:	00810716 	blt	zero,r2,401a0c0 <_dtoa_r+0x12e4>
 4019ca4:	d8c00417 	ldw	r3,16(sp)
 4019ca8:	9d800044 	addi	r22,r19,1
 4019cac:	9c800005 	stb	r18,0(r19)
 4019cb0:	b02f883a 	mov	r23,r22
 4019cb4:	98c10626 	beq	r19,r3,401a0d0 <_dtoa_r+0x12f4>
 4019cb8:	800b883a 	mov	r5,r16
 4019cbc:	000f883a 	mov	r7,zero
 4019cc0:	01800284 	movi	r6,10
 4019cc4:	e009883a 	mov	r4,fp
 4019cc8:	401c5c00 	call	401c5c0 <__multadd>
 4019ccc:	1021883a 	mov	r16,r2
 4019cd0:	000f883a 	mov	r7,zero
 4019cd4:	01800284 	movi	r6,10
 4019cd8:	880b883a 	mov	r5,r17
 4019cdc:	e009883a 	mov	r4,fp
 4019ce0:	8d002526 	beq	r17,r20,4019d78 <_dtoa_r+0xf9c>
 4019ce4:	401c5c00 	call	401c5c0 <__multadd>
 4019ce8:	a00b883a 	mov	r5,r20
 4019cec:	000f883a 	mov	r7,zero
 4019cf0:	01800284 	movi	r6,10
 4019cf4:	e009883a 	mov	r4,fp
 4019cf8:	1023883a 	mov	r17,r2
 4019cfc:	401c5c00 	call	401c5c0 <__multadd>
 4019d00:	1029883a 	mov	r20,r2
 4019d04:	b027883a 	mov	r19,r22
 4019d08:	003fc006 	br	4019c0c <__alt_mem_onchip_memory2_0+0xfc014a4c>
 4019d0c:	9011883a 	mov	r8,r18
 4019d10:	00800e0e 	bge	zero,r2,4019d4c <_dtoa_r+0xf70>
 4019d14:	800b883a 	mov	r5,r16
 4019d18:	01800044 	movi	r6,1
 4019d1c:	e009883a 	mov	r4,fp
 4019d20:	da001715 	stw	r8,92(sp)
 4019d24:	401cd2c0 	call	401cd2c <__lshift>
 4019d28:	a80b883a 	mov	r5,r21
 4019d2c:	1009883a 	mov	r4,r2
 4019d30:	1021883a 	mov	r16,r2
 4019d34:	401ce740 	call	401ce74 <__mcmp>
 4019d38:	da001717 	ldw	r8,92(sp)
 4019d3c:	0081960e 	bge	zero,r2,401a398 <_dtoa_r+0x15bc>
 4019d40:	00800e44 	movi	r2,57
 4019d44:	40817026 	beq	r8,r2,401a308 <_dtoa_r+0x152c>
 4019d48:	ba000c44 	addi	r8,r23,49
 4019d4c:	8825883a 	mov	r18,r17
 4019d50:	9dc00044 	addi	r23,r19,1
 4019d54:	9a000005 	stb	r8,0(r19)
 4019d58:	a023883a 	mov	r17,r20
 4019d5c:	dc000915 	stw	r16,36(sp)
 4019d60:	003f2406 	br	40199f4 <__alt_mem_onchip_memory2_0+0xfc014834>
 4019d64:	00800e44 	movi	r2,57
 4019d68:	9011883a 	mov	r8,r18
 4019d6c:	90816626 	beq	r18,r2,401a308 <_dtoa_r+0x152c>
 4019d70:	05bff516 	blt	zero,r22,4019d48 <__alt_mem_onchip_memory2_0+0xfc014b88>
 4019d74:	003ff506 	br	4019d4c <__alt_mem_onchip_memory2_0+0xfc014b8c>
 4019d78:	401c5c00 	call	401c5c0 <__multadd>
 4019d7c:	1023883a 	mov	r17,r2
 4019d80:	1029883a 	mov	r20,r2
 4019d84:	003fdf06 	br	4019d04 <__alt_mem_onchip_memory2_0+0xfc014b44>
 4019d88:	e009883a 	mov	r4,fp
 4019d8c:	401c5980 	call	401c598 <_Bfree>
 4019d90:	00800044 	movi	r2,1
 4019d94:	003fbc06 	br	4019c88 <__alt_mem_onchip_memory2_0+0xfc014ac8>
 4019d98:	a80b883a 	mov	r5,r21
 4019d9c:	8009883a 	mov	r4,r16
 4019da0:	401ce740 	call	401ce74 <__mcmp>
 4019da4:	103edb0e 	bge	r2,zero,4019914 <__alt_mem_onchip_memory2_0+0xfc014754>
 4019da8:	800b883a 	mov	r5,r16
 4019dac:	000f883a 	mov	r7,zero
 4019db0:	01800284 	movi	r6,10
 4019db4:	e009883a 	mov	r4,fp
 4019db8:	401c5c00 	call	401c5c0 <__multadd>
 4019dbc:	1021883a 	mov	r16,r2
 4019dc0:	d8800517 	ldw	r2,20(sp)
 4019dc4:	d8c00b17 	ldw	r3,44(sp)
 4019dc8:	10bfffc4 	addi	r2,r2,-1
 4019dcc:	d8800515 	stw	r2,20(sp)
 4019dd0:	183f761e 	bne	r3,zero,4019bac <__alt_mem_onchip_memory2_0+0xfc0149ec>
 4019dd4:	d9000c17 	ldw	r4,48(sp)
 4019dd8:	0101730e 	bge	zero,r4,401a3a8 <_dtoa_r+0x15cc>
 4019ddc:	d9000615 	stw	r4,24(sp)
 4019de0:	003ed006 	br	4019924 <__alt_mem_onchip_memory2_0+0xfc014764>
 4019de4:	00800084 	movi	r2,2
 4019de8:	3081861e 	bne	r6,r2,401a404 <_dtoa_r+0x1628>
 4019dec:	d8000b15 	stw	zero,44(sp)
 4019df0:	003f3c06 	br	4019ae4 <__alt_mem_onchip_memory2_0+0xfc014924>
 4019df4:	dc000917 	ldw	r16,36(sp)
 4019df8:	003e9206 	br	4019844 <__alt_mem_onchip_memory2_0+0xfc014684>
 4019dfc:	d9c00317 	ldw	r7,12(sp)
 4019e00:	00800084 	movi	r2,2
 4019e04:	11fec50e 	bge	r2,r7,401991c <__alt_mem_onchip_memory2_0+0xfc01475c>
 4019e08:	d9000617 	ldw	r4,24(sp)
 4019e0c:	20013c1e 	bne	r4,zero,401a300 <_dtoa_r+0x1524>
 4019e10:	a80b883a 	mov	r5,r21
 4019e14:	000f883a 	mov	r7,zero
 4019e18:	01800144 	movi	r6,5
 4019e1c:	e009883a 	mov	r4,fp
 4019e20:	401c5c00 	call	401c5c0 <__multadd>
 4019e24:	100b883a 	mov	r5,r2
 4019e28:	8009883a 	mov	r4,r16
 4019e2c:	102b883a 	mov	r21,r2
 4019e30:	401ce740 	call	401ce74 <__mcmp>
 4019e34:	dc000915 	stw	r16,36(sp)
 4019e38:	00bf410e 	bge	zero,r2,4019b40 <__alt_mem_onchip_memory2_0+0xfc014980>
 4019e3c:	d9c00717 	ldw	r7,28(sp)
 4019e40:	00800c44 	movi	r2,49
 4019e44:	38800005 	stb	r2,0(r7)
 4019e48:	d8800517 	ldw	r2,20(sp)
 4019e4c:	3dc00044 	addi	r23,r7,1
 4019e50:	10800044 	addi	r2,r2,1
 4019e54:	d8800515 	stw	r2,20(sp)
 4019e58:	003f3d06 	br	4019b50 <__alt_mem_onchip_memory2_0+0xfc014990>
 4019e5c:	d9800517 	ldw	r6,20(sp)
 4019e60:	d9c00717 	ldw	r7,28(sp)
 4019e64:	00800c44 	movi	r2,49
 4019e68:	31800044 	addi	r6,r6,1
 4019e6c:	d9800515 	stw	r6,20(sp)
 4019e70:	38800005 	stb	r2,0(r7)
 4019e74:	003edf06 	br	40199f4 <__alt_mem_onchip_memory2_0+0xfc014834>
 4019e78:	d8000b15 	stw	zero,44(sp)
 4019e7c:	003c9f06 	br	40190fc <__alt_mem_onchip_memory2_0+0xfc013f3c>
 4019e80:	903e7e1e 	bne	r18,zero,401987c <__alt_mem_onchip_memory2_0+0xfc0146bc>
 4019e84:	00800434 	movhi	r2,16
 4019e88:	10bfffc4 	addi	r2,r2,-1
 4019e8c:	9884703a 	and	r2,r19,r2
 4019e90:	1000ea1e 	bne	r2,zero,401a23c <_dtoa_r+0x1460>
 4019e94:	9cdffc2c 	andhi	r19,r19,32752
 4019e98:	9800e826 	beq	r19,zero,401a23c <_dtoa_r+0x1460>
 4019e9c:	d9c00817 	ldw	r7,32(sp)
 4019ea0:	b5800044 	addi	r22,r22,1
 4019ea4:	04c00044 	movi	r19,1
 4019ea8:	39c00044 	addi	r7,r7,1
 4019eac:	d9c00815 	stw	r7,32(sp)
 4019eb0:	d8800d17 	ldw	r2,52(sp)
 4019eb4:	103e721e 	bne	r2,zero,4019880 <__alt_mem_onchip_memory2_0+0xfc0146c0>
 4019eb8:	00800044 	movi	r2,1
 4019ebc:	003e7906 	br	40198a4 <__alt_mem_onchip_memory2_0+0xfc0146e4>
 4019ec0:	8009883a 	mov	r4,r16
 4019ec4:	4013f180 	call	4013f18 <__floatsidf>
 4019ec8:	d9800f17 	ldw	r6,60(sp)
 4019ecc:	d9c01017 	ldw	r7,64(sp)
 4019ed0:	1009883a 	mov	r4,r2
 4019ed4:	180b883a 	mov	r5,r3
 4019ed8:	4012d300 	call	4012d30 <__muldf3>
 4019edc:	000d883a 	mov	r6,zero
 4019ee0:	01d00734 	movhi	r7,16412
 4019ee4:	1009883a 	mov	r4,r2
 4019ee8:	180b883a 	mov	r5,r3
 4019eec:	401185c0 	call	401185c <__adddf3>
 4019ef0:	047f3034 	movhi	r17,64704
 4019ef4:	1021883a 	mov	r16,r2
 4019ef8:	1c63883a 	add	r17,r3,r17
 4019efc:	d9000f17 	ldw	r4,60(sp)
 4019f00:	d9401017 	ldw	r5,64(sp)
 4019f04:	000d883a 	mov	r6,zero
 4019f08:	01d00534 	movhi	r7,16404
 4019f0c:	401359c0 	call	401359c <__subdf3>
 4019f10:	800d883a 	mov	r6,r16
 4019f14:	880f883a 	mov	r7,r17
 4019f18:	1009883a 	mov	r4,r2
 4019f1c:	180b883a 	mov	r5,r3
 4019f20:	102b883a 	mov	r21,r2
 4019f24:	1829883a 	mov	r20,r3
 4019f28:	4012b600 	call	4012b60 <__gedf2>
 4019f2c:	00806c16 	blt	zero,r2,401a0e0 <_dtoa_r+0x1304>
 4019f30:	89e0003c 	xorhi	r7,r17,32768
 4019f34:	800d883a 	mov	r6,r16
 4019f38:	a809883a 	mov	r4,r21
 4019f3c:	a00b883a 	mov	r5,r20
 4019f40:	4012c3c0 	call	4012c3c <__ledf2>
 4019f44:	103d7e0e 	bge	r2,zero,4019540 <__alt_mem_onchip_memory2_0+0xfc014380>
 4019f48:	002b883a 	mov	r21,zero
 4019f4c:	0023883a 	mov	r17,zero
 4019f50:	003efb06 	br	4019b40 <__alt_mem_onchip_memory2_0+0xfc014980>
 4019f54:	d8800717 	ldw	r2,28(sp)
 4019f58:	003bd006 	br	4018e9c <__alt_mem_onchip_memory2_0+0xfc013cdc>
 4019f5c:	d9000a17 	ldw	r4,40(sp)
 4019f60:	d9800d17 	ldw	r6,52(sp)
 4019f64:	dd400a15 	stw	r21,40(sp)
 4019f68:	a905c83a 	sub	r2,r21,r4
 4019f6c:	308d883a 	add	r6,r6,r2
 4019f70:	d9800d15 	stw	r6,52(sp)
 4019f74:	002b883a 	mov	r21,zero
 4019f78:	003e0606 	br	4019794 <__alt_mem_onchip_memory2_0+0xfc0145d4>
 4019f7c:	9023883a 	mov	r17,r18
 4019f80:	9829883a 	mov	r20,r19
 4019f84:	04000084 	movi	r16,2
 4019f88:	003c9206 	br	40191d4 <__alt_mem_onchip_memory2_0+0xfc014014>
 4019f8c:	04000044 	movi	r16,1
 4019f90:	dc000c15 	stw	r16,48(sp)
 4019f94:	dc000615 	stw	r16,24(sp)
 4019f98:	dc002215 	stw	r16,136(sp)
 4019f9c:	e0001115 	stw	zero,68(fp)
 4019fa0:	000b883a 	mov	r5,zero
 4019fa4:	003c6906 	br	401914c <__alt_mem_onchip_memory2_0+0xfc013f8c>
 4019fa8:	3021883a 	mov	r16,r6
 4019fac:	003ffb06 	br	4019f9c <__alt_mem_onchip_memory2_0+0xfc014ddc>
 4019fb0:	1000021e 	bne	r2,zero,4019fbc <_dtoa_r+0x11e0>
 4019fb4:	4200004c 	andi	r8,r8,1
 4019fb8:	403e7d1e 	bne	r8,zero,40199b0 <__alt_mem_onchip_memory2_0+0xfc0147f0>
 4019fbc:	01000c04 	movi	r4,48
 4019fc0:	00000106 	br	4019fc8 <_dtoa_r+0x11ec>
 4019fc4:	102f883a 	mov	r23,r2
 4019fc8:	b8bfffc4 	addi	r2,r23,-1
 4019fcc:	10c00007 	ldb	r3,0(r2)
 4019fd0:	193ffc26 	beq	r3,r4,4019fc4 <__alt_mem_onchip_memory2_0+0xfc014e04>
 4019fd4:	003e8706 	br	40199f4 <__alt_mem_onchip_memory2_0+0xfc014834>
 4019fd8:	d8800517 	ldw	r2,20(sp)
 4019fdc:	00a3c83a 	sub	r17,zero,r2
 4019fe0:	8800a426 	beq	r17,zero,401a274 <_dtoa_r+0x1498>
 4019fe4:	888003cc 	andi	r2,r17,15
 4019fe8:	100490fa 	slli	r2,r2,3
 4019fec:	00c100b4 	movhi	r3,1026
 4019ff0:	18d5ba04 	addi	r3,r3,22248
 4019ff4:	1885883a 	add	r2,r3,r2
 4019ff8:	11800017 	ldw	r6,0(r2)
 4019ffc:	11c00117 	ldw	r7,4(r2)
 401a000:	9009883a 	mov	r4,r18
 401a004:	980b883a 	mov	r5,r19
 401a008:	8823d13a 	srai	r17,r17,4
 401a00c:	4012d300 	call	4012d30 <__muldf3>
 401a010:	d8800f15 	stw	r2,60(sp)
 401a014:	d8c01015 	stw	r3,64(sp)
 401a018:	8800e826 	beq	r17,zero,401a3bc <_dtoa_r+0x15e0>
 401a01c:	050100b4 	movhi	r20,1026
 401a020:	a515b004 	addi	r20,r20,22208
 401a024:	04000084 	movi	r16,2
 401a028:	8980004c 	andi	r6,r17,1
 401a02c:	1009883a 	mov	r4,r2
 401a030:	8823d07a 	srai	r17,r17,1
 401a034:	180b883a 	mov	r5,r3
 401a038:	30000426 	beq	r6,zero,401a04c <_dtoa_r+0x1270>
 401a03c:	a1800017 	ldw	r6,0(r20)
 401a040:	a1c00117 	ldw	r7,4(r20)
 401a044:	84000044 	addi	r16,r16,1
 401a048:	4012d300 	call	4012d30 <__muldf3>
 401a04c:	a5000204 	addi	r20,r20,8
 401a050:	883ff51e 	bne	r17,zero,401a028 <__alt_mem_onchip_memory2_0+0xfc014e68>
 401a054:	d8800f15 	stw	r2,60(sp)
 401a058:	d8c01015 	stw	r3,64(sp)
 401a05c:	003c7606 	br	4019238 <__alt_mem_onchip_memory2_0+0xfc014078>
 401a060:	00c00c04 	movi	r3,48
 401a064:	10c00005 	stb	r3,0(r2)
 401a068:	d8c00517 	ldw	r3,20(sp)
 401a06c:	bd3fffc3 	ldbu	r20,-1(r23)
 401a070:	18c00044 	addi	r3,r3,1
 401a074:	d8c00515 	stw	r3,20(sp)
 401a078:	003db906 	br	4019760 <__alt_mem_onchip_memory2_0+0xfc0145a0>
 401a07c:	89400117 	ldw	r5,4(r17)
 401a080:	e009883a 	mov	r4,fp
 401a084:	401c4f00 	call	401c4f0 <_Balloc>
 401a088:	89800417 	ldw	r6,16(r17)
 401a08c:	89400304 	addi	r5,r17,12
 401a090:	11000304 	addi	r4,r2,12
 401a094:	31800084 	addi	r6,r6,2
 401a098:	318d883a 	add	r6,r6,r6
 401a09c:	318d883a 	add	r6,r6,r6
 401a0a0:	1027883a 	mov	r19,r2
 401a0a4:	401c1240 	call	401c124 <memcpy>
 401a0a8:	01800044 	movi	r6,1
 401a0ac:	980b883a 	mov	r5,r19
 401a0b0:	e009883a 	mov	r4,fp
 401a0b4:	401cd2c0 	call	401cd2c <__lshift>
 401a0b8:	1029883a 	mov	r20,r2
 401a0bc:	003ecc06 	br	4019bf0 <__alt_mem_onchip_memory2_0+0xfc014a30>
 401a0c0:	00800e44 	movi	r2,57
 401a0c4:	90809026 	beq	r18,r2,401a308 <_dtoa_r+0x152c>
 401a0c8:	92000044 	addi	r8,r18,1
 401a0cc:	003f1f06 	br	4019d4c <__alt_mem_onchip_memory2_0+0xfc014b8c>
 401a0d0:	9011883a 	mov	r8,r18
 401a0d4:	8825883a 	mov	r18,r17
 401a0d8:	a023883a 	mov	r17,r20
 401a0dc:	003e2906 	br	4019984 <__alt_mem_onchip_memory2_0+0xfc0147c4>
 401a0e0:	002b883a 	mov	r21,zero
 401a0e4:	0023883a 	mov	r17,zero
 401a0e8:	003f5406 	br	4019e3c <__alt_mem_onchip_memory2_0+0xfc014c7c>
 401a0ec:	61bfffc4 	addi	r6,r12,-1
 401a0f0:	300490fa 	slli	r2,r6,3
 401a0f4:	00c100b4 	movhi	r3,1026
 401a0f8:	18d5ba04 	addi	r3,r3,22248
 401a0fc:	1885883a 	add	r2,r3,r2
 401a100:	11000017 	ldw	r4,0(r2)
 401a104:	11400117 	ldw	r5,4(r2)
 401a108:	d8800717 	ldw	r2,28(sp)
 401a10c:	880f883a 	mov	r7,r17
 401a110:	d9801215 	stw	r6,72(sp)
 401a114:	800d883a 	mov	r6,r16
 401a118:	db001615 	stw	r12,88(sp)
 401a11c:	15c00044 	addi	r23,r2,1
 401a120:	4012d300 	call	4012d30 <__muldf3>
 401a124:	d9401017 	ldw	r5,64(sp)
 401a128:	d9000f17 	ldw	r4,60(sp)
 401a12c:	d8c01515 	stw	r3,84(sp)
 401a130:	d8801415 	stw	r2,80(sp)
 401a134:	4013e980 	call	4013e98 <__fixdfsi>
 401a138:	1009883a 	mov	r4,r2
 401a13c:	1021883a 	mov	r16,r2
 401a140:	4013f180 	call	4013f18 <__floatsidf>
 401a144:	d9000f17 	ldw	r4,60(sp)
 401a148:	d9401017 	ldw	r5,64(sp)
 401a14c:	100d883a 	mov	r6,r2
 401a150:	180f883a 	mov	r7,r3
 401a154:	401359c0 	call	401359c <__subdf3>
 401a158:	1829883a 	mov	r20,r3
 401a15c:	d8c00717 	ldw	r3,28(sp)
 401a160:	84000c04 	addi	r16,r16,48
 401a164:	1023883a 	mov	r17,r2
 401a168:	1c000005 	stb	r16,0(r3)
 401a16c:	db001617 	ldw	r12,88(sp)
 401a170:	00800044 	movi	r2,1
 401a174:	60802226 	beq	r12,r2,401a200 <_dtoa_r+0x1424>
 401a178:	d9c00717 	ldw	r7,28(sp)
 401a17c:	8805883a 	mov	r2,r17
 401a180:	b82b883a 	mov	r21,r23
 401a184:	3b19883a 	add	r12,r7,r12
 401a188:	6023883a 	mov	r17,r12
 401a18c:	a007883a 	mov	r3,r20
 401a190:	dc800f15 	stw	r18,60(sp)
 401a194:	000d883a 	mov	r6,zero
 401a198:	01d00934 	movhi	r7,16420
 401a19c:	1009883a 	mov	r4,r2
 401a1a0:	180b883a 	mov	r5,r3
 401a1a4:	4012d300 	call	4012d30 <__muldf3>
 401a1a8:	180b883a 	mov	r5,r3
 401a1ac:	1009883a 	mov	r4,r2
 401a1b0:	1829883a 	mov	r20,r3
 401a1b4:	1025883a 	mov	r18,r2
 401a1b8:	4013e980 	call	4013e98 <__fixdfsi>
 401a1bc:	1009883a 	mov	r4,r2
 401a1c0:	1021883a 	mov	r16,r2
 401a1c4:	4013f180 	call	4013f18 <__floatsidf>
 401a1c8:	100d883a 	mov	r6,r2
 401a1cc:	180f883a 	mov	r7,r3
 401a1d0:	9009883a 	mov	r4,r18
 401a1d4:	a00b883a 	mov	r5,r20
 401a1d8:	84000c04 	addi	r16,r16,48
 401a1dc:	401359c0 	call	401359c <__subdf3>
 401a1e0:	ad400044 	addi	r21,r21,1
 401a1e4:	ac3fffc5 	stb	r16,-1(r21)
 401a1e8:	ac7fea1e 	bne	r21,r17,401a194 <__alt_mem_onchip_memory2_0+0xfc014fd4>
 401a1ec:	1023883a 	mov	r17,r2
 401a1f0:	d8801217 	ldw	r2,72(sp)
 401a1f4:	dc800f17 	ldw	r18,60(sp)
 401a1f8:	1829883a 	mov	r20,r3
 401a1fc:	b8af883a 	add	r23,r23,r2
 401a200:	d9001417 	ldw	r4,80(sp)
 401a204:	d9401517 	ldw	r5,84(sp)
 401a208:	000d883a 	mov	r6,zero
 401a20c:	01cff834 	movhi	r7,16352
 401a210:	401185c0 	call	401185c <__adddf3>
 401a214:	880d883a 	mov	r6,r17
 401a218:	a00f883a 	mov	r7,r20
 401a21c:	1009883a 	mov	r4,r2
 401a220:	180b883a 	mov	r5,r3
 401a224:	4012c3c0 	call	4012c3c <__ledf2>
 401a228:	10003e0e 	bge	r2,zero,401a324 <_dtoa_r+0x1548>
 401a22c:	d9001317 	ldw	r4,76(sp)
 401a230:	bd3fffc3 	ldbu	r20,-1(r23)
 401a234:	d9000515 	stw	r4,20(sp)
 401a238:	003d3b06 	br	4019728 <__alt_mem_onchip_memory2_0+0xfc014568>
 401a23c:	0027883a 	mov	r19,zero
 401a240:	003f1b06 	br	4019eb0 <__alt_mem_onchip_memory2_0+0xfc014cf0>
 401a244:	d8800817 	ldw	r2,32(sp)
 401a248:	11e9c83a 	sub	r20,r2,r7
 401a24c:	0005883a 	mov	r2,zero
 401a250:	003d5406 	br	40197a4 <__alt_mem_onchip_memory2_0+0xfc0145e4>
 401a254:	00800044 	movi	r2,1
 401a258:	003dc706 	br	4019978 <__alt_mem_onchip_memory2_0+0xfc0147b8>
 401a25c:	d8c00217 	ldw	r3,8(sp)
 401a260:	00800d84 	movi	r2,54
 401a264:	dd400a17 	ldw	r21,40(sp)
 401a268:	10c5c83a 	sub	r2,r2,r3
 401a26c:	dd000817 	ldw	r20,32(sp)
 401a270:	003d4c06 	br	40197a4 <__alt_mem_onchip_memory2_0+0xfc0145e4>
 401a274:	dc800f15 	stw	r18,60(sp)
 401a278:	dcc01015 	stw	r19,64(sp)
 401a27c:	04000084 	movi	r16,2
 401a280:	003bed06 	br	4019238 <__alt_mem_onchip_memory2_0+0xfc014078>
 401a284:	d9000617 	ldw	r4,24(sp)
 401a288:	203f0d26 	beq	r4,zero,4019ec0 <__alt_mem_onchip_memory2_0+0xfc014d00>
 401a28c:	d9800c17 	ldw	r6,48(sp)
 401a290:	01bcab0e 	bge	zero,r6,4019540 <__alt_mem_onchip_memory2_0+0xfc014380>
 401a294:	d9401017 	ldw	r5,64(sp)
 401a298:	d9000f17 	ldw	r4,60(sp)
 401a29c:	000d883a 	mov	r6,zero
 401a2a0:	01d00934 	movhi	r7,16420
 401a2a4:	4012d300 	call	4012d30 <__muldf3>
 401a2a8:	81000044 	addi	r4,r16,1
 401a2ac:	d8800f15 	stw	r2,60(sp)
 401a2b0:	d8c01015 	stw	r3,64(sp)
 401a2b4:	4013f180 	call	4013f18 <__floatsidf>
 401a2b8:	d9800f17 	ldw	r6,60(sp)
 401a2bc:	d9c01017 	ldw	r7,64(sp)
 401a2c0:	1009883a 	mov	r4,r2
 401a2c4:	180b883a 	mov	r5,r3
 401a2c8:	4012d300 	call	4012d30 <__muldf3>
 401a2cc:	01d00734 	movhi	r7,16412
 401a2d0:	000d883a 	mov	r6,zero
 401a2d4:	1009883a 	mov	r4,r2
 401a2d8:	180b883a 	mov	r5,r3
 401a2dc:	401185c0 	call	401185c <__adddf3>
 401a2e0:	d9c00517 	ldw	r7,20(sp)
 401a2e4:	047f3034 	movhi	r17,64704
 401a2e8:	1021883a 	mov	r16,r2
 401a2ec:	39ffffc4 	addi	r7,r7,-1
 401a2f0:	d9c01315 	stw	r7,76(sp)
 401a2f4:	1c63883a 	add	r17,r3,r17
 401a2f8:	db000c17 	ldw	r12,48(sp)
 401a2fc:	003bea06 	br	40192a8 <__alt_mem_onchip_memory2_0+0xfc0140e8>
 401a300:	dc000915 	stw	r16,36(sp)
 401a304:	003e0e06 	br	4019b40 <__alt_mem_onchip_memory2_0+0xfc014980>
 401a308:	01000e44 	movi	r4,57
 401a30c:	8825883a 	mov	r18,r17
 401a310:	9dc00044 	addi	r23,r19,1
 401a314:	99000005 	stb	r4,0(r19)
 401a318:	a023883a 	mov	r17,r20
 401a31c:	dc000915 	stw	r16,36(sp)
 401a320:	003da406 	br	40199b4 <__alt_mem_onchip_memory2_0+0xfc0147f4>
 401a324:	d9801417 	ldw	r6,80(sp)
 401a328:	d9c01517 	ldw	r7,84(sp)
 401a32c:	0009883a 	mov	r4,zero
 401a330:	014ff834 	movhi	r5,16352
 401a334:	401359c0 	call	401359c <__subdf3>
 401a338:	880d883a 	mov	r6,r17
 401a33c:	a00f883a 	mov	r7,r20
 401a340:	1009883a 	mov	r4,r2
 401a344:	180b883a 	mov	r5,r3
 401a348:	4012b600 	call	4012b60 <__gedf2>
 401a34c:	00bc7c0e 	bge	zero,r2,4019540 <__alt_mem_onchip_memory2_0+0xfc014380>
 401a350:	01000c04 	movi	r4,48
 401a354:	00000106 	br	401a35c <_dtoa_r+0x1580>
 401a358:	102f883a 	mov	r23,r2
 401a35c:	b8bfffc4 	addi	r2,r23,-1
 401a360:	10c00007 	ldb	r3,0(r2)
 401a364:	193ffc26 	beq	r3,r4,401a358 <__alt_mem_onchip_memory2_0+0xfc015198>
 401a368:	d9801317 	ldw	r6,76(sp)
 401a36c:	d9800515 	stw	r6,20(sp)
 401a370:	003c4406 	br	4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 401a374:	d9801317 	ldw	r6,76(sp)
 401a378:	d9800515 	stw	r6,20(sp)
 401a37c:	003cea06 	br	4019728 <__alt_mem_onchip_memory2_0+0xfc014568>
 401a380:	dd800f17 	ldw	r22,60(sp)
 401a384:	dcc01017 	ldw	r19,64(sp)
 401a388:	dc801217 	ldw	r18,72(sp)
 401a38c:	003c6c06 	br	4019540 <__alt_mem_onchip_memory2_0+0xfc014380>
 401a390:	903e031e 	bne	r18,zero,4019ba0 <__alt_mem_onchip_memory2_0+0xfc0149e0>
 401a394:	003ebb06 	br	4019e84 <__alt_mem_onchip_memory2_0+0xfc014cc4>
 401a398:	103e6c1e 	bne	r2,zero,4019d4c <__alt_mem_onchip_memory2_0+0xfc014b8c>
 401a39c:	4080004c 	andi	r2,r8,1
 401a3a0:	103e6a26 	beq	r2,zero,4019d4c <__alt_mem_onchip_memory2_0+0xfc014b8c>
 401a3a4:	003e6606 	br	4019d40 <__alt_mem_onchip_memory2_0+0xfc014b80>
 401a3a8:	d8c00317 	ldw	r3,12(sp)
 401a3ac:	00800084 	movi	r2,2
 401a3b0:	10c02916 	blt	r2,r3,401a458 <_dtoa_r+0x167c>
 401a3b4:	d9000c17 	ldw	r4,48(sp)
 401a3b8:	003e8806 	br	4019ddc <__alt_mem_onchip_memory2_0+0xfc014c1c>
 401a3bc:	04000084 	movi	r16,2
 401a3c0:	003b9d06 	br	4019238 <__alt_mem_onchip_memory2_0+0xfc014078>
 401a3c4:	d9001317 	ldw	r4,76(sp)
 401a3c8:	d9000515 	stw	r4,20(sp)
 401a3cc:	003cd606 	br	4019728 <__alt_mem_onchip_memory2_0+0xfc014568>
 401a3d0:	d8801317 	ldw	r2,76(sp)
 401a3d4:	d8800515 	stw	r2,20(sp)
 401a3d8:	003c2a06 	br	4019484 <__alt_mem_onchip_memory2_0+0xfc0142c4>
 401a3dc:	d9800317 	ldw	r6,12(sp)
 401a3e0:	00800084 	movi	r2,2
 401a3e4:	11801516 	blt	r2,r6,401a43c <_dtoa_r+0x1660>
 401a3e8:	d9c00c17 	ldw	r7,48(sp)
 401a3ec:	d9c00615 	stw	r7,24(sp)
 401a3f0:	003df706 	br	4019bd0 <__alt_mem_onchip_memory2_0+0xfc014a10>
 401a3f4:	193d3926 	beq	r3,r4,40198dc <__alt_mem_onchip_memory2_0+0xfc01471c>
 401a3f8:	00c00f04 	movi	r3,60
 401a3fc:	1885c83a 	sub	r2,r3,r2
 401a400:	003ddf06 	br	4019b80 <__alt_mem_onchip_memory2_0+0xfc0149c0>
 401a404:	e009883a 	mov	r4,fp
 401a408:	e0001115 	stw	zero,68(fp)
 401a40c:	000b883a 	mov	r5,zero
 401a410:	401c4f00 	call	401c4f0 <_Balloc>
 401a414:	d8800715 	stw	r2,28(sp)
 401a418:	d8c00717 	ldw	r3,28(sp)
 401a41c:	00bfffc4 	movi	r2,-1
 401a420:	01000044 	movi	r4,1
 401a424:	d8800c15 	stw	r2,48(sp)
 401a428:	e0c01015 	stw	r3,64(fp)
 401a42c:	d9000b15 	stw	r4,44(sp)
 401a430:	d8800615 	stw	r2,24(sp)
 401a434:	d8002215 	stw	zero,136(sp)
 401a438:	003c4106 	br	4019540 <__alt_mem_onchip_memory2_0+0xfc014380>
 401a43c:	d8c00c17 	ldw	r3,48(sp)
 401a440:	d8c00615 	stw	r3,24(sp)
 401a444:	003e7006 	br	4019e08 <__alt_mem_onchip_memory2_0+0xfc014c48>
 401a448:	04400044 	movi	r17,1
 401a44c:	003b2006 	br	40190d0 <__alt_mem_onchip_memory2_0+0xfc013f10>
 401a450:	000b883a 	mov	r5,zero
 401a454:	003b3d06 	br	401914c <__alt_mem_onchip_memory2_0+0xfc013f8c>
 401a458:	d8800c17 	ldw	r2,48(sp)
 401a45c:	d8800615 	stw	r2,24(sp)
 401a460:	003e6906 	br	4019e08 <__alt_mem_onchip_memory2_0+0xfc014c48>

0401a464 <__sflush_r>:
 401a464:	2880030b 	ldhu	r2,12(r5)
 401a468:	defffb04 	addi	sp,sp,-20
 401a46c:	dcc00315 	stw	r19,12(sp)
 401a470:	dc400115 	stw	r17,4(sp)
 401a474:	dfc00415 	stw	ra,16(sp)
 401a478:	dc800215 	stw	r18,8(sp)
 401a47c:	dc000015 	stw	r16,0(sp)
 401a480:	10c0020c 	andi	r3,r2,8
 401a484:	2823883a 	mov	r17,r5
 401a488:	2027883a 	mov	r19,r4
 401a48c:	1800311e 	bne	r3,zero,401a554 <__sflush_r+0xf0>
 401a490:	28c00117 	ldw	r3,4(r5)
 401a494:	10820014 	ori	r2,r2,2048
 401a498:	2880030d 	sth	r2,12(r5)
 401a49c:	00c04b0e 	bge	zero,r3,401a5cc <__sflush_r+0x168>
 401a4a0:	8a000a17 	ldw	r8,40(r17)
 401a4a4:	40002326 	beq	r8,zero,401a534 <__sflush_r+0xd0>
 401a4a8:	9c000017 	ldw	r16,0(r19)
 401a4ac:	10c4000c 	andi	r3,r2,4096
 401a4b0:	98000015 	stw	zero,0(r19)
 401a4b4:	18004826 	beq	r3,zero,401a5d8 <__sflush_r+0x174>
 401a4b8:	89801417 	ldw	r6,80(r17)
 401a4bc:	10c0010c 	andi	r3,r2,4
 401a4c0:	18000626 	beq	r3,zero,401a4dc <__sflush_r+0x78>
 401a4c4:	88c00117 	ldw	r3,4(r17)
 401a4c8:	88800c17 	ldw	r2,48(r17)
 401a4cc:	30cdc83a 	sub	r6,r6,r3
 401a4d0:	10000226 	beq	r2,zero,401a4dc <__sflush_r+0x78>
 401a4d4:	88800f17 	ldw	r2,60(r17)
 401a4d8:	308dc83a 	sub	r6,r6,r2
 401a4dc:	89400717 	ldw	r5,28(r17)
 401a4e0:	000f883a 	mov	r7,zero
 401a4e4:	9809883a 	mov	r4,r19
 401a4e8:	403ee83a 	callr	r8
 401a4ec:	00ffffc4 	movi	r3,-1
 401a4f0:	10c04426 	beq	r2,r3,401a604 <__sflush_r+0x1a0>
 401a4f4:	88c0030b 	ldhu	r3,12(r17)
 401a4f8:	89000417 	ldw	r4,16(r17)
 401a4fc:	88000115 	stw	zero,4(r17)
 401a500:	197dffcc 	andi	r5,r3,63487
 401a504:	8940030d 	sth	r5,12(r17)
 401a508:	89000015 	stw	r4,0(r17)
 401a50c:	18c4000c 	andi	r3,r3,4096
 401a510:	18002c1e 	bne	r3,zero,401a5c4 <__sflush_r+0x160>
 401a514:	89400c17 	ldw	r5,48(r17)
 401a518:	9c000015 	stw	r16,0(r19)
 401a51c:	28000526 	beq	r5,zero,401a534 <__sflush_r+0xd0>
 401a520:	88801004 	addi	r2,r17,64
 401a524:	28800226 	beq	r5,r2,401a530 <__sflush_r+0xcc>
 401a528:	9809883a 	mov	r4,r19
 401a52c:	401abe00 	call	401abe0 <_free_r>
 401a530:	88000c15 	stw	zero,48(r17)
 401a534:	0005883a 	mov	r2,zero
 401a538:	dfc00417 	ldw	ra,16(sp)
 401a53c:	dcc00317 	ldw	r19,12(sp)
 401a540:	dc800217 	ldw	r18,8(sp)
 401a544:	dc400117 	ldw	r17,4(sp)
 401a548:	dc000017 	ldw	r16,0(sp)
 401a54c:	dec00504 	addi	sp,sp,20
 401a550:	f800283a 	ret
 401a554:	2c800417 	ldw	r18,16(r5)
 401a558:	903ff626 	beq	r18,zero,401a534 <__alt_mem_onchip_memory2_0+0xfc015374>
 401a55c:	2c000017 	ldw	r16,0(r5)
 401a560:	108000cc 	andi	r2,r2,3
 401a564:	2c800015 	stw	r18,0(r5)
 401a568:	84a1c83a 	sub	r16,r16,r18
 401a56c:	1000131e 	bne	r2,zero,401a5bc <__sflush_r+0x158>
 401a570:	28800517 	ldw	r2,20(r5)
 401a574:	88800215 	stw	r2,8(r17)
 401a578:	04000316 	blt	zero,r16,401a588 <__sflush_r+0x124>
 401a57c:	003fed06 	br	401a534 <__alt_mem_onchip_memory2_0+0xfc015374>
 401a580:	90a5883a 	add	r18,r18,r2
 401a584:	043feb0e 	bge	zero,r16,401a534 <__alt_mem_onchip_memory2_0+0xfc015374>
 401a588:	88800917 	ldw	r2,36(r17)
 401a58c:	89400717 	ldw	r5,28(r17)
 401a590:	800f883a 	mov	r7,r16
 401a594:	900d883a 	mov	r6,r18
 401a598:	9809883a 	mov	r4,r19
 401a59c:	103ee83a 	callr	r2
 401a5a0:	80a1c83a 	sub	r16,r16,r2
 401a5a4:	00bff616 	blt	zero,r2,401a580 <__alt_mem_onchip_memory2_0+0xfc0153c0>
 401a5a8:	88c0030b 	ldhu	r3,12(r17)
 401a5ac:	00bfffc4 	movi	r2,-1
 401a5b0:	18c01014 	ori	r3,r3,64
 401a5b4:	88c0030d 	sth	r3,12(r17)
 401a5b8:	003fdf06 	br	401a538 <__alt_mem_onchip_memory2_0+0xfc015378>
 401a5bc:	0005883a 	mov	r2,zero
 401a5c0:	003fec06 	br	401a574 <__alt_mem_onchip_memory2_0+0xfc0153b4>
 401a5c4:	88801415 	stw	r2,80(r17)
 401a5c8:	003fd206 	br	401a514 <__alt_mem_onchip_memory2_0+0xfc015354>
 401a5cc:	28c00f17 	ldw	r3,60(r5)
 401a5d0:	00ffb316 	blt	zero,r3,401a4a0 <__alt_mem_onchip_memory2_0+0xfc0152e0>
 401a5d4:	003fd706 	br	401a534 <__alt_mem_onchip_memory2_0+0xfc015374>
 401a5d8:	89400717 	ldw	r5,28(r17)
 401a5dc:	000d883a 	mov	r6,zero
 401a5e0:	01c00044 	movi	r7,1
 401a5e4:	9809883a 	mov	r4,r19
 401a5e8:	403ee83a 	callr	r8
 401a5ec:	100d883a 	mov	r6,r2
 401a5f0:	00bfffc4 	movi	r2,-1
 401a5f4:	30801426 	beq	r6,r2,401a648 <__sflush_r+0x1e4>
 401a5f8:	8880030b 	ldhu	r2,12(r17)
 401a5fc:	8a000a17 	ldw	r8,40(r17)
 401a600:	003fae06 	br	401a4bc <__alt_mem_onchip_memory2_0+0xfc0152fc>
 401a604:	98c00017 	ldw	r3,0(r19)
 401a608:	183fba26 	beq	r3,zero,401a4f4 <__alt_mem_onchip_memory2_0+0xfc015334>
 401a60c:	01000744 	movi	r4,29
 401a610:	19000626 	beq	r3,r4,401a62c <__sflush_r+0x1c8>
 401a614:	01000584 	movi	r4,22
 401a618:	19000426 	beq	r3,r4,401a62c <__sflush_r+0x1c8>
 401a61c:	88c0030b 	ldhu	r3,12(r17)
 401a620:	18c01014 	ori	r3,r3,64
 401a624:	88c0030d 	sth	r3,12(r17)
 401a628:	003fc306 	br	401a538 <__alt_mem_onchip_memory2_0+0xfc015378>
 401a62c:	8880030b 	ldhu	r2,12(r17)
 401a630:	88c00417 	ldw	r3,16(r17)
 401a634:	88000115 	stw	zero,4(r17)
 401a638:	10bdffcc 	andi	r2,r2,63487
 401a63c:	8880030d 	sth	r2,12(r17)
 401a640:	88c00015 	stw	r3,0(r17)
 401a644:	003fb306 	br	401a514 <__alt_mem_onchip_memory2_0+0xfc015354>
 401a648:	98800017 	ldw	r2,0(r19)
 401a64c:	103fea26 	beq	r2,zero,401a5f8 <__alt_mem_onchip_memory2_0+0xfc015438>
 401a650:	00c00744 	movi	r3,29
 401a654:	10c00226 	beq	r2,r3,401a660 <__sflush_r+0x1fc>
 401a658:	00c00584 	movi	r3,22
 401a65c:	10c0031e 	bne	r2,r3,401a66c <__sflush_r+0x208>
 401a660:	9c000015 	stw	r16,0(r19)
 401a664:	0005883a 	mov	r2,zero
 401a668:	003fb306 	br	401a538 <__alt_mem_onchip_memory2_0+0xfc015378>
 401a66c:	88c0030b 	ldhu	r3,12(r17)
 401a670:	3005883a 	mov	r2,r6
 401a674:	18c01014 	ori	r3,r3,64
 401a678:	88c0030d 	sth	r3,12(r17)
 401a67c:	003fae06 	br	401a538 <__alt_mem_onchip_memory2_0+0xfc015378>

0401a680 <_fflush_r>:
 401a680:	defffd04 	addi	sp,sp,-12
 401a684:	dc000115 	stw	r16,4(sp)
 401a688:	dfc00215 	stw	ra,8(sp)
 401a68c:	2021883a 	mov	r16,r4
 401a690:	20000226 	beq	r4,zero,401a69c <_fflush_r+0x1c>
 401a694:	20800e17 	ldw	r2,56(r4)
 401a698:	10000c26 	beq	r2,zero,401a6cc <_fflush_r+0x4c>
 401a69c:	2880030f 	ldh	r2,12(r5)
 401a6a0:	1000051e 	bne	r2,zero,401a6b8 <_fflush_r+0x38>
 401a6a4:	0005883a 	mov	r2,zero
 401a6a8:	dfc00217 	ldw	ra,8(sp)
 401a6ac:	dc000117 	ldw	r16,4(sp)
 401a6b0:	dec00304 	addi	sp,sp,12
 401a6b4:	f800283a 	ret
 401a6b8:	8009883a 	mov	r4,r16
 401a6bc:	dfc00217 	ldw	ra,8(sp)
 401a6c0:	dc000117 	ldw	r16,4(sp)
 401a6c4:	dec00304 	addi	sp,sp,12
 401a6c8:	401a4641 	jmpi	401a464 <__sflush_r>
 401a6cc:	d9400015 	stw	r5,0(sp)
 401a6d0:	401aa6c0 	call	401aa6c <__sinit>
 401a6d4:	d9400017 	ldw	r5,0(sp)
 401a6d8:	003ff006 	br	401a69c <__alt_mem_onchip_memory2_0+0xfc0154dc>

0401a6dc <fflush>:
 401a6dc:	20000526 	beq	r4,zero,401a6f4 <fflush+0x18>
 401a6e0:	008100b4 	movhi	r2,1026
 401a6e4:	109ddd04 	addi	r2,r2,30580
 401a6e8:	200b883a 	mov	r5,r4
 401a6ec:	11000017 	ldw	r4,0(r2)
 401a6f0:	401a6801 	jmpi	401a680 <_fflush_r>
 401a6f4:	008100b4 	movhi	r2,1026
 401a6f8:	109ddc04 	addi	r2,r2,30576
 401a6fc:	11000017 	ldw	r4,0(r2)
 401a700:	014100b4 	movhi	r5,1026
 401a704:	2969a004 	addi	r5,r5,-22912
 401a708:	401b47c1 	jmpi	401b47c <_fwalk_reent>

0401a70c <__fp_unlock>:
 401a70c:	0005883a 	mov	r2,zero
 401a710:	f800283a 	ret

0401a714 <_cleanup_r>:
 401a714:	014100b4 	movhi	r5,1026
 401a718:	29438c04 	addi	r5,r5,3632
 401a71c:	401b47c1 	jmpi	401b47c <_fwalk_reent>

0401a720 <__sinit.part.1>:
 401a720:	defff704 	addi	sp,sp,-36
 401a724:	00c100b4 	movhi	r3,1026
 401a728:	dfc00815 	stw	ra,32(sp)
 401a72c:	ddc00715 	stw	r23,28(sp)
 401a730:	dd800615 	stw	r22,24(sp)
 401a734:	dd400515 	stw	r21,20(sp)
 401a738:	dd000415 	stw	r20,16(sp)
 401a73c:	dcc00315 	stw	r19,12(sp)
 401a740:	dc800215 	stw	r18,8(sp)
 401a744:	dc400115 	stw	r17,4(sp)
 401a748:	dc000015 	stw	r16,0(sp)
 401a74c:	18e9c504 	addi	r3,r3,-22764
 401a750:	24000117 	ldw	r16,4(r4)
 401a754:	20c00f15 	stw	r3,60(r4)
 401a758:	2080bb04 	addi	r2,r4,748
 401a75c:	00c000c4 	movi	r3,3
 401a760:	20c0b915 	stw	r3,740(r4)
 401a764:	2080ba15 	stw	r2,744(r4)
 401a768:	2000b815 	stw	zero,736(r4)
 401a76c:	05c00204 	movi	r23,8
 401a770:	00800104 	movi	r2,4
 401a774:	2025883a 	mov	r18,r4
 401a778:	b80d883a 	mov	r6,r23
 401a77c:	81001704 	addi	r4,r16,92
 401a780:	000b883a 	mov	r5,zero
 401a784:	80000015 	stw	zero,0(r16)
 401a788:	80000115 	stw	zero,4(r16)
 401a78c:	80000215 	stw	zero,8(r16)
 401a790:	8080030d 	sth	r2,12(r16)
 401a794:	80001915 	stw	zero,100(r16)
 401a798:	8000038d 	sth	zero,14(r16)
 401a79c:	80000415 	stw	zero,16(r16)
 401a7a0:	80000515 	stw	zero,20(r16)
 401a7a4:	80000615 	stw	zero,24(r16)
 401a7a8:	401c3c80 	call	401c3c8 <memset>
 401a7ac:	058100b4 	movhi	r22,1026
 401a7b0:	94400217 	ldw	r17,8(r18)
 401a7b4:	054100b4 	movhi	r21,1026
 401a7b8:	050100b4 	movhi	r20,1026
 401a7bc:	04c100b4 	movhi	r19,1026
 401a7c0:	b5b73204 	addi	r22,r22,-9016
 401a7c4:	ad774904 	addi	r21,r21,-8924
 401a7c8:	a5376804 	addi	r20,r20,-8800
 401a7cc:	9cf77f04 	addi	r19,r19,-8708
 401a7d0:	85800815 	stw	r22,32(r16)
 401a7d4:	85400915 	stw	r21,36(r16)
 401a7d8:	85000a15 	stw	r20,40(r16)
 401a7dc:	84c00b15 	stw	r19,44(r16)
 401a7e0:	84000715 	stw	r16,28(r16)
 401a7e4:	00800284 	movi	r2,10
 401a7e8:	8880030d 	sth	r2,12(r17)
 401a7ec:	00800044 	movi	r2,1
 401a7f0:	b80d883a 	mov	r6,r23
 401a7f4:	89001704 	addi	r4,r17,92
 401a7f8:	000b883a 	mov	r5,zero
 401a7fc:	88000015 	stw	zero,0(r17)
 401a800:	88000115 	stw	zero,4(r17)
 401a804:	88000215 	stw	zero,8(r17)
 401a808:	88001915 	stw	zero,100(r17)
 401a80c:	8880038d 	sth	r2,14(r17)
 401a810:	88000415 	stw	zero,16(r17)
 401a814:	88000515 	stw	zero,20(r17)
 401a818:	88000615 	stw	zero,24(r17)
 401a81c:	401c3c80 	call	401c3c8 <memset>
 401a820:	94000317 	ldw	r16,12(r18)
 401a824:	00800484 	movi	r2,18
 401a828:	8c400715 	stw	r17,28(r17)
 401a82c:	8d800815 	stw	r22,32(r17)
 401a830:	8d400915 	stw	r21,36(r17)
 401a834:	8d000a15 	stw	r20,40(r17)
 401a838:	8cc00b15 	stw	r19,44(r17)
 401a83c:	8080030d 	sth	r2,12(r16)
 401a840:	00800084 	movi	r2,2
 401a844:	80000015 	stw	zero,0(r16)
 401a848:	80000115 	stw	zero,4(r16)
 401a84c:	80000215 	stw	zero,8(r16)
 401a850:	80001915 	stw	zero,100(r16)
 401a854:	8080038d 	sth	r2,14(r16)
 401a858:	80000415 	stw	zero,16(r16)
 401a85c:	80000515 	stw	zero,20(r16)
 401a860:	80000615 	stw	zero,24(r16)
 401a864:	b80d883a 	mov	r6,r23
 401a868:	000b883a 	mov	r5,zero
 401a86c:	81001704 	addi	r4,r16,92
 401a870:	401c3c80 	call	401c3c8 <memset>
 401a874:	00800044 	movi	r2,1
 401a878:	84000715 	stw	r16,28(r16)
 401a87c:	85800815 	stw	r22,32(r16)
 401a880:	85400915 	stw	r21,36(r16)
 401a884:	85000a15 	stw	r20,40(r16)
 401a888:	84c00b15 	stw	r19,44(r16)
 401a88c:	90800e15 	stw	r2,56(r18)
 401a890:	dfc00817 	ldw	ra,32(sp)
 401a894:	ddc00717 	ldw	r23,28(sp)
 401a898:	dd800617 	ldw	r22,24(sp)
 401a89c:	dd400517 	ldw	r21,20(sp)
 401a8a0:	dd000417 	ldw	r20,16(sp)
 401a8a4:	dcc00317 	ldw	r19,12(sp)
 401a8a8:	dc800217 	ldw	r18,8(sp)
 401a8ac:	dc400117 	ldw	r17,4(sp)
 401a8b0:	dc000017 	ldw	r16,0(sp)
 401a8b4:	dec00904 	addi	sp,sp,36
 401a8b8:	f800283a 	ret

0401a8bc <__fp_lock>:
 401a8bc:	0005883a 	mov	r2,zero
 401a8c0:	f800283a 	ret

0401a8c4 <__sfmoreglue>:
 401a8c4:	defffc04 	addi	sp,sp,-16
 401a8c8:	dc800215 	stw	r18,8(sp)
 401a8cc:	2825883a 	mov	r18,r5
 401a8d0:	dc000015 	stw	r16,0(sp)
 401a8d4:	01401a04 	movi	r5,104
 401a8d8:	2021883a 	mov	r16,r4
 401a8dc:	913fffc4 	addi	r4,r18,-1
 401a8e0:	dfc00315 	stw	ra,12(sp)
 401a8e4:	dc400115 	stw	r17,4(sp)
 401a8e8:	40118340 	call	4011834 <__mulsi3>
 401a8ec:	8009883a 	mov	r4,r16
 401a8f0:	11401d04 	addi	r5,r2,116
 401a8f4:	1023883a 	mov	r17,r2
 401a8f8:	401b8340 	call	401b834 <_malloc_r>
 401a8fc:	1021883a 	mov	r16,r2
 401a900:	10000726 	beq	r2,zero,401a920 <__sfmoreglue+0x5c>
 401a904:	11000304 	addi	r4,r2,12
 401a908:	10000015 	stw	zero,0(r2)
 401a90c:	14800115 	stw	r18,4(r2)
 401a910:	11000215 	stw	r4,8(r2)
 401a914:	89801a04 	addi	r6,r17,104
 401a918:	000b883a 	mov	r5,zero
 401a91c:	401c3c80 	call	401c3c8 <memset>
 401a920:	8005883a 	mov	r2,r16
 401a924:	dfc00317 	ldw	ra,12(sp)
 401a928:	dc800217 	ldw	r18,8(sp)
 401a92c:	dc400117 	ldw	r17,4(sp)
 401a930:	dc000017 	ldw	r16,0(sp)
 401a934:	dec00404 	addi	sp,sp,16
 401a938:	f800283a 	ret

0401a93c <__sfp>:
 401a93c:	defffb04 	addi	sp,sp,-20
 401a940:	dc000015 	stw	r16,0(sp)
 401a944:	040100b4 	movhi	r16,1026
 401a948:	841ddc04 	addi	r16,r16,30576
 401a94c:	dcc00315 	stw	r19,12(sp)
 401a950:	2027883a 	mov	r19,r4
 401a954:	81000017 	ldw	r4,0(r16)
 401a958:	dfc00415 	stw	ra,16(sp)
 401a95c:	dc800215 	stw	r18,8(sp)
 401a960:	20800e17 	ldw	r2,56(r4)
 401a964:	dc400115 	stw	r17,4(sp)
 401a968:	1000021e 	bne	r2,zero,401a974 <__sfp+0x38>
 401a96c:	401a7200 	call	401a720 <__sinit.part.1>
 401a970:	81000017 	ldw	r4,0(r16)
 401a974:	2480b804 	addi	r18,r4,736
 401a978:	047fffc4 	movi	r17,-1
 401a97c:	91000117 	ldw	r4,4(r18)
 401a980:	94000217 	ldw	r16,8(r18)
 401a984:	213fffc4 	addi	r4,r4,-1
 401a988:	20000a16 	blt	r4,zero,401a9b4 <__sfp+0x78>
 401a98c:	8080030f 	ldh	r2,12(r16)
 401a990:	10000c26 	beq	r2,zero,401a9c4 <__sfp+0x88>
 401a994:	80c01d04 	addi	r3,r16,116
 401a998:	00000206 	br	401a9a4 <__sfp+0x68>
 401a99c:	18bfe60f 	ldh	r2,-104(r3)
 401a9a0:	10000826 	beq	r2,zero,401a9c4 <__sfp+0x88>
 401a9a4:	213fffc4 	addi	r4,r4,-1
 401a9a8:	1c3ffd04 	addi	r16,r3,-12
 401a9ac:	18c01a04 	addi	r3,r3,104
 401a9b0:	247ffa1e 	bne	r4,r17,401a99c <__alt_mem_onchip_memory2_0+0xfc0157dc>
 401a9b4:	90800017 	ldw	r2,0(r18)
 401a9b8:	10001d26 	beq	r2,zero,401aa30 <__sfp+0xf4>
 401a9bc:	1025883a 	mov	r18,r2
 401a9c0:	003fee06 	br	401a97c <__alt_mem_onchip_memory2_0+0xfc0157bc>
 401a9c4:	00bfffc4 	movi	r2,-1
 401a9c8:	8080038d 	sth	r2,14(r16)
 401a9cc:	00800044 	movi	r2,1
 401a9d0:	8080030d 	sth	r2,12(r16)
 401a9d4:	80001915 	stw	zero,100(r16)
 401a9d8:	80000015 	stw	zero,0(r16)
 401a9dc:	80000215 	stw	zero,8(r16)
 401a9e0:	80000115 	stw	zero,4(r16)
 401a9e4:	80000415 	stw	zero,16(r16)
 401a9e8:	80000515 	stw	zero,20(r16)
 401a9ec:	80000615 	stw	zero,24(r16)
 401a9f0:	01800204 	movi	r6,8
 401a9f4:	000b883a 	mov	r5,zero
 401a9f8:	81001704 	addi	r4,r16,92
 401a9fc:	401c3c80 	call	401c3c8 <memset>
 401aa00:	8005883a 	mov	r2,r16
 401aa04:	80000c15 	stw	zero,48(r16)
 401aa08:	80000d15 	stw	zero,52(r16)
 401aa0c:	80001115 	stw	zero,68(r16)
 401aa10:	80001215 	stw	zero,72(r16)
 401aa14:	dfc00417 	ldw	ra,16(sp)
 401aa18:	dcc00317 	ldw	r19,12(sp)
 401aa1c:	dc800217 	ldw	r18,8(sp)
 401aa20:	dc400117 	ldw	r17,4(sp)
 401aa24:	dc000017 	ldw	r16,0(sp)
 401aa28:	dec00504 	addi	sp,sp,20
 401aa2c:	f800283a 	ret
 401aa30:	01400104 	movi	r5,4
 401aa34:	9809883a 	mov	r4,r19
 401aa38:	401a8c40 	call	401a8c4 <__sfmoreglue>
 401aa3c:	90800015 	stw	r2,0(r18)
 401aa40:	103fde1e 	bne	r2,zero,401a9bc <__alt_mem_onchip_memory2_0+0xfc0157fc>
 401aa44:	00800304 	movi	r2,12
 401aa48:	98800015 	stw	r2,0(r19)
 401aa4c:	0005883a 	mov	r2,zero
 401aa50:	003ff006 	br	401aa14 <__alt_mem_onchip_memory2_0+0xfc015854>

0401aa54 <_cleanup>:
 401aa54:	008100b4 	movhi	r2,1026
 401aa58:	109ddc04 	addi	r2,r2,30576
 401aa5c:	11000017 	ldw	r4,0(r2)
 401aa60:	014100b4 	movhi	r5,1026
 401aa64:	29438c04 	addi	r5,r5,3632
 401aa68:	401b47c1 	jmpi	401b47c <_fwalk_reent>

0401aa6c <__sinit>:
 401aa6c:	20800e17 	ldw	r2,56(r4)
 401aa70:	10000126 	beq	r2,zero,401aa78 <__sinit+0xc>
 401aa74:	f800283a 	ret
 401aa78:	401a7201 	jmpi	401a720 <__sinit.part.1>

0401aa7c <__sfp_lock_acquire>:
 401aa7c:	f800283a 	ret

0401aa80 <__sfp_lock_release>:
 401aa80:	f800283a 	ret

0401aa84 <__sinit_lock_acquire>:
 401aa84:	f800283a 	ret

0401aa88 <__sinit_lock_release>:
 401aa88:	f800283a 	ret

0401aa8c <__fp_lock_all>:
 401aa8c:	008100b4 	movhi	r2,1026
 401aa90:	109ddd04 	addi	r2,r2,30580
 401aa94:	11000017 	ldw	r4,0(r2)
 401aa98:	014100b4 	movhi	r5,1026
 401aa9c:	296a2f04 	addi	r5,r5,-22340
 401aaa0:	401b3b81 	jmpi	401b3b8 <_fwalk>

0401aaa4 <__fp_unlock_all>:
 401aaa4:	008100b4 	movhi	r2,1026
 401aaa8:	109ddd04 	addi	r2,r2,30580
 401aaac:	11000017 	ldw	r4,0(r2)
 401aab0:	014100b4 	movhi	r5,1026
 401aab4:	2969c304 	addi	r5,r5,-22772
 401aab8:	401b3b81 	jmpi	401b3b8 <_fwalk>

0401aabc <_malloc_trim_r>:
 401aabc:	defffb04 	addi	sp,sp,-20
 401aac0:	dcc00315 	stw	r19,12(sp)
 401aac4:	04c100b4 	movhi	r19,1026
 401aac8:	dc800215 	stw	r18,8(sp)
 401aacc:	dc400115 	stw	r17,4(sp)
 401aad0:	dc000015 	stw	r16,0(sp)
 401aad4:	dfc00415 	stw	ra,16(sp)
 401aad8:	2821883a 	mov	r16,r5
 401aadc:	9cd85004 	addi	r19,r19,24896
 401aae0:	2025883a 	mov	r18,r4
 401aae4:	40229980 	call	4022998 <__malloc_lock>
 401aae8:	98800217 	ldw	r2,8(r19)
 401aaec:	14400117 	ldw	r17,4(r2)
 401aaf0:	00bfff04 	movi	r2,-4
 401aaf4:	88a2703a 	and	r17,r17,r2
 401aaf8:	8c21c83a 	sub	r16,r17,r16
 401aafc:	8403fbc4 	addi	r16,r16,4079
 401ab00:	8020d33a 	srli	r16,r16,12
 401ab04:	0083ffc4 	movi	r2,4095
 401ab08:	843fffc4 	addi	r16,r16,-1
 401ab0c:	8020933a 	slli	r16,r16,12
 401ab10:	1400060e 	bge	r2,r16,401ab2c <_malloc_trim_r+0x70>
 401ab14:	000b883a 	mov	r5,zero
 401ab18:	9009883a 	mov	r4,r18
 401ab1c:	401dc740 	call	401dc74 <_sbrk_r>
 401ab20:	98c00217 	ldw	r3,8(r19)
 401ab24:	1c47883a 	add	r3,r3,r17
 401ab28:	10c00a26 	beq	r2,r3,401ab54 <_malloc_trim_r+0x98>
 401ab2c:	9009883a 	mov	r4,r18
 401ab30:	40229bc0 	call	40229bc <__malloc_unlock>
 401ab34:	0005883a 	mov	r2,zero
 401ab38:	dfc00417 	ldw	ra,16(sp)
 401ab3c:	dcc00317 	ldw	r19,12(sp)
 401ab40:	dc800217 	ldw	r18,8(sp)
 401ab44:	dc400117 	ldw	r17,4(sp)
 401ab48:	dc000017 	ldw	r16,0(sp)
 401ab4c:	dec00504 	addi	sp,sp,20
 401ab50:	f800283a 	ret
 401ab54:	040bc83a 	sub	r5,zero,r16
 401ab58:	9009883a 	mov	r4,r18
 401ab5c:	401dc740 	call	401dc74 <_sbrk_r>
 401ab60:	00ffffc4 	movi	r3,-1
 401ab64:	10c00d26 	beq	r2,r3,401ab9c <_malloc_trim_r+0xe0>
 401ab68:	00c100f4 	movhi	r3,1027
 401ab6c:	18e5fa04 	addi	r3,r3,-26648
 401ab70:	18800017 	ldw	r2,0(r3)
 401ab74:	99000217 	ldw	r4,8(r19)
 401ab78:	8c23c83a 	sub	r17,r17,r16
 401ab7c:	8c400054 	ori	r17,r17,1
 401ab80:	1421c83a 	sub	r16,r2,r16
 401ab84:	24400115 	stw	r17,4(r4)
 401ab88:	9009883a 	mov	r4,r18
 401ab8c:	1c000015 	stw	r16,0(r3)
 401ab90:	40229bc0 	call	40229bc <__malloc_unlock>
 401ab94:	00800044 	movi	r2,1
 401ab98:	003fe706 	br	401ab38 <__alt_mem_onchip_memory2_0+0xfc015978>
 401ab9c:	000b883a 	mov	r5,zero
 401aba0:	9009883a 	mov	r4,r18
 401aba4:	401dc740 	call	401dc74 <_sbrk_r>
 401aba8:	99000217 	ldw	r4,8(r19)
 401abac:	014003c4 	movi	r5,15
 401abb0:	1107c83a 	sub	r3,r2,r4
 401abb4:	28ffdd0e 	bge	r5,r3,401ab2c <__alt_mem_onchip_memory2_0+0xfc01596c>
 401abb8:	014100b4 	movhi	r5,1026
 401abbc:	295ddf04 	addi	r5,r5,30588
 401abc0:	29400017 	ldw	r5,0(r5)
 401abc4:	18c00054 	ori	r3,r3,1
 401abc8:	20c00115 	stw	r3,4(r4)
 401abcc:	00c100f4 	movhi	r3,1027
 401abd0:	1145c83a 	sub	r2,r2,r5
 401abd4:	18e5fa04 	addi	r3,r3,-26648
 401abd8:	18800015 	stw	r2,0(r3)
 401abdc:	003fd306 	br	401ab2c <__alt_mem_onchip_memory2_0+0xfc01596c>

0401abe0 <_free_r>:
 401abe0:	28004126 	beq	r5,zero,401ace8 <_free_r+0x108>
 401abe4:	defffd04 	addi	sp,sp,-12
 401abe8:	dc400115 	stw	r17,4(sp)
 401abec:	dc000015 	stw	r16,0(sp)
 401abf0:	2023883a 	mov	r17,r4
 401abf4:	2821883a 	mov	r16,r5
 401abf8:	dfc00215 	stw	ra,8(sp)
 401abfc:	40229980 	call	4022998 <__malloc_lock>
 401ac00:	81ffff17 	ldw	r7,-4(r16)
 401ac04:	00bfff84 	movi	r2,-2
 401ac08:	010100b4 	movhi	r4,1026
 401ac0c:	81bffe04 	addi	r6,r16,-8
 401ac10:	3884703a 	and	r2,r7,r2
 401ac14:	21185004 	addi	r4,r4,24896
 401ac18:	308b883a 	add	r5,r6,r2
 401ac1c:	2a400117 	ldw	r9,4(r5)
 401ac20:	22000217 	ldw	r8,8(r4)
 401ac24:	00ffff04 	movi	r3,-4
 401ac28:	48c6703a 	and	r3,r9,r3
 401ac2c:	2a005726 	beq	r5,r8,401ad8c <_free_r+0x1ac>
 401ac30:	28c00115 	stw	r3,4(r5)
 401ac34:	39c0004c 	andi	r7,r7,1
 401ac38:	3800091e 	bne	r7,zero,401ac60 <_free_r+0x80>
 401ac3c:	823ffe17 	ldw	r8,-8(r16)
 401ac40:	22400204 	addi	r9,r4,8
 401ac44:	320dc83a 	sub	r6,r6,r8
 401ac48:	31c00217 	ldw	r7,8(r6)
 401ac4c:	1205883a 	add	r2,r2,r8
 401ac50:	3a406526 	beq	r7,r9,401ade8 <_free_r+0x208>
 401ac54:	32000317 	ldw	r8,12(r6)
 401ac58:	3a000315 	stw	r8,12(r7)
 401ac5c:	41c00215 	stw	r7,8(r8)
 401ac60:	28cf883a 	add	r7,r5,r3
 401ac64:	39c00117 	ldw	r7,4(r7)
 401ac68:	39c0004c 	andi	r7,r7,1
 401ac6c:	38003a26 	beq	r7,zero,401ad58 <_free_r+0x178>
 401ac70:	10c00054 	ori	r3,r2,1
 401ac74:	30c00115 	stw	r3,4(r6)
 401ac78:	3087883a 	add	r3,r6,r2
 401ac7c:	18800015 	stw	r2,0(r3)
 401ac80:	00c07fc4 	movi	r3,511
 401ac84:	18801936 	bltu	r3,r2,401acec <_free_r+0x10c>
 401ac88:	1004d0fa 	srli	r2,r2,3
 401ac8c:	01c00044 	movi	r7,1
 401ac90:	21400117 	ldw	r5,4(r4)
 401ac94:	10c00044 	addi	r3,r2,1
 401ac98:	18c7883a 	add	r3,r3,r3
 401ac9c:	1005d0ba 	srai	r2,r2,2
 401aca0:	18c7883a 	add	r3,r3,r3
 401aca4:	18c7883a 	add	r3,r3,r3
 401aca8:	1907883a 	add	r3,r3,r4
 401acac:	3884983a 	sll	r2,r7,r2
 401acb0:	19c00017 	ldw	r7,0(r3)
 401acb4:	1a3ffe04 	addi	r8,r3,-8
 401acb8:	1144b03a 	or	r2,r2,r5
 401acbc:	32000315 	stw	r8,12(r6)
 401acc0:	31c00215 	stw	r7,8(r6)
 401acc4:	20800115 	stw	r2,4(r4)
 401acc8:	19800015 	stw	r6,0(r3)
 401accc:	39800315 	stw	r6,12(r7)
 401acd0:	8809883a 	mov	r4,r17
 401acd4:	dfc00217 	ldw	ra,8(sp)
 401acd8:	dc400117 	ldw	r17,4(sp)
 401acdc:	dc000017 	ldw	r16,0(sp)
 401ace0:	dec00304 	addi	sp,sp,12
 401ace4:	40229bc1 	jmpi	40229bc <__malloc_unlock>
 401ace8:	f800283a 	ret
 401acec:	100ad27a 	srli	r5,r2,9
 401acf0:	00c00104 	movi	r3,4
 401acf4:	19404a36 	bltu	r3,r5,401ae20 <_free_r+0x240>
 401acf8:	100ad1ba 	srli	r5,r2,6
 401acfc:	28c00e44 	addi	r3,r5,57
 401ad00:	18c7883a 	add	r3,r3,r3
 401ad04:	29400e04 	addi	r5,r5,56
 401ad08:	18c7883a 	add	r3,r3,r3
 401ad0c:	18c7883a 	add	r3,r3,r3
 401ad10:	1909883a 	add	r4,r3,r4
 401ad14:	20c00017 	ldw	r3,0(r4)
 401ad18:	01c100b4 	movhi	r7,1026
 401ad1c:	213ffe04 	addi	r4,r4,-8
 401ad20:	39d85004 	addi	r7,r7,24896
 401ad24:	20c04426 	beq	r4,r3,401ae38 <_free_r+0x258>
 401ad28:	01ffff04 	movi	r7,-4
 401ad2c:	19400117 	ldw	r5,4(r3)
 401ad30:	29ca703a 	and	r5,r5,r7
 401ad34:	1140022e 	bgeu	r2,r5,401ad40 <_free_r+0x160>
 401ad38:	18c00217 	ldw	r3,8(r3)
 401ad3c:	20fffb1e 	bne	r4,r3,401ad2c <__alt_mem_onchip_memory2_0+0xfc015b6c>
 401ad40:	19000317 	ldw	r4,12(r3)
 401ad44:	31000315 	stw	r4,12(r6)
 401ad48:	30c00215 	stw	r3,8(r6)
 401ad4c:	21800215 	stw	r6,8(r4)
 401ad50:	19800315 	stw	r6,12(r3)
 401ad54:	003fde06 	br	401acd0 <__alt_mem_onchip_memory2_0+0xfc015b10>
 401ad58:	29c00217 	ldw	r7,8(r5)
 401ad5c:	10c5883a 	add	r2,r2,r3
 401ad60:	00c100b4 	movhi	r3,1026
 401ad64:	18d85204 	addi	r3,r3,24904
 401ad68:	38c03b26 	beq	r7,r3,401ae58 <_free_r+0x278>
 401ad6c:	2a000317 	ldw	r8,12(r5)
 401ad70:	11400054 	ori	r5,r2,1
 401ad74:	3087883a 	add	r3,r6,r2
 401ad78:	3a000315 	stw	r8,12(r7)
 401ad7c:	41c00215 	stw	r7,8(r8)
 401ad80:	31400115 	stw	r5,4(r6)
 401ad84:	18800015 	stw	r2,0(r3)
 401ad88:	003fbd06 	br	401ac80 <__alt_mem_onchip_memory2_0+0xfc015ac0>
 401ad8c:	39c0004c 	andi	r7,r7,1
 401ad90:	10c5883a 	add	r2,r2,r3
 401ad94:	3800071e 	bne	r7,zero,401adb4 <_free_r+0x1d4>
 401ad98:	81fffe17 	ldw	r7,-8(r16)
 401ad9c:	31cdc83a 	sub	r6,r6,r7
 401ada0:	30c00317 	ldw	r3,12(r6)
 401ada4:	31400217 	ldw	r5,8(r6)
 401ada8:	11c5883a 	add	r2,r2,r7
 401adac:	28c00315 	stw	r3,12(r5)
 401adb0:	19400215 	stw	r5,8(r3)
 401adb4:	10c00054 	ori	r3,r2,1
 401adb8:	30c00115 	stw	r3,4(r6)
 401adbc:	00c100b4 	movhi	r3,1026
 401adc0:	18dde004 	addi	r3,r3,30592
 401adc4:	18c00017 	ldw	r3,0(r3)
 401adc8:	21800215 	stw	r6,8(r4)
 401adcc:	10ffc036 	bltu	r2,r3,401acd0 <__alt_mem_onchip_memory2_0+0xfc015b10>
 401add0:	008100f4 	movhi	r2,1027
 401add4:	10a5e404 	addi	r2,r2,-26736
 401add8:	11400017 	ldw	r5,0(r2)
 401addc:	8809883a 	mov	r4,r17
 401ade0:	401aabc0 	call	401aabc <_malloc_trim_r>
 401ade4:	003fba06 	br	401acd0 <__alt_mem_onchip_memory2_0+0xfc015b10>
 401ade8:	28c9883a 	add	r4,r5,r3
 401adec:	21000117 	ldw	r4,4(r4)
 401adf0:	2100004c 	andi	r4,r4,1
 401adf4:	2000391e 	bne	r4,zero,401aedc <_free_r+0x2fc>
 401adf8:	29c00217 	ldw	r7,8(r5)
 401adfc:	29000317 	ldw	r4,12(r5)
 401ae00:	1885883a 	add	r2,r3,r2
 401ae04:	10c00054 	ori	r3,r2,1
 401ae08:	39000315 	stw	r4,12(r7)
 401ae0c:	21c00215 	stw	r7,8(r4)
 401ae10:	30c00115 	stw	r3,4(r6)
 401ae14:	308d883a 	add	r6,r6,r2
 401ae18:	30800015 	stw	r2,0(r6)
 401ae1c:	003fac06 	br	401acd0 <__alt_mem_onchip_memory2_0+0xfc015b10>
 401ae20:	00c00504 	movi	r3,20
 401ae24:	19401536 	bltu	r3,r5,401ae7c <_free_r+0x29c>
 401ae28:	28c01704 	addi	r3,r5,92
 401ae2c:	18c7883a 	add	r3,r3,r3
 401ae30:	294016c4 	addi	r5,r5,91
 401ae34:	003fb406 	br	401ad08 <__alt_mem_onchip_memory2_0+0xfc015b48>
 401ae38:	280bd0ba 	srai	r5,r5,2
 401ae3c:	00c00044 	movi	r3,1
 401ae40:	38800117 	ldw	r2,4(r7)
 401ae44:	194a983a 	sll	r5,r3,r5
 401ae48:	2007883a 	mov	r3,r4
 401ae4c:	2884b03a 	or	r2,r5,r2
 401ae50:	38800115 	stw	r2,4(r7)
 401ae54:	003fbb06 	br	401ad44 <__alt_mem_onchip_memory2_0+0xfc015b84>
 401ae58:	21800515 	stw	r6,20(r4)
 401ae5c:	21800415 	stw	r6,16(r4)
 401ae60:	10c00054 	ori	r3,r2,1
 401ae64:	31c00315 	stw	r7,12(r6)
 401ae68:	31c00215 	stw	r7,8(r6)
 401ae6c:	30c00115 	stw	r3,4(r6)
 401ae70:	308d883a 	add	r6,r6,r2
 401ae74:	30800015 	stw	r2,0(r6)
 401ae78:	003f9506 	br	401acd0 <__alt_mem_onchip_memory2_0+0xfc015b10>
 401ae7c:	00c01504 	movi	r3,84
 401ae80:	19400536 	bltu	r3,r5,401ae98 <_free_r+0x2b8>
 401ae84:	100ad33a 	srli	r5,r2,12
 401ae88:	28c01bc4 	addi	r3,r5,111
 401ae8c:	18c7883a 	add	r3,r3,r3
 401ae90:	29401b84 	addi	r5,r5,110
 401ae94:	003f9c06 	br	401ad08 <__alt_mem_onchip_memory2_0+0xfc015b48>
 401ae98:	00c05504 	movi	r3,340
 401ae9c:	19400536 	bltu	r3,r5,401aeb4 <_free_r+0x2d4>
 401aea0:	100ad3fa 	srli	r5,r2,15
 401aea4:	28c01e04 	addi	r3,r5,120
 401aea8:	18c7883a 	add	r3,r3,r3
 401aeac:	29401dc4 	addi	r5,r5,119
 401aeb0:	003f9506 	br	401ad08 <__alt_mem_onchip_memory2_0+0xfc015b48>
 401aeb4:	00c15504 	movi	r3,1364
 401aeb8:	19400536 	bltu	r3,r5,401aed0 <_free_r+0x2f0>
 401aebc:	100ad4ba 	srli	r5,r2,18
 401aec0:	28c01f44 	addi	r3,r5,125
 401aec4:	18c7883a 	add	r3,r3,r3
 401aec8:	29401f04 	addi	r5,r5,124
 401aecc:	003f8e06 	br	401ad08 <__alt_mem_onchip_memory2_0+0xfc015b48>
 401aed0:	00c03f84 	movi	r3,254
 401aed4:	01401f84 	movi	r5,126
 401aed8:	003f8b06 	br	401ad08 <__alt_mem_onchip_memory2_0+0xfc015b48>
 401aedc:	10c00054 	ori	r3,r2,1
 401aee0:	30c00115 	stw	r3,4(r6)
 401aee4:	308d883a 	add	r6,r6,r2
 401aee8:	30800015 	stw	r2,0(r6)
 401aeec:	003f7806 	br	401acd0 <__alt_mem_onchip_memory2_0+0xfc015b10>

0401aef0 <__sfvwrite_r>:
 401aef0:	30800217 	ldw	r2,8(r6)
 401aef4:	10006726 	beq	r2,zero,401b094 <__sfvwrite_r+0x1a4>
 401aef8:	28c0030b 	ldhu	r3,12(r5)
 401aefc:	defff404 	addi	sp,sp,-48
 401af00:	dd400715 	stw	r21,28(sp)
 401af04:	dd000615 	stw	r20,24(sp)
 401af08:	dc000215 	stw	r16,8(sp)
 401af0c:	dfc00b15 	stw	ra,44(sp)
 401af10:	df000a15 	stw	fp,40(sp)
 401af14:	ddc00915 	stw	r23,36(sp)
 401af18:	dd800815 	stw	r22,32(sp)
 401af1c:	dcc00515 	stw	r19,20(sp)
 401af20:	dc800415 	stw	r18,16(sp)
 401af24:	dc400315 	stw	r17,12(sp)
 401af28:	1880020c 	andi	r2,r3,8
 401af2c:	2821883a 	mov	r16,r5
 401af30:	202b883a 	mov	r21,r4
 401af34:	3029883a 	mov	r20,r6
 401af38:	10002726 	beq	r2,zero,401afd8 <__sfvwrite_r+0xe8>
 401af3c:	28800417 	ldw	r2,16(r5)
 401af40:	10002526 	beq	r2,zero,401afd8 <__sfvwrite_r+0xe8>
 401af44:	1880008c 	andi	r2,r3,2
 401af48:	a4400017 	ldw	r17,0(r20)
 401af4c:	10002a26 	beq	r2,zero,401aff8 <__sfvwrite_r+0x108>
 401af50:	05a00034 	movhi	r22,32768
 401af54:	0027883a 	mov	r19,zero
 401af58:	0025883a 	mov	r18,zero
 401af5c:	b5bf0004 	addi	r22,r22,-1024
 401af60:	980d883a 	mov	r6,r19
 401af64:	a809883a 	mov	r4,r21
 401af68:	90004626 	beq	r18,zero,401b084 <__sfvwrite_r+0x194>
 401af6c:	900f883a 	mov	r7,r18
 401af70:	b480022e 	bgeu	r22,r18,401af7c <__sfvwrite_r+0x8c>
 401af74:	01e00034 	movhi	r7,32768
 401af78:	39ff0004 	addi	r7,r7,-1024
 401af7c:	80800917 	ldw	r2,36(r16)
 401af80:	81400717 	ldw	r5,28(r16)
 401af84:	103ee83a 	callr	r2
 401af88:	00805a0e 	bge	zero,r2,401b0f4 <__sfvwrite_r+0x204>
 401af8c:	a0c00217 	ldw	r3,8(r20)
 401af90:	98a7883a 	add	r19,r19,r2
 401af94:	90a5c83a 	sub	r18,r18,r2
 401af98:	1885c83a 	sub	r2,r3,r2
 401af9c:	a0800215 	stw	r2,8(r20)
 401afa0:	103fef1e 	bne	r2,zero,401af60 <__alt_mem_onchip_memory2_0+0xfc015da0>
 401afa4:	0005883a 	mov	r2,zero
 401afa8:	dfc00b17 	ldw	ra,44(sp)
 401afac:	df000a17 	ldw	fp,40(sp)
 401afb0:	ddc00917 	ldw	r23,36(sp)
 401afb4:	dd800817 	ldw	r22,32(sp)
 401afb8:	dd400717 	ldw	r21,28(sp)
 401afbc:	dd000617 	ldw	r20,24(sp)
 401afc0:	dcc00517 	ldw	r19,20(sp)
 401afc4:	dc800417 	ldw	r18,16(sp)
 401afc8:	dc400317 	ldw	r17,12(sp)
 401afcc:	dc000217 	ldw	r16,8(sp)
 401afd0:	dec00c04 	addi	sp,sp,48
 401afd4:	f800283a 	ret
 401afd8:	800b883a 	mov	r5,r16
 401afdc:	a809883a 	mov	r4,r21
 401afe0:	4018a600 	call	4018a60 <__swsetup_r>
 401afe4:	1000ee1e 	bne	r2,zero,401b3a0 <__sfvwrite_r+0x4b0>
 401afe8:	80c0030b 	ldhu	r3,12(r16)
 401afec:	a4400017 	ldw	r17,0(r20)
 401aff0:	1880008c 	andi	r2,r3,2
 401aff4:	103fd61e 	bne	r2,zero,401af50 <__alt_mem_onchip_memory2_0+0xfc015d90>
 401aff8:	1880004c 	andi	r2,r3,1
 401affc:	1000421e 	bne	r2,zero,401b108 <__sfvwrite_r+0x218>
 401b000:	0039883a 	mov	fp,zero
 401b004:	0025883a 	mov	r18,zero
 401b008:	90001a26 	beq	r18,zero,401b074 <__sfvwrite_r+0x184>
 401b00c:	1880800c 	andi	r2,r3,512
 401b010:	84c00217 	ldw	r19,8(r16)
 401b014:	10002126 	beq	r2,zero,401b09c <__sfvwrite_r+0x1ac>
 401b018:	982f883a 	mov	r23,r19
 401b01c:	94c09636 	bltu	r18,r19,401b278 <__sfvwrite_r+0x388>
 401b020:	1881200c 	andi	r2,r3,1152
 401b024:	1000a11e 	bne	r2,zero,401b2ac <__sfvwrite_r+0x3bc>
 401b028:	81000017 	ldw	r4,0(r16)
 401b02c:	b80d883a 	mov	r6,r23
 401b030:	e00b883a 	mov	r5,fp
 401b034:	401c26c0 	call	401c26c <memmove>
 401b038:	80c00217 	ldw	r3,8(r16)
 401b03c:	81000017 	ldw	r4,0(r16)
 401b040:	9005883a 	mov	r2,r18
 401b044:	1ce7c83a 	sub	r19,r3,r19
 401b048:	25cf883a 	add	r7,r4,r23
 401b04c:	84c00215 	stw	r19,8(r16)
 401b050:	81c00015 	stw	r7,0(r16)
 401b054:	a0c00217 	ldw	r3,8(r20)
 401b058:	e0b9883a 	add	fp,fp,r2
 401b05c:	90a5c83a 	sub	r18,r18,r2
 401b060:	18a7c83a 	sub	r19,r3,r2
 401b064:	a4c00215 	stw	r19,8(r20)
 401b068:	983fce26 	beq	r19,zero,401afa4 <__alt_mem_onchip_memory2_0+0xfc015de4>
 401b06c:	80c0030b 	ldhu	r3,12(r16)
 401b070:	903fe61e 	bne	r18,zero,401b00c <__alt_mem_onchip_memory2_0+0xfc015e4c>
 401b074:	8f000017 	ldw	fp,0(r17)
 401b078:	8c800117 	ldw	r18,4(r17)
 401b07c:	8c400204 	addi	r17,r17,8
 401b080:	003fe106 	br	401b008 <__alt_mem_onchip_memory2_0+0xfc015e48>
 401b084:	8cc00017 	ldw	r19,0(r17)
 401b088:	8c800117 	ldw	r18,4(r17)
 401b08c:	8c400204 	addi	r17,r17,8
 401b090:	003fb306 	br	401af60 <__alt_mem_onchip_memory2_0+0xfc015da0>
 401b094:	0005883a 	mov	r2,zero
 401b098:	f800283a 	ret
 401b09c:	81000017 	ldw	r4,0(r16)
 401b0a0:	80800417 	ldw	r2,16(r16)
 401b0a4:	11005a36 	bltu	r2,r4,401b210 <__sfvwrite_r+0x320>
 401b0a8:	85c00517 	ldw	r23,20(r16)
 401b0ac:	95c05836 	bltu	r18,r23,401b210 <__sfvwrite_r+0x320>
 401b0b0:	00a00034 	movhi	r2,32768
 401b0b4:	10bfffc4 	addi	r2,r2,-1
 401b0b8:	9009883a 	mov	r4,r18
 401b0bc:	1480012e 	bgeu	r2,r18,401b0c4 <__sfvwrite_r+0x1d4>
 401b0c0:	1009883a 	mov	r4,r2
 401b0c4:	b80b883a 	mov	r5,r23
 401b0c8:	40116800 	call	4011680 <__divsi3>
 401b0cc:	b80b883a 	mov	r5,r23
 401b0d0:	1009883a 	mov	r4,r2
 401b0d4:	40118340 	call	4011834 <__mulsi3>
 401b0d8:	81400717 	ldw	r5,28(r16)
 401b0dc:	80c00917 	ldw	r3,36(r16)
 401b0e0:	100f883a 	mov	r7,r2
 401b0e4:	e00d883a 	mov	r6,fp
 401b0e8:	a809883a 	mov	r4,r21
 401b0ec:	183ee83a 	callr	r3
 401b0f0:	00bfd816 	blt	zero,r2,401b054 <__alt_mem_onchip_memory2_0+0xfc015e94>
 401b0f4:	8080030b 	ldhu	r2,12(r16)
 401b0f8:	10801014 	ori	r2,r2,64
 401b0fc:	8080030d 	sth	r2,12(r16)
 401b100:	00bfffc4 	movi	r2,-1
 401b104:	003fa806 	br	401afa8 <__alt_mem_onchip_memory2_0+0xfc015de8>
 401b108:	0027883a 	mov	r19,zero
 401b10c:	0011883a 	mov	r8,zero
 401b110:	0039883a 	mov	fp,zero
 401b114:	0025883a 	mov	r18,zero
 401b118:	90001f26 	beq	r18,zero,401b198 <__sfvwrite_r+0x2a8>
 401b11c:	40005a26 	beq	r8,zero,401b288 <__sfvwrite_r+0x398>
 401b120:	982d883a 	mov	r22,r19
 401b124:	94c0012e 	bgeu	r18,r19,401b12c <__sfvwrite_r+0x23c>
 401b128:	902d883a 	mov	r22,r18
 401b12c:	81000017 	ldw	r4,0(r16)
 401b130:	80800417 	ldw	r2,16(r16)
 401b134:	b02f883a 	mov	r23,r22
 401b138:	81c00517 	ldw	r7,20(r16)
 401b13c:	1100032e 	bgeu	r2,r4,401b14c <__sfvwrite_r+0x25c>
 401b140:	80c00217 	ldw	r3,8(r16)
 401b144:	38c7883a 	add	r3,r7,r3
 401b148:	1d801816 	blt	r3,r22,401b1ac <__sfvwrite_r+0x2bc>
 401b14c:	b1c03e16 	blt	r22,r7,401b248 <__sfvwrite_r+0x358>
 401b150:	80800917 	ldw	r2,36(r16)
 401b154:	81400717 	ldw	r5,28(r16)
 401b158:	e00d883a 	mov	r6,fp
 401b15c:	da000115 	stw	r8,4(sp)
 401b160:	a809883a 	mov	r4,r21
 401b164:	103ee83a 	callr	r2
 401b168:	102f883a 	mov	r23,r2
 401b16c:	da000117 	ldw	r8,4(sp)
 401b170:	00bfe00e 	bge	zero,r2,401b0f4 <__alt_mem_onchip_memory2_0+0xfc015f34>
 401b174:	9de7c83a 	sub	r19,r19,r23
 401b178:	98001f26 	beq	r19,zero,401b1f8 <__sfvwrite_r+0x308>
 401b17c:	a0800217 	ldw	r2,8(r20)
 401b180:	e5f9883a 	add	fp,fp,r23
 401b184:	95e5c83a 	sub	r18,r18,r23
 401b188:	15efc83a 	sub	r23,r2,r23
 401b18c:	a5c00215 	stw	r23,8(r20)
 401b190:	b83f8426 	beq	r23,zero,401afa4 <__alt_mem_onchip_memory2_0+0xfc015de4>
 401b194:	903fe11e 	bne	r18,zero,401b11c <__alt_mem_onchip_memory2_0+0xfc015f5c>
 401b198:	8f000017 	ldw	fp,0(r17)
 401b19c:	8c800117 	ldw	r18,4(r17)
 401b1a0:	0011883a 	mov	r8,zero
 401b1a4:	8c400204 	addi	r17,r17,8
 401b1a8:	003fdb06 	br	401b118 <__alt_mem_onchip_memory2_0+0xfc015f58>
 401b1ac:	180d883a 	mov	r6,r3
 401b1b0:	e00b883a 	mov	r5,fp
 401b1b4:	da000115 	stw	r8,4(sp)
 401b1b8:	d8c00015 	stw	r3,0(sp)
 401b1bc:	401c26c0 	call	401c26c <memmove>
 401b1c0:	d8c00017 	ldw	r3,0(sp)
 401b1c4:	80800017 	ldw	r2,0(r16)
 401b1c8:	800b883a 	mov	r5,r16
 401b1cc:	a809883a 	mov	r4,r21
 401b1d0:	10c5883a 	add	r2,r2,r3
 401b1d4:	80800015 	stw	r2,0(r16)
 401b1d8:	d8c00015 	stw	r3,0(sp)
 401b1dc:	401a6800 	call	401a680 <_fflush_r>
 401b1e0:	d8c00017 	ldw	r3,0(sp)
 401b1e4:	da000117 	ldw	r8,4(sp)
 401b1e8:	103fc21e 	bne	r2,zero,401b0f4 <__alt_mem_onchip_memory2_0+0xfc015f34>
 401b1ec:	182f883a 	mov	r23,r3
 401b1f0:	9de7c83a 	sub	r19,r19,r23
 401b1f4:	983fe11e 	bne	r19,zero,401b17c <__alt_mem_onchip_memory2_0+0xfc015fbc>
 401b1f8:	800b883a 	mov	r5,r16
 401b1fc:	a809883a 	mov	r4,r21
 401b200:	401a6800 	call	401a680 <_fflush_r>
 401b204:	103fbb1e 	bne	r2,zero,401b0f4 <__alt_mem_onchip_memory2_0+0xfc015f34>
 401b208:	0011883a 	mov	r8,zero
 401b20c:	003fdb06 	br	401b17c <__alt_mem_onchip_memory2_0+0xfc015fbc>
 401b210:	94c0012e 	bgeu	r18,r19,401b218 <__sfvwrite_r+0x328>
 401b214:	9027883a 	mov	r19,r18
 401b218:	980d883a 	mov	r6,r19
 401b21c:	e00b883a 	mov	r5,fp
 401b220:	401c26c0 	call	401c26c <memmove>
 401b224:	80800217 	ldw	r2,8(r16)
 401b228:	80c00017 	ldw	r3,0(r16)
 401b22c:	14c5c83a 	sub	r2,r2,r19
 401b230:	1cc7883a 	add	r3,r3,r19
 401b234:	80800215 	stw	r2,8(r16)
 401b238:	80c00015 	stw	r3,0(r16)
 401b23c:	10004326 	beq	r2,zero,401b34c <__sfvwrite_r+0x45c>
 401b240:	9805883a 	mov	r2,r19
 401b244:	003f8306 	br	401b054 <__alt_mem_onchip_memory2_0+0xfc015e94>
 401b248:	b00d883a 	mov	r6,r22
 401b24c:	e00b883a 	mov	r5,fp
 401b250:	da000115 	stw	r8,4(sp)
 401b254:	401c26c0 	call	401c26c <memmove>
 401b258:	80800217 	ldw	r2,8(r16)
 401b25c:	80c00017 	ldw	r3,0(r16)
 401b260:	da000117 	ldw	r8,4(sp)
 401b264:	1585c83a 	sub	r2,r2,r22
 401b268:	1dad883a 	add	r22,r3,r22
 401b26c:	80800215 	stw	r2,8(r16)
 401b270:	85800015 	stw	r22,0(r16)
 401b274:	003fbf06 	br	401b174 <__alt_mem_onchip_memory2_0+0xfc015fb4>
 401b278:	81000017 	ldw	r4,0(r16)
 401b27c:	9027883a 	mov	r19,r18
 401b280:	902f883a 	mov	r23,r18
 401b284:	003f6906 	br	401b02c <__alt_mem_onchip_memory2_0+0xfc015e6c>
 401b288:	900d883a 	mov	r6,r18
 401b28c:	01400284 	movi	r5,10
 401b290:	e009883a 	mov	r4,fp
 401b294:	401c0400 	call	401c040 <memchr>
 401b298:	10003e26 	beq	r2,zero,401b394 <__sfvwrite_r+0x4a4>
 401b29c:	10800044 	addi	r2,r2,1
 401b2a0:	1727c83a 	sub	r19,r2,fp
 401b2a4:	02000044 	movi	r8,1
 401b2a8:	003f9d06 	br	401b120 <__alt_mem_onchip_memory2_0+0xfc015f60>
 401b2ac:	80800517 	ldw	r2,20(r16)
 401b2b0:	81400417 	ldw	r5,16(r16)
 401b2b4:	81c00017 	ldw	r7,0(r16)
 401b2b8:	10a7883a 	add	r19,r2,r2
 401b2bc:	9885883a 	add	r2,r19,r2
 401b2c0:	1026d7fa 	srli	r19,r2,31
 401b2c4:	396dc83a 	sub	r22,r7,r5
 401b2c8:	b1000044 	addi	r4,r22,1
 401b2cc:	9885883a 	add	r2,r19,r2
 401b2d0:	1027d07a 	srai	r19,r2,1
 401b2d4:	2485883a 	add	r2,r4,r18
 401b2d8:	980d883a 	mov	r6,r19
 401b2dc:	9880022e 	bgeu	r19,r2,401b2e8 <__sfvwrite_r+0x3f8>
 401b2e0:	1027883a 	mov	r19,r2
 401b2e4:	100d883a 	mov	r6,r2
 401b2e8:	18c1000c 	andi	r3,r3,1024
 401b2ec:	18001c26 	beq	r3,zero,401b360 <__sfvwrite_r+0x470>
 401b2f0:	300b883a 	mov	r5,r6
 401b2f4:	a809883a 	mov	r4,r21
 401b2f8:	401b8340 	call	401b834 <_malloc_r>
 401b2fc:	102f883a 	mov	r23,r2
 401b300:	10002926 	beq	r2,zero,401b3a8 <__sfvwrite_r+0x4b8>
 401b304:	81400417 	ldw	r5,16(r16)
 401b308:	b00d883a 	mov	r6,r22
 401b30c:	1009883a 	mov	r4,r2
 401b310:	401c1240 	call	401c124 <memcpy>
 401b314:	8080030b 	ldhu	r2,12(r16)
 401b318:	00fedfc4 	movi	r3,-1153
 401b31c:	10c4703a 	and	r2,r2,r3
 401b320:	10802014 	ori	r2,r2,128
 401b324:	8080030d 	sth	r2,12(r16)
 401b328:	bd89883a 	add	r4,r23,r22
 401b32c:	9d8fc83a 	sub	r7,r19,r22
 401b330:	85c00415 	stw	r23,16(r16)
 401b334:	84c00515 	stw	r19,20(r16)
 401b338:	81000015 	stw	r4,0(r16)
 401b33c:	9027883a 	mov	r19,r18
 401b340:	81c00215 	stw	r7,8(r16)
 401b344:	902f883a 	mov	r23,r18
 401b348:	003f3806 	br	401b02c <__alt_mem_onchip_memory2_0+0xfc015e6c>
 401b34c:	800b883a 	mov	r5,r16
 401b350:	a809883a 	mov	r4,r21
 401b354:	401a6800 	call	401a680 <_fflush_r>
 401b358:	103fb926 	beq	r2,zero,401b240 <__alt_mem_onchip_memory2_0+0xfc016080>
 401b35c:	003f6506 	br	401b0f4 <__alt_mem_onchip_memory2_0+0xfc015f34>
 401b360:	a809883a 	mov	r4,r21
 401b364:	401d7100 	call	401d710 <_realloc_r>
 401b368:	102f883a 	mov	r23,r2
 401b36c:	103fee1e 	bne	r2,zero,401b328 <__alt_mem_onchip_memory2_0+0xfc016168>
 401b370:	81400417 	ldw	r5,16(r16)
 401b374:	a809883a 	mov	r4,r21
 401b378:	401abe00 	call	401abe0 <_free_r>
 401b37c:	8080030b 	ldhu	r2,12(r16)
 401b380:	00ffdfc4 	movi	r3,-129
 401b384:	1884703a 	and	r2,r3,r2
 401b388:	00c00304 	movi	r3,12
 401b38c:	a8c00015 	stw	r3,0(r21)
 401b390:	003f5906 	br	401b0f8 <__alt_mem_onchip_memory2_0+0xfc015f38>
 401b394:	94c00044 	addi	r19,r18,1
 401b398:	02000044 	movi	r8,1
 401b39c:	003f6006 	br	401b120 <__alt_mem_onchip_memory2_0+0xfc015f60>
 401b3a0:	00bfffc4 	movi	r2,-1
 401b3a4:	003f0006 	br	401afa8 <__alt_mem_onchip_memory2_0+0xfc015de8>
 401b3a8:	00800304 	movi	r2,12
 401b3ac:	a8800015 	stw	r2,0(r21)
 401b3b0:	8080030b 	ldhu	r2,12(r16)
 401b3b4:	003f5006 	br	401b0f8 <__alt_mem_onchip_memory2_0+0xfc015f38>

0401b3b8 <_fwalk>:
 401b3b8:	defff704 	addi	sp,sp,-36
 401b3bc:	dd000415 	stw	r20,16(sp)
 401b3c0:	dfc00815 	stw	ra,32(sp)
 401b3c4:	ddc00715 	stw	r23,28(sp)
 401b3c8:	dd800615 	stw	r22,24(sp)
 401b3cc:	dd400515 	stw	r21,20(sp)
 401b3d0:	dcc00315 	stw	r19,12(sp)
 401b3d4:	dc800215 	stw	r18,8(sp)
 401b3d8:	dc400115 	stw	r17,4(sp)
 401b3dc:	dc000015 	stw	r16,0(sp)
 401b3e0:	2500b804 	addi	r20,r4,736
 401b3e4:	a0002326 	beq	r20,zero,401b474 <_fwalk+0xbc>
 401b3e8:	282b883a 	mov	r21,r5
 401b3ec:	002f883a 	mov	r23,zero
 401b3f0:	05800044 	movi	r22,1
 401b3f4:	04ffffc4 	movi	r19,-1
 401b3f8:	a4400117 	ldw	r17,4(r20)
 401b3fc:	a4800217 	ldw	r18,8(r20)
 401b400:	8c7fffc4 	addi	r17,r17,-1
 401b404:	88000d16 	blt	r17,zero,401b43c <_fwalk+0x84>
 401b408:	94000304 	addi	r16,r18,12
 401b40c:	94800384 	addi	r18,r18,14
 401b410:	8080000b 	ldhu	r2,0(r16)
 401b414:	8c7fffc4 	addi	r17,r17,-1
 401b418:	813ffd04 	addi	r4,r16,-12
 401b41c:	b080042e 	bgeu	r22,r2,401b430 <_fwalk+0x78>
 401b420:	9080000f 	ldh	r2,0(r18)
 401b424:	14c00226 	beq	r2,r19,401b430 <_fwalk+0x78>
 401b428:	a83ee83a 	callr	r21
 401b42c:	b8aeb03a 	or	r23,r23,r2
 401b430:	84001a04 	addi	r16,r16,104
 401b434:	94801a04 	addi	r18,r18,104
 401b438:	8cfff51e 	bne	r17,r19,401b410 <__alt_mem_onchip_memory2_0+0xfc016250>
 401b43c:	a5000017 	ldw	r20,0(r20)
 401b440:	a03fed1e 	bne	r20,zero,401b3f8 <__alt_mem_onchip_memory2_0+0xfc016238>
 401b444:	b805883a 	mov	r2,r23
 401b448:	dfc00817 	ldw	ra,32(sp)
 401b44c:	ddc00717 	ldw	r23,28(sp)
 401b450:	dd800617 	ldw	r22,24(sp)
 401b454:	dd400517 	ldw	r21,20(sp)
 401b458:	dd000417 	ldw	r20,16(sp)
 401b45c:	dcc00317 	ldw	r19,12(sp)
 401b460:	dc800217 	ldw	r18,8(sp)
 401b464:	dc400117 	ldw	r17,4(sp)
 401b468:	dc000017 	ldw	r16,0(sp)
 401b46c:	dec00904 	addi	sp,sp,36
 401b470:	f800283a 	ret
 401b474:	002f883a 	mov	r23,zero
 401b478:	003ff206 	br	401b444 <__alt_mem_onchip_memory2_0+0xfc016284>

0401b47c <_fwalk_reent>:
 401b47c:	defff704 	addi	sp,sp,-36
 401b480:	dd000415 	stw	r20,16(sp)
 401b484:	dfc00815 	stw	ra,32(sp)
 401b488:	ddc00715 	stw	r23,28(sp)
 401b48c:	dd800615 	stw	r22,24(sp)
 401b490:	dd400515 	stw	r21,20(sp)
 401b494:	dcc00315 	stw	r19,12(sp)
 401b498:	dc800215 	stw	r18,8(sp)
 401b49c:	dc400115 	stw	r17,4(sp)
 401b4a0:	dc000015 	stw	r16,0(sp)
 401b4a4:	2500b804 	addi	r20,r4,736
 401b4a8:	a0002326 	beq	r20,zero,401b538 <_fwalk_reent+0xbc>
 401b4ac:	282b883a 	mov	r21,r5
 401b4b0:	2027883a 	mov	r19,r4
 401b4b4:	002f883a 	mov	r23,zero
 401b4b8:	05800044 	movi	r22,1
 401b4bc:	04bfffc4 	movi	r18,-1
 401b4c0:	a4400117 	ldw	r17,4(r20)
 401b4c4:	a4000217 	ldw	r16,8(r20)
 401b4c8:	8c7fffc4 	addi	r17,r17,-1
 401b4cc:	88000c16 	blt	r17,zero,401b500 <_fwalk_reent+0x84>
 401b4d0:	84000304 	addi	r16,r16,12
 401b4d4:	8080000b 	ldhu	r2,0(r16)
 401b4d8:	8c7fffc4 	addi	r17,r17,-1
 401b4dc:	817ffd04 	addi	r5,r16,-12
 401b4e0:	b080052e 	bgeu	r22,r2,401b4f8 <_fwalk_reent+0x7c>
 401b4e4:	8080008f 	ldh	r2,2(r16)
 401b4e8:	9809883a 	mov	r4,r19
 401b4ec:	14800226 	beq	r2,r18,401b4f8 <_fwalk_reent+0x7c>
 401b4f0:	a83ee83a 	callr	r21
 401b4f4:	b8aeb03a 	or	r23,r23,r2
 401b4f8:	84001a04 	addi	r16,r16,104
 401b4fc:	8cbff51e 	bne	r17,r18,401b4d4 <__alt_mem_onchip_memory2_0+0xfc016314>
 401b500:	a5000017 	ldw	r20,0(r20)
 401b504:	a03fee1e 	bne	r20,zero,401b4c0 <__alt_mem_onchip_memory2_0+0xfc016300>
 401b508:	b805883a 	mov	r2,r23
 401b50c:	dfc00817 	ldw	ra,32(sp)
 401b510:	ddc00717 	ldw	r23,28(sp)
 401b514:	dd800617 	ldw	r22,24(sp)
 401b518:	dd400517 	ldw	r21,20(sp)
 401b51c:	dd000417 	ldw	r20,16(sp)
 401b520:	dcc00317 	ldw	r19,12(sp)
 401b524:	dc800217 	ldw	r18,8(sp)
 401b528:	dc400117 	ldw	r17,4(sp)
 401b52c:	dc000017 	ldw	r16,0(sp)
 401b530:	dec00904 	addi	sp,sp,36
 401b534:	f800283a 	ret
 401b538:	002f883a 	mov	r23,zero
 401b53c:	003ff206 	br	401b508 <__alt_mem_onchip_memory2_0+0xfc016348>

0401b540 <_gettimeofday_r>:
 401b540:	defffd04 	addi	sp,sp,-12
 401b544:	2805883a 	mov	r2,r5
 401b548:	dc000015 	stw	r16,0(sp)
 401b54c:	040100f4 	movhi	r16,1027
 401b550:	dc400115 	stw	r17,4(sp)
 401b554:	8425de04 	addi	r16,r16,-26760
 401b558:	2023883a 	mov	r17,r4
 401b55c:	300b883a 	mov	r5,r6
 401b560:	1009883a 	mov	r4,r2
 401b564:	dfc00215 	stw	ra,8(sp)
 401b568:	80000015 	stw	zero,0(r16)
 401b56c:	402243c0 	call	402243c <gettimeofday>
 401b570:	00ffffc4 	movi	r3,-1
 401b574:	10c00526 	beq	r2,r3,401b58c <_gettimeofday_r+0x4c>
 401b578:	dfc00217 	ldw	ra,8(sp)
 401b57c:	dc400117 	ldw	r17,4(sp)
 401b580:	dc000017 	ldw	r16,0(sp)
 401b584:	dec00304 	addi	sp,sp,12
 401b588:	f800283a 	ret
 401b58c:	80c00017 	ldw	r3,0(r16)
 401b590:	183ff926 	beq	r3,zero,401b578 <__alt_mem_onchip_memory2_0+0xfc0163b8>
 401b594:	88c00015 	stw	r3,0(r17)
 401b598:	003ff706 	br	401b578 <__alt_mem_onchip_memory2_0+0xfc0163b8>

0401b59c <_setlocale_r>:
 401b59c:	30001b26 	beq	r6,zero,401b60c <_setlocale_r+0x70>
 401b5a0:	014100b4 	movhi	r5,1026
 401b5a4:	defffe04 	addi	sp,sp,-8
 401b5a8:	2955a004 	addi	r5,r5,22144
 401b5ac:	3009883a 	mov	r4,r6
 401b5b0:	dc000015 	stw	r16,0(sp)
 401b5b4:	dfc00115 	stw	ra,4(sp)
 401b5b8:	3021883a 	mov	r16,r6
 401b5bc:	401de040 	call	401de04 <strcmp>
 401b5c0:	1000061e 	bne	r2,zero,401b5dc <_setlocale_r+0x40>
 401b5c4:	008100b4 	movhi	r2,1026
 401b5c8:	10957a04 	addi	r2,r2,21992
 401b5cc:	dfc00117 	ldw	ra,4(sp)
 401b5d0:	dc000017 	ldw	r16,0(sp)
 401b5d4:	dec00204 	addi	sp,sp,8
 401b5d8:	f800283a 	ret
 401b5dc:	014100b4 	movhi	r5,1026
 401b5e0:	29557a04 	addi	r5,r5,21992
 401b5e4:	8009883a 	mov	r4,r16
 401b5e8:	401de040 	call	401de04 <strcmp>
 401b5ec:	103ff526 	beq	r2,zero,401b5c4 <__alt_mem_onchip_memory2_0+0xfc016404>
 401b5f0:	014100b4 	movhi	r5,1026
 401b5f4:	29558404 	addi	r5,r5,22032
 401b5f8:	8009883a 	mov	r4,r16
 401b5fc:	401de040 	call	401de04 <strcmp>
 401b600:	103ff026 	beq	r2,zero,401b5c4 <__alt_mem_onchip_memory2_0+0xfc016404>
 401b604:	0005883a 	mov	r2,zero
 401b608:	003ff006 	br	401b5cc <__alt_mem_onchip_memory2_0+0xfc01640c>
 401b60c:	008100b4 	movhi	r2,1026
 401b610:	10957a04 	addi	r2,r2,21992
 401b614:	f800283a 	ret

0401b618 <__locale_charset>:
 401b618:	008100b4 	movhi	r2,1026
 401b61c:	10983a04 	addi	r2,r2,24808
 401b620:	f800283a 	ret

0401b624 <__locale_mb_cur_max>:
 401b624:	008100b4 	movhi	r2,1026
 401b628:	109dde04 	addi	r2,r2,30584
 401b62c:	10800017 	ldw	r2,0(r2)
 401b630:	f800283a 	ret

0401b634 <__locale_msgcharset>:
 401b634:	008100b4 	movhi	r2,1026
 401b638:	10983204 	addi	r2,r2,24776
 401b63c:	f800283a 	ret

0401b640 <__locale_cjk_lang>:
 401b640:	0005883a 	mov	r2,zero
 401b644:	f800283a 	ret

0401b648 <_localeconv_r>:
 401b648:	008100b4 	movhi	r2,1026
 401b64c:	10984204 	addi	r2,r2,24840
 401b650:	f800283a 	ret

0401b654 <setlocale>:
 401b654:	008100b4 	movhi	r2,1026
 401b658:	109ddd04 	addi	r2,r2,30580
 401b65c:	280d883a 	mov	r6,r5
 401b660:	200b883a 	mov	r5,r4
 401b664:	11000017 	ldw	r4,0(r2)
 401b668:	401b59c1 	jmpi	401b59c <_setlocale_r>

0401b66c <localeconv>:
 401b66c:	008100b4 	movhi	r2,1026
 401b670:	10984204 	addi	r2,r2,24840
 401b674:	f800283a 	ret

0401b678 <__smakebuf_r>:
 401b678:	2880030b 	ldhu	r2,12(r5)
 401b67c:	10c0008c 	andi	r3,r2,2
 401b680:	1800411e 	bne	r3,zero,401b788 <__smakebuf_r+0x110>
 401b684:	deffec04 	addi	sp,sp,-80
 401b688:	dc000f15 	stw	r16,60(sp)
 401b68c:	2821883a 	mov	r16,r5
 401b690:	2940038f 	ldh	r5,14(r5)
 401b694:	dc401015 	stw	r17,64(sp)
 401b698:	dfc01315 	stw	ra,76(sp)
 401b69c:	dcc01215 	stw	r19,72(sp)
 401b6a0:	dc801115 	stw	r18,68(sp)
 401b6a4:	2023883a 	mov	r17,r4
 401b6a8:	28001c16 	blt	r5,zero,401b71c <__smakebuf_r+0xa4>
 401b6ac:	d80d883a 	mov	r6,sp
 401b6b0:	402113c0 	call	402113c <_fstat_r>
 401b6b4:	10001816 	blt	r2,zero,401b718 <__smakebuf_r+0xa0>
 401b6b8:	d8800117 	ldw	r2,4(sp)
 401b6bc:	00e00014 	movui	r3,32768
 401b6c0:	10bc000c 	andi	r2,r2,61440
 401b6c4:	14c80020 	cmpeqi	r19,r2,8192
 401b6c8:	10c03726 	beq	r2,r3,401b7a8 <__smakebuf_r+0x130>
 401b6cc:	80c0030b 	ldhu	r3,12(r16)
 401b6d0:	18c20014 	ori	r3,r3,2048
 401b6d4:	80c0030d 	sth	r3,12(r16)
 401b6d8:	00c80004 	movi	r3,8192
 401b6dc:	10c0521e 	bne	r2,r3,401b828 <__smakebuf_r+0x1b0>
 401b6e0:	8140038f 	ldh	r5,14(r16)
 401b6e4:	8809883a 	mov	r4,r17
 401b6e8:	40211980 	call	4021198 <_isatty_r>
 401b6ec:	10004c26 	beq	r2,zero,401b820 <__smakebuf_r+0x1a8>
 401b6f0:	8080030b 	ldhu	r2,12(r16)
 401b6f4:	80c010c4 	addi	r3,r16,67
 401b6f8:	80c00015 	stw	r3,0(r16)
 401b6fc:	10800054 	ori	r2,r2,1
 401b700:	8080030d 	sth	r2,12(r16)
 401b704:	00800044 	movi	r2,1
 401b708:	80c00415 	stw	r3,16(r16)
 401b70c:	80800515 	stw	r2,20(r16)
 401b710:	04810004 	movi	r18,1024
 401b714:	00000706 	br	401b734 <__smakebuf_r+0xbc>
 401b718:	8080030b 	ldhu	r2,12(r16)
 401b71c:	10c0200c 	andi	r3,r2,128
 401b720:	18001f1e 	bne	r3,zero,401b7a0 <__smakebuf_r+0x128>
 401b724:	04810004 	movi	r18,1024
 401b728:	10820014 	ori	r2,r2,2048
 401b72c:	8080030d 	sth	r2,12(r16)
 401b730:	0027883a 	mov	r19,zero
 401b734:	900b883a 	mov	r5,r18
 401b738:	8809883a 	mov	r4,r17
 401b73c:	401b8340 	call	401b834 <_malloc_r>
 401b740:	10002c26 	beq	r2,zero,401b7f4 <__smakebuf_r+0x17c>
 401b744:	80c0030b 	ldhu	r3,12(r16)
 401b748:	010100b4 	movhi	r4,1026
 401b74c:	2129c504 	addi	r4,r4,-22764
 401b750:	89000f15 	stw	r4,60(r17)
 401b754:	18c02014 	ori	r3,r3,128
 401b758:	80c0030d 	sth	r3,12(r16)
 401b75c:	80800015 	stw	r2,0(r16)
 401b760:	80800415 	stw	r2,16(r16)
 401b764:	84800515 	stw	r18,20(r16)
 401b768:	98001a1e 	bne	r19,zero,401b7d4 <__smakebuf_r+0x15c>
 401b76c:	dfc01317 	ldw	ra,76(sp)
 401b770:	dcc01217 	ldw	r19,72(sp)
 401b774:	dc801117 	ldw	r18,68(sp)
 401b778:	dc401017 	ldw	r17,64(sp)
 401b77c:	dc000f17 	ldw	r16,60(sp)
 401b780:	dec01404 	addi	sp,sp,80
 401b784:	f800283a 	ret
 401b788:	288010c4 	addi	r2,r5,67
 401b78c:	28800015 	stw	r2,0(r5)
 401b790:	28800415 	stw	r2,16(r5)
 401b794:	00800044 	movi	r2,1
 401b798:	28800515 	stw	r2,20(r5)
 401b79c:	f800283a 	ret
 401b7a0:	04801004 	movi	r18,64
 401b7a4:	003fe006 	br	401b728 <__alt_mem_onchip_memory2_0+0xfc016568>
 401b7a8:	81000a17 	ldw	r4,40(r16)
 401b7ac:	00c100b4 	movhi	r3,1026
 401b7b0:	18f76804 	addi	r3,r3,-8800
 401b7b4:	20ffc51e 	bne	r4,r3,401b6cc <__alt_mem_onchip_memory2_0+0xfc01650c>
 401b7b8:	8080030b 	ldhu	r2,12(r16)
 401b7bc:	04810004 	movi	r18,1024
 401b7c0:	84801315 	stw	r18,76(r16)
 401b7c4:	1484b03a 	or	r2,r2,r18
 401b7c8:	8080030d 	sth	r2,12(r16)
 401b7cc:	0027883a 	mov	r19,zero
 401b7d0:	003fd806 	br	401b734 <__alt_mem_onchip_memory2_0+0xfc016574>
 401b7d4:	8140038f 	ldh	r5,14(r16)
 401b7d8:	8809883a 	mov	r4,r17
 401b7dc:	40211980 	call	4021198 <_isatty_r>
 401b7e0:	103fe226 	beq	r2,zero,401b76c <__alt_mem_onchip_memory2_0+0xfc0165ac>
 401b7e4:	8080030b 	ldhu	r2,12(r16)
 401b7e8:	10800054 	ori	r2,r2,1
 401b7ec:	8080030d 	sth	r2,12(r16)
 401b7f0:	003fde06 	br	401b76c <__alt_mem_onchip_memory2_0+0xfc0165ac>
 401b7f4:	8080030b 	ldhu	r2,12(r16)
 401b7f8:	10c0800c 	andi	r3,r2,512
 401b7fc:	183fdb1e 	bne	r3,zero,401b76c <__alt_mem_onchip_memory2_0+0xfc0165ac>
 401b800:	10800094 	ori	r2,r2,2
 401b804:	80c010c4 	addi	r3,r16,67
 401b808:	8080030d 	sth	r2,12(r16)
 401b80c:	00800044 	movi	r2,1
 401b810:	80c00015 	stw	r3,0(r16)
 401b814:	80c00415 	stw	r3,16(r16)
 401b818:	80800515 	stw	r2,20(r16)
 401b81c:	003fd306 	br	401b76c <__alt_mem_onchip_memory2_0+0xfc0165ac>
 401b820:	04810004 	movi	r18,1024
 401b824:	003fc306 	br	401b734 <__alt_mem_onchip_memory2_0+0xfc016574>
 401b828:	0027883a 	mov	r19,zero
 401b82c:	04810004 	movi	r18,1024
 401b830:	003fc006 	br	401b734 <__alt_mem_onchip_memory2_0+0xfc016574>

0401b834 <_malloc_r>:
 401b834:	defff504 	addi	sp,sp,-44
 401b838:	dc800315 	stw	r18,12(sp)
 401b83c:	dfc00a15 	stw	ra,40(sp)
 401b840:	df000915 	stw	fp,36(sp)
 401b844:	ddc00815 	stw	r23,32(sp)
 401b848:	dd800715 	stw	r22,28(sp)
 401b84c:	dd400615 	stw	r21,24(sp)
 401b850:	dd000515 	stw	r20,20(sp)
 401b854:	dcc00415 	stw	r19,16(sp)
 401b858:	dc400215 	stw	r17,8(sp)
 401b85c:	dc000115 	stw	r16,4(sp)
 401b860:	288002c4 	addi	r2,r5,11
 401b864:	00c00584 	movi	r3,22
 401b868:	2025883a 	mov	r18,r4
 401b86c:	18807f2e 	bgeu	r3,r2,401ba6c <_malloc_r+0x238>
 401b870:	047ffe04 	movi	r17,-8
 401b874:	1462703a 	and	r17,r2,r17
 401b878:	8800a316 	blt	r17,zero,401bb08 <_malloc_r+0x2d4>
 401b87c:	8940a236 	bltu	r17,r5,401bb08 <_malloc_r+0x2d4>
 401b880:	40229980 	call	4022998 <__malloc_lock>
 401b884:	00807dc4 	movi	r2,503
 401b888:	1441e92e 	bgeu	r2,r17,401c030 <_malloc_r+0x7fc>
 401b88c:	8804d27a 	srli	r2,r17,9
 401b890:	1000a126 	beq	r2,zero,401bb18 <_malloc_r+0x2e4>
 401b894:	00c00104 	movi	r3,4
 401b898:	18811e36 	bltu	r3,r2,401bd14 <_malloc_r+0x4e0>
 401b89c:	8804d1ba 	srli	r2,r17,6
 401b8a0:	12000e44 	addi	r8,r2,57
 401b8a4:	11c00e04 	addi	r7,r2,56
 401b8a8:	4209883a 	add	r4,r8,r8
 401b8ac:	04c100b4 	movhi	r19,1026
 401b8b0:	2109883a 	add	r4,r4,r4
 401b8b4:	9cd85004 	addi	r19,r19,24896
 401b8b8:	2109883a 	add	r4,r4,r4
 401b8bc:	9909883a 	add	r4,r19,r4
 401b8c0:	24000117 	ldw	r16,4(r4)
 401b8c4:	213ffe04 	addi	r4,r4,-8
 401b8c8:	24009726 	beq	r4,r16,401bb28 <_malloc_r+0x2f4>
 401b8cc:	80800117 	ldw	r2,4(r16)
 401b8d0:	01bfff04 	movi	r6,-4
 401b8d4:	014003c4 	movi	r5,15
 401b8d8:	1184703a 	and	r2,r2,r6
 401b8dc:	1447c83a 	sub	r3,r2,r17
 401b8e0:	28c00716 	blt	r5,r3,401b900 <_malloc_r+0xcc>
 401b8e4:	1800920e 	bge	r3,zero,401bb30 <_malloc_r+0x2fc>
 401b8e8:	84000317 	ldw	r16,12(r16)
 401b8ec:	24008e26 	beq	r4,r16,401bb28 <_malloc_r+0x2f4>
 401b8f0:	80800117 	ldw	r2,4(r16)
 401b8f4:	1184703a 	and	r2,r2,r6
 401b8f8:	1447c83a 	sub	r3,r2,r17
 401b8fc:	28fff90e 	bge	r5,r3,401b8e4 <__alt_mem_onchip_memory2_0+0xfc016724>
 401b900:	3809883a 	mov	r4,r7
 401b904:	018100b4 	movhi	r6,1026
 401b908:	9c000417 	ldw	r16,16(r19)
 401b90c:	31985004 	addi	r6,r6,24896
 401b910:	32000204 	addi	r8,r6,8
 401b914:	82013426 	beq	r16,r8,401bde8 <_malloc_r+0x5b4>
 401b918:	80c00117 	ldw	r3,4(r16)
 401b91c:	00bfff04 	movi	r2,-4
 401b920:	188e703a 	and	r7,r3,r2
 401b924:	3c45c83a 	sub	r2,r7,r17
 401b928:	00c003c4 	movi	r3,15
 401b92c:	18811f16 	blt	r3,r2,401bdac <_malloc_r+0x578>
 401b930:	32000515 	stw	r8,20(r6)
 401b934:	32000415 	stw	r8,16(r6)
 401b938:	10007f0e 	bge	r2,zero,401bb38 <_malloc_r+0x304>
 401b93c:	00807fc4 	movi	r2,511
 401b940:	11c0fd36 	bltu	r2,r7,401bd38 <_malloc_r+0x504>
 401b944:	3806d0fa 	srli	r3,r7,3
 401b948:	01c00044 	movi	r7,1
 401b94c:	30800117 	ldw	r2,4(r6)
 401b950:	19400044 	addi	r5,r3,1
 401b954:	294b883a 	add	r5,r5,r5
 401b958:	1807d0ba 	srai	r3,r3,2
 401b95c:	294b883a 	add	r5,r5,r5
 401b960:	294b883a 	add	r5,r5,r5
 401b964:	298b883a 	add	r5,r5,r6
 401b968:	38c6983a 	sll	r3,r7,r3
 401b96c:	29c00017 	ldw	r7,0(r5)
 401b970:	2a7ffe04 	addi	r9,r5,-8
 401b974:	1886b03a 	or	r3,r3,r2
 401b978:	82400315 	stw	r9,12(r16)
 401b97c:	81c00215 	stw	r7,8(r16)
 401b980:	30c00115 	stw	r3,4(r6)
 401b984:	2c000015 	stw	r16,0(r5)
 401b988:	3c000315 	stw	r16,12(r7)
 401b98c:	2005d0ba 	srai	r2,r4,2
 401b990:	01400044 	movi	r5,1
 401b994:	288a983a 	sll	r5,r5,r2
 401b998:	19406f36 	bltu	r3,r5,401bb58 <_malloc_r+0x324>
 401b99c:	28c4703a 	and	r2,r5,r3
 401b9a0:	10000a1e 	bne	r2,zero,401b9cc <_malloc_r+0x198>
 401b9a4:	00bfff04 	movi	r2,-4
 401b9a8:	294b883a 	add	r5,r5,r5
 401b9ac:	2088703a 	and	r4,r4,r2
 401b9b0:	28c4703a 	and	r2,r5,r3
 401b9b4:	21000104 	addi	r4,r4,4
 401b9b8:	1000041e 	bne	r2,zero,401b9cc <_malloc_r+0x198>
 401b9bc:	294b883a 	add	r5,r5,r5
 401b9c0:	28c4703a 	and	r2,r5,r3
 401b9c4:	21000104 	addi	r4,r4,4
 401b9c8:	103ffc26 	beq	r2,zero,401b9bc <__alt_mem_onchip_memory2_0+0xfc0167fc>
 401b9cc:	02bfff04 	movi	r10,-4
 401b9d0:	024003c4 	movi	r9,15
 401b9d4:	21800044 	addi	r6,r4,1
 401b9d8:	318d883a 	add	r6,r6,r6
 401b9dc:	318d883a 	add	r6,r6,r6
 401b9e0:	318d883a 	add	r6,r6,r6
 401b9e4:	998d883a 	add	r6,r19,r6
 401b9e8:	333ffe04 	addi	r12,r6,-8
 401b9ec:	2017883a 	mov	r11,r4
 401b9f0:	31800104 	addi	r6,r6,4
 401b9f4:	34000017 	ldw	r16,0(r6)
 401b9f8:	31fffd04 	addi	r7,r6,-12
 401b9fc:	81c0041e 	bne	r16,r7,401ba10 <_malloc_r+0x1dc>
 401ba00:	0000fb06 	br	401bdf0 <_malloc_r+0x5bc>
 401ba04:	1801030e 	bge	r3,zero,401be14 <_malloc_r+0x5e0>
 401ba08:	84000317 	ldw	r16,12(r16)
 401ba0c:	81c0f826 	beq	r16,r7,401bdf0 <_malloc_r+0x5bc>
 401ba10:	80800117 	ldw	r2,4(r16)
 401ba14:	1284703a 	and	r2,r2,r10
 401ba18:	1447c83a 	sub	r3,r2,r17
 401ba1c:	48fff90e 	bge	r9,r3,401ba04 <__alt_mem_onchip_memory2_0+0xfc016844>
 401ba20:	80800317 	ldw	r2,12(r16)
 401ba24:	81000217 	ldw	r4,8(r16)
 401ba28:	89400054 	ori	r5,r17,1
 401ba2c:	81400115 	stw	r5,4(r16)
 401ba30:	20800315 	stw	r2,12(r4)
 401ba34:	11000215 	stw	r4,8(r2)
 401ba38:	8463883a 	add	r17,r16,r17
 401ba3c:	9c400515 	stw	r17,20(r19)
 401ba40:	9c400415 	stw	r17,16(r19)
 401ba44:	18800054 	ori	r2,r3,1
 401ba48:	88800115 	stw	r2,4(r17)
 401ba4c:	8a000315 	stw	r8,12(r17)
 401ba50:	8a000215 	stw	r8,8(r17)
 401ba54:	88e3883a 	add	r17,r17,r3
 401ba58:	88c00015 	stw	r3,0(r17)
 401ba5c:	9009883a 	mov	r4,r18
 401ba60:	40229bc0 	call	40229bc <__malloc_unlock>
 401ba64:	80800204 	addi	r2,r16,8
 401ba68:	00001b06 	br	401bad8 <_malloc_r+0x2a4>
 401ba6c:	04400404 	movi	r17,16
 401ba70:	89402536 	bltu	r17,r5,401bb08 <_malloc_r+0x2d4>
 401ba74:	40229980 	call	4022998 <__malloc_lock>
 401ba78:	00800184 	movi	r2,6
 401ba7c:	01000084 	movi	r4,2
 401ba80:	04c100b4 	movhi	r19,1026
 401ba84:	1085883a 	add	r2,r2,r2
 401ba88:	9cd85004 	addi	r19,r19,24896
 401ba8c:	1085883a 	add	r2,r2,r2
 401ba90:	9885883a 	add	r2,r19,r2
 401ba94:	14000117 	ldw	r16,4(r2)
 401ba98:	10fffe04 	addi	r3,r2,-8
 401ba9c:	80c0d926 	beq	r16,r3,401be04 <_malloc_r+0x5d0>
 401baa0:	80c00117 	ldw	r3,4(r16)
 401baa4:	81000317 	ldw	r4,12(r16)
 401baa8:	00bfff04 	movi	r2,-4
 401baac:	1884703a 	and	r2,r3,r2
 401bab0:	81400217 	ldw	r5,8(r16)
 401bab4:	8085883a 	add	r2,r16,r2
 401bab8:	10c00117 	ldw	r3,4(r2)
 401babc:	29000315 	stw	r4,12(r5)
 401bac0:	21400215 	stw	r5,8(r4)
 401bac4:	18c00054 	ori	r3,r3,1
 401bac8:	10c00115 	stw	r3,4(r2)
 401bacc:	9009883a 	mov	r4,r18
 401bad0:	40229bc0 	call	40229bc <__malloc_unlock>
 401bad4:	80800204 	addi	r2,r16,8
 401bad8:	dfc00a17 	ldw	ra,40(sp)
 401badc:	df000917 	ldw	fp,36(sp)
 401bae0:	ddc00817 	ldw	r23,32(sp)
 401bae4:	dd800717 	ldw	r22,28(sp)
 401bae8:	dd400617 	ldw	r21,24(sp)
 401baec:	dd000517 	ldw	r20,20(sp)
 401baf0:	dcc00417 	ldw	r19,16(sp)
 401baf4:	dc800317 	ldw	r18,12(sp)
 401baf8:	dc400217 	ldw	r17,8(sp)
 401bafc:	dc000117 	ldw	r16,4(sp)
 401bb00:	dec00b04 	addi	sp,sp,44
 401bb04:	f800283a 	ret
 401bb08:	00800304 	movi	r2,12
 401bb0c:	90800015 	stw	r2,0(r18)
 401bb10:	0005883a 	mov	r2,zero
 401bb14:	003ff006 	br	401bad8 <__alt_mem_onchip_memory2_0+0xfc016918>
 401bb18:	01002004 	movi	r4,128
 401bb1c:	02001004 	movi	r8,64
 401bb20:	01c00fc4 	movi	r7,63
 401bb24:	003f6106 	br	401b8ac <__alt_mem_onchip_memory2_0+0xfc0166ec>
 401bb28:	4009883a 	mov	r4,r8
 401bb2c:	003f7506 	br	401b904 <__alt_mem_onchip_memory2_0+0xfc016744>
 401bb30:	81000317 	ldw	r4,12(r16)
 401bb34:	003fde06 	br	401bab0 <__alt_mem_onchip_memory2_0+0xfc0168f0>
 401bb38:	81c5883a 	add	r2,r16,r7
 401bb3c:	11400117 	ldw	r5,4(r2)
 401bb40:	9009883a 	mov	r4,r18
 401bb44:	29400054 	ori	r5,r5,1
 401bb48:	11400115 	stw	r5,4(r2)
 401bb4c:	40229bc0 	call	40229bc <__malloc_unlock>
 401bb50:	80800204 	addi	r2,r16,8
 401bb54:	003fe006 	br	401bad8 <__alt_mem_onchip_memory2_0+0xfc016918>
 401bb58:	9c000217 	ldw	r16,8(r19)
 401bb5c:	00bfff04 	movi	r2,-4
 401bb60:	85800117 	ldw	r22,4(r16)
 401bb64:	b0ac703a 	and	r22,r22,r2
 401bb68:	b4400336 	bltu	r22,r17,401bb78 <_malloc_r+0x344>
 401bb6c:	b445c83a 	sub	r2,r22,r17
 401bb70:	00c003c4 	movi	r3,15
 401bb74:	18805d16 	blt	r3,r2,401bcec <_malloc_r+0x4b8>
 401bb78:	05c100b4 	movhi	r23,1026
 401bb7c:	008100f4 	movhi	r2,1027
 401bb80:	10a5e404 	addi	r2,r2,-26736
 401bb84:	bddddf04 	addi	r23,r23,30588
 401bb88:	15400017 	ldw	r21,0(r2)
 401bb8c:	b8c00017 	ldw	r3,0(r23)
 401bb90:	00bfffc4 	movi	r2,-1
 401bb94:	858d883a 	add	r6,r16,r22
 401bb98:	8d6b883a 	add	r21,r17,r21
 401bb9c:	1880ea26 	beq	r3,r2,401bf48 <_malloc_r+0x714>
 401bba0:	ad4403c4 	addi	r21,r21,4111
 401bba4:	00bc0004 	movi	r2,-4096
 401bba8:	a8aa703a 	and	r21,r21,r2
 401bbac:	a80b883a 	mov	r5,r21
 401bbb0:	9009883a 	mov	r4,r18
 401bbb4:	d9800015 	stw	r6,0(sp)
 401bbb8:	401dc740 	call	401dc74 <_sbrk_r>
 401bbbc:	1029883a 	mov	r20,r2
 401bbc0:	00bfffc4 	movi	r2,-1
 401bbc4:	d9800017 	ldw	r6,0(sp)
 401bbc8:	a080e826 	beq	r20,r2,401bf6c <_malloc_r+0x738>
 401bbcc:	a180a636 	bltu	r20,r6,401be68 <_malloc_r+0x634>
 401bbd0:	070100f4 	movhi	fp,1027
 401bbd4:	e725fa04 	addi	fp,fp,-26648
 401bbd8:	e0800017 	ldw	r2,0(fp)
 401bbdc:	a887883a 	add	r3,r21,r2
 401bbe0:	e0c00015 	stw	r3,0(fp)
 401bbe4:	3500e626 	beq	r6,r20,401bf80 <_malloc_r+0x74c>
 401bbe8:	b9000017 	ldw	r4,0(r23)
 401bbec:	00bfffc4 	movi	r2,-1
 401bbf0:	2080ee26 	beq	r4,r2,401bfac <_malloc_r+0x778>
 401bbf4:	a185c83a 	sub	r2,r20,r6
 401bbf8:	10c5883a 	add	r2,r2,r3
 401bbfc:	e0800015 	stw	r2,0(fp)
 401bc00:	a0c001cc 	andi	r3,r20,7
 401bc04:	1800bc26 	beq	r3,zero,401bef8 <_malloc_r+0x6c4>
 401bc08:	a0e9c83a 	sub	r20,r20,r3
 401bc0c:	00840204 	movi	r2,4104
 401bc10:	a5000204 	addi	r20,r20,8
 401bc14:	10c7c83a 	sub	r3,r2,r3
 401bc18:	a545883a 	add	r2,r20,r21
 401bc1c:	1083ffcc 	andi	r2,r2,4095
 401bc20:	18abc83a 	sub	r21,r3,r2
 401bc24:	a80b883a 	mov	r5,r21
 401bc28:	9009883a 	mov	r4,r18
 401bc2c:	401dc740 	call	401dc74 <_sbrk_r>
 401bc30:	00ffffc4 	movi	r3,-1
 401bc34:	10c0e126 	beq	r2,r3,401bfbc <_malloc_r+0x788>
 401bc38:	1505c83a 	sub	r2,r2,r20
 401bc3c:	1545883a 	add	r2,r2,r21
 401bc40:	10800054 	ori	r2,r2,1
 401bc44:	e0c00017 	ldw	r3,0(fp)
 401bc48:	9d000215 	stw	r20,8(r19)
 401bc4c:	a0800115 	stw	r2,4(r20)
 401bc50:	a8c7883a 	add	r3,r21,r3
 401bc54:	e0c00015 	stw	r3,0(fp)
 401bc58:	84c00e26 	beq	r16,r19,401bc94 <_malloc_r+0x460>
 401bc5c:	018003c4 	movi	r6,15
 401bc60:	3580a72e 	bgeu	r6,r22,401bf00 <_malloc_r+0x6cc>
 401bc64:	81400117 	ldw	r5,4(r16)
 401bc68:	013ffe04 	movi	r4,-8
 401bc6c:	b0bffd04 	addi	r2,r22,-12
 401bc70:	1104703a 	and	r2,r2,r4
 401bc74:	2900004c 	andi	r4,r5,1
 401bc78:	2088b03a 	or	r4,r4,r2
 401bc7c:	81000115 	stw	r4,4(r16)
 401bc80:	01400144 	movi	r5,5
 401bc84:	8089883a 	add	r4,r16,r2
 401bc88:	21400115 	stw	r5,4(r4)
 401bc8c:	21400215 	stw	r5,8(r4)
 401bc90:	3080cd36 	bltu	r6,r2,401bfc8 <_malloc_r+0x794>
 401bc94:	008100f4 	movhi	r2,1027
 401bc98:	10a5e304 	addi	r2,r2,-26740
 401bc9c:	11000017 	ldw	r4,0(r2)
 401bca0:	20c0012e 	bgeu	r4,r3,401bca8 <_malloc_r+0x474>
 401bca4:	10c00015 	stw	r3,0(r2)
 401bca8:	008100f4 	movhi	r2,1027
 401bcac:	10a5e204 	addi	r2,r2,-26744
 401bcb0:	11000017 	ldw	r4,0(r2)
 401bcb4:	9c000217 	ldw	r16,8(r19)
 401bcb8:	20c0012e 	bgeu	r4,r3,401bcc0 <_malloc_r+0x48c>
 401bcbc:	10c00015 	stw	r3,0(r2)
 401bcc0:	80c00117 	ldw	r3,4(r16)
 401bcc4:	00bfff04 	movi	r2,-4
 401bcc8:	1886703a 	and	r3,r3,r2
 401bccc:	1c45c83a 	sub	r2,r3,r17
 401bcd0:	1c400236 	bltu	r3,r17,401bcdc <_malloc_r+0x4a8>
 401bcd4:	00c003c4 	movi	r3,15
 401bcd8:	18800416 	blt	r3,r2,401bcec <_malloc_r+0x4b8>
 401bcdc:	9009883a 	mov	r4,r18
 401bce0:	40229bc0 	call	40229bc <__malloc_unlock>
 401bce4:	0005883a 	mov	r2,zero
 401bce8:	003f7b06 	br	401bad8 <__alt_mem_onchip_memory2_0+0xfc016918>
 401bcec:	88c00054 	ori	r3,r17,1
 401bcf0:	80c00115 	stw	r3,4(r16)
 401bcf4:	8463883a 	add	r17,r16,r17
 401bcf8:	10800054 	ori	r2,r2,1
 401bcfc:	9c400215 	stw	r17,8(r19)
 401bd00:	88800115 	stw	r2,4(r17)
 401bd04:	9009883a 	mov	r4,r18
 401bd08:	40229bc0 	call	40229bc <__malloc_unlock>
 401bd0c:	80800204 	addi	r2,r16,8
 401bd10:	003f7106 	br	401bad8 <__alt_mem_onchip_memory2_0+0xfc016918>
 401bd14:	00c00504 	movi	r3,20
 401bd18:	18804a2e 	bgeu	r3,r2,401be44 <_malloc_r+0x610>
 401bd1c:	00c01504 	movi	r3,84
 401bd20:	18806e36 	bltu	r3,r2,401bedc <_malloc_r+0x6a8>
 401bd24:	8804d33a 	srli	r2,r17,12
 401bd28:	12001bc4 	addi	r8,r2,111
 401bd2c:	11c01b84 	addi	r7,r2,110
 401bd30:	4209883a 	add	r4,r8,r8
 401bd34:	003edd06 	br	401b8ac <__alt_mem_onchip_memory2_0+0xfc0166ec>
 401bd38:	3804d27a 	srli	r2,r7,9
 401bd3c:	00c00104 	movi	r3,4
 401bd40:	1880442e 	bgeu	r3,r2,401be54 <_malloc_r+0x620>
 401bd44:	00c00504 	movi	r3,20
 401bd48:	18808136 	bltu	r3,r2,401bf50 <_malloc_r+0x71c>
 401bd4c:	11401704 	addi	r5,r2,92
 401bd50:	10c016c4 	addi	r3,r2,91
 401bd54:	294b883a 	add	r5,r5,r5
 401bd58:	294b883a 	add	r5,r5,r5
 401bd5c:	294b883a 	add	r5,r5,r5
 401bd60:	994b883a 	add	r5,r19,r5
 401bd64:	28800017 	ldw	r2,0(r5)
 401bd68:	018100b4 	movhi	r6,1026
 401bd6c:	297ffe04 	addi	r5,r5,-8
 401bd70:	31985004 	addi	r6,r6,24896
 401bd74:	28806526 	beq	r5,r2,401bf0c <_malloc_r+0x6d8>
 401bd78:	01bfff04 	movi	r6,-4
 401bd7c:	10c00117 	ldw	r3,4(r2)
 401bd80:	1986703a 	and	r3,r3,r6
 401bd84:	38c0022e 	bgeu	r7,r3,401bd90 <_malloc_r+0x55c>
 401bd88:	10800217 	ldw	r2,8(r2)
 401bd8c:	28bffb1e 	bne	r5,r2,401bd7c <__alt_mem_onchip_memory2_0+0xfc016bbc>
 401bd90:	11400317 	ldw	r5,12(r2)
 401bd94:	98c00117 	ldw	r3,4(r19)
 401bd98:	81400315 	stw	r5,12(r16)
 401bd9c:	80800215 	stw	r2,8(r16)
 401bda0:	2c000215 	stw	r16,8(r5)
 401bda4:	14000315 	stw	r16,12(r2)
 401bda8:	003ef806 	br	401b98c <__alt_mem_onchip_memory2_0+0xfc0167cc>
 401bdac:	88c00054 	ori	r3,r17,1
 401bdb0:	80c00115 	stw	r3,4(r16)
 401bdb4:	8463883a 	add	r17,r16,r17
 401bdb8:	34400515 	stw	r17,20(r6)
 401bdbc:	34400415 	stw	r17,16(r6)
 401bdc0:	10c00054 	ori	r3,r2,1
 401bdc4:	8a000315 	stw	r8,12(r17)
 401bdc8:	8a000215 	stw	r8,8(r17)
 401bdcc:	88c00115 	stw	r3,4(r17)
 401bdd0:	88a3883a 	add	r17,r17,r2
 401bdd4:	88800015 	stw	r2,0(r17)
 401bdd8:	9009883a 	mov	r4,r18
 401bddc:	40229bc0 	call	40229bc <__malloc_unlock>
 401bde0:	80800204 	addi	r2,r16,8
 401bde4:	003f3c06 	br	401bad8 <__alt_mem_onchip_memory2_0+0xfc016918>
 401bde8:	30c00117 	ldw	r3,4(r6)
 401bdec:	003ee706 	br	401b98c <__alt_mem_onchip_memory2_0+0xfc0167cc>
 401bdf0:	5ac00044 	addi	r11,r11,1
 401bdf4:	588000cc 	andi	r2,r11,3
 401bdf8:	31800204 	addi	r6,r6,8
 401bdfc:	103efd1e 	bne	r2,zero,401b9f4 <__alt_mem_onchip_memory2_0+0xfc016834>
 401be00:	00002406 	br	401be94 <_malloc_r+0x660>
 401be04:	14000317 	ldw	r16,12(r2)
 401be08:	143f251e 	bne	r2,r16,401baa0 <__alt_mem_onchip_memory2_0+0xfc0168e0>
 401be0c:	21000084 	addi	r4,r4,2
 401be10:	003ebc06 	br	401b904 <__alt_mem_onchip_memory2_0+0xfc016744>
 401be14:	8085883a 	add	r2,r16,r2
 401be18:	10c00117 	ldw	r3,4(r2)
 401be1c:	81000317 	ldw	r4,12(r16)
 401be20:	81400217 	ldw	r5,8(r16)
 401be24:	18c00054 	ori	r3,r3,1
 401be28:	10c00115 	stw	r3,4(r2)
 401be2c:	29000315 	stw	r4,12(r5)
 401be30:	21400215 	stw	r5,8(r4)
 401be34:	9009883a 	mov	r4,r18
 401be38:	40229bc0 	call	40229bc <__malloc_unlock>
 401be3c:	80800204 	addi	r2,r16,8
 401be40:	003f2506 	br	401bad8 <__alt_mem_onchip_memory2_0+0xfc016918>
 401be44:	12001704 	addi	r8,r2,92
 401be48:	11c016c4 	addi	r7,r2,91
 401be4c:	4209883a 	add	r4,r8,r8
 401be50:	003e9606 	br	401b8ac <__alt_mem_onchip_memory2_0+0xfc0166ec>
 401be54:	3804d1ba 	srli	r2,r7,6
 401be58:	11400e44 	addi	r5,r2,57
 401be5c:	10c00e04 	addi	r3,r2,56
 401be60:	294b883a 	add	r5,r5,r5
 401be64:	003fbc06 	br	401bd58 <__alt_mem_onchip_memory2_0+0xfc016b98>
 401be68:	84ff5926 	beq	r16,r19,401bbd0 <__alt_mem_onchip_memory2_0+0xfc016a10>
 401be6c:	008100b4 	movhi	r2,1026
 401be70:	10985004 	addi	r2,r2,24896
 401be74:	14000217 	ldw	r16,8(r2)
 401be78:	00bfff04 	movi	r2,-4
 401be7c:	80c00117 	ldw	r3,4(r16)
 401be80:	1886703a 	and	r3,r3,r2
 401be84:	003f9106 	br	401bccc <__alt_mem_onchip_memory2_0+0xfc016b0c>
 401be88:	60800217 	ldw	r2,8(r12)
 401be8c:	213fffc4 	addi	r4,r4,-1
 401be90:	1300651e 	bne	r2,r12,401c028 <_malloc_r+0x7f4>
 401be94:	208000cc 	andi	r2,r4,3
 401be98:	633ffe04 	addi	r12,r12,-8
 401be9c:	103ffa1e 	bne	r2,zero,401be88 <__alt_mem_onchip_memory2_0+0xfc016cc8>
 401bea0:	98800117 	ldw	r2,4(r19)
 401bea4:	0146303a 	nor	r3,zero,r5
 401bea8:	1884703a 	and	r2,r3,r2
 401beac:	98800115 	stw	r2,4(r19)
 401beb0:	294b883a 	add	r5,r5,r5
 401beb4:	117f2836 	bltu	r2,r5,401bb58 <__alt_mem_onchip_memory2_0+0xfc016998>
 401beb8:	283f2726 	beq	r5,zero,401bb58 <__alt_mem_onchip_memory2_0+0xfc016998>
 401bebc:	2886703a 	and	r3,r5,r2
 401bec0:	5809883a 	mov	r4,r11
 401bec4:	183ec31e 	bne	r3,zero,401b9d4 <__alt_mem_onchip_memory2_0+0xfc016814>
 401bec8:	294b883a 	add	r5,r5,r5
 401becc:	2886703a 	and	r3,r5,r2
 401bed0:	21000104 	addi	r4,r4,4
 401bed4:	183ffc26 	beq	r3,zero,401bec8 <__alt_mem_onchip_memory2_0+0xfc016d08>
 401bed8:	003ebe06 	br	401b9d4 <__alt_mem_onchip_memory2_0+0xfc016814>
 401bedc:	00c05504 	movi	r3,340
 401bee0:	18801236 	bltu	r3,r2,401bf2c <_malloc_r+0x6f8>
 401bee4:	8804d3fa 	srli	r2,r17,15
 401bee8:	12001e04 	addi	r8,r2,120
 401beec:	11c01dc4 	addi	r7,r2,119
 401bef0:	4209883a 	add	r4,r8,r8
 401bef4:	003e6d06 	br	401b8ac <__alt_mem_onchip_memory2_0+0xfc0166ec>
 401bef8:	00c40004 	movi	r3,4096
 401befc:	003f4606 	br	401bc18 <__alt_mem_onchip_memory2_0+0xfc016a58>
 401bf00:	00800044 	movi	r2,1
 401bf04:	a0800115 	stw	r2,4(r20)
 401bf08:	003f7406 	br	401bcdc <__alt_mem_onchip_memory2_0+0xfc016b1c>
 401bf0c:	1805d0ba 	srai	r2,r3,2
 401bf10:	01c00044 	movi	r7,1
 401bf14:	30c00117 	ldw	r3,4(r6)
 401bf18:	388e983a 	sll	r7,r7,r2
 401bf1c:	2805883a 	mov	r2,r5
 401bf20:	38c6b03a 	or	r3,r7,r3
 401bf24:	30c00115 	stw	r3,4(r6)
 401bf28:	003f9b06 	br	401bd98 <__alt_mem_onchip_memory2_0+0xfc016bd8>
 401bf2c:	00c15504 	movi	r3,1364
 401bf30:	18801a36 	bltu	r3,r2,401bf9c <_malloc_r+0x768>
 401bf34:	8804d4ba 	srli	r2,r17,18
 401bf38:	12001f44 	addi	r8,r2,125
 401bf3c:	11c01f04 	addi	r7,r2,124
 401bf40:	4209883a 	add	r4,r8,r8
 401bf44:	003e5906 	br	401b8ac <__alt_mem_onchip_memory2_0+0xfc0166ec>
 401bf48:	ad400404 	addi	r21,r21,16
 401bf4c:	003f1706 	br	401bbac <__alt_mem_onchip_memory2_0+0xfc0169ec>
 401bf50:	00c01504 	movi	r3,84
 401bf54:	18802336 	bltu	r3,r2,401bfe4 <_malloc_r+0x7b0>
 401bf58:	3804d33a 	srli	r2,r7,12
 401bf5c:	11401bc4 	addi	r5,r2,111
 401bf60:	10c01b84 	addi	r3,r2,110
 401bf64:	294b883a 	add	r5,r5,r5
 401bf68:	003f7b06 	br	401bd58 <__alt_mem_onchip_memory2_0+0xfc016b98>
 401bf6c:	9c000217 	ldw	r16,8(r19)
 401bf70:	00bfff04 	movi	r2,-4
 401bf74:	80c00117 	ldw	r3,4(r16)
 401bf78:	1886703a 	and	r3,r3,r2
 401bf7c:	003f5306 	br	401bccc <__alt_mem_onchip_memory2_0+0xfc016b0c>
 401bf80:	3083ffcc 	andi	r2,r6,4095
 401bf84:	103f181e 	bne	r2,zero,401bbe8 <__alt_mem_onchip_memory2_0+0xfc016a28>
 401bf88:	99000217 	ldw	r4,8(r19)
 401bf8c:	b545883a 	add	r2,r22,r21
 401bf90:	10800054 	ori	r2,r2,1
 401bf94:	20800115 	stw	r2,4(r4)
 401bf98:	003f3e06 	br	401bc94 <__alt_mem_onchip_memory2_0+0xfc016ad4>
 401bf9c:	01003f84 	movi	r4,254
 401bfa0:	02001fc4 	movi	r8,127
 401bfa4:	01c01f84 	movi	r7,126
 401bfa8:	003e4006 	br	401b8ac <__alt_mem_onchip_memory2_0+0xfc0166ec>
 401bfac:	008100b4 	movhi	r2,1026
 401bfb0:	109ddf04 	addi	r2,r2,30588
 401bfb4:	15000015 	stw	r20,0(r2)
 401bfb8:	003f1106 	br	401bc00 <__alt_mem_onchip_memory2_0+0xfc016a40>
 401bfbc:	00800044 	movi	r2,1
 401bfc0:	002b883a 	mov	r21,zero
 401bfc4:	003f1f06 	br	401bc44 <__alt_mem_onchip_memory2_0+0xfc016a84>
 401bfc8:	81400204 	addi	r5,r16,8
 401bfcc:	9009883a 	mov	r4,r18
 401bfd0:	401abe00 	call	401abe0 <_free_r>
 401bfd4:	008100f4 	movhi	r2,1027
 401bfd8:	10a5fa04 	addi	r2,r2,-26648
 401bfdc:	10c00017 	ldw	r3,0(r2)
 401bfe0:	003f2c06 	br	401bc94 <__alt_mem_onchip_memory2_0+0xfc016ad4>
 401bfe4:	00c05504 	movi	r3,340
 401bfe8:	18800536 	bltu	r3,r2,401c000 <_malloc_r+0x7cc>
 401bfec:	3804d3fa 	srli	r2,r7,15
 401bff0:	11401e04 	addi	r5,r2,120
 401bff4:	10c01dc4 	addi	r3,r2,119
 401bff8:	294b883a 	add	r5,r5,r5
 401bffc:	003f5606 	br	401bd58 <__alt_mem_onchip_memory2_0+0xfc016b98>
 401c000:	00c15504 	movi	r3,1364
 401c004:	18800536 	bltu	r3,r2,401c01c <_malloc_r+0x7e8>
 401c008:	3804d4ba 	srli	r2,r7,18
 401c00c:	11401f44 	addi	r5,r2,125
 401c010:	10c01f04 	addi	r3,r2,124
 401c014:	294b883a 	add	r5,r5,r5
 401c018:	003f4f06 	br	401bd58 <__alt_mem_onchip_memory2_0+0xfc016b98>
 401c01c:	01403f84 	movi	r5,254
 401c020:	00c01f84 	movi	r3,126
 401c024:	003f4c06 	br	401bd58 <__alt_mem_onchip_memory2_0+0xfc016b98>
 401c028:	98800117 	ldw	r2,4(r19)
 401c02c:	003fa006 	br	401beb0 <__alt_mem_onchip_memory2_0+0xfc016cf0>
 401c030:	8808d0fa 	srli	r4,r17,3
 401c034:	20800044 	addi	r2,r4,1
 401c038:	1085883a 	add	r2,r2,r2
 401c03c:	003e9006 	br	401ba80 <__alt_mem_onchip_memory2_0+0xfc0168c0>

0401c040 <memchr>:
 401c040:	208000cc 	andi	r2,r4,3
 401c044:	280f883a 	mov	r7,r5
 401c048:	10003426 	beq	r2,zero,401c11c <memchr+0xdc>
 401c04c:	30bfffc4 	addi	r2,r6,-1
 401c050:	30001a26 	beq	r6,zero,401c0bc <memchr+0x7c>
 401c054:	20c00003 	ldbu	r3,0(r4)
 401c058:	29803fcc 	andi	r6,r5,255
 401c05c:	30c0051e 	bne	r6,r3,401c074 <memchr+0x34>
 401c060:	00001806 	br	401c0c4 <memchr+0x84>
 401c064:	10001526 	beq	r2,zero,401c0bc <memchr+0x7c>
 401c068:	20c00003 	ldbu	r3,0(r4)
 401c06c:	10bfffc4 	addi	r2,r2,-1
 401c070:	30c01426 	beq	r6,r3,401c0c4 <memchr+0x84>
 401c074:	21000044 	addi	r4,r4,1
 401c078:	20c000cc 	andi	r3,r4,3
 401c07c:	183ff91e 	bne	r3,zero,401c064 <__alt_mem_onchip_memory2_0+0xfc016ea4>
 401c080:	020000c4 	movi	r8,3
 401c084:	40801136 	bltu	r8,r2,401c0cc <memchr+0x8c>
 401c088:	10000c26 	beq	r2,zero,401c0bc <memchr+0x7c>
 401c08c:	20c00003 	ldbu	r3,0(r4)
 401c090:	29403fcc 	andi	r5,r5,255
 401c094:	28c00b26 	beq	r5,r3,401c0c4 <memchr+0x84>
 401c098:	20c00044 	addi	r3,r4,1
 401c09c:	39803fcc 	andi	r6,r7,255
 401c0a0:	2089883a 	add	r4,r4,r2
 401c0a4:	00000306 	br	401c0b4 <memchr+0x74>
 401c0a8:	18c00044 	addi	r3,r3,1
 401c0ac:	197fffc3 	ldbu	r5,-1(r3)
 401c0b0:	31400526 	beq	r6,r5,401c0c8 <memchr+0x88>
 401c0b4:	1805883a 	mov	r2,r3
 401c0b8:	20fffb1e 	bne	r4,r3,401c0a8 <__alt_mem_onchip_memory2_0+0xfc016ee8>
 401c0bc:	0005883a 	mov	r2,zero
 401c0c0:	f800283a 	ret
 401c0c4:	2005883a 	mov	r2,r4
 401c0c8:	f800283a 	ret
 401c0cc:	28c03fcc 	andi	r3,r5,255
 401c0d0:	1812923a 	slli	r9,r3,8
 401c0d4:	02ffbff4 	movhi	r11,65279
 401c0d8:	02a02074 	movhi	r10,32897
 401c0dc:	48d2b03a 	or	r9,r9,r3
 401c0e0:	4806943a 	slli	r3,r9,16
 401c0e4:	5affbfc4 	addi	r11,r11,-257
 401c0e8:	52a02004 	addi	r10,r10,-32640
 401c0ec:	48d2b03a 	or	r9,r9,r3
 401c0f0:	20c00017 	ldw	r3,0(r4)
 401c0f4:	48c6f03a 	xor	r3,r9,r3
 401c0f8:	1acd883a 	add	r6,r3,r11
 401c0fc:	00c6303a 	nor	r3,zero,r3
 401c100:	30c6703a 	and	r3,r6,r3
 401c104:	1a86703a 	and	r3,r3,r10
 401c108:	183fe01e 	bne	r3,zero,401c08c <__alt_mem_onchip_memory2_0+0xfc016ecc>
 401c10c:	10bfff04 	addi	r2,r2,-4
 401c110:	21000104 	addi	r4,r4,4
 401c114:	40bff636 	bltu	r8,r2,401c0f0 <__alt_mem_onchip_memory2_0+0xfc016f30>
 401c118:	003fdb06 	br	401c088 <__alt_mem_onchip_memory2_0+0xfc016ec8>
 401c11c:	3005883a 	mov	r2,r6
 401c120:	003fd706 	br	401c080 <__alt_mem_onchip_memory2_0+0xfc016ec0>

0401c124 <memcpy>:
 401c124:	defffd04 	addi	sp,sp,-12
 401c128:	dfc00215 	stw	ra,8(sp)
 401c12c:	dc400115 	stw	r17,4(sp)
 401c130:	dc000015 	stw	r16,0(sp)
 401c134:	00c003c4 	movi	r3,15
 401c138:	2005883a 	mov	r2,r4
 401c13c:	1980452e 	bgeu	r3,r6,401c254 <memcpy+0x130>
 401c140:	2906b03a 	or	r3,r5,r4
 401c144:	18c000cc 	andi	r3,r3,3
 401c148:	1800441e 	bne	r3,zero,401c25c <memcpy+0x138>
 401c14c:	347ffc04 	addi	r17,r6,-16
 401c150:	8822d13a 	srli	r17,r17,4
 401c154:	28c00104 	addi	r3,r5,4
 401c158:	23400104 	addi	r13,r4,4
 401c15c:	8820913a 	slli	r16,r17,4
 401c160:	2b000204 	addi	r12,r5,8
 401c164:	22c00204 	addi	r11,r4,8
 401c168:	84000504 	addi	r16,r16,20
 401c16c:	2a800304 	addi	r10,r5,12
 401c170:	22400304 	addi	r9,r4,12
 401c174:	2c21883a 	add	r16,r5,r16
 401c178:	2811883a 	mov	r8,r5
 401c17c:	200f883a 	mov	r7,r4
 401c180:	41000017 	ldw	r4,0(r8)
 401c184:	1fc00017 	ldw	ra,0(r3)
 401c188:	63c00017 	ldw	r15,0(r12)
 401c18c:	39000015 	stw	r4,0(r7)
 401c190:	53800017 	ldw	r14,0(r10)
 401c194:	6fc00015 	stw	ra,0(r13)
 401c198:	5bc00015 	stw	r15,0(r11)
 401c19c:	4b800015 	stw	r14,0(r9)
 401c1a0:	18c00404 	addi	r3,r3,16
 401c1a4:	39c00404 	addi	r7,r7,16
 401c1a8:	42000404 	addi	r8,r8,16
 401c1ac:	6b400404 	addi	r13,r13,16
 401c1b0:	63000404 	addi	r12,r12,16
 401c1b4:	5ac00404 	addi	r11,r11,16
 401c1b8:	52800404 	addi	r10,r10,16
 401c1bc:	4a400404 	addi	r9,r9,16
 401c1c0:	1c3fef1e 	bne	r3,r16,401c180 <__alt_mem_onchip_memory2_0+0xfc016fc0>
 401c1c4:	89c00044 	addi	r7,r17,1
 401c1c8:	380e913a 	slli	r7,r7,4
 401c1cc:	310003cc 	andi	r4,r6,15
 401c1d0:	02c000c4 	movi	r11,3
 401c1d4:	11c7883a 	add	r3,r2,r7
 401c1d8:	29cb883a 	add	r5,r5,r7
 401c1dc:	5900212e 	bgeu	r11,r4,401c264 <memcpy+0x140>
 401c1e0:	1813883a 	mov	r9,r3
 401c1e4:	2811883a 	mov	r8,r5
 401c1e8:	200f883a 	mov	r7,r4
 401c1ec:	42800017 	ldw	r10,0(r8)
 401c1f0:	4a400104 	addi	r9,r9,4
 401c1f4:	39ffff04 	addi	r7,r7,-4
 401c1f8:	4abfff15 	stw	r10,-4(r9)
 401c1fc:	42000104 	addi	r8,r8,4
 401c200:	59fffa36 	bltu	r11,r7,401c1ec <__alt_mem_onchip_memory2_0+0xfc01702c>
 401c204:	213fff04 	addi	r4,r4,-4
 401c208:	2008d0ba 	srli	r4,r4,2
 401c20c:	318000cc 	andi	r6,r6,3
 401c210:	21000044 	addi	r4,r4,1
 401c214:	2109883a 	add	r4,r4,r4
 401c218:	2109883a 	add	r4,r4,r4
 401c21c:	1907883a 	add	r3,r3,r4
 401c220:	290b883a 	add	r5,r5,r4
 401c224:	30000626 	beq	r6,zero,401c240 <memcpy+0x11c>
 401c228:	198d883a 	add	r6,r3,r6
 401c22c:	29c00003 	ldbu	r7,0(r5)
 401c230:	18c00044 	addi	r3,r3,1
 401c234:	29400044 	addi	r5,r5,1
 401c238:	19ffffc5 	stb	r7,-1(r3)
 401c23c:	19bffb1e 	bne	r3,r6,401c22c <__alt_mem_onchip_memory2_0+0xfc01706c>
 401c240:	dfc00217 	ldw	ra,8(sp)
 401c244:	dc400117 	ldw	r17,4(sp)
 401c248:	dc000017 	ldw	r16,0(sp)
 401c24c:	dec00304 	addi	sp,sp,12
 401c250:	f800283a 	ret
 401c254:	2007883a 	mov	r3,r4
 401c258:	003ff206 	br	401c224 <__alt_mem_onchip_memory2_0+0xfc017064>
 401c25c:	2007883a 	mov	r3,r4
 401c260:	003ff106 	br	401c228 <__alt_mem_onchip_memory2_0+0xfc017068>
 401c264:	200d883a 	mov	r6,r4
 401c268:	003fee06 	br	401c224 <__alt_mem_onchip_memory2_0+0xfc017064>

0401c26c <memmove>:
 401c26c:	2005883a 	mov	r2,r4
 401c270:	29000b2e 	bgeu	r5,r4,401c2a0 <memmove+0x34>
 401c274:	298f883a 	add	r7,r5,r6
 401c278:	21c0092e 	bgeu	r4,r7,401c2a0 <memmove+0x34>
 401c27c:	2187883a 	add	r3,r4,r6
 401c280:	198bc83a 	sub	r5,r3,r6
 401c284:	30004826 	beq	r6,zero,401c3a8 <memmove+0x13c>
 401c288:	39ffffc4 	addi	r7,r7,-1
 401c28c:	39000003 	ldbu	r4,0(r7)
 401c290:	18ffffc4 	addi	r3,r3,-1
 401c294:	19000005 	stb	r4,0(r3)
 401c298:	28fffb1e 	bne	r5,r3,401c288 <__alt_mem_onchip_memory2_0+0xfc0170c8>
 401c29c:	f800283a 	ret
 401c2a0:	00c003c4 	movi	r3,15
 401c2a4:	1980412e 	bgeu	r3,r6,401c3ac <memmove+0x140>
 401c2a8:	2886b03a 	or	r3,r5,r2
 401c2ac:	18c000cc 	andi	r3,r3,3
 401c2b0:	1800401e 	bne	r3,zero,401c3b4 <memmove+0x148>
 401c2b4:	33fffc04 	addi	r15,r6,-16
 401c2b8:	781ed13a 	srli	r15,r15,4
 401c2bc:	28c00104 	addi	r3,r5,4
 401c2c0:	13400104 	addi	r13,r2,4
 401c2c4:	781c913a 	slli	r14,r15,4
 401c2c8:	2b000204 	addi	r12,r5,8
 401c2cc:	12c00204 	addi	r11,r2,8
 401c2d0:	73800504 	addi	r14,r14,20
 401c2d4:	2a800304 	addi	r10,r5,12
 401c2d8:	12400304 	addi	r9,r2,12
 401c2dc:	2b9d883a 	add	r14,r5,r14
 401c2e0:	2811883a 	mov	r8,r5
 401c2e4:	100f883a 	mov	r7,r2
 401c2e8:	41000017 	ldw	r4,0(r8)
 401c2ec:	39c00404 	addi	r7,r7,16
 401c2f0:	18c00404 	addi	r3,r3,16
 401c2f4:	393ffc15 	stw	r4,-16(r7)
 401c2f8:	193ffc17 	ldw	r4,-16(r3)
 401c2fc:	6b400404 	addi	r13,r13,16
 401c300:	5ac00404 	addi	r11,r11,16
 401c304:	693ffc15 	stw	r4,-16(r13)
 401c308:	61000017 	ldw	r4,0(r12)
 401c30c:	4a400404 	addi	r9,r9,16
 401c310:	42000404 	addi	r8,r8,16
 401c314:	593ffc15 	stw	r4,-16(r11)
 401c318:	51000017 	ldw	r4,0(r10)
 401c31c:	63000404 	addi	r12,r12,16
 401c320:	52800404 	addi	r10,r10,16
 401c324:	493ffc15 	stw	r4,-16(r9)
 401c328:	1bbfef1e 	bne	r3,r14,401c2e8 <__alt_mem_onchip_memory2_0+0xfc017128>
 401c32c:	79000044 	addi	r4,r15,1
 401c330:	2008913a 	slli	r4,r4,4
 401c334:	328003cc 	andi	r10,r6,15
 401c338:	02c000c4 	movi	r11,3
 401c33c:	1107883a 	add	r3,r2,r4
 401c340:	290b883a 	add	r5,r5,r4
 401c344:	5a801e2e 	bgeu	r11,r10,401c3c0 <memmove+0x154>
 401c348:	1813883a 	mov	r9,r3
 401c34c:	2811883a 	mov	r8,r5
 401c350:	500f883a 	mov	r7,r10
 401c354:	41000017 	ldw	r4,0(r8)
 401c358:	4a400104 	addi	r9,r9,4
 401c35c:	39ffff04 	addi	r7,r7,-4
 401c360:	493fff15 	stw	r4,-4(r9)
 401c364:	42000104 	addi	r8,r8,4
 401c368:	59fffa36 	bltu	r11,r7,401c354 <__alt_mem_onchip_memory2_0+0xfc017194>
 401c36c:	513fff04 	addi	r4,r10,-4
 401c370:	2008d0ba 	srli	r4,r4,2
 401c374:	318000cc 	andi	r6,r6,3
 401c378:	21000044 	addi	r4,r4,1
 401c37c:	2109883a 	add	r4,r4,r4
 401c380:	2109883a 	add	r4,r4,r4
 401c384:	1907883a 	add	r3,r3,r4
 401c388:	290b883a 	add	r5,r5,r4
 401c38c:	30000b26 	beq	r6,zero,401c3bc <memmove+0x150>
 401c390:	198d883a 	add	r6,r3,r6
 401c394:	29c00003 	ldbu	r7,0(r5)
 401c398:	18c00044 	addi	r3,r3,1
 401c39c:	29400044 	addi	r5,r5,1
 401c3a0:	19ffffc5 	stb	r7,-1(r3)
 401c3a4:	19bffb1e 	bne	r3,r6,401c394 <__alt_mem_onchip_memory2_0+0xfc0171d4>
 401c3a8:	f800283a 	ret
 401c3ac:	1007883a 	mov	r3,r2
 401c3b0:	003ff606 	br	401c38c <__alt_mem_onchip_memory2_0+0xfc0171cc>
 401c3b4:	1007883a 	mov	r3,r2
 401c3b8:	003ff506 	br	401c390 <__alt_mem_onchip_memory2_0+0xfc0171d0>
 401c3bc:	f800283a 	ret
 401c3c0:	500d883a 	mov	r6,r10
 401c3c4:	003ff106 	br	401c38c <__alt_mem_onchip_memory2_0+0xfc0171cc>

0401c3c8 <memset>:
 401c3c8:	20c000cc 	andi	r3,r4,3
 401c3cc:	2005883a 	mov	r2,r4
 401c3d0:	18004426 	beq	r3,zero,401c4e4 <memset+0x11c>
 401c3d4:	31ffffc4 	addi	r7,r6,-1
 401c3d8:	30004026 	beq	r6,zero,401c4dc <memset+0x114>
 401c3dc:	2813883a 	mov	r9,r5
 401c3e0:	200d883a 	mov	r6,r4
 401c3e4:	2007883a 	mov	r3,r4
 401c3e8:	00000406 	br	401c3fc <memset+0x34>
 401c3ec:	3a3fffc4 	addi	r8,r7,-1
 401c3f0:	31800044 	addi	r6,r6,1
 401c3f4:	38003926 	beq	r7,zero,401c4dc <memset+0x114>
 401c3f8:	400f883a 	mov	r7,r8
 401c3fc:	18c00044 	addi	r3,r3,1
 401c400:	32400005 	stb	r9,0(r6)
 401c404:	1a0000cc 	andi	r8,r3,3
 401c408:	403ff81e 	bne	r8,zero,401c3ec <__alt_mem_onchip_memory2_0+0xfc01722c>
 401c40c:	010000c4 	movi	r4,3
 401c410:	21c02d2e 	bgeu	r4,r7,401c4c8 <memset+0x100>
 401c414:	29003fcc 	andi	r4,r5,255
 401c418:	200c923a 	slli	r6,r4,8
 401c41c:	3108b03a 	or	r4,r6,r4
 401c420:	200c943a 	slli	r6,r4,16
 401c424:	218cb03a 	or	r6,r4,r6
 401c428:	010003c4 	movi	r4,15
 401c42c:	21c0182e 	bgeu	r4,r7,401c490 <memset+0xc8>
 401c430:	3b3ffc04 	addi	r12,r7,-16
 401c434:	6018d13a 	srli	r12,r12,4
 401c438:	1a000104 	addi	r8,r3,4
 401c43c:	1ac00204 	addi	r11,r3,8
 401c440:	6008913a 	slli	r4,r12,4
 401c444:	1a800304 	addi	r10,r3,12
 401c448:	1813883a 	mov	r9,r3
 401c44c:	21000504 	addi	r4,r4,20
 401c450:	1909883a 	add	r4,r3,r4
 401c454:	49800015 	stw	r6,0(r9)
 401c458:	41800015 	stw	r6,0(r8)
 401c45c:	59800015 	stw	r6,0(r11)
 401c460:	51800015 	stw	r6,0(r10)
 401c464:	42000404 	addi	r8,r8,16
 401c468:	4a400404 	addi	r9,r9,16
 401c46c:	5ac00404 	addi	r11,r11,16
 401c470:	52800404 	addi	r10,r10,16
 401c474:	413ff71e 	bne	r8,r4,401c454 <__alt_mem_onchip_memory2_0+0xfc017294>
 401c478:	63000044 	addi	r12,r12,1
 401c47c:	6018913a 	slli	r12,r12,4
 401c480:	39c003cc 	andi	r7,r7,15
 401c484:	010000c4 	movi	r4,3
 401c488:	1b07883a 	add	r3,r3,r12
 401c48c:	21c00e2e 	bgeu	r4,r7,401c4c8 <memset+0x100>
 401c490:	1813883a 	mov	r9,r3
 401c494:	3811883a 	mov	r8,r7
 401c498:	010000c4 	movi	r4,3
 401c49c:	49800015 	stw	r6,0(r9)
 401c4a0:	423fff04 	addi	r8,r8,-4
 401c4a4:	4a400104 	addi	r9,r9,4
 401c4a8:	223ffc36 	bltu	r4,r8,401c49c <__alt_mem_onchip_memory2_0+0xfc0172dc>
 401c4ac:	393fff04 	addi	r4,r7,-4
 401c4b0:	2008d0ba 	srli	r4,r4,2
 401c4b4:	39c000cc 	andi	r7,r7,3
 401c4b8:	21000044 	addi	r4,r4,1
 401c4bc:	2109883a 	add	r4,r4,r4
 401c4c0:	2109883a 	add	r4,r4,r4
 401c4c4:	1907883a 	add	r3,r3,r4
 401c4c8:	38000526 	beq	r7,zero,401c4e0 <memset+0x118>
 401c4cc:	19cf883a 	add	r7,r3,r7
 401c4d0:	19400005 	stb	r5,0(r3)
 401c4d4:	18c00044 	addi	r3,r3,1
 401c4d8:	38fffd1e 	bne	r7,r3,401c4d0 <__alt_mem_onchip_memory2_0+0xfc017310>
 401c4dc:	f800283a 	ret
 401c4e0:	f800283a 	ret
 401c4e4:	2007883a 	mov	r3,r4
 401c4e8:	300f883a 	mov	r7,r6
 401c4ec:	003fc706 	br	401c40c <__alt_mem_onchip_memory2_0+0xfc01724c>

0401c4f0 <_Balloc>:
 401c4f0:	20801317 	ldw	r2,76(r4)
 401c4f4:	defffc04 	addi	sp,sp,-16
 401c4f8:	dc400115 	stw	r17,4(sp)
 401c4fc:	dc000015 	stw	r16,0(sp)
 401c500:	dfc00315 	stw	ra,12(sp)
 401c504:	dc800215 	stw	r18,8(sp)
 401c508:	2023883a 	mov	r17,r4
 401c50c:	2821883a 	mov	r16,r5
 401c510:	10000f26 	beq	r2,zero,401c550 <_Balloc+0x60>
 401c514:	8407883a 	add	r3,r16,r16
 401c518:	18c7883a 	add	r3,r3,r3
 401c51c:	10c7883a 	add	r3,r2,r3
 401c520:	18800017 	ldw	r2,0(r3)
 401c524:	10001126 	beq	r2,zero,401c56c <_Balloc+0x7c>
 401c528:	11000017 	ldw	r4,0(r2)
 401c52c:	19000015 	stw	r4,0(r3)
 401c530:	10000415 	stw	zero,16(r2)
 401c534:	10000315 	stw	zero,12(r2)
 401c538:	dfc00317 	ldw	ra,12(sp)
 401c53c:	dc800217 	ldw	r18,8(sp)
 401c540:	dc400117 	ldw	r17,4(sp)
 401c544:	dc000017 	ldw	r16,0(sp)
 401c548:	dec00404 	addi	sp,sp,16
 401c54c:	f800283a 	ret
 401c550:	01800844 	movi	r6,33
 401c554:	01400104 	movi	r5,4
 401c558:	4020d540 	call	4020d54 <_calloc_r>
 401c55c:	88801315 	stw	r2,76(r17)
 401c560:	103fec1e 	bne	r2,zero,401c514 <__alt_mem_onchip_memory2_0+0xfc017354>
 401c564:	0005883a 	mov	r2,zero
 401c568:	003ff306 	br	401c538 <__alt_mem_onchip_memory2_0+0xfc017378>
 401c56c:	01400044 	movi	r5,1
 401c570:	2c24983a 	sll	r18,r5,r16
 401c574:	8809883a 	mov	r4,r17
 401c578:	91800144 	addi	r6,r18,5
 401c57c:	318d883a 	add	r6,r6,r6
 401c580:	318d883a 	add	r6,r6,r6
 401c584:	4020d540 	call	4020d54 <_calloc_r>
 401c588:	103ff626 	beq	r2,zero,401c564 <__alt_mem_onchip_memory2_0+0xfc0173a4>
 401c58c:	14000115 	stw	r16,4(r2)
 401c590:	14800215 	stw	r18,8(r2)
 401c594:	003fe606 	br	401c530 <__alt_mem_onchip_memory2_0+0xfc017370>

0401c598 <_Bfree>:
 401c598:	28000826 	beq	r5,zero,401c5bc <_Bfree+0x24>
 401c59c:	28c00117 	ldw	r3,4(r5)
 401c5a0:	20801317 	ldw	r2,76(r4)
 401c5a4:	18c7883a 	add	r3,r3,r3
 401c5a8:	18c7883a 	add	r3,r3,r3
 401c5ac:	10c5883a 	add	r2,r2,r3
 401c5b0:	10c00017 	ldw	r3,0(r2)
 401c5b4:	28c00015 	stw	r3,0(r5)
 401c5b8:	11400015 	stw	r5,0(r2)
 401c5bc:	f800283a 	ret

0401c5c0 <__multadd>:
 401c5c0:	defff704 	addi	sp,sp,-36
 401c5c4:	dc800215 	stw	r18,8(sp)
 401c5c8:	2c800417 	ldw	r18,16(r5)
 401c5cc:	dd800615 	stw	r22,24(sp)
 401c5d0:	dd400515 	stw	r21,20(sp)
 401c5d4:	dd000415 	stw	r20,16(sp)
 401c5d8:	dcc00315 	stw	r19,12(sp)
 401c5dc:	dc400115 	stw	r17,4(sp)
 401c5e0:	dc000015 	stw	r16,0(sp)
 401c5e4:	dfc00815 	stw	ra,32(sp)
 401c5e8:	ddc00715 	stw	r23,28(sp)
 401c5ec:	2827883a 	mov	r19,r5
 401c5f0:	2029883a 	mov	r20,r4
 401c5f4:	3023883a 	mov	r17,r6
 401c5f8:	3821883a 	mov	r16,r7
 401c5fc:	2d400504 	addi	r21,r5,20
 401c600:	002d883a 	mov	r22,zero
 401c604:	adc00017 	ldw	r23,0(r21)
 401c608:	880b883a 	mov	r5,r17
 401c60c:	ad400104 	addi	r21,r21,4
 401c610:	b93fffcc 	andi	r4,r23,65535
 401c614:	40118340 	call	4011834 <__mulsi3>
 401c618:	b808d43a 	srli	r4,r23,16
 401c61c:	880b883a 	mov	r5,r17
 401c620:	1421883a 	add	r16,r2,r16
 401c624:	40118340 	call	4011834 <__mulsi3>
 401c628:	800ed43a 	srli	r7,r16,16
 401c62c:	80ffffcc 	andi	r3,r16,65535
 401c630:	b5800044 	addi	r22,r22,1
 401c634:	11c5883a 	add	r2,r2,r7
 401c638:	100e943a 	slli	r7,r2,16
 401c63c:	1020d43a 	srli	r16,r2,16
 401c640:	38c7883a 	add	r3,r7,r3
 401c644:	a8ffff15 	stw	r3,-4(r21)
 401c648:	b4bfee16 	blt	r22,r18,401c604 <__alt_mem_onchip_memory2_0+0xfc017444>
 401c64c:	80000926 	beq	r16,zero,401c674 <__multadd+0xb4>
 401c650:	98800217 	ldw	r2,8(r19)
 401c654:	9080130e 	bge	r18,r2,401c6a4 <__multadd+0xe4>
 401c658:	90800144 	addi	r2,r18,5
 401c65c:	1085883a 	add	r2,r2,r2
 401c660:	1085883a 	add	r2,r2,r2
 401c664:	9885883a 	add	r2,r19,r2
 401c668:	14000015 	stw	r16,0(r2)
 401c66c:	94800044 	addi	r18,r18,1
 401c670:	9c800415 	stw	r18,16(r19)
 401c674:	9805883a 	mov	r2,r19
 401c678:	dfc00817 	ldw	ra,32(sp)
 401c67c:	ddc00717 	ldw	r23,28(sp)
 401c680:	dd800617 	ldw	r22,24(sp)
 401c684:	dd400517 	ldw	r21,20(sp)
 401c688:	dd000417 	ldw	r20,16(sp)
 401c68c:	dcc00317 	ldw	r19,12(sp)
 401c690:	dc800217 	ldw	r18,8(sp)
 401c694:	dc400117 	ldw	r17,4(sp)
 401c698:	dc000017 	ldw	r16,0(sp)
 401c69c:	dec00904 	addi	sp,sp,36
 401c6a0:	f800283a 	ret
 401c6a4:	99400117 	ldw	r5,4(r19)
 401c6a8:	a009883a 	mov	r4,r20
 401c6ac:	29400044 	addi	r5,r5,1
 401c6b0:	401c4f00 	call	401c4f0 <_Balloc>
 401c6b4:	99800417 	ldw	r6,16(r19)
 401c6b8:	99400304 	addi	r5,r19,12
 401c6bc:	11000304 	addi	r4,r2,12
 401c6c0:	31800084 	addi	r6,r6,2
 401c6c4:	318d883a 	add	r6,r6,r6
 401c6c8:	318d883a 	add	r6,r6,r6
 401c6cc:	1023883a 	mov	r17,r2
 401c6d0:	401c1240 	call	401c124 <memcpy>
 401c6d4:	98000a26 	beq	r19,zero,401c700 <__multadd+0x140>
 401c6d8:	98c00117 	ldw	r3,4(r19)
 401c6dc:	a0801317 	ldw	r2,76(r20)
 401c6e0:	18c7883a 	add	r3,r3,r3
 401c6e4:	18c7883a 	add	r3,r3,r3
 401c6e8:	10c5883a 	add	r2,r2,r3
 401c6ec:	10c00017 	ldw	r3,0(r2)
 401c6f0:	98c00015 	stw	r3,0(r19)
 401c6f4:	14c00015 	stw	r19,0(r2)
 401c6f8:	8827883a 	mov	r19,r17
 401c6fc:	003fd606 	br	401c658 <__alt_mem_onchip_memory2_0+0xfc017498>
 401c700:	8827883a 	mov	r19,r17
 401c704:	003fd406 	br	401c658 <__alt_mem_onchip_memory2_0+0xfc017498>

0401c708 <__s2b>:
 401c708:	defff904 	addi	sp,sp,-28
 401c70c:	dc400115 	stw	r17,4(sp)
 401c710:	dc000015 	stw	r16,0(sp)
 401c714:	2023883a 	mov	r17,r4
 401c718:	2821883a 	mov	r16,r5
 401c71c:	39000204 	addi	r4,r7,8
 401c720:	01400244 	movi	r5,9
 401c724:	dcc00315 	stw	r19,12(sp)
 401c728:	dc800215 	stw	r18,8(sp)
 401c72c:	dfc00615 	stw	ra,24(sp)
 401c730:	dd400515 	stw	r21,20(sp)
 401c734:	dd000415 	stw	r20,16(sp)
 401c738:	3825883a 	mov	r18,r7
 401c73c:	3027883a 	mov	r19,r6
 401c740:	40116800 	call	4011680 <__divsi3>
 401c744:	00c00044 	movi	r3,1
 401c748:	000b883a 	mov	r5,zero
 401c74c:	1880030e 	bge	r3,r2,401c75c <__s2b+0x54>
 401c750:	18c7883a 	add	r3,r3,r3
 401c754:	29400044 	addi	r5,r5,1
 401c758:	18bffd16 	blt	r3,r2,401c750 <__alt_mem_onchip_memory2_0+0xfc017590>
 401c75c:	8809883a 	mov	r4,r17
 401c760:	401c4f00 	call	401c4f0 <_Balloc>
 401c764:	d8c00717 	ldw	r3,28(sp)
 401c768:	10c00515 	stw	r3,20(r2)
 401c76c:	00c00044 	movi	r3,1
 401c770:	10c00415 	stw	r3,16(r2)
 401c774:	00c00244 	movi	r3,9
 401c778:	1cc0210e 	bge	r3,r19,401c800 <__s2b+0xf8>
 401c77c:	80eb883a 	add	r21,r16,r3
 401c780:	a829883a 	mov	r20,r21
 401c784:	84e1883a 	add	r16,r16,r19
 401c788:	a1c00007 	ldb	r7,0(r20)
 401c78c:	01800284 	movi	r6,10
 401c790:	a5000044 	addi	r20,r20,1
 401c794:	100b883a 	mov	r5,r2
 401c798:	39fff404 	addi	r7,r7,-48
 401c79c:	8809883a 	mov	r4,r17
 401c7a0:	401c5c00 	call	401c5c0 <__multadd>
 401c7a4:	a43ff81e 	bne	r20,r16,401c788 <__alt_mem_onchip_memory2_0+0xfc0175c8>
 401c7a8:	ace1883a 	add	r16,r21,r19
 401c7ac:	843ffe04 	addi	r16,r16,-8
 401c7b0:	9c800a0e 	bge	r19,r18,401c7dc <__s2b+0xd4>
 401c7b4:	94e5c83a 	sub	r18,r18,r19
 401c7b8:	84a5883a 	add	r18,r16,r18
 401c7bc:	81c00007 	ldb	r7,0(r16)
 401c7c0:	01800284 	movi	r6,10
 401c7c4:	84000044 	addi	r16,r16,1
 401c7c8:	100b883a 	mov	r5,r2
 401c7cc:	39fff404 	addi	r7,r7,-48
 401c7d0:	8809883a 	mov	r4,r17
 401c7d4:	401c5c00 	call	401c5c0 <__multadd>
 401c7d8:	84bff81e 	bne	r16,r18,401c7bc <__alt_mem_onchip_memory2_0+0xfc0175fc>
 401c7dc:	dfc00617 	ldw	ra,24(sp)
 401c7e0:	dd400517 	ldw	r21,20(sp)
 401c7e4:	dd000417 	ldw	r20,16(sp)
 401c7e8:	dcc00317 	ldw	r19,12(sp)
 401c7ec:	dc800217 	ldw	r18,8(sp)
 401c7f0:	dc400117 	ldw	r17,4(sp)
 401c7f4:	dc000017 	ldw	r16,0(sp)
 401c7f8:	dec00704 	addi	sp,sp,28
 401c7fc:	f800283a 	ret
 401c800:	84000284 	addi	r16,r16,10
 401c804:	1827883a 	mov	r19,r3
 401c808:	003fe906 	br	401c7b0 <__alt_mem_onchip_memory2_0+0xfc0175f0>

0401c80c <__hi0bits>:
 401c80c:	20bfffec 	andhi	r2,r4,65535
 401c810:	1000141e 	bne	r2,zero,401c864 <__hi0bits+0x58>
 401c814:	2008943a 	slli	r4,r4,16
 401c818:	00800404 	movi	r2,16
 401c81c:	20ffc02c 	andhi	r3,r4,65280
 401c820:	1800021e 	bne	r3,zero,401c82c <__hi0bits+0x20>
 401c824:	2008923a 	slli	r4,r4,8
 401c828:	10800204 	addi	r2,r2,8
 401c82c:	20fc002c 	andhi	r3,r4,61440
 401c830:	1800021e 	bne	r3,zero,401c83c <__hi0bits+0x30>
 401c834:	2008913a 	slli	r4,r4,4
 401c838:	10800104 	addi	r2,r2,4
 401c83c:	20f0002c 	andhi	r3,r4,49152
 401c840:	1800031e 	bne	r3,zero,401c850 <__hi0bits+0x44>
 401c844:	2109883a 	add	r4,r4,r4
 401c848:	10800084 	addi	r2,r2,2
 401c84c:	2109883a 	add	r4,r4,r4
 401c850:	20000316 	blt	r4,zero,401c860 <__hi0bits+0x54>
 401c854:	2110002c 	andhi	r4,r4,16384
 401c858:	2000041e 	bne	r4,zero,401c86c <__hi0bits+0x60>
 401c85c:	00800804 	movi	r2,32
 401c860:	f800283a 	ret
 401c864:	0005883a 	mov	r2,zero
 401c868:	003fec06 	br	401c81c <__alt_mem_onchip_memory2_0+0xfc01765c>
 401c86c:	10800044 	addi	r2,r2,1
 401c870:	f800283a 	ret

0401c874 <__lo0bits>:
 401c874:	20c00017 	ldw	r3,0(r4)
 401c878:	188001cc 	andi	r2,r3,7
 401c87c:	10000826 	beq	r2,zero,401c8a0 <__lo0bits+0x2c>
 401c880:	1880004c 	andi	r2,r3,1
 401c884:	1000211e 	bne	r2,zero,401c90c <__lo0bits+0x98>
 401c888:	1880008c 	andi	r2,r3,2
 401c88c:	1000211e 	bne	r2,zero,401c914 <__lo0bits+0xa0>
 401c890:	1806d0ba 	srli	r3,r3,2
 401c894:	00800084 	movi	r2,2
 401c898:	20c00015 	stw	r3,0(r4)
 401c89c:	f800283a 	ret
 401c8a0:	18bfffcc 	andi	r2,r3,65535
 401c8a4:	10001326 	beq	r2,zero,401c8f4 <__lo0bits+0x80>
 401c8a8:	0005883a 	mov	r2,zero
 401c8ac:	19403fcc 	andi	r5,r3,255
 401c8b0:	2800021e 	bne	r5,zero,401c8bc <__lo0bits+0x48>
 401c8b4:	1806d23a 	srli	r3,r3,8
 401c8b8:	10800204 	addi	r2,r2,8
 401c8bc:	194003cc 	andi	r5,r3,15
 401c8c0:	2800021e 	bne	r5,zero,401c8cc <__lo0bits+0x58>
 401c8c4:	1806d13a 	srli	r3,r3,4
 401c8c8:	10800104 	addi	r2,r2,4
 401c8cc:	194000cc 	andi	r5,r3,3
 401c8d0:	2800021e 	bne	r5,zero,401c8dc <__lo0bits+0x68>
 401c8d4:	1806d0ba 	srli	r3,r3,2
 401c8d8:	10800084 	addi	r2,r2,2
 401c8dc:	1940004c 	andi	r5,r3,1
 401c8e0:	2800081e 	bne	r5,zero,401c904 <__lo0bits+0x90>
 401c8e4:	1806d07a 	srli	r3,r3,1
 401c8e8:	1800051e 	bne	r3,zero,401c900 <__lo0bits+0x8c>
 401c8ec:	00800804 	movi	r2,32
 401c8f0:	f800283a 	ret
 401c8f4:	1806d43a 	srli	r3,r3,16
 401c8f8:	00800404 	movi	r2,16
 401c8fc:	003feb06 	br	401c8ac <__alt_mem_onchip_memory2_0+0xfc0176ec>
 401c900:	10800044 	addi	r2,r2,1
 401c904:	20c00015 	stw	r3,0(r4)
 401c908:	f800283a 	ret
 401c90c:	0005883a 	mov	r2,zero
 401c910:	f800283a 	ret
 401c914:	1806d07a 	srli	r3,r3,1
 401c918:	00800044 	movi	r2,1
 401c91c:	20c00015 	stw	r3,0(r4)
 401c920:	f800283a 	ret

0401c924 <__i2b>:
 401c924:	defffd04 	addi	sp,sp,-12
 401c928:	dc000015 	stw	r16,0(sp)
 401c92c:	04000044 	movi	r16,1
 401c930:	dc400115 	stw	r17,4(sp)
 401c934:	2823883a 	mov	r17,r5
 401c938:	800b883a 	mov	r5,r16
 401c93c:	dfc00215 	stw	ra,8(sp)
 401c940:	401c4f00 	call	401c4f0 <_Balloc>
 401c944:	14400515 	stw	r17,20(r2)
 401c948:	14000415 	stw	r16,16(r2)
 401c94c:	dfc00217 	ldw	ra,8(sp)
 401c950:	dc400117 	ldw	r17,4(sp)
 401c954:	dc000017 	ldw	r16,0(sp)
 401c958:	dec00304 	addi	sp,sp,12
 401c95c:	f800283a 	ret

0401c960 <__multiply>:
 401c960:	deffef04 	addi	sp,sp,-68
 401c964:	dc400815 	stw	r17,32(sp)
 401c968:	dc000715 	stw	r16,28(sp)
 401c96c:	34400417 	ldw	r17,16(r6)
 401c970:	2c000417 	ldw	r16,16(r5)
 401c974:	dd800d15 	stw	r22,52(sp)
 401c978:	dc800915 	stw	r18,36(sp)
 401c97c:	dfc01015 	stw	ra,64(sp)
 401c980:	df000f15 	stw	fp,60(sp)
 401c984:	ddc00e15 	stw	r23,56(sp)
 401c988:	dd400c15 	stw	r21,48(sp)
 401c98c:	dd000b15 	stw	r20,44(sp)
 401c990:	dcc00a15 	stw	r19,40(sp)
 401c994:	2825883a 	mov	r18,r5
 401c998:	302d883a 	mov	r22,r6
 401c99c:	8440050e 	bge	r16,r17,401c9b4 <__multiply+0x54>
 401c9a0:	8007883a 	mov	r3,r16
 401c9a4:	3025883a 	mov	r18,r6
 401c9a8:	8821883a 	mov	r16,r17
 401c9ac:	282d883a 	mov	r22,r5
 401c9b0:	1823883a 	mov	r17,r3
 401c9b4:	90800217 	ldw	r2,8(r18)
 401c9b8:	8447883a 	add	r3,r16,r17
 401c9bc:	d8c00215 	stw	r3,8(sp)
 401c9c0:	91400117 	ldw	r5,4(r18)
 401c9c4:	10c0010e 	bge	r2,r3,401c9cc <__multiply+0x6c>
 401c9c8:	29400044 	addi	r5,r5,1
 401c9cc:	401c4f00 	call	401c4f0 <_Balloc>
 401c9d0:	d8c00217 	ldw	r3,8(sp)
 401c9d4:	d8800615 	stw	r2,24(sp)
 401c9d8:	18eb883a 	add	r21,r3,r3
 401c9dc:	ad6b883a 	add	r21,r21,r21
 401c9e0:	10c00504 	addi	r3,r2,20
 401c9e4:	1d6b883a 	add	r21,r3,r21
 401c9e8:	d8c00115 	stw	r3,4(sp)
 401c9ec:	dd400315 	stw	r21,12(sp)
 401c9f0:	1805883a 	mov	r2,r3
 401c9f4:	1d40042e 	bgeu	r3,r21,401ca08 <__multiply+0xa8>
 401c9f8:	d8c00317 	ldw	r3,12(sp)
 401c9fc:	10000015 	stw	zero,0(r2)
 401ca00:	10800104 	addi	r2,r2,4
 401ca04:	10fffc36 	bltu	r2,r3,401c9f8 <__alt_mem_onchip_memory2_0+0xfc017838>
 401ca08:	8c63883a 	add	r17,r17,r17
 401ca0c:	b5800504 	addi	r22,r22,20
 401ca10:	8c63883a 	add	r17,r17,r17
 401ca14:	94800504 	addi	r18,r18,20
 401ca18:	8421883a 	add	r16,r16,r16
 401ca1c:	b463883a 	add	r17,r22,r17
 401ca20:	8421883a 	add	r16,r16,r16
 401ca24:	dd800015 	stw	r22,0(sp)
 401ca28:	dc800415 	stw	r18,16(sp)
 401ca2c:	dc400515 	stw	r17,20(sp)
 401ca30:	9429883a 	add	r20,r18,r16
 401ca34:	b4404f2e 	bgeu	r22,r17,401cb74 <__multiply+0x214>
 401ca38:	d8c00017 	ldw	r3,0(sp)
 401ca3c:	1c800017 	ldw	r18,0(r3)
 401ca40:	947fffcc 	andi	r17,r18,65535
 401ca44:	88001e26 	beq	r17,zero,401cac0 <__multiply+0x160>
 401ca48:	dd800117 	ldw	r22,4(sp)
 401ca4c:	dd400417 	ldw	r21,16(sp)
 401ca50:	0027883a 	mov	r19,zero
 401ca54:	ac800017 	ldw	r18,0(r21)
 401ca58:	b4000017 	ldw	r16,0(r22)
 401ca5c:	880b883a 	mov	r5,r17
 401ca60:	913fffcc 	andi	r4,r18,65535
 401ca64:	40118340 	call	4011834 <__mulsi3>
 401ca68:	9008d43a 	srli	r4,r18,16
 401ca6c:	84bfffcc 	andi	r18,r16,65535
 401ca70:	1485883a 	add	r2,r2,r18
 401ca74:	14e5883a 	add	r18,r2,r19
 401ca78:	8020d43a 	srli	r16,r16,16
 401ca7c:	9026d43a 	srli	r19,r18,16
 401ca80:	880b883a 	mov	r5,r17
 401ca84:	40118340 	call	4011834 <__mulsi3>
 401ca88:	1405883a 	add	r2,r2,r16
 401ca8c:	14e1883a 	add	r16,r2,r19
 401ca90:	90ffffcc 	andi	r3,r18,65535
 401ca94:	8024943a 	slli	r18,r16,16
 401ca98:	ad400104 	addi	r21,r21,4
 401ca9c:	b005883a 	mov	r2,r22
 401caa0:	90c6b03a 	or	r3,r18,r3
 401caa4:	b0c00015 	stw	r3,0(r22)
 401caa8:	8026d43a 	srli	r19,r16,16
 401caac:	b5800104 	addi	r22,r22,4
 401cab0:	ad3fe836 	bltu	r21,r20,401ca54 <__alt_mem_onchip_memory2_0+0xfc017894>
 401cab4:	d8c00017 	ldw	r3,0(sp)
 401cab8:	14c00115 	stw	r19,4(r2)
 401cabc:	1c800017 	ldw	r18,0(r3)
 401cac0:	9024d43a 	srli	r18,r18,16
 401cac4:	90002226 	beq	r18,zero,401cb50 <__multiply+0x1f0>
 401cac8:	d8c00117 	ldw	r3,4(sp)
 401cacc:	dd800417 	ldw	r22,16(sp)
 401cad0:	002f883a 	mov	r23,zero
 401cad4:	1f000017 	ldw	fp,0(r3)
 401cad8:	1823883a 	mov	r17,r3
 401cadc:	182b883a 	mov	r21,r3
 401cae0:	e021883a 	mov	r16,fp
 401cae4:	00000106 	br	401caec <__multiply+0x18c>
 401cae8:	982b883a 	mov	r21,r19
 401caec:	b100000b 	ldhu	r4,0(r22)
 401caf0:	8020d43a 	srli	r16,r16,16
 401caf4:	900b883a 	mov	r5,r18
 401caf8:	40118340 	call	4011834 <__mulsi3>
 401cafc:	1405883a 	add	r2,r2,r16
 401cb00:	15ef883a 	add	r23,r2,r23
 401cb04:	b804943a 	slli	r2,r23,16
 401cb08:	e0ffffcc 	andi	r3,fp,65535
 401cb0c:	8c400104 	addi	r17,r17,4
 401cb10:	10c6b03a 	or	r3,r2,r3
 401cb14:	88ffff15 	stw	r3,-4(r17)
 401cb18:	b5800104 	addi	r22,r22,4
 401cb1c:	b13fff17 	ldw	r4,-4(r22)
 401cb20:	acc00104 	addi	r19,r21,4
 401cb24:	900b883a 	mov	r5,r18
 401cb28:	2008d43a 	srli	r4,r4,16
 401cb2c:	9c000017 	ldw	r16,0(r19)
 401cb30:	40118340 	call	4011834 <__mulsi3>
 401cb34:	b806d43a 	srli	r3,r23,16
 401cb38:	813fffcc 	andi	r4,r16,65535
 401cb3c:	1105883a 	add	r2,r2,r4
 401cb40:	10f9883a 	add	fp,r2,r3
 401cb44:	e02ed43a 	srli	r23,fp,16
 401cb48:	b53fe736 	bltu	r22,r20,401cae8 <__alt_mem_onchip_memory2_0+0xfc017928>
 401cb4c:	af000115 	stw	fp,4(r21)
 401cb50:	d8c00017 	ldw	r3,0(sp)
 401cb54:	d9000517 	ldw	r4,20(sp)
 401cb58:	18c00104 	addi	r3,r3,4
 401cb5c:	d8c00015 	stw	r3,0(sp)
 401cb60:	d8c00117 	ldw	r3,4(sp)
 401cb64:	18c00104 	addi	r3,r3,4
 401cb68:	d8c00115 	stw	r3,4(sp)
 401cb6c:	d8c00017 	ldw	r3,0(sp)
 401cb70:	193fb136 	bltu	r3,r4,401ca38 <__alt_mem_onchip_memory2_0+0xfc017878>
 401cb74:	d8c00217 	ldw	r3,8(sp)
 401cb78:	00c00c0e 	bge	zero,r3,401cbac <__multiply+0x24c>
 401cb7c:	d8c00317 	ldw	r3,12(sp)
 401cb80:	18bfff17 	ldw	r2,-4(r3)
 401cb84:	1d7fff04 	addi	r21,r3,-4
 401cb88:	10000326 	beq	r2,zero,401cb98 <__multiply+0x238>
 401cb8c:	00000706 	br	401cbac <__multiply+0x24c>
 401cb90:	a8800017 	ldw	r2,0(r21)
 401cb94:	1000051e 	bne	r2,zero,401cbac <__multiply+0x24c>
 401cb98:	d8c00217 	ldw	r3,8(sp)
 401cb9c:	ad7fff04 	addi	r21,r21,-4
 401cba0:	18ffffc4 	addi	r3,r3,-1
 401cba4:	d8c00215 	stw	r3,8(sp)
 401cba8:	183ff91e 	bne	r3,zero,401cb90 <__alt_mem_onchip_memory2_0+0xfc0179d0>
 401cbac:	d8c00617 	ldw	r3,24(sp)
 401cbb0:	d9000217 	ldw	r4,8(sp)
 401cbb4:	1805883a 	mov	r2,r3
 401cbb8:	19000415 	stw	r4,16(r3)
 401cbbc:	dfc01017 	ldw	ra,64(sp)
 401cbc0:	df000f17 	ldw	fp,60(sp)
 401cbc4:	ddc00e17 	ldw	r23,56(sp)
 401cbc8:	dd800d17 	ldw	r22,52(sp)
 401cbcc:	dd400c17 	ldw	r21,48(sp)
 401cbd0:	dd000b17 	ldw	r20,44(sp)
 401cbd4:	dcc00a17 	ldw	r19,40(sp)
 401cbd8:	dc800917 	ldw	r18,36(sp)
 401cbdc:	dc400817 	ldw	r17,32(sp)
 401cbe0:	dc000717 	ldw	r16,28(sp)
 401cbe4:	dec01104 	addi	sp,sp,68
 401cbe8:	f800283a 	ret

0401cbec <__pow5mult>:
 401cbec:	defffa04 	addi	sp,sp,-24
 401cbf0:	dcc00315 	stw	r19,12(sp)
 401cbf4:	dc000015 	stw	r16,0(sp)
 401cbf8:	dfc00515 	stw	ra,20(sp)
 401cbfc:	dd000415 	stw	r20,16(sp)
 401cc00:	dc800215 	stw	r18,8(sp)
 401cc04:	dc400115 	stw	r17,4(sp)
 401cc08:	308000cc 	andi	r2,r6,3
 401cc0c:	3021883a 	mov	r16,r6
 401cc10:	2027883a 	mov	r19,r4
 401cc14:	10002f1e 	bne	r2,zero,401ccd4 <__pow5mult+0xe8>
 401cc18:	2825883a 	mov	r18,r5
 401cc1c:	8021d0ba 	srai	r16,r16,2
 401cc20:	80001a26 	beq	r16,zero,401cc8c <__pow5mult+0xa0>
 401cc24:	9c401217 	ldw	r17,72(r19)
 401cc28:	8800061e 	bne	r17,zero,401cc44 <__pow5mult+0x58>
 401cc2c:	00003406 	br	401cd00 <__pow5mult+0x114>
 401cc30:	8021d07a 	srai	r16,r16,1
 401cc34:	80001526 	beq	r16,zero,401cc8c <__pow5mult+0xa0>
 401cc38:	88800017 	ldw	r2,0(r17)
 401cc3c:	10001c26 	beq	r2,zero,401ccb0 <__pow5mult+0xc4>
 401cc40:	1023883a 	mov	r17,r2
 401cc44:	8080004c 	andi	r2,r16,1
 401cc48:	103ff926 	beq	r2,zero,401cc30 <__alt_mem_onchip_memory2_0+0xfc017a70>
 401cc4c:	880d883a 	mov	r6,r17
 401cc50:	900b883a 	mov	r5,r18
 401cc54:	9809883a 	mov	r4,r19
 401cc58:	401c9600 	call	401c960 <__multiply>
 401cc5c:	90001b26 	beq	r18,zero,401cccc <__pow5mult+0xe0>
 401cc60:	91000117 	ldw	r4,4(r18)
 401cc64:	98c01317 	ldw	r3,76(r19)
 401cc68:	8021d07a 	srai	r16,r16,1
 401cc6c:	2109883a 	add	r4,r4,r4
 401cc70:	2109883a 	add	r4,r4,r4
 401cc74:	1907883a 	add	r3,r3,r4
 401cc78:	19000017 	ldw	r4,0(r3)
 401cc7c:	91000015 	stw	r4,0(r18)
 401cc80:	1c800015 	stw	r18,0(r3)
 401cc84:	1025883a 	mov	r18,r2
 401cc88:	803feb1e 	bne	r16,zero,401cc38 <__alt_mem_onchip_memory2_0+0xfc017a78>
 401cc8c:	9005883a 	mov	r2,r18
 401cc90:	dfc00517 	ldw	ra,20(sp)
 401cc94:	dd000417 	ldw	r20,16(sp)
 401cc98:	dcc00317 	ldw	r19,12(sp)
 401cc9c:	dc800217 	ldw	r18,8(sp)
 401cca0:	dc400117 	ldw	r17,4(sp)
 401cca4:	dc000017 	ldw	r16,0(sp)
 401cca8:	dec00604 	addi	sp,sp,24
 401ccac:	f800283a 	ret
 401ccb0:	880d883a 	mov	r6,r17
 401ccb4:	880b883a 	mov	r5,r17
 401ccb8:	9809883a 	mov	r4,r19
 401ccbc:	401c9600 	call	401c960 <__multiply>
 401ccc0:	88800015 	stw	r2,0(r17)
 401ccc4:	10000015 	stw	zero,0(r2)
 401ccc8:	003fdd06 	br	401cc40 <__alt_mem_onchip_memory2_0+0xfc017a80>
 401cccc:	1025883a 	mov	r18,r2
 401ccd0:	003fd706 	br	401cc30 <__alt_mem_onchip_memory2_0+0xfc017a70>
 401ccd4:	10bfffc4 	addi	r2,r2,-1
 401ccd8:	1085883a 	add	r2,r2,r2
 401ccdc:	00c100b4 	movhi	r3,1026
 401cce0:	18d5a304 	addi	r3,r3,22156
 401cce4:	1085883a 	add	r2,r2,r2
 401cce8:	1885883a 	add	r2,r3,r2
 401ccec:	11800017 	ldw	r6,0(r2)
 401ccf0:	000f883a 	mov	r7,zero
 401ccf4:	401c5c00 	call	401c5c0 <__multadd>
 401ccf8:	1025883a 	mov	r18,r2
 401ccfc:	003fc706 	br	401cc1c <__alt_mem_onchip_memory2_0+0xfc017a5c>
 401cd00:	05000044 	movi	r20,1
 401cd04:	a00b883a 	mov	r5,r20
 401cd08:	9809883a 	mov	r4,r19
 401cd0c:	401c4f00 	call	401c4f0 <_Balloc>
 401cd10:	1023883a 	mov	r17,r2
 401cd14:	00809c44 	movi	r2,625
 401cd18:	88800515 	stw	r2,20(r17)
 401cd1c:	8d000415 	stw	r20,16(r17)
 401cd20:	9c401215 	stw	r17,72(r19)
 401cd24:	88000015 	stw	zero,0(r17)
 401cd28:	003fc606 	br	401cc44 <__alt_mem_onchip_memory2_0+0xfc017a84>

0401cd2c <__lshift>:
 401cd2c:	defff904 	addi	sp,sp,-28
 401cd30:	dd400515 	stw	r21,20(sp)
 401cd34:	dcc00315 	stw	r19,12(sp)
 401cd38:	302bd17a 	srai	r21,r6,5
 401cd3c:	2cc00417 	ldw	r19,16(r5)
 401cd40:	28800217 	ldw	r2,8(r5)
 401cd44:	dd000415 	stw	r20,16(sp)
 401cd48:	ace7883a 	add	r19,r21,r19
 401cd4c:	dc800215 	stw	r18,8(sp)
 401cd50:	dc400115 	stw	r17,4(sp)
 401cd54:	dc000015 	stw	r16,0(sp)
 401cd58:	dfc00615 	stw	ra,24(sp)
 401cd5c:	9c000044 	addi	r16,r19,1
 401cd60:	2823883a 	mov	r17,r5
 401cd64:	3029883a 	mov	r20,r6
 401cd68:	2025883a 	mov	r18,r4
 401cd6c:	29400117 	ldw	r5,4(r5)
 401cd70:	1400030e 	bge	r2,r16,401cd80 <__lshift+0x54>
 401cd74:	1085883a 	add	r2,r2,r2
 401cd78:	29400044 	addi	r5,r5,1
 401cd7c:	143ffd16 	blt	r2,r16,401cd74 <__alt_mem_onchip_memory2_0+0xfc017bb4>
 401cd80:	9009883a 	mov	r4,r18
 401cd84:	401c4f00 	call	401c4f0 <_Balloc>
 401cd88:	10c00504 	addi	r3,r2,20
 401cd8c:	0540070e 	bge	zero,r21,401cdac <__lshift+0x80>
 401cd90:	ad6b883a 	add	r21,r21,r21
 401cd94:	ad6b883a 	add	r21,r21,r21
 401cd98:	1809883a 	mov	r4,r3
 401cd9c:	1d47883a 	add	r3,r3,r21
 401cda0:	20000015 	stw	zero,0(r4)
 401cda4:	21000104 	addi	r4,r4,4
 401cda8:	193ffd1e 	bne	r3,r4,401cda0 <__alt_mem_onchip_memory2_0+0xfc017be0>
 401cdac:	8a000417 	ldw	r8,16(r17)
 401cdb0:	89000504 	addi	r4,r17,20
 401cdb4:	a18007cc 	andi	r6,r20,31
 401cdb8:	4211883a 	add	r8,r8,r8
 401cdbc:	4211883a 	add	r8,r8,r8
 401cdc0:	2211883a 	add	r8,r4,r8
 401cdc4:	30002326 	beq	r6,zero,401ce54 <__lshift+0x128>
 401cdc8:	02400804 	movi	r9,32
 401cdcc:	4993c83a 	sub	r9,r9,r6
 401cdd0:	000b883a 	mov	r5,zero
 401cdd4:	21c00017 	ldw	r7,0(r4)
 401cdd8:	1815883a 	mov	r10,r3
 401cddc:	18c00104 	addi	r3,r3,4
 401cde0:	398e983a 	sll	r7,r7,r6
 401cde4:	21000104 	addi	r4,r4,4
 401cde8:	394ab03a 	or	r5,r7,r5
 401cdec:	197fff15 	stw	r5,-4(r3)
 401cdf0:	217fff17 	ldw	r5,-4(r4)
 401cdf4:	2a4ad83a 	srl	r5,r5,r9
 401cdf8:	223ff636 	bltu	r4,r8,401cdd4 <__alt_mem_onchip_memory2_0+0xfc017c14>
 401cdfc:	51400115 	stw	r5,4(r10)
 401ce00:	28001a1e 	bne	r5,zero,401ce6c <__lshift+0x140>
 401ce04:	843fffc4 	addi	r16,r16,-1
 401ce08:	14000415 	stw	r16,16(r2)
 401ce0c:	88000826 	beq	r17,zero,401ce30 <__lshift+0x104>
 401ce10:	89000117 	ldw	r4,4(r17)
 401ce14:	90c01317 	ldw	r3,76(r18)
 401ce18:	2109883a 	add	r4,r4,r4
 401ce1c:	2109883a 	add	r4,r4,r4
 401ce20:	1907883a 	add	r3,r3,r4
 401ce24:	19000017 	ldw	r4,0(r3)
 401ce28:	89000015 	stw	r4,0(r17)
 401ce2c:	1c400015 	stw	r17,0(r3)
 401ce30:	dfc00617 	ldw	ra,24(sp)
 401ce34:	dd400517 	ldw	r21,20(sp)
 401ce38:	dd000417 	ldw	r20,16(sp)
 401ce3c:	dcc00317 	ldw	r19,12(sp)
 401ce40:	dc800217 	ldw	r18,8(sp)
 401ce44:	dc400117 	ldw	r17,4(sp)
 401ce48:	dc000017 	ldw	r16,0(sp)
 401ce4c:	dec00704 	addi	sp,sp,28
 401ce50:	f800283a 	ret
 401ce54:	21400017 	ldw	r5,0(r4)
 401ce58:	18c00104 	addi	r3,r3,4
 401ce5c:	21000104 	addi	r4,r4,4
 401ce60:	197fff15 	stw	r5,-4(r3)
 401ce64:	223ffb36 	bltu	r4,r8,401ce54 <__alt_mem_onchip_memory2_0+0xfc017c94>
 401ce68:	003fe606 	br	401ce04 <__alt_mem_onchip_memory2_0+0xfc017c44>
 401ce6c:	9c000084 	addi	r16,r19,2
 401ce70:	003fe406 	br	401ce04 <__alt_mem_onchip_memory2_0+0xfc017c44>

0401ce74 <__mcmp>:
 401ce74:	20800417 	ldw	r2,16(r4)
 401ce78:	28c00417 	ldw	r3,16(r5)
 401ce7c:	10c5c83a 	sub	r2,r2,r3
 401ce80:	1000111e 	bne	r2,zero,401cec8 <__mcmp+0x54>
 401ce84:	18c7883a 	add	r3,r3,r3
 401ce88:	18c7883a 	add	r3,r3,r3
 401ce8c:	21000504 	addi	r4,r4,20
 401ce90:	29400504 	addi	r5,r5,20
 401ce94:	20c5883a 	add	r2,r4,r3
 401ce98:	28cb883a 	add	r5,r5,r3
 401ce9c:	00000106 	br	401cea4 <__mcmp+0x30>
 401cea0:	20800a2e 	bgeu	r4,r2,401cecc <__mcmp+0x58>
 401cea4:	10bfff04 	addi	r2,r2,-4
 401cea8:	297fff04 	addi	r5,r5,-4
 401ceac:	11800017 	ldw	r6,0(r2)
 401ceb0:	28c00017 	ldw	r3,0(r5)
 401ceb4:	30fffa26 	beq	r6,r3,401cea0 <__alt_mem_onchip_memory2_0+0xfc017ce0>
 401ceb8:	30c00236 	bltu	r6,r3,401cec4 <__mcmp+0x50>
 401cebc:	00800044 	movi	r2,1
 401cec0:	f800283a 	ret
 401cec4:	00bfffc4 	movi	r2,-1
 401cec8:	f800283a 	ret
 401cecc:	0005883a 	mov	r2,zero
 401ced0:	f800283a 	ret

0401ced4 <__mdiff>:
 401ced4:	28c00417 	ldw	r3,16(r5)
 401ced8:	30800417 	ldw	r2,16(r6)
 401cedc:	defffa04 	addi	sp,sp,-24
 401cee0:	dcc00315 	stw	r19,12(sp)
 401cee4:	dc800215 	stw	r18,8(sp)
 401cee8:	dfc00515 	stw	ra,20(sp)
 401ceec:	dd000415 	stw	r20,16(sp)
 401cef0:	dc400115 	stw	r17,4(sp)
 401cef4:	dc000015 	stw	r16,0(sp)
 401cef8:	1887c83a 	sub	r3,r3,r2
 401cefc:	2825883a 	mov	r18,r5
 401cf00:	3027883a 	mov	r19,r6
 401cf04:	1800141e 	bne	r3,zero,401cf58 <__mdiff+0x84>
 401cf08:	1085883a 	add	r2,r2,r2
 401cf0c:	1085883a 	add	r2,r2,r2
 401cf10:	2a000504 	addi	r8,r5,20
 401cf14:	34000504 	addi	r16,r6,20
 401cf18:	4087883a 	add	r3,r8,r2
 401cf1c:	8085883a 	add	r2,r16,r2
 401cf20:	00000106 	br	401cf28 <__mdiff+0x54>
 401cf24:	40c0592e 	bgeu	r8,r3,401d08c <__mdiff+0x1b8>
 401cf28:	18ffff04 	addi	r3,r3,-4
 401cf2c:	10bfff04 	addi	r2,r2,-4
 401cf30:	19c00017 	ldw	r7,0(r3)
 401cf34:	11400017 	ldw	r5,0(r2)
 401cf38:	397ffa26 	beq	r7,r5,401cf24 <__alt_mem_onchip_memory2_0+0xfc017d64>
 401cf3c:	3940592e 	bgeu	r7,r5,401d0a4 <__mdiff+0x1d0>
 401cf40:	9005883a 	mov	r2,r18
 401cf44:	4023883a 	mov	r17,r8
 401cf48:	9825883a 	mov	r18,r19
 401cf4c:	05000044 	movi	r20,1
 401cf50:	1027883a 	mov	r19,r2
 401cf54:	00000406 	br	401cf68 <__mdiff+0x94>
 401cf58:	18005616 	blt	r3,zero,401d0b4 <__mdiff+0x1e0>
 401cf5c:	34400504 	addi	r17,r6,20
 401cf60:	2c000504 	addi	r16,r5,20
 401cf64:	0029883a 	mov	r20,zero
 401cf68:	91400117 	ldw	r5,4(r18)
 401cf6c:	401c4f00 	call	401c4f0 <_Balloc>
 401cf70:	92400417 	ldw	r9,16(r18)
 401cf74:	9b000417 	ldw	r12,16(r19)
 401cf78:	12c00504 	addi	r11,r2,20
 401cf7c:	4a51883a 	add	r8,r9,r9
 401cf80:	6319883a 	add	r12,r12,r12
 401cf84:	4211883a 	add	r8,r8,r8
 401cf88:	6319883a 	add	r12,r12,r12
 401cf8c:	15000315 	stw	r20,12(r2)
 401cf90:	8211883a 	add	r8,r16,r8
 401cf94:	8b19883a 	add	r12,r17,r12
 401cf98:	0007883a 	mov	r3,zero
 401cf9c:	81400017 	ldw	r5,0(r16)
 401cfa0:	89c00017 	ldw	r7,0(r17)
 401cfa4:	59800104 	addi	r6,r11,4
 401cfa8:	293fffcc 	andi	r4,r5,65535
 401cfac:	20c7883a 	add	r3,r4,r3
 401cfb0:	393fffcc 	andi	r4,r7,65535
 401cfb4:	1909c83a 	sub	r4,r3,r4
 401cfb8:	280ad43a 	srli	r5,r5,16
 401cfbc:	380ed43a 	srli	r7,r7,16
 401cfc0:	2007d43a 	srai	r3,r4,16
 401cfc4:	213fffcc 	andi	r4,r4,65535
 401cfc8:	29cbc83a 	sub	r5,r5,r7
 401cfcc:	28c7883a 	add	r3,r5,r3
 401cfd0:	180a943a 	slli	r5,r3,16
 401cfd4:	8c400104 	addi	r17,r17,4
 401cfd8:	84000104 	addi	r16,r16,4
 401cfdc:	2908b03a 	or	r4,r5,r4
 401cfe0:	59000015 	stw	r4,0(r11)
 401cfe4:	1807d43a 	srai	r3,r3,16
 401cfe8:	3015883a 	mov	r10,r6
 401cfec:	3017883a 	mov	r11,r6
 401cff0:	8b3fea36 	bltu	r17,r12,401cf9c <__alt_mem_onchip_memory2_0+0xfc017ddc>
 401cff4:	8200162e 	bgeu	r16,r8,401d050 <__mdiff+0x17c>
 401cff8:	8017883a 	mov	r11,r16
 401cffc:	59400017 	ldw	r5,0(r11)
 401d000:	31800104 	addi	r6,r6,4
 401d004:	5ac00104 	addi	r11,r11,4
 401d008:	293fffcc 	andi	r4,r5,65535
 401d00c:	20c7883a 	add	r3,r4,r3
 401d010:	280ed43a 	srli	r7,r5,16
 401d014:	180bd43a 	srai	r5,r3,16
 401d018:	193fffcc 	andi	r4,r3,65535
 401d01c:	3947883a 	add	r3,r7,r5
 401d020:	180a943a 	slli	r5,r3,16
 401d024:	1807d43a 	srai	r3,r3,16
 401d028:	2908b03a 	or	r4,r5,r4
 401d02c:	313fff15 	stw	r4,-4(r6)
 401d030:	5a3ff236 	bltu	r11,r8,401cffc <__alt_mem_onchip_memory2_0+0xfc017e3c>
 401d034:	0406303a 	nor	r3,zero,r16
 401d038:	1a07883a 	add	r3,r3,r8
 401d03c:	1806d0ba 	srli	r3,r3,2
 401d040:	18c00044 	addi	r3,r3,1
 401d044:	18c7883a 	add	r3,r3,r3
 401d048:	18c7883a 	add	r3,r3,r3
 401d04c:	50d5883a 	add	r10,r10,r3
 401d050:	50ffff04 	addi	r3,r10,-4
 401d054:	2000041e 	bne	r4,zero,401d068 <__mdiff+0x194>
 401d058:	18ffff04 	addi	r3,r3,-4
 401d05c:	19000017 	ldw	r4,0(r3)
 401d060:	4a7fffc4 	addi	r9,r9,-1
 401d064:	203ffc26 	beq	r4,zero,401d058 <__alt_mem_onchip_memory2_0+0xfc017e98>
 401d068:	12400415 	stw	r9,16(r2)
 401d06c:	dfc00517 	ldw	ra,20(sp)
 401d070:	dd000417 	ldw	r20,16(sp)
 401d074:	dcc00317 	ldw	r19,12(sp)
 401d078:	dc800217 	ldw	r18,8(sp)
 401d07c:	dc400117 	ldw	r17,4(sp)
 401d080:	dc000017 	ldw	r16,0(sp)
 401d084:	dec00604 	addi	sp,sp,24
 401d088:	f800283a 	ret
 401d08c:	000b883a 	mov	r5,zero
 401d090:	401c4f00 	call	401c4f0 <_Balloc>
 401d094:	00c00044 	movi	r3,1
 401d098:	10c00415 	stw	r3,16(r2)
 401d09c:	10000515 	stw	zero,20(r2)
 401d0a0:	003ff206 	br	401d06c <__alt_mem_onchip_memory2_0+0xfc017eac>
 401d0a4:	8023883a 	mov	r17,r16
 401d0a8:	0029883a 	mov	r20,zero
 401d0ac:	4021883a 	mov	r16,r8
 401d0b0:	003fad06 	br	401cf68 <__alt_mem_onchip_memory2_0+0xfc017da8>
 401d0b4:	9005883a 	mov	r2,r18
 401d0b8:	94400504 	addi	r17,r18,20
 401d0bc:	9c000504 	addi	r16,r19,20
 401d0c0:	9825883a 	mov	r18,r19
 401d0c4:	05000044 	movi	r20,1
 401d0c8:	1027883a 	mov	r19,r2
 401d0cc:	003fa606 	br	401cf68 <__alt_mem_onchip_memory2_0+0xfc017da8>

0401d0d0 <__ulp>:
 401d0d0:	295ffc2c 	andhi	r5,r5,32752
 401d0d4:	00bf3034 	movhi	r2,64704
 401d0d8:	2887883a 	add	r3,r5,r2
 401d0dc:	00c0020e 	bge	zero,r3,401d0e8 <__ulp+0x18>
 401d0e0:	0005883a 	mov	r2,zero
 401d0e4:	f800283a 	ret
 401d0e8:	00c7c83a 	sub	r3,zero,r3
 401d0ec:	1807d53a 	srai	r3,r3,20
 401d0f0:	008004c4 	movi	r2,19
 401d0f4:	10c00b0e 	bge	r2,r3,401d124 <__ulp+0x54>
 401d0f8:	18bffb04 	addi	r2,r3,-20
 401d0fc:	01000784 	movi	r4,30
 401d100:	0007883a 	mov	r3,zero
 401d104:	20800516 	blt	r4,r2,401d11c <__ulp+0x4c>
 401d108:	010007c4 	movi	r4,31
 401d10c:	2089c83a 	sub	r4,r4,r2
 401d110:	00800044 	movi	r2,1
 401d114:	1104983a 	sll	r2,r2,r4
 401d118:	f800283a 	ret
 401d11c:	00800044 	movi	r2,1
 401d120:	f800283a 	ret
 401d124:	01400234 	movhi	r5,8
 401d128:	28c7d83a 	sra	r3,r5,r3
 401d12c:	0005883a 	mov	r2,zero
 401d130:	f800283a 	ret

0401d134 <__b2d>:
 401d134:	defffa04 	addi	sp,sp,-24
 401d138:	dc000015 	stw	r16,0(sp)
 401d13c:	24000417 	ldw	r16,16(r4)
 401d140:	dc400115 	stw	r17,4(sp)
 401d144:	24400504 	addi	r17,r4,20
 401d148:	8421883a 	add	r16,r16,r16
 401d14c:	8421883a 	add	r16,r16,r16
 401d150:	8c21883a 	add	r16,r17,r16
 401d154:	dc800215 	stw	r18,8(sp)
 401d158:	84bfff17 	ldw	r18,-4(r16)
 401d15c:	dd000415 	stw	r20,16(sp)
 401d160:	dcc00315 	stw	r19,12(sp)
 401d164:	9009883a 	mov	r4,r18
 401d168:	2829883a 	mov	r20,r5
 401d16c:	dfc00515 	stw	ra,20(sp)
 401d170:	401c80c0 	call	401c80c <__hi0bits>
 401d174:	00c00804 	movi	r3,32
 401d178:	1889c83a 	sub	r4,r3,r2
 401d17c:	a1000015 	stw	r4,0(r20)
 401d180:	01000284 	movi	r4,10
 401d184:	84ffff04 	addi	r19,r16,-4
 401d188:	20801216 	blt	r4,r2,401d1d4 <__b2d+0xa0>
 401d18c:	018002c4 	movi	r6,11
 401d190:	308dc83a 	sub	r6,r6,r2
 401d194:	9186d83a 	srl	r3,r18,r6
 401d198:	18cffc34 	orhi	r3,r3,16368
 401d19c:	8cc0212e 	bgeu	r17,r19,401d224 <__b2d+0xf0>
 401d1a0:	813ffe17 	ldw	r4,-8(r16)
 401d1a4:	218cd83a 	srl	r6,r4,r6
 401d1a8:	10800544 	addi	r2,r2,21
 401d1ac:	9084983a 	sll	r2,r18,r2
 401d1b0:	1184b03a 	or	r2,r2,r6
 401d1b4:	dfc00517 	ldw	ra,20(sp)
 401d1b8:	dd000417 	ldw	r20,16(sp)
 401d1bc:	dcc00317 	ldw	r19,12(sp)
 401d1c0:	dc800217 	ldw	r18,8(sp)
 401d1c4:	dc400117 	ldw	r17,4(sp)
 401d1c8:	dc000017 	ldw	r16,0(sp)
 401d1cc:	dec00604 	addi	sp,sp,24
 401d1d0:	f800283a 	ret
 401d1d4:	8cc00f2e 	bgeu	r17,r19,401d214 <__b2d+0xe0>
 401d1d8:	117ffd44 	addi	r5,r2,-11
 401d1dc:	80bffe17 	ldw	r2,-8(r16)
 401d1e0:	28000e26 	beq	r5,zero,401d21c <__b2d+0xe8>
 401d1e4:	1949c83a 	sub	r4,r3,r5
 401d1e8:	9164983a 	sll	r18,r18,r5
 401d1ec:	1106d83a 	srl	r3,r2,r4
 401d1f0:	81bffe04 	addi	r6,r16,-8
 401d1f4:	948ffc34 	orhi	r18,r18,16368
 401d1f8:	90c6b03a 	or	r3,r18,r3
 401d1fc:	89800e2e 	bgeu	r17,r6,401d238 <__b2d+0x104>
 401d200:	81bffd17 	ldw	r6,-12(r16)
 401d204:	1144983a 	sll	r2,r2,r5
 401d208:	310ad83a 	srl	r5,r6,r4
 401d20c:	2884b03a 	or	r2,r5,r2
 401d210:	003fe806 	br	401d1b4 <__alt_mem_onchip_memory2_0+0xfc017ff4>
 401d214:	10bffd44 	addi	r2,r2,-11
 401d218:	1000041e 	bne	r2,zero,401d22c <__b2d+0xf8>
 401d21c:	90cffc34 	orhi	r3,r18,16368
 401d220:	003fe406 	br	401d1b4 <__alt_mem_onchip_memory2_0+0xfc017ff4>
 401d224:	000d883a 	mov	r6,zero
 401d228:	003fdf06 	br	401d1a8 <__alt_mem_onchip_memory2_0+0xfc017fe8>
 401d22c:	90a4983a 	sll	r18,r18,r2
 401d230:	0005883a 	mov	r2,zero
 401d234:	003ff906 	br	401d21c <__alt_mem_onchip_memory2_0+0xfc01805c>
 401d238:	1144983a 	sll	r2,r2,r5
 401d23c:	003fdd06 	br	401d1b4 <__alt_mem_onchip_memory2_0+0xfc017ff4>

0401d240 <__d2b>:
 401d240:	defff804 	addi	sp,sp,-32
 401d244:	dc000215 	stw	r16,8(sp)
 401d248:	3021883a 	mov	r16,r6
 401d24c:	dc400315 	stw	r17,12(sp)
 401d250:	8022907a 	slli	r17,r16,1
 401d254:	dd000615 	stw	r20,24(sp)
 401d258:	2829883a 	mov	r20,r5
 401d25c:	01400044 	movi	r5,1
 401d260:	dcc00515 	stw	r19,20(sp)
 401d264:	dc800415 	stw	r18,16(sp)
 401d268:	dfc00715 	stw	ra,28(sp)
 401d26c:	3825883a 	mov	r18,r7
 401d270:	8822d57a 	srli	r17,r17,21
 401d274:	401c4f00 	call	401c4f0 <_Balloc>
 401d278:	1027883a 	mov	r19,r2
 401d27c:	00800434 	movhi	r2,16
 401d280:	10bfffc4 	addi	r2,r2,-1
 401d284:	808c703a 	and	r6,r16,r2
 401d288:	88000126 	beq	r17,zero,401d290 <__d2b+0x50>
 401d28c:	31800434 	orhi	r6,r6,16
 401d290:	d9800015 	stw	r6,0(sp)
 401d294:	a0002426 	beq	r20,zero,401d328 <__d2b+0xe8>
 401d298:	d9000104 	addi	r4,sp,4
 401d29c:	dd000115 	stw	r20,4(sp)
 401d2a0:	401c8740 	call	401c874 <__lo0bits>
 401d2a4:	d8c00017 	ldw	r3,0(sp)
 401d2a8:	10002f1e 	bne	r2,zero,401d368 <__d2b+0x128>
 401d2ac:	d9000117 	ldw	r4,4(sp)
 401d2b0:	99000515 	stw	r4,20(r19)
 401d2b4:	1821003a 	cmpeq	r16,r3,zero
 401d2b8:	01000084 	movi	r4,2
 401d2bc:	2421c83a 	sub	r16,r4,r16
 401d2c0:	98c00615 	stw	r3,24(r19)
 401d2c4:	9c000415 	stw	r16,16(r19)
 401d2c8:	88001f1e 	bne	r17,zero,401d348 <__d2b+0x108>
 401d2cc:	10bef384 	addi	r2,r2,-1074
 401d2d0:	90800015 	stw	r2,0(r18)
 401d2d4:	00900034 	movhi	r2,16384
 401d2d8:	10bfffc4 	addi	r2,r2,-1
 401d2dc:	8085883a 	add	r2,r16,r2
 401d2e0:	1085883a 	add	r2,r2,r2
 401d2e4:	1085883a 	add	r2,r2,r2
 401d2e8:	9885883a 	add	r2,r19,r2
 401d2ec:	11000517 	ldw	r4,20(r2)
 401d2f0:	8020917a 	slli	r16,r16,5
 401d2f4:	401c80c0 	call	401c80c <__hi0bits>
 401d2f8:	d8c00817 	ldw	r3,32(sp)
 401d2fc:	8085c83a 	sub	r2,r16,r2
 401d300:	18800015 	stw	r2,0(r3)
 401d304:	9805883a 	mov	r2,r19
 401d308:	dfc00717 	ldw	ra,28(sp)
 401d30c:	dd000617 	ldw	r20,24(sp)
 401d310:	dcc00517 	ldw	r19,20(sp)
 401d314:	dc800417 	ldw	r18,16(sp)
 401d318:	dc400317 	ldw	r17,12(sp)
 401d31c:	dc000217 	ldw	r16,8(sp)
 401d320:	dec00804 	addi	sp,sp,32
 401d324:	f800283a 	ret
 401d328:	d809883a 	mov	r4,sp
 401d32c:	401c8740 	call	401c874 <__lo0bits>
 401d330:	d8c00017 	ldw	r3,0(sp)
 401d334:	04000044 	movi	r16,1
 401d338:	9c000415 	stw	r16,16(r19)
 401d33c:	98c00515 	stw	r3,20(r19)
 401d340:	10800804 	addi	r2,r2,32
 401d344:	883fe126 	beq	r17,zero,401d2cc <__alt_mem_onchip_memory2_0+0xfc01810c>
 401d348:	00c00d44 	movi	r3,53
 401d34c:	8c7ef344 	addi	r17,r17,-1075
 401d350:	88a3883a 	add	r17,r17,r2
 401d354:	1885c83a 	sub	r2,r3,r2
 401d358:	d8c00817 	ldw	r3,32(sp)
 401d35c:	94400015 	stw	r17,0(r18)
 401d360:	18800015 	stw	r2,0(r3)
 401d364:	003fe706 	br	401d304 <__alt_mem_onchip_memory2_0+0xfc018144>
 401d368:	01000804 	movi	r4,32
 401d36c:	2089c83a 	sub	r4,r4,r2
 401d370:	1908983a 	sll	r4,r3,r4
 401d374:	d9400117 	ldw	r5,4(sp)
 401d378:	1886d83a 	srl	r3,r3,r2
 401d37c:	2148b03a 	or	r4,r4,r5
 401d380:	99000515 	stw	r4,20(r19)
 401d384:	d8c00015 	stw	r3,0(sp)
 401d388:	003fca06 	br	401d2b4 <__alt_mem_onchip_memory2_0+0xfc0180f4>

0401d38c <__ratio>:
 401d38c:	defff904 	addi	sp,sp,-28
 401d390:	dc400315 	stw	r17,12(sp)
 401d394:	2823883a 	mov	r17,r5
 401d398:	d9400104 	addi	r5,sp,4
 401d39c:	dfc00615 	stw	ra,24(sp)
 401d3a0:	dcc00515 	stw	r19,20(sp)
 401d3a4:	dc800415 	stw	r18,16(sp)
 401d3a8:	2027883a 	mov	r19,r4
 401d3ac:	dc000215 	stw	r16,8(sp)
 401d3b0:	401d1340 	call	401d134 <__b2d>
 401d3b4:	d80b883a 	mov	r5,sp
 401d3b8:	8809883a 	mov	r4,r17
 401d3bc:	1025883a 	mov	r18,r2
 401d3c0:	1821883a 	mov	r16,r3
 401d3c4:	401d1340 	call	401d134 <__b2d>
 401d3c8:	8a000417 	ldw	r8,16(r17)
 401d3cc:	99000417 	ldw	r4,16(r19)
 401d3d0:	d9400117 	ldw	r5,4(sp)
 401d3d4:	2209c83a 	sub	r4,r4,r8
 401d3d8:	2010917a 	slli	r8,r4,5
 401d3dc:	d9000017 	ldw	r4,0(sp)
 401d3e0:	2909c83a 	sub	r4,r5,r4
 401d3e4:	4109883a 	add	r4,r8,r4
 401d3e8:	01000e0e 	bge	zero,r4,401d424 <__ratio+0x98>
 401d3ec:	2008953a 	slli	r4,r4,20
 401d3f0:	2421883a 	add	r16,r4,r16
 401d3f4:	100d883a 	mov	r6,r2
 401d3f8:	180f883a 	mov	r7,r3
 401d3fc:	9009883a 	mov	r4,r18
 401d400:	800b883a 	mov	r5,r16
 401d404:	40121080 	call	4012108 <__divdf3>
 401d408:	dfc00617 	ldw	ra,24(sp)
 401d40c:	dcc00517 	ldw	r19,20(sp)
 401d410:	dc800417 	ldw	r18,16(sp)
 401d414:	dc400317 	ldw	r17,12(sp)
 401d418:	dc000217 	ldw	r16,8(sp)
 401d41c:	dec00704 	addi	sp,sp,28
 401d420:	f800283a 	ret
 401d424:	2008953a 	slli	r4,r4,20
 401d428:	1907c83a 	sub	r3,r3,r4
 401d42c:	003ff106 	br	401d3f4 <__alt_mem_onchip_memory2_0+0xfc018234>

0401d430 <_mprec_log10>:
 401d430:	defffe04 	addi	sp,sp,-8
 401d434:	dc000015 	stw	r16,0(sp)
 401d438:	dfc00115 	stw	ra,4(sp)
 401d43c:	008005c4 	movi	r2,23
 401d440:	2021883a 	mov	r16,r4
 401d444:	11000d0e 	bge	r2,r4,401d47c <_mprec_log10+0x4c>
 401d448:	0005883a 	mov	r2,zero
 401d44c:	00cffc34 	movhi	r3,16368
 401d450:	843fffc4 	addi	r16,r16,-1
 401d454:	000d883a 	mov	r6,zero
 401d458:	01d00934 	movhi	r7,16420
 401d45c:	1009883a 	mov	r4,r2
 401d460:	180b883a 	mov	r5,r3
 401d464:	4012d300 	call	4012d30 <__muldf3>
 401d468:	803ff91e 	bne	r16,zero,401d450 <__alt_mem_onchip_memory2_0+0xfc018290>
 401d46c:	dfc00117 	ldw	ra,4(sp)
 401d470:	dc000017 	ldw	r16,0(sp)
 401d474:	dec00204 	addi	sp,sp,8
 401d478:	f800283a 	ret
 401d47c:	202090fa 	slli	r16,r4,3
 401d480:	008100b4 	movhi	r2,1026
 401d484:	1095ba04 	addi	r2,r2,22248
 401d488:	1421883a 	add	r16,r2,r16
 401d48c:	80800017 	ldw	r2,0(r16)
 401d490:	80c00117 	ldw	r3,4(r16)
 401d494:	dfc00117 	ldw	ra,4(sp)
 401d498:	dc000017 	ldw	r16,0(sp)
 401d49c:	dec00204 	addi	sp,sp,8
 401d4a0:	f800283a 	ret

0401d4a4 <__copybits>:
 401d4a4:	297fffc4 	addi	r5,r5,-1
 401d4a8:	280fd17a 	srai	r7,r5,5
 401d4ac:	30c00417 	ldw	r3,16(r6)
 401d4b0:	30800504 	addi	r2,r6,20
 401d4b4:	39c00044 	addi	r7,r7,1
 401d4b8:	18c7883a 	add	r3,r3,r3
 401d4bc:	39cf883a 	add	r7,r7,r7
 401d4c0:	18c7883a 	add	r3,r3,r3
 401d4c4:	39cf883a 	add	r7,r7,r7
 401d4c8:	10c7883a 	add	r3,r2,r3
 401d4cc:	21cf883a 	add	r7,r4,r7
 401d4d0:	10c00d2e 	bgeu	r2,r3,401d508 <__copybits+0x64>
 401d4d4:	200b883a 	mov	r5,r4
 401d4d8:	12000017 	ldw	r8,0(r2)
 401d4dc:	29400104 	addi	r5,r5,4
 401d4e0:	10800104 	addi	r2,r2,4
 401d4e4:	2a3fff15 	stw	r8,-4(r5)
 401d4e8:	10fffb36 	bltu	r2,r3,401d4d8 <__alt_mem_onchip_memory2_0+0xfc018318>
 401d4ec:	1985c83a 	sub	r2,r3,r6
 401d4f0:	10bffac4 	addi	r2,r2,-21
 401d4f4:	1004d0ba 	srli	r2,r2,2
 401d4f8:	10800044 	addi	r2,r2,1
 401d4fc:	1085883a 	add	r2,r2,r2
 401d500:	1085883a 	add	r2,r2,r2
 401d504:	2089883a 	add	r4,r4,r2
 401d508:	21c0032e 	bgeu	r4,r7,401d518 <__copybits+0x74>
 401d50c:	20000015 	stw	zero,0(r4)
 401d510:	21000104 	addi	r4,r4,4
 401d514:	21fffd36 	bltu	r4,r7,401d50c <__alt_mem_onchip_memory2_0+0xfc01834c>
 401d518:	f800283a 	ret

0401d51c <__any_on>:
 401d51c:	20c00417 	ldw	r3,16(r4)
 401d520:	2805d17a 	srai	r2,r5,5
 401d524:	21000504 	addi	r4,r4,20
 401d528:	18800d0e 	bge	r3,r2,401d560 <__any_on+0x44>
 401d52c:	18c7883a 	add	r3,r3,r3
 401d530:	18c7883a 	add	r3,r3,r3
 401d534:	20c7883a 	add	r3,r4,r3
 401d538:	20c0192e 	bgeu	r4,r3,401d5a0 <__any_on+0x84>
 401d53c:	18bfff17 	ldw	r2,-4(r3)
 401d540:	18ffff04 	addi	r3,r3,-4
 401d544:	1000041e 	bne	r2,zero,401d558 <__any_on+0x3c>
 401d548:	20c0142e 	bgeu	r4,r3,401d59c <__any_on+0x80>
 401d54c:	18ffff04 	addi	r3,r3,-4
 401d550:	19400017 	ldw	r5,0(r3)
 401d554:	283ffc26 	beq	r5,zero,401d548 <__alt_mem_onchip_memory2_0+0xfc018388>
 401d558:	00800044 	movi	r2,1
 401d55c:	f800283a 	ret
 401d560:	10c00a0e 	bge	r2,r3,401d58c <__any_on+0x70>
 401d564:	1085883a 	add	r2,r2,r2
 401d568:	1085883a 	add	r2,r2,r2
 401d56c:	294007cc 	andi	r5,r5,31
 401d570:	2087883a 	add	r3,r4,r2
 401d574:	283ff026 	beq	r5,zero,401d538 <__alt_mem_onchip_memory2_0+0xfc018378>
 401d578:	19800017 	ldw	r6,0(r3)
 401d57c:	3144d83a 	srl	r2,r6,r5
 401d580:	114a983a 	sll	r5,r2,r5
 401d584:	317ff41e 	bne	r6,r5,401d558 <__alt_mem_onchip_memory2_0+0xfc018398>
 401d588:	003feb06 	br	401d538 <__alt_mem_onchip_memory2_0+0xfc018378>
 401d58c:	1085883a 	add	r2,r2,r2
 401d590:	1085883a 	add	r2,r2,r2
 401d594:	2087883a 	add	r3,r4,r2
 401d598:	003fe706 	br	401d538 <__alt_mem_onchip_memory2_0+0xfc018378>
 401d59c:	f800283a 	ret
 401d5a0:	0005883a 	mov	r2,zero
 401d5a4:	f800283a 	ret

0401d5a8 <_putc_r>:
 401d5a8:	defffc04 	addi	sp,sp,-16
 401d5ac:	dc000215 	stw	r16,8(sp)
 401d5b0:	dfc00315 	stw	ra,12(sp)
 401d5b4:	2021883a 	mov	r16,r4
 401d5b8:	20000226 	beq	r4,zero,401d5c4 <_putc_r+0x1c>
 401d5bc:	20800e17 	ldw	r2,56(r4)
 401d5c0:	10001b26 	beq	r2,zero,401d630 <_putc_r+0x88>
 401d5c4:	30800217 	ldw	r2,8(r6)
 401d5c8:	10bfffc4 	addi	r2,r2,-1
 401d5cc:	30800215 	stw	r2,8(r6)
 401d5d0:	10000a16 	blt	r2,zero,401d5fc <_putc_r+0x54>
 401d5d4:	30800017 	ldw	r2,0(r6)
 401d5d8:	11400005 	stb	r5,0(r2)
 401d5dc:	30800017 	ldw	r2,0(r6)
 401d5e0:	10c00044 	addi	r3,r2,1
 401d5e4:	30c00015 	stw	r3,0(r6)
 401d5e8:	10800003 	ldbu	r2,0(r2)
 401d5ec:	dfc00317 	ldw	ra,12(sp)
 401d5f0:	dc000217 	ldw	r16,8(sp)
 401d5f4:	dec00404 	addi	sp,sp,16
 401d5f8:	f800283a 	ret
 401d5fc:	30c00617 	ldw	r3,24(r6)
 401d600:	10c00616 	blt	r2,r3,401d61c <_putc_r+0x74>
 401d604:	30800017 	ldw	r2,0(r6)
 401d608:	00c00284 	movi	r3,10
 401d60c:	11400005 	stb	r5,0(r2)
 401d610:	30800017 	ldw	r2,0(r6)
 401d614:	11400003 	ldbu	r5,0(r2)
 401d618:	28fff11e 	bne	r5,r3,401d5e0 <__alt_mem_onchip_memory2_0+0xfc018420>
 401d61c:	8009883a 	mov	r4,r16
 401d620:	dfc00317 	ldw	ra,12(sp)
 401d624:	dc000217 	ldw	r16,8(sp)
 401d628:	dec00404 	addi	sp,sp,16
 401d62c:	4020b481 	jmpi	4020b48 <__swbuf_r>
 401d630:	d9400015 	stw	r5,0(sp)
 401d634:	d9800115 	stw	r6,4(sp)
 401d638:	401aa6c0 	call	401aa6c <__sinit>
 401d63c:	d9800117 	ldw	r6,4(sp)
 401d640:	d9400017 	ldw	r5,0(sp)
 401d644:	003fdf06 	br	401d5c4 <__alt_mem_onchip_memory2_0+0xfc018404>

0401d648 <putc>:
 401d648:	008100b4 	movhi	r2,1026
 401d64c:	defffc04 	addi	sp,sp,-16
 401d650:	109ddd04 	addi	r2,r2,30580
 401d654:	dc000115 	stw	r16,4(sp)
 401d658:	14000017 	ldw	r16,0(r2)
 401d65c:	dc400215 	stw	r17,8(sp)
 401d660:	dfc00315 	stw	ra,12(sp)
 401d664:	2023883a 	mov	r17,r4
 401d668:	80000226 	beq	r16,zero,401d674 <putc+0x2c>
 401d66c:	80800e17 	ldw	r2,56(r16)
 401d670:	10001a26 	beq	r2,zero,401d6dc <putc+0x94>
 401d674:	28800217 	ldw	r2,8(r5)
 401d678:	10bfffc4 	addi	r2,r2,-1
 401d67c:	28800215 	stw	r2,8(r5)
 401d680:	10000b16 	blt	r2,zero,401d6b0 <putc+0x68>
 401d684:	28800017 	ldw	r2,0(r5)
 401d688:	14400005 	stb	r17,0(r2)
 401d68c:	28800017 	ldw	r2,0(r5)
 401d690:	10c00044 	addi	r3,r2,1
 401d694:	28c00015 	stw	r3,0(r5)
 401d698:	10800003 	ldbu	r2,0(r2)
 401d69c:	dfc00317 	ldw	ra,12(sp)
 401d6a0:	dc400217 	ldw	r17,8(sp)
 401d6a4:	dc000117 	ldw	r16,4(sp)
 401d6a8:	dec00404 	addi	sp,sp,16
 401d6ac:	f800283a 	ret
 401d6b0:	28c00617 	ldw	r3,24(r5)
 401d6b4:	10c00e16 	blt	r2,r3,401d6f0 <putc+0xa8>
 401d6b8:	28800017 	ldw	r2,0(r5)
 401d6bc:	01000284 	movi	r4,10
 401d6c0:	14400005 	stb	r17,0(r2)
 401d6c4:	28800017 	ldw	r2,0(r5)
 401d6c8:	10c00003 	ldbu	r3,0(r2)
 401d6cc:	193ff01e 	bne	r3,r4,401d690 <__alt_mem_onchip_memory2_0+0xfc0184d0>
 401d6d0:	280d883a 	mov	r6,r5
 401d6d4:	180b883a 	mov	r5,r3
 401d6d8:	00000706 	br	401d6f8 <putc+0xb0>
 401d6dc:	8009883a 	mov	r4,r16
 401d6e0:	d9400015 	stw	r5,0(sp)
 401d6e4:	401aa6c0 	call	401aa6c <__sinit>
 401d6e8:	d9400017 	ldw	r5,0(sp)
 401d6ec:	003fe106 	br	401d674 <__alt_mem_onchip_memory2_0+0xfc0184b4>
 401d6f0:	280d883a 	mov	r6,r5
 401d6f4:	880b883a 	mov	r5,r17
 401d6f8:	8009883a 	mov	r4,r16
 401d6fc:	dfc00317 	ldw	ra,12(sp)
 401d700:	dc400217 	ldw	r17,8(sp)
 401d704:	dc000117 	ldw	r16,4(sp)
 401d708:	dec00404 	addi	sp,sp,16
 401d70c:	4020b481 	jmpi	4020b48 <__swbuf_r>

0401d710 <_realloc_r>:
 401d710:	defff604 	addi	sp,sp,-40
 401d714:	dc800215 	stw	r18,8(sp)
 401d718:	dfc00915 	stw	ra,36(sp)
 401d71c:	df000815 	stw	fp,32(sp)
 401d720:	ddc00715 	stw	r23,28(sp)
 401d724:	dd800615 	stw	r22,24(sp)
 401d728:	dd400515 	stw	r21,20(sp)
 401d72c:	dd000415 	stw	r20,16(sp)
 401d730:	dcc00315 	stw	r19,12(sp)
 401d734:	dc400115 	stw	r17,4(sp)
 401d738:	dc000015 	stw	r16,0(sp)
 401d73c:	3025883a 	mov	r18,r6
 401d740:	2800b726 	beq	r5,zero,401da20 <_realloc_r+0x310>
 401d744:	282b883a 	mov	r21,r5
 401d748:	2029883a 	mov	r20,r4
 401d74c:	40229980 	call	4022998 <__malloc_lock>
 401d750:	a8bfff17 	ldw	r2,-4(r21)
 401d754:	043fff04 	movi	r16,-4
 401d758:	90c002c4 	addi	r3,r18,11
 401d75c:	01000584 	movi	r4,22
 401d760:	acfffe04 	addi	r19,r21,-8
 401d764:	1420703a 	and	r16,r2,r16
 401d768:	20c0332e 	bgeu	r4,r3,401d838 <_realloc_r+0x128>
 401d76c:	047ffe04 	movi	r17,-8
 401d770:	1c62703a 	and	r17,r3,r17
 401d774:	8807883a 	mov	r3,r17
 401d778:	88005816 	blt	r17,zero,401d8dc <_realloc_r+0x1cc>
 401d77c:	8c805736 	bltu	r17,r18,401d8dc <_realloc_r+0x1cc>
 401d780:	80c0300e 	bge	r16,r3,401d844 <_realloc_r+0x134>
 401d784:	070100b4 	movhi	fp,1026
 401d788:	e7185004 	addi	fp,fp,24896
 401d78c:	e1c00217 	ldw	r7,8(fp)
 401d790:	9c09883a 	add	r4,r19,r16
 401d794:	22000117 	ldw	r8,4(r4)
 401d798:	21c06326 	beq	r4,r7,401d928 <_realloc_r+0x218>
 401d79c:	017fff84 	movi	r5,-2
 401d7a0:	414a703a 	and	r5,r8,r5
 401d7a4:	214b883a 	add	r5,r4,r5
 401d7a8:	29800117 	ldw	r6,4(r5)
 401d7ac:	3180004c 	andi	r6,r6,1
 401d7b0:	30003f26 	beq	r6,zero,401d8b0 <_realloc_r+0x1a0>
 401d7b4:	1080004c 	andi	r2,r2,1
 401d7b8:	10008326 	beq	r2,zero,401d9c8 <_realloc_r+0x2b8>
 401d7bc:	900b883a 	mov	r5,r18
 401d7c0:	a009883a 	mov	r4,r20
 401d7c4:	401b8340 	call	401b834 <_malloc_r>
 401d7c8:	1025883a 	mov	r18,r2
 401d7cc:	10011e26 	beq	r2,zero,401dc48 <_realloc_r+0x538>
 401d7d0:	a93fff17 	ldw	r4,-4(r21)
 401d7d4:	10fffe04 	addi	r3,r2,-8
 401d7d8:	00bfff84 	movi	r2,-2
 401d7dc:	2084703a 	and	r2,r4,r2
 401d7e0:	9885883a 	add	r2,r19,r2
 401d7e4:	1880ee26 	beq	r3,r2,401dba0 <_realloc_r+0x490>
 401d7e8:	81bfff04 	addi	r6,r16,-4
 401d7ec:	00800904 	movi	r2,36
 401d7f0:	1180b836 	bltu	r2,r6,401dad4 <_realloc_r+0x3c4>
 401d7f4:	00c004c4 	movi	r3,19
 401d7f8:	19809636 	bltu	r3,r6,401da54 <_realloc_r+0x344>
 401d7fc:	9005883a 	mov	r2,r18
 401d800:	a807883a 	mov	r3,r21
 401d804:	19000017 	ldw	r4,0(r3)
 401d808:	11000015 	stw	r4,0(r2)
 401d80c:	19000117 	ldw	r4,4(r3)
 401d810:	11000115 	stw	r4,4(r2)
 401d814:	18c00217 	ldw	r3,8(r3)
 401d818:	10c00215 	stw	r3,8(r2)
 401d81c:	a80b883a 	mov	r5,r21
 401d820:	a009883a 	mov	r4,r20
 401d824:	401abe00 	call	401abe0 <_free_r>
 401d828:	a009883a 	mov	r4,r20
 401d82c:	40229bc0 	call	40229bc <__malloc_unlock>
 401d830:	9005883a 	mov	r2,r18
 401d834:	00001206 	br	401d880 <_realloc_r+0x170>
 401d838:	00c00404 	movi	r3,16
 401d83c:	1823883a 	mov	r17,r3
 401d840:	003fce06 	br	401d77c <__alt_mem_onchip_memory2_0+0xfc0185bc>
 401d844:	a825883a 	mov	r18,r21
 401d848:	8445c83a 	sub	r2,r16,r17
 401d84c:	00c003c4 	movi	r3,15
 401d850:	18802636 	bltu	r3,r2,401d8ec <_realloc_r+0x1dc>
 401d854:	99800117 	ldw	r6,4(r19)
 401d858:	9c07883a 	add	r3,r19,r16
 401d85c:	3180004c 	andi	r6,r6,1
 401d860:	3420b03a 	or	r16,r6,r16
 401d864:	9c000115 	stw	r16,4(r19)
 401d868:	18800117 	ldw	r2,4(r3)
 401d86c:	10800054 	ori	r2,r2,1
 401d870:	18800115 	stw	r2,4(r3)
 401d874:	a009883a 	mov	r4,r20
 401d878:	40229bc0 	call	40229bc <__malloc_unlock>
 401d87c:	9005883a 	mov	r2,r18
 401d880:	dfc00917 	ldw	ra,36(sp)
 401d884:	df000817 	ldw	fp,32(sp)
 401d888:	ddc00717 	ldw	r23,28(sp)
 401d88c:	dd800617 	ldw	r22,24(sp)
 401d890:	dd400517 	ldw	r21,20(sp)
 401d894:	dd000417 	ldw	r20,16(sp)
 401d898:	dcc00317 	ldw	r19,12(sp)
 401d89c:	dc800217 	ldw	r18,8(sp)
 401d8a0:	dc400117 	ldw	r17,4(sp)
 401d8a4:	dc000017 	ldw	r16,0(sp)
 401d8a8:	dec00a04 	addi	sp,sp,40
 401d8ac:	f800283a 	ret
 401d8b0:	017fff04 	movi	r5,-4
 401d8b4:	414a703a 	and	r5,r8,r5
 401d8b8:	814d883a 	add	r6,r16,r5
 401d8bc:	30c01f16 	blt	r6,r3,401d93c <_realloc_r+0x22c>
 401d8c0:	20800317 	ldw	r2,12(r4)
 401d8c4:	20c00217 	ldw	r3,8(r4)
 401d8c8:	a825883a 	mov	r18,r21
 401d8cc:	3021883a 	mov	r16,r6
 401d8d0:	18800315 	stw	r2,12(r3)
 401d8d4:	10c00215 	stw	r3,8(r2)
 401d8d8:	003fdb06 	br	401d848 <__alt_mem_onchip_memory2_0+0xfc018688>
 401d8dc:	00800304 	movi	r2,12
 401d8e0:	a0800015 	stw	r2,0(r20)
 401d8e4:	0005883a 	mov	r2,zero
 401d8e8:	003fe506 	br	401d880 <__alt_mem_onchip_memory2_0+0xfc0186c0>
 401d8ec:	98c00117 	ldw	r3,4(r19)
 401d8f0:	9c4b883a 	add	r5,r19,r17
 401d8f4:	11000054 	ori	r4,r2,1
 401d8f8:	18c0004c 	andi	r3,r3,1
 401d8fc:	1c62b03a 	or	r17,r3,r17
 401d900:	9c400115 	stw	r17,4(r19)
 401d904:	29000115 	stw	r4,4(r5)
 401d908:	2885883a 	add	r2,r5,r2
 401d90c:	10c00117 	ldw	r3,4(r2)
 401d910:	29400204 	addi	r5,r5,8
 401d914:	a009883a 	mov	r4,r20
 401d918:	18c00054 	ori	r3,r3,1
 401d91c:	10c00115 	stw	r3,4(r2)
 401d920:	401abe00 	call	401abe0 <_free_r>
 401d924:	003fd306 	br	401d874 <__alt_mem_onchip_memory2_0+0xfc0186b4>
 401d928:	017fff04 	movi	r5,-4
 401d92c:	414a703a 	and	r5,r8,r5
 401d930:	89800404 	addi	r6,r17,16
 401d934:	8151883a 	add	r8,r16,r5
 401d938:	4180590e 	bge	r8,r6,401daa0 <_realloc_r+0x390>
 401d93c:	1080004c 	andi	r2,r2,1
 401d940:	103f9e1e 	bne	r2,zero,401d7bc <__alt_mem_onchip_memory2_0+0xfc0185fc>
 401d944:	adbffe17 	ldw	r22,-8(r21)
 401d948:	00bfff04 	movi	r2,-4
 401d94c:	9dadc83a 	sub	r22,r19,r22
 401d950:	b1800117 	ldw	r6,4(r22)
 401d954:	3084703a 	and	r2,r6,r2
 401d958:	20002026 	beq	r4,zero,401d9dc <_realloc_r+0x2cc>
 401d95c:	80af883a 	add	r23,r16,r2
 401d960:	b96f883a 	add	r23,r23,r5
 401d964:	21c05f26 	beq	r4,r7,401dae4 <_realloc_r+0x3d4>
 401d968:	b8c01c16 	blt	r23,r3,401d9dc <_realloc_r+0x2cc>
 401d96c:	20800317 	ldw	r2,12(r4)
 401d970:	20c00217 	ldw	r3,8(r4)
 401d974:	81bfff04 	addi	r6,r16,-4
 401d978:	01000904 	movi	r4,36
 401d97c:	18800315 	stw	r2,12(r3)
 401d980:	10c00215 	stw	r3,8(r2)
 401d984:	b0c00217 	ldw	r3,8(r22)
 401d988:	b0800317 	ldw	r2,12(r22)
 401d98c:	b4800204 	addi	r18,r22,8
 401d990:	18800315 	stw	r2,12(r3)
 401d994:	10c00215 	stw	r3,8(r2)
 401d998:	21801b36 	bltu	r4,r6,401da08 <_realloc_r+0x2f8>
 401d99c:	008004c4 	movi	r2,19
 401d9a0:	1180352e 	bgeu	r2,r6,401da78 <_realloc_r+0x368>
 401d9a4:	a8800017 	ldw	r2,0(r21)
 401d9a8:	b0800215 	stw	r2,8(r22)
 401d9ac:	a8800117 	ldw	r2,4(r21)
 401d9b0:	b0800315 	stw	r2,12(r22)
 401d9b4:	008006c4 	movi	r2,27
 401d9b8:	11807f36 	bltu	r2,r6,401dbb8 <_realloc_r+0x4a8>
 401d9bc:	b0800404 	addi	r2,r22,16
 401d9c0:	ad400204 	addi	r21,r21,8
 401d9c4:	00002d06 	br	401da7c <_realloc_r+0x36c>
 401d9c8:	adbffe17 	ldw	r22,-8(r21)
 401d9cc:	00bfff04 	movi	r2,-4
 401d9d0:	9dadc83a 	sub	r22,r19,r22
 401d9d4:	b1000117 	ldw	r4,4(r22)
 401d9d8:	2084703a 	and	r2,r4,r2
 401d9dc:	b03f7726 	beq	r22,zero,401d7bc <__alt_mem_onchip_memory2_0+0xfc0185fc>
 401d9e0:	80af883a 	add	r23,r16,r2
 401d9e4:	b8ff7516 	blt	r23,r3,401d7bc <__alt_mem_onchip_memory2_0+0xfc0185fc>
 401d9e8:	b0800317 	ldw	r2,12(r22)
 401d9ec:	b0c00217 	ldw	r3,8(r22)
 401d9f0:	81bfff04 	addi	r6,r16,-4
 401d9f4:	01000904 	movi	r4,36
 401d9f8:	18800315 	stw	r2,12(r3)
 401d9fc:	10c00215 	stw	r3,8(r2)
 401da00:	b4800204 	addi	r18,r22,8
 401da04:	21bfe52e 	bgeu	r4,r6,401d99c <__alt_mem_onchip_memory2_0+0xfc0187dc>
 401da08:	a80b883a 	mov	r5,r21
 401da0c:	9009883a 	mov	r4,r18
 401da10:	401c26c0 	call	401c26c <memmove>
 401da14:	b821883a 	mov	r16,r23
 401da18:	b027883a 	mov	r19,r22
 401da1c:	003f8a06 	br	401d848 <__alt_mem_onchip_memory2_0+0xfc018688>
 401da20:	300b883a 	mov	r5,r6
 401da24:	dfc00917 	ldw	ra,36(sp)
 401da28:	df000817 	ldw	fp,32(sp)
 401da2c:	ddc00717 	ldw	r23,28(sp)
 401da30:	dd800617 	ldw	r22,24(sp)
 401da34:	dd400517 	ldw	r21,20(sp)
 401da38:	dd000417 	ldw	r20,16(sp)
 401da3c:	dcc00317 	ldw	r19,12(sp)
 401da40:	dc800217 	ldw	r18,8(sp)
 401da44:	dc400117 	ldw	r17,4(sp)
 401da48:	dc000017 	ldw	r16,0(sp)
 401da4c:	dec00a04 	addi	sp,sp,40
 401da50:	401b8341 	jmpi	401b834 <_malloc_r>
 401da54:	a8c00017 	ldw	r3,0(r21)
 401da58:	90c00015 	stw	r3,0(r18)
 401da5c:	a8c00117 	ldw	r3,4(r21)
 401da60:	90c00115 	stw	r3,4(r18)
 401da64:	00c006c4 	movi	r3,27
 401da68:	19804536 	bltu	r3,r6,401db80 <_realloc_r+0x470>
 401da6c:	90800204 	addi	r2,r18,8
 401da70:	a8c00204 	addi	r3,r21,8
 401da74:	003f6306 	br	401d804 <__alt_mem_onchip_memory2_0+0xfc018644>
 401da78:	9005883a 	mov	r2,r18
 401da7c:	a8c00017 	ldw	r3,0(r21)
 401da80:	b821883a 	mov	r16,r23
 401da84:	b027883a 	mov	r19,r22
 401da88:	10c00015 	stw	r3,0(r2)
 401da8c:	a8c00117 	ldw	r3,4(r21)
 401da90:	10c00115 	stw	r3,4(r2)
 401da94:	a8c00217 	ldw	r3,8(r21)
 401da98:	10c00215 	stw	r3,8(r2)
 401da9c:	003f6a06 	br	401d848 <__alt_mem_onchip_memory2_0+0xfc018688>
 401daa0:	9c67883a 	add	r19,r19,r17
 401daa4:	4445c83a 	sub	r2,r8,r17
 401daa8:	e4c00215 	stw	r19,8(fp)
 401daac:	10800054 	ori	r2,r2,1
 401dab0:	98800115 	stw	r2,4(r19)
 401dab4:	a8bfff17 	ldw	r2,-4(r21)
 401dab8:	a009883a 	mov	r4,r20
 401dabc:	1080004c 	andi	r2,r2,1
 401dac0:	1462b03a 	or	r17,r2,r17
 401dac4:	ac7fff15 	stw	r17,-4(r21)
 401dac8:	40229bc0 	call	40229bc <__malloc_unlock>
 401dacc:	a805883a 	mov	r2,r21
 401dad0:	003f6b06 	br	401d880 <__alt_mem_onchip_memory2_0+0xfc0186c0>
 401dad4:	a80b883a 	mov	r5,r21
 401dad8:	9009883a 	mov	r4,r18
 401dadc:	401c26c0 	call	401c26c <memmove>
 401dae0:	003f4e06 	br	401d81c <__alt_mem_onchip_memory2_0+0xfc01865c>
 401dae4:	89000404 	addi	r4,r17,16
 401dae8:	b93fbc16 	blt	r23,r4,401d9dc <__alt_mem_onchip_memory2_0+0xfc01881c>
 401daec:	b0800317 	ldw	r2,12(r22)
 401daf0:	b0c00217 	ldw	r3,8(r22)
 401daf4:	81bfff04 	addi	r6,r16,-4
 401daf8:	01000904 	movi	r4,36
 401dafc:	18800315 	stw	r2,12(r3)
 401db00:	10c00215 	stw	r3,8(r2)
 401db04:	b4800204 	addi	r18,r22,8
 401db08:	21804336 	bltu	r4,r6,401dc18 <_realloc_r+0x508>
 401db0c:	008004c4 	movi	r2,19
 401db10:	11803f2e 	bgeu	r2,r6,401dc10 <_realloc_r+0x500>
 401db14:	a8800017 	ldw	r2,0(r21)
 401db18:	b0800215 	stw	r2,8(r22)
 401db1c:	a8800117 	ldw	r2,4(r21)
 401db20:	b0800315 	stw	r2,12(r22)
 401db24:	008006c4 	movi	r2,27
 401db28:	11803f36 	bltu	r2,r6,401dc28 <_realloc_r+0x518>
 401db2c:	b0800404 	addi	r2,r22,16
 401db30:	ad400204 	addi	r21,r21,8
 401db34:	a8c00017 	ldw	r3,0(r21)
 401db38:	10c00015 	stw	r3,0(r2)
 401db3c:	a8c00117 	ldw	r3,4(r21)
 401db40:	10c00115 	stw	r3,4(r2)
 401db44:	a8c00217 	ldw	r3,8(r21)
 401db48:	10c00215 	stw	r3,8(r2)
 401db4c:	b447883a 	add	r3,r22,r17
 401db50:	bc45c83a 	sub	r2,r23,r17
 401db54:	e0c00215 	stw	r3,8(fp)
 401db58:	10800054 	ori	r2,r2,1
 401db5c:	18800115 	stw	r2,4(r3)
 401db60:	b0800117 	ldw	r2,4(r22)
 401db64:	a009883a 	mov	r4,r20
 401db68:	1080004c 	andi	r2,r2,1
 401db6c:	1462b03a 	or	r17,r2,r17
 401db70:	b4400115 	stw	r17,4(r22)
 401db74:	40229bc0 	call	40229bc <__malloc_unlock>
 401db78:	9005883a 	mov	r2,r18
 401db7c:	003f4006 	br	401d880 <__alt_mem_onchip_memory2_0+0xfc0186c0>
 401db80:	a8c00217 	ldw	r3,8(r21)
 401db84:	90c00215 	stw	r3,8(r18)
 401db88:	a8c00317 	ldw	r3,12(r21)
 401db8c:	90c00315 	stw	r3,12(r18)
 401db90:	30801126 	beq	r6,r2,401dbd8 <_realloc_r+0x4c8>
 401db94:	90800404 	addi	r2,r18,16
 401db98:	a8c00404 	addi	r3,r21,16
 401db9c:	003f1906 	br	401d804 <__alt_mem_onchip_memory2_0+0xfc018644>
 401dba0:	90ffff17 	ldw	r3,-4(r18)
 401dba4:	00bfff04 	movi	r2,-4
 401dba8:	a825883a 	mov	r18,r21
 401dbac:	1884703a 	and	r2,r3,r2
 401dbb0:	80a1883a 	add	r16,r16,r2
 401dbb4:	003f2406 	br	401d848 <__alt_mem_onchip_memory2_0+0xfc018688>
 401dbb8:	a8800217 	ldw	r2,8(r21)
 401dbbc:	b0800415 	stw	r2,16(r22)
 401dbc0:	a8800317 	ldw	r2,12(r21)
 401dbc4:	b0800515 	stw	r2,20(r22)
 401dbc8:	31000a26 	beq	r6,r4,401dbf4 <_realloc_r+0x4e4>
 401dbcc:	b0800604 	addi	r2,r22,24
 401dbd0:	ad400404 	addi	r21,r21,16
 401dbd4:	003fa906 	br	401da7c <__alt_mem_onchip_memory2_0+0xfc0188bc>
 401dbd8:	a9000417 	ldw	r4,16(r21)
 401dbdc:	90800604 	addi	r2,r18,24
 401dbe0:	a8c00604 	addi	r3,r21,24
 401dbe4:	91000415 	stw	r4,16(r18)
 401dbe8:	a9000517 	ldw	r4,20(r21)
 401dbec:	91000515 	stw	r4,20(r18)
 401dbf0:	003f0406 	br	401d804 <__alt_mem_onchip_memory2_0+0xfc018644>
 401dbf4:	a8c00417 	ldw	r3,16(r21)
 401dbf8:	ad400604 	addi	r21,r21,24
 401dbfc:	b0800804 	addi	r2,r22,32
 401dc00:	b0c00615 	stw	r3,24(r22)
 401dc04:	a8ffff17 	ldw	r3,-4(r21)
 401dc08:	b0c00715 	stw	r3,28(r22)
 401dc0c:	003f9b06 	br	401da7c <__alt_mem_onchip_memory2_0+0xfc0188bc>
 401dc10:	9005883a 	mov	r2,r18
 401dc14:	003fc706 	br	401db34 <__alt_mem_onchip_memory2_0+0xfc018974>
 401dc18:	a80b883a 	mov	r5,r21
 401dc1c:	9009883a 	mov	r4,r18
 401dc20:	401c26c0 	call	401c26c <memmove>
 401dc24:	003fc906 	br	401db4c <__alt_mem_onchip_memory2_0+0xfc01898c>
 401dc28:	a8800217 	ldw	r2,8(r21)
 401dc2c:	b0800415 	stw	r2,16(r22)
 401dc30:	a8800317 	ldw	r2,12(r21)
 401dc34:	b0800515 	stw	r2,20(r22)
 401dc38:	31000726 	beq	r6,r4,401dc58 <_realloc_r+0x548>
 401dc3c:	b0800604 	addi	r2,r22,24
 401dc40:	ad400404 	addi	r21,r21,16
 401dc44:	003fbb06 	br	401db34 <__alt_mem_onchip_memory2_0+0xfc018974>
 401dc48:	a009883a 	mov	r4,r20
 401dc4c:	40229bc0 	call	40229bc <__malloc_unlock>
 401dc50:	0005883a 	mov	r2,zero
 401dc54:	003f0a06 	br	401d880 <__alt_mem_onchip_memory2_0+0xfc0186c0>
 401dc58:	a8c00417 	ldw	r3,16(r21)
 401dc5c:	ad400604 	addi	r21,r21,24
 401dc60:	b0800804 	addi	r2,r22,32
 401dc64:	b0c00615 	stw	r3,24(r22)
 401dc68:	a8ffff17 	ldw	r3,-4(r21)
 401dc6c:	b0c00715 	stw	r3,28(r22)
 401dc70:	003fb006 	br	401db34 <__alt_mem_onchip_memory2_0+0xfc018974>

0401dc74 <_sbrk_r>:
 401dc74:	defffd04 	addi	sp,sp,-12
 401dc78:	dc000015 	stw	r16,0(sp)
 401dc7c:	040100f4 	movhi	r16,1027
 401dc80:	dc400115 	stw	r17,4(sp)
 401dc84:	8425de04 	addi	r16,r16,-26760
 401dc88:	2023883a 	mov	r17,r4
 401dc8c:	2809883a 	mov	r4,r5
 401dc90:	dfc00215 	stw	ra,8(sp)
 401dc94:	80000015 	stw	zero,0(r16)
 401dc98:	4022e0c0 	call	4022e0c <sbrk>
 401dc9c:	00ffffc4 	movi	r3,-1
 401dca0:	10c00526 	beq	r2,r3,401dcb8 <_sbrk_r+0x44>
 401dca4:	dfc00217 	ldw	ra,8(sp)
 401dca8:	dc400117 	ldw	r17,4(sp)
 401dcac:	dc000017 	ldw	r16,0(sp)
 401dcb0:	dec00304 	addi	sp,sp,12
 401dcb4:	f800283a 	ret
 401dcb8:	80c00017 	ldw	r3,0(r16)
 401dcbc:	183ff926 	beq	r3,zero,401dca4 <__alt_mem_onchip_memory2_0+0xfc018ae4>
 401dcc0:	88c00015 	stw	r3,0(r17)
 401dcc4:	003ff706 	br	401dca4 <__alt_mem_onchip_memory2_0+0xfc018ae4>

0401dcc8 <__sread>:
 401dcc8:	defffe04 	addi	sp,sp,-8
 401dccc:	dc000015 	stw	r16,0(sp)
 401dcd0:	2821883a 	mov	r16,r5
 401dcd4:	2940038f 	ldh	r5,14(r5)
 401dcd8:	dfc00115 	stw	ra,4(sp)
 401dcdc:	402124c0 	call	402124c <_read_r>
 401dce0:	10000716 	blt	r2,zero,401dd00 <__sread+0x38>
 401dce4:	80c01417 	ldw	r3,80(r16)
 401dce8:	1887883a 	add	r3,r3,r2
 401dcec:	80c01415 	stw	r3,80(r16)
 401dcf0:	dfc00117 	ldw	ra,4(sp)
 401dcf4:	dc000017 	ldw	r16,0(sp)
 401dcf8:	dec00204 	addi	sp,sp,8
 401dcfc:	f800283a 	ret
 401dd00:	80c0030b 	ldhu	r3,12(r16)
 401dd04:	18fbffcc 	andi	r3,r3,61439
 401dd08:	80c0030d 	sth	r3,12(r16)
 401dd0c:	dfc00117 	ldw	ra,4(sp)
 401dd10:	dc000017 	ldw	r16,0(sp)
 401dd14:	dec00204 	addi	sp,sp,8
 401dd18:	f800283a 	ret

0401dd1c <__seofread>:
 401dd1c:	0005883a 	mov	r2,zero
 401dd20:	f800283a 	ret

0401dd24 <__swrite>:
 401dd24:	2880030b 	ldhu	r2,12(r5)
 401dd28:	defffb04 	addi	sp,sp,-20
 401dd2c:	dcc00315 	stw	r19,12(sp)
 401dd30:	dc800215 	stw	r18,8(sp)
 401dd34:	dc400115 	stw	r17,4(sp)
 401dd38:	dc000015 	stw	r16,0(sp)
 401dd3c:	dfc00415 	stw	ra,16(sp)
 401dd40:	10c0400c 	andi	r3,r2,256
 401dd44:	2821883a 	mov	r16,r5
 401dd48:	2023883a 	mov	r17,r4
 401dd4c:	3025883a 	mov	r18,r6
 401dd50:	3827883a 	mov	r19,r7
 401dd54:	18000526 	beq	r3,zero,401dd6c <__swrite+0x48>
 401dd58:	2940038f 	ldh	r5,14(r5)
 401dd5c:	01c00084 	movi	r7,2
 401dd60:	000d883a 	mov	r6,zero
 401dd64:	40211ec0 	call	40211ec <_lseek_r>
 401dd68:	8080030b 	ldhu	r2,12(r16)
 401dd6c:	8140038f 	ldh	r5,14(r16)
 401dd70:	10bbffcc 	andi	r2,r2,61439
 401dd74:	980f883a 	mov	r7,r19
 401dd78:	900d883a 	mov	r6,r18
 401dd7c:	8809883a 	mov	r4,r17
 401dd80:	8080030d 	sth	r2,12(r16)
 401dd84:	dfc00417 	ldw	ra,16(sp)
 401dd88:	dcc00317 	ldw	r19,12(sp)
 401dd8c:	dc800217 	ldw	r18,8(sp)
 401dd90:	dc400117 	ldw	r17,4(sp)
 401dd94:	dc000017 	ldw	r16,0(sp)
 401dd98:	dec00504 	addi	sp,sp,20
 401dd9c:	4020ca01 	jmpi	4020ca0 <_write_r>

0401dda0 <__sseek>:
 401dda0:	defffe04 	addi	sp,sp,-8
 401dda4:	dc000015 	stw	r16,0(sp)
 401dda8:	2821883a 	mov	r16,r5
 401ddac:	2940038f 	ldh	r5,14(r5)
 401ddb0:	dfc00115 	stw	ra,4(sp)
 401ddb4:	40211ec0 	call	40211ec <_lseek_r>
 401ddb8:	00ffffc4 	movi	r3,-1
 401ddbc:	10c00826 	beq	r2,r3,401dde0 <__sseek+0x40>
 401ddc0:	80c0030b 	ldhu	r3,12(r16)
 401ddc4:	80801415 	stw	r2,80(r16)
 401ddc8:	18c40014 	ori	r3,r3,4096
 401ddcc:	80c0030d 	sth	r3,12(r16)
 401ddd0:	dfc00117 	ldw	ra,4(sp)
 401ddd4:	dc000017 	ldw	r16,0(sp)
 401ddd8:	dec00204 	addi	sp,sp,8
 401dddc:	f800283a 	ret
 401dde0:	80c0030b 	ldhu	r3,12(r16)
 401dde4:	18fbffcc 	andi	r3,r3,61439
 401dde8:	80c0030d 	sth	r3,12(r16)
 401ddec:	dfc00117 	ldw	ra,4(sp)
 401ddf0:	dc000017 	ldw	r16,0(sp)
 401ddf4:	dec00204 	addi	sp,sp,8
 401ddf8:	f800283a 	ret

0401ddfc <__sclose>:
 401ddfc:	2940038f 	ldh	r5,14(r5)
 401de00:	4020d001 	jmpi	4020d00 <_close_r>

0401de04 <strcmp>:
 401de04:	2144b03a 	or	r2,r4,r5
 401de08:	108000cc 	andi	r2,r2,3
 401de0c:	1000171e 	bne	r2,zero,401de6c <strcmp+0x68>
 401de10:	20800017 	ldw	r2,0(r4)
 401de14:	28c00017 	ldw	r3,0(r5)
 401de18:	10c0141e 	bne	r2,r3,401de6c <strcmp+0x68>
 401de1c:	027fbff4 	movhi	r9,65279
 401de20:	4a7fbfc4 	addi	r9,r9,-257
 401de24:	0086303a 	nor	r3,zero,r2
 401de28:	02202074 	movhi	r8,32897
 401de2c:	1245883a 	add	r2,r2,r9
 401de30:	42202004 	addi	r8,r8,-32640
 401de34:	10c4703a 	and	r2,r2,r3
 401de38:	1204703a 	and	r2,r2,r8
 401de3c:	10000226 	beq	r2,zero,401de48 <strcmp+0x44>
 401de40:	00002306 	br	401ded0 <strcmp+0xcc>
 401de44:	1000221e 	bne	r2,zero,401ded0 <strcmp+0xcc>
 401de48:	21000104 	addi	r4,r4,4
 401de4c:	20c00017 	ldw	r3,0(r4)
 401de50:	29400104 	addi	r5,r5,4
 401de54:	29800017 	ldw	r6,0(r5)
 401de58:	1a4f883a 	add	r7,r3,r9
 401de5c:	00c4303a 	nor	r2,zero,r3
 401de60:	3884703a 	and	r2,r7,r2
 401de64:	1204703a 	and	r2,r2,r8
 401de68:	19bff626 	beq	r3,r6,401de44 <__alt_mem_onchip_memory2_0+0xfc018c84>
 401de6c:	20800003 	ldbu	r2,0(r4)
 401de70:	10c03fcc 	andi	r3,r2,255
 401de74:	18c0201c 	xori	r3,r3,128
 401de78:	18ffe004 	addi	r3,r3,-128
 401de7c:	18000c26 	beq	r3,zero,401deb0 <strcmp+0xac>
 401de80:	29800007 	ldb	r6,0(r5)
 401de84:	19800326 	beq	r3,r6,401de94 <strcmp+0x90>
 401de88:	00001306 	br	401ded8 <strcmp+0xd4>
 401de8c:	29800007 	ldb	r6,0(r5)
 401de90:	11800b1e 	bne	r2,r6,401dec0 <strcmp+0xbc>
 401de94:	21000044 	addi	r4,r4,1
 401de98:	20c00003 	ldbu	r3,0(r4)
 401de9c:	29400044 	addi	r5,r5,1
 401dea0:	18803fcc 	andi	r2,r3,255
 401dea4:	1080201c 	xori	r2,r2,128
 401dea8:	10bfe004 	addi	r2,r2,-128
 401deac:	103ff71e 	bne	r2,zero,401de8c <__alt_mem_onchip_memory2_0+0xfc018ccc>
 401deb0:	0007883a 	mov	r3,zero
 401deb4:	28800003 	ldbu	r2,0(r5)
 401deb8:	1885c83a 	sub	r2,r3,r2
 401debc:	f800283a 	ret
 401dec0:	28800003 	ldbu	r2,0(r5)
 401dec4:	18c03fcc 	andi	r3,r3,255
 401dec8:	1885c83a 	sub	r2,r3,r2
 401decc:	f800283a 	ret
 401ded0:	0005883a 	mov	r2,zero
 401ded4:	f800283a 	ret
 401ded8:	10c03fcc 	andi	r3,r2,255
 401dedc:	003ff506 	br	401deb4 <__alt_mem_onchip_memory2_0+0xfc018cf4>

0401dee0 <__ssprint_r>:
 401dee0:	30800217 	ldw	r2,8(r6)
 401dee4:	defff604 	addi	sp,sp,-40
 401dee8:	dc800215 	stw	r18,8(sp)
 401deec:	dfc00915 	stw	ra,36(sp)
 401def0:	df000815 	stw	fp,32(sp)
 401def4:	ddc00715 	stw	r23,28(sp)
 401def8:	dd800615 	stw	r22,24(sp)
 401defc:	dd400515 	stw	r21,20(sp)
 401df00:	dd000415 	stw	r20,16(sp)
 401df04:	dcc00315 	stw	r19,12(sp)
 401df08:	dc400115 	stw	r17,4(sp)
 401df0c:	dc000015 	stw	r16,0(sp)
 401df10:	3025883a 	mov	r18,r6
 401df14:	10005826 	beq	r2,zero,401e078 <__ssprint_r+0x198>
 401df18:	2027883a 	mov	r19,r4
 401df1c:	35c00017 	ldw	r23,0(r6)
 401df20:	29000017 	ldw	r4,0(r5)
 401df24:	28800217 	ldw	r2,8(r5)
 401df28:	2823883a 	mov	r17,r5
 401df2c:	0039883a 	mov	fp,zero
 401df30:	0021883a 	mov	r16,zero
 401df34:	80003926 	beq	r16,zero,401e01c <__ssprint_r+0x13c>
 401df38:	102b883a 	mov	r21,r2
 401df3c:	102d883a 	mov	r22,r2
 401df40:	80803a36 	bltu	r16,r2,401e02c <__ssprint_r+0x14c>
 401df44:	88c0030b 	ldhu	r3,12(r17)
 401df48:	1881200c 	andi	r2,r3,1152
 401df4c:	10002626 	beq	r2,zero,401dfe8 <__ssprint_r+0x108>
 401df50:	88800517 	ldw	r2,20(r17)
 401df54:	89400417 	ldw	r5,16(r17)
 401df58:	81800044 	addi	r6,r16,1
 401df5c:	108f883a 	add	r7,r2,r2
 401df60:	3885883a 	add	r2,r7,r2
 401df64:	100ed7fa 	srli	r7,r2,31
 401df68:	216dc83a 	sub	r22,r4,r5
 401df6c:	3589883a 	add	r4,r6,r22
 401df70:	3885883a 	add	r2,r7,r2
 401df74:	102bd07a 	srai	r21,r2,1
 401df78:	a80d883a 	mov	r6,r21
 401df7c:	a900022e 	bgeu	r21,r4,401df88 <__ssprint_r+0xa8>
 401df80:	202b883a 	mov	r21,r4
 401df84:	200d883a 	mov	r6,r4
 401df88:	18c1000c 	andi	r3,r3,1024
 401df8c:	18002a26 	beq	r3,zero,401e038 <__ssprint_r+0x158>
 401df90:	300b883a 	mov	r5,r6
 401df94:	9809883a 	mov	r4,r19
 401df98:	401b8340 	call	401b834 <_malloc_r>
 401df9c:	1029883a 	mov	r20,r2
 401dfa0:	10002c26 	beq	r2,zero,401e054 <__ssprint_r+0x174>
 401dfa4:	89400417 	ldw	r5,16(r17)
 401dfa8:	b00d883a 	mov	r6,r22
 401dfac:	1009883a 	mov	r4,r2
 401dfb0:	401c1240 	call	401c124 <memcpy>
 401dfb4:	8880030b 	ldhu	r2,12(r17)
 401dfb8:	00fedfc4 	movi	r3,-1153
 401dfbc:	10c4703a 	and	r2,r2,r3
 401dfc0:	10802014 	ori	r2,r2,128
 401dfc4:	8880030d 	sth	r2,12(r17)
 401dfc8:	a589883a 	add	r4,r20,r22
 401dfcc:	adadc83a 	sub	r22,r21,r22
 401dfd0:	8d400515 	stw	r21,20(r17)
 401dfd4:	8d800215 	stw	r22,8(r17)
 401dfd8:	8d000415 	stw	r20,16(r17)
 401dfdc:	89000015 	stw	r4,0(r17)
 401dfe0:	802b883a 	mov	r21,r16
 401dfe4:	802d883a 	mov	r22,r16
 401dfe8:	b00d883a 	mov	r6,r22
 401dfec:	e00b883a 	mov	r5,fp
 401dff0:	401c26c0 	call	401c26c <memmove>
 401dff4:	88800217 	ldw	r2,8(r17)
 401dff8:	89000017 	ldw	r4,0(r17)
 401dffc:	90c00217 	ldw	r3,8(r18)
 401e000:	1545c83a 	sub	r2,r2,r21
 401e004:	2589883a 	add	r4,r4,r22
 401e008:	88800215 	stw	r2,8(r17)
 401e00c:	89000015 	stw	r4,0(r17)
 401e010:	1c21c83a 	sub	r16,r3,r16
 401e014:	94000215 	stw	r16,8(r18)
 401e018:	80001726 	beq	r16,zero,401e078 <__ssprint_r+0x198>
 401e01c:	bf000017 	ldw	fp,0(r23)
 401e020:	bc000117 	ldw	r16,4(r23)
 401e024:	bdc00204 	addi	r23,r23,8
 401e028:	003fc206 	br	401df34 <__alt_mem_onchip_memory2_0+0xfc018d74>
 401e02c:	802b883a 	mov	r21,r16
 401e030:	802d883a 	mov	r22,r16
 401e034:	003fec06 	br	401dfe8 <__alt_mem_onchip_memory2_0+0xfc018e28>
 401e038:	9809883a 	mov	r4,r19
 401e03c:	401d7100 	call	401d710 <_realloc_r>
 401e040:	1029883a 	mov	r20,r2
 401e044:	103fe01e 	bne	r2,zero,401dfc8 <__alt_mem_onchip_memory2_0+0xfc018e08>
 401e048:	89400417 	ldw	r5,16(r17)
 401e04c:	9809883a 	mov	r4,r19
 401e050:	401abe00 	call	401abe0 <_free_r>
 401e054:	88c0030b 	ldhu	r3,12(r17)
 401e058:	00800304 	movi	r2,12
 401e05c:	98800015 	stw	r2,0(r19)
 401e060:	18c01014 	ori	r3,r3,64
 401e064:	88c0030d 	sth	r3,12(r17)
 401e068:	00bfffc4 	movi	r2,-1
 401e06c:	90000215 	stw	zero,8(r18)
 401e070:	90000115 	stw	zero,4(r18)
 401e074:	00000206 	br	401e080 <__ssprint_r+0x1a0>
 401e078:	90000115 	stw	zero,4(r18)
 401e07c:	0005883a 	mov	r2,zero
 401e080:	dfc00917 	ldw	ra,36(sp)
 401e084:	df000817 	ldw	fp,32(sp)
 401e088:	ddc00717 	ldw	r23,28(sp)
 401e08c:	dd800617 	ldw	r22,24(sp)
 401e090:	dd400517 	ldw	r21,20(sp)
 401e094:	dd000417 	ldw	r20,16(sp)
 401e098:	dcc00317 	ldw	r19,12(sp)
 401e09c:	dc800217 	ldw	r18,8(sp)
 401e0a0:	dc400117 	ldw	r17,4(sp)
 401e0a4:	dc000017 	ldw	r16,0(sp)
 401e0a8:	dec00a04 	addi	sp,sp,40
 401e0ac:	f800283a 	ret

0401e0b0 <___svfiprintf_internal_r>:
 401e0b0:	2880030b 	ldhu	r2,12(r5)
 401e0b4:	deffc804 	addi	sp,sp,-224
 401e0b8:	dcc03115 	stw	r19,196(sp)
 401e0bc:	dfc03715 	stw	ra,220(sp)
 401e0c0:	df003615 	stw	fp,216(sp)
 401e0c4:	ddc03515 	stw	r23,212(sp)
 401e0c8:	dd803415 	stw	r22,208(sp)
 401e0cc:	dd403315 	stw	r21,204(sp)
 401e0d0:	dd003215 	stw	r20,200(sp)
 401e0d4:	dc803015 	stw	r18,192(sp)
 401e0d8:	dc402f15 	stw	r17,188(sp)
 401e0dc:	dc002e15 	stw	r16,184(sp)
 401e0e0:	d9402315 	stw	r5,140(sp)
 401e0e4:	d9002715 	stw	r4,156(sp)
 401e0e8:	1080200c 	andi	r2,r2,128
 401e0ec:	d9c02415 	stw	r7,144(sp)
 401e0f0:	3027883a 	mov	r19,r6
 401e0f4:	10000226 	beq	r2,zero,401e100 <___svfiprintf_internal_r+0x50>
 401e0f8:	28800417 	ldw	r2,16(r5)
 401e0fc:	10046d26 	beq	r2,zero,401f2b4 <___svfiprintf_internal_r+0x1204>
 401e100:	d8801a04 	addi	r2,sp,104
 401e104:	d8c019c4 	addi	r3,sp,103
 401e108:	058100b4 	movhi	r22,1026
 401e10c:	10c9c83a 	sub	r4,r2,r3
 401e110:	b595ec04 	addi	r22,r22,22448
 401e114:	d8801e15 	stw	r2,120(sp)
 401e118:	d8c01f15 	stw	r3,124(sp)
 401e11c:	dec01a15 	stw	sp,104(sp)
 401e120:	d8001c15 	stw	zero,112(sp)
 401e124:	d8001b15 	stw	zero,108(sp)
 401e128:	d811883a 	mov	r8,sp
 401e12c:	d8002915 	stw	zero,164(sp)
 401e130:	d8002615 	stw	zero,152(sp)
 401e134:	d9002c15 	stw	r4,176(sp)
 401e138:	98800007 	ldb	r2,0(r19)
 401e13c:	10031426 	beq	r2,zero,401ed90 <___svfiprintf_internal_r+0xce0>
 401e140:	00c00944 	movi	r3,37
 401e144:	9825883a 	mov	r18,r19
 401e148:	10c0021e 	bne	r2,r3,401e154 <___svfiprintf_internal_r+0xa4>
 401e14c:	00001406 	br	401e1a0 <___svfiprintf_internal_r+0xf0>
 401e150:	10c00326 	beq	r2,r3,401e160 <___svfiprintf_internal_r+0xb0>
 401e154:	94800044 	addi	r18,r18,1
 401e158:	90800007 	ldb	r2,0(r18)
 401e15c:	103ffc1e 	bne	r2,zero,401e150 <__alt_mem_onchip_memory2_0+0xfc018f90>
 401e160:	94e1c83a 	sub	r16,r18,r19
 401e164:	80000e26 	beq	r16,zero,401e1a0 <___svfiprintf_internal_r+0xf0>
 401e168:	d8c01c17 	ldw	r3,112(sp)
 401e16c:	d8801b17 	ldw	r2,108(sp)
 401e170:	44c00015 	stw	r19,0(r8)
 401e174:	1c07883a 	add	r3,r3,r16
 401e178:	10800044 	addi	r2,r2,1
 401e17c:	d8c01c15 	stw	r3,112(sp)
 401e180:	44000115 	stw	r16,4(r8)
 401e184:	d8801b15 	stw	r2,108(sp)
 401e188:	00c001c4 	movi	r3,7
 401e18c:	18835c16 	blt	r3,r2,401ef00 <___svfiprintf_internal_r+0xe50>
 401e190:	42000204 	addi	r8,r8,8
 401e194:	d9402617 	ldw	r5,152(sp)
 401e198:	2c0b883a 	add	r5,r5,r16
 401e19c:	d9402615 	stw	r5,152(sp)
 401e1a0:	90800007 	ldb	r2,0(r18)
 401e1a4:	1002fc26 	beq	r2,zero,401ed98 <___svfiprintf_internal_r+0xce8>
 401e1a8:	0023883a 	mov	r17,zero
 401e1ac:	00bfffc4 	movi	r2,-1
 401e1b0:	0021883a 	mov	r16,zero
 401e1b4:	94c00044 	addi	r19,r18,1
 401e1b8:	90c00047 	ldb	r3,1(r18)
 401e1bc:	dc402105 	stb	r17,132(sp)
 401e1c0:	d8001d85 	stb	zero,118(sp)
 401e1c4:	002b883a 	mov	r21,zero
 401e1c8:	d8802015 	stw	r2,128(sp)
 401e1cc:	d8002515 	stw	zero,148(sp)
 401e1d0:	04801604 	movi	r18,88
 401e1d4:	05000244 	movi	r20,9
 401e1d8:	402f883a 	mov	r23,r8
 401e1dc:	8023883a 	mov	r17,r16
 401e1e0:	9cc00044 	addi	r19,r19,1
 401e1e4:	18bff804 	addi	r2,r3,-32
 401e1e8:	9081fb36 	bltu	r18,r2,401e9d8 <___svfiprintf_internal_r+0x928>
 401e1ec:	100490ba 	slli	r2,r2,2
 401e1f0:	010100b4 	movhi	r4,1026
 401e1f4:	21388104 	addi	r4,r4,-7676
 401e1f8:	1105883a 	add	r2,r2,r4
 401e1fc:	10800017 	ldw	r2,0(r2)
 401e200:	1000683a 	jmp	r2
 401e204:	0401e404 	movi	r16,1936
 401e208:	0401e9d8 	cmpnei	r16,zero,1959
 401e20c:	0401e9d8 	cmpnei	r16,zero,1959
 401e210:	0401e3f8 	rdprs	r16,zero,1935
 401e214:	0401e9d8 	cmpnei	r16,zero,1959
 401e218:	0401e9d8 	cmpnei	r16,zero,1959
 401e21c:	0401e9d8 	cmpnei	r16,zero,1959
 401e220:	0401e9d8 	cmpnei	r16,zero,1959
 401e224:	0401e9d8 	cmpnei	r16,zero,1959
 401e228:	0401e9d8 	cmpnei	r16,zero,1959
 401e22c:	0401e368 	cmpgeui	r16,zero,1933
 401e230:	0401e564 	muli	r16,zero,1941
 401e234:	0401e9d8 	cmpnei	r16,zero,1959
 401e238:	0401e390 	cmplti	r16,zero,1934
 401e23c:	0401ea14 	movui	r16,1960
 401e240:	0401e9d8 	cmpnei	r16,zero,1959
 401e244:	0401ea08 	cmpgei	r16,zero,1960
 401e248:	0401e99c 	xori	r16,zero,1958
 401e24c:	0401e99c 	xori	r16,zero,1958
 401e250:	0401e99c 	xori	r16,zero,1958
 401e254:	0401e99c 	xori	r16,zero,1958
 401e258:	0401e99c 	xori	r16,zero,1958
 401e25c:	0401e99c 	xori	r16,zero,1958
 401e260:	0401e99c 	xori	r16,zero,1958
 401e264:	0401e99c 	xori	r16,zero,1958
 401e268:	0401e99c 	xori	r16,zero,1958
 401e26c:	0401e9d8 	cmpnei	r16,zero,1959
 401e270:	0401e9d8 	cmpnei	r16,zero,1959
 401e274:	0401e9d8 	cmpnei	r16,zero,1959
 401e278:	0401e9d8 	cmpnei	r16,zero,1959
 401e27c:	0401e9d8 	cmpnei	r16,zero,1959
 401e280:	0401e9d8 	cmpnei	r16,zero,1959
 401e284:	0401e9d8 	cmpnei	r16,zero,1959
 401e288:	0401e9d8 	cmpnei	r16,zero,1959
 401e28c:	0401e9d8 	cmpnei	r16,zero,1959
 401e290:	0401e9d8 	cmpnei	r16,zero,1959
 401e294:	0401e920 	cmpeqi	r16,zero,1956
 401e298:	0401e9d8 	cmpnei	r16,zero,1959
 401e29c:	0401e9d8 	cmpnei	r16,zero,1959
 401e2a0:	0401e9d8 	cmpnei	r16,zero,1959
 401e2a4:	0401e9d8 	cmpnei	r16,zero,1959
 401e2a8:	0401e9d8 	cmpnei	r16,zero,1959
 401e2ac:	0401e9d8 	cmpnei	r16,zero,1959
 401e2b0:	0401e9d8 	cmpnei	r16,zero,1959
 401e2b4:	0401e9d8 	cmpnei	r16,zero,1959
 401e2b8:	0401e9d8 	cmpnei	r16,zero,1959
 401e2bc:	0401e9d8 	cmpnei	r16,zero,1959
 401e2c0:	0401ead0 	cmplti	r16,zero,1963
 401e2c4:	0401e9d8 	cmpnei	r16,zero,1959
 401e2c8:	0401e9d8 	cmpnei	r16,zero,1959
 401e2cc:	0401e9d8 	cmpnei	r16,zero,1959
 401e2d0:	0401e9d8 	cmpnei	r16,zero,1959
 401e2d4:	0401e9d8 	cmpnei	r16,zero,1959
 401e2d8:	0401ea5c 	xori	r16,zero,1961
 401e2dc:	0401e9d8 	cmpnei	r16,zero,1959
 401e2e0:	0401e9d8 	cmpnei	r16,zero,1959
 401e2e4:	0401e75c 	xori	r16,zero,1949
 401e2e8:	0401e9d8 	cmpnei	r16,zero,1959
 401e2ec:	0401e9d8 	cmpnei	r16,zero,1959
 401e2f0:	0401e9d8 	cmpnei	r16,zero,1959
 401e2f4:	0401e9d8 	cmpnei	r16,zero,1959
 401e2f8:	0401e9d8 	cmpnei	r16,zero,1959
 401e2fc:	0401e9d8 	cmpnei	r16,zero,1959
 401e300:	0401e9d8 	cmpnei	r16,zero,1959
 401e304:	0401e9d8 	cmpnei	r16,zero,1959
 401e308:	0401e9d8 	cmpnei	r16,zero,1959
 401e30c:	0401e9d8 	cmpnei	r16,zero,1959
 401e310:	0401e628 	cmpgeui	r16,zero,1944
 401e314:	0401e80c 	andi	r16,zero,1952
 401e318:	0401e9d8 	cmpnei	r16,zero,1959
 401e31c:	0401e9d8 	cmpnei	r16,zero,1959
 401e320:	0401e9d8 	cmpnei	r16,zero,1959
 401e324:	0401e800 	call	401e80 <__alt_mem_sdram-0x3bfe180>
 401e328:	0401e80c 	andi	r16,zero,1952
 401e32c:	0401e9d8 	cmpnei	r16,zero,1959
 401e330:	0401e9d8 	cmpnei	r16,zero,1959
 401e334:	0401e7ec 	andhi	r16,zero,1951
 401e338:	0401e9d8 	cmpnei	r16,zero,1959
 401e33c:	0401e7ac 	andhi	r16,zero,1950
 401e340:	0401e578 	rdprs	r16,zero,1941
 401e344:	0401e39c 	xori	r16,zero,1934
 401e348:	0401e914 	movui	r16,1956
 401e34c:	0401e9d8 	cmpnei	r16,zero,1959
 401e350:	0401e8c0 	call	401e8c <__alt_mem_sdram-0x3bfe174>
 401e354:	0401e9d8 	cmpnei	r16,zero,1959
 401e358:	0401e4dc 	xori	r16,zero,1939
 401e35c:	0401e9d8 	cmpnei	r16,zero,1959
 401e360:	0401e9d8 	cmpnei	r16,zero,1959
 401e364:	0401e428 	cmpgeui	r16,zero,1936
 401e368:	d9002417 	ldw	r4,144(sp)
 401e36c:	d9402417 	ldw	r5,144(sp)
 401e370:	21000017 	ldw	r4,0(r4)
 401e374:	28800104 	addi	r2,r5,4
 401e378:	d9002515 	stw	r4,148(sp)
 401e37c:	20032b0e 	bge	r4,zero,401f02c <___svfiprintf_internal_r+0xf7c>
 401e380:	d8c02517 	ldw	r3,148(sp)
 401e384:	d8802415 	stw	r2,144(sp)
 401e388:	00c7c83a 	sub	r3,zero,r3
 401e38c:	d8c02515 	stw	r3,148(sp)
 401e390:	8c400114 	ori	r17,r17,4
 401e394:	98c00007 	ldb	r3,0(r19)
 401e398:	003f9106 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401e39c:	00800c04 	movi	r2,48
 401e3a0:	d9402417 	ldw	r5,144(sp)
 401e3a4:	d9002017 	ldw	r4,128(sp)
 401e3a8:	d8801d05 	stb	r2,116(sp)
 401e3ac:	00801e04 	movi	r2,120
 401e3b0:	d8801d45 	stb	r2,117(sp)
 401e3b4:	d8001d85 	stb	zero,118(sp)
 401e3b8:	b811883a 	mov	r8,r23
 401e3bc:	28c00104 	addi	r3,r5,4
 401e3c0:	2c800017 	ldw	r18,0(r5)
 401e3c4:	0029883a 	mov	r20,zero
 401e3c8:	88800094 	ori	r2,r17,2
 401e3cc:	20036316 	blt	r4,zero,401f15c <___svfiprintf_internal_r+0x10ac>
 401e3d0:	00bfdfc4 	movi	r2,-129
 401e3d4:	88a0703a 	and	r16,r17,r2
 401e3d8:	d8c02415 	stw	r3,144(sp)
 401e3dc:	84000094 	ori	r16,r16,2
 401e3e0:	90031c26 	beq	r18,zero,401f054 <___svfiprintf_internal_r+0xfa4>
 401e3e4:	014100b4 	movhi	r5,1026
 401e3e8:	29558504 	addi	r5,r5,22036
 401e3ec:	002b883a 	mov	r21,zero
 401e3f0:	d9402915 	stw	r5,164(sp)
 401e3f4:	00002906 	br	401e49c <___svfiprintf_internal_r+0x3ec>
 401e3f8:	8c400054 	ori	r17,r17,1
 401e3fc:	98c00007 	ldb	r3,0(r19)
 401e400:	003f7706 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401e404:	a8803fcc 	andi	r2,r21,255
 401e408:	1080201c 	xori	r2,r2,128
 401e40c:	10bfe004 	addi	r2,r2,-128
 401e410:	10032a1e 	bne	r2,zero,401f0bc <___svfiprintf_internal_r+0x100c>
 401e414:	00c00044 	movi	r3,1
 401e418:	d8c02105 	stb	r3,132(sp)
 401e41c:	05400804 	movi	r21,32
 401e420:	98c00007 	ldb	r3,0(r19)
 401e424:	003f6e06 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401e428:	8821883a 	mov	r16,r17
 401e42c:	dc402103 	ldbu	r17,132(sp)
 401e430:	b811883a 	mov	r8,r23
 401e434:	8c403fcc 	andi	r17,r17,255
 401e438:	8803f01e 	bne	r17,zero,401f3fc <___svfiprintf_internal_r+0x134c>
 401e43c:	008100b4 	movhi	r2,1026
 401e440:	10958504 	addi	r2,r2,22036
 401e444:	d8802915 	stw	r2,164(sp)
 401e448:	8080080c 	andi	r2,r16,32
 401e44c:	1000cd26 	beq	r2,zero,401e784 <___svfiprintf_internal_r+0x6d4>
 401e450:	d9002417 	ldw	r4,144(sp)
 401e454:	24800017 	ldw	r18,0(r4)
 401e458:	25000117 	ldw	r20,4(r4)
 401e45c:	21000204 	addi	r4,r4,8
 401e460:	d9002415 	stw	r4,144(sp)
 401e464:	8080004c 	andi	r2,r16,1
 401e468:	1002c726 	beq	r2,zero,401ef88 <___svfiprintf_internal_r+0xed8>
 401e46c:	9504b03a 	or	r2,r18,r20
 401e470:	1003061e 	bne	r2,zero,401f08c <___svfiprintf_internal_r+0xfdc>
 401e474:	d9002017 	ldw	r4,128(sp)
 401e478:	d8001d85 	stb	zero,118(sp)
 401e47c:	20033e16 	blt	r4,zero,401f178 <___svfiprintf_internal_r+0x10c8>
 401e480:	00bfdfc4 	movi	r2,-129
 401e484:	80a0703a 	and	r16,r16,r2
 401e488:	d9402017 	ldw	r5,128(sp)
 401e48c:	002b883a 	mov	r21,zero
 401e490:	28002826 	beq	r5,zero,401e534 <___svfiprintf_internal_r+0x484>
 401e494:	0025883a 	mov	r18,zero
 401e498:	0029883a 	mov	r20,zero
 401e49c:	d9002917 	ldw	r4,164(sp)
 401e4a0:	dc401a04 	addi	r17,sp,104
 401e4a4:	908003cc 	andi	r2,r18,15
 401e4a8:	a006973a 	slli	r3,r20,28
 401e4ac:	2085883a 	add	r2,r4,r2
 401e4b0:	9024d13a 	srli	r18,r18,4
 401e4b4:	10800003 	ldbu	r2,0(r2)
 401e4b8:	a028d13a 	srli	r20,r20,4
 401e4bc:	8c7fffc4 	addi	r17,r17,-1
 401e4c0:	1ca4b03a 	or	r18,r3,r18
 401e4c4:	88800005 	stb	r2,0(r17)
 401e4c8:	9504b03a 	or	r2,r18,r20
 401e4cc:	103ff51e 	bne	r2,zero,401e4a4 <__alt_mem_onchip_memory2_0+0xfc0192e4>
 401e4d0:	d8801e17 	ldw	r2,120(sp)
 401e4d4:	1469c83a 	sub	r20,r2,r17
 401e4d8:	00001906 	br	401e540 <___svfiprintf_internal_r+0x490>
 401e4dc:	8821883a 	mov	r16,r17
 401e4e0:	dc402103 	ldbu	r17,132(sp)
 401e4e4:	b811883a 	mov	r8,r23
 401e4e8:	8c403fcc 	andi	r17,r17,255
 401e4ec:	8803d01e 	bne	r17,zero,401f430 <___svfiprintf_internal_r+0x1380>
 401e4f0:	8080080c 	andi	r2,r16,32
 401e4f4:	10016126 	beq	r2,zero,401ea7c <___svfiprintf_internal_r+0x9cc>
 401e4f8:	d9002417 	ldw	r4,144(sp)
 401e4fc:	d9402017 	ldw	r5,128(sp)
 401e500:	d8001d85 	stb	zero,118(sp)
 401e504:	20c00204 	addi	r3,r4,8
 401e508:	24800017 	ldw	r18,0(r4)
 401e50c:	25000117 	ldw	r20,4(r4)
 401e510:	28030f16 	blt	r5,zero,401f150 <___svfiprintf_internal_r+0x10a0>
 401e514:	013fdfc4 	movi	r4,-129
 401e518:	9504b03a 	or	r2,r18,r20
 401e51c:	d8c02415 	stw	r3,144(sp)
 401e520:	8120703a 	and	r16,r16,r4
 401e524:	002b883a 	mov	r21,zero
 401e528:	1000cd1e 	bne	r2,zero,401e860 <___svfiprintf_internal_r+0x7b0>
 401e52c:	d8c02017 	ldw	r3,128(sp)
 401e530:	1803141e 	bne	r3,zero,401f184 <___svfiprintf_internal_r+0x10d4>
 401e534:	d8002015 	stw	zero,128(sp)
 401e538:	0029883a 	mov	r20,zero
 401e53c:	dc401a04 	addi	r17,sp,104
 401e540:	dc802017 	ldw	r18,128(sp)
 401e544:	9500010e 	bge	r18,r20,401e54c <___svfiprintf_internal_r+0x49c>
 401e548:	a025883a 	mov	r18,r20
 401e54c:	ad403fcc 	andi	r21,r21,255
 401e550:	ad40201c 	xori	r21,r21,128
 401e554:	ad7fe004 	addi	r21,r21,-128
 401e558:	a8003f26 	beq	r21,zero,401e658 <___svfiprintf_internal_r+0x5a8>
 401e55c:	94800044 	addi	r18,r18,1
 401e560:	00003d06 	br	401e658 <___svfiprintf_internal_r+0x5a8>
 401e564:	00c00044 	movi	r3,1
 401e568:	d8c02105 	stb	r3,132(sp)
 401e56c:	05400ac4 	movi	r21,43
 401e570:	98c00007 	ldb	r3,0(r19)
 401e574:	003f1a06 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401e578:	8821883a 	mov	r16,r17
 401e57c:	dc402103 	ldbu	r17,132(sp)
 401e580:	b811883a 	mov	r8,r23
 401e584:	8c403fcc 	andi	r17,r17,255
 401e588:	8803a71e 	bne	r17,zero,401f428 <___svfiprintf_internal_r+0x1378>
 401e58c:	8080080c 	andi	r2,r16,32
 401e590:	10015726 	beq	r2,zero,401eaf0 <___svfiprintf_internal_r+0xa40>
 401e594:	d8c02417 	ldw	r3,144(sp)
 401e598:	d9002017 	ldw	r4,128(sp)
 401e59c:	d8001d85 	stb	zero,118(sp)
 401e5a0:	18800204 	addi	r2,r3,8
 401e5a4:	1c800017 	ldw	r18,0(r3)
 401e5a8:	1d000117 	ldw	r20,4(r3)
 401e5ac:	2002db16 	blt	r4,zero,401f11c <___svfiprintf_internal_r+0x106c>
 401e5b0:	013fdfc4 	movi	r4,-129
 401e5b4:	9506b03a 	or	r3,r18,r20
 401e5b8:	d8802415 	stw	r2,144(sp)
 401e5bc:	8120703a 	and	r16,r16,r4
 401e5c0:	18015826 	beq	r3,zero,401eb24 <___svfiprintf_internal_r+0xa74>
 401e5c4:	002b883a 	mov	r21,zero
 401e5c8:	dc401a04 	addi	r17,sp,104
 401e5cc:	9006d0fa 	srli	r3,r18,3
 401e5d0:	a008977a 	slli	r4,r20,29
 401e5d4:	a028d0fa 	srli	r20,r20,3
 401e5d8:	948001cc 	andi	r18,r18,7
 401e5dc:	90800c04 	addi	r2,r18,48
 401e5e0:	8c7fffc4 	addi	r17,r17,-1
 401e5e4:	20e4b03a 	or	r18,r4,r3
 401e5e8:	88800005 	stb	r2,0(r17)
 401e5ec:	9506b03a 	or	r3,r18,r20
 401e5f0:	183ff61e 	bne	r3,zero,401e5cc <__alt_mem_onchip_memory2_0+0xfc01940c>
 401e5f4:	80c0004c 	andi	r3,r16,1
 401e5f8:	18028926 	beq	r3,zero,401f020 <___svfiprintf_internal_r+0xf70>
 401e5fc:	10803fcc 	andi	r2,r2,255
 401e600:	1080201c 	xori	r2,r2,128
 401e604:	10bfe004 	addi	r2,r2,-128
 401e608:	00c00c04 	movi	r3,48
 401e60c:	10ffb026 	beq	r2,r3,401e4d0 <__alt_mem_onchip_memory2_0+0xfc019310>
 401e610:	88ffffc5 	stb	r3,-1(r17)
 401e614:	d8c01e17 	ldw	r3,120(sp)
 401e618:	88bfffc4 	addi	r2,r17,-1
 401e61c:	1023883a 	mov	r17,r2
 401e620:	18a9c83a 	sub	r20,r3,r2
 401e624:	003fc606 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401e628:	d8c02417 	ldw	r3,144(sp)
 401e62c:	04800044 	movi	r18,1
 401e630:	8821883a 	mov	r16,r17
 401e634:	18800017 	ldw	r2,0(r3)
 401e638:	18c00104 	addi	r3,r3,4
 401e63c:	b811883a 	mov	r8,r23
 401e640:	d8001d85 	stb	zero,118(sp)
 401e644:	d8801005 	stb	r2,64(sp)
 401e648:	d8c02415 	stw	r3,144(sp)
 401e64c:	9029883a 	mov	r20,r18
 401e650:	dc401004 	addi	r17,sp,64
 401e654:	d8002015 	stw	zero,128(sp)
 401e658:	80c0008c 	andi	r3,r16,2
 401e65c:	d8c02115 	stw	r3,132(sp)
 401e660:	18000126 	beq	r3,zero,401e668 <___svfiprintf_internal_r+0x5b8>
 401e664:	94800084 	addi	r18,r18,2
 401e668:	80c0210c 	andi	r3,r16,132
 401e66c:	d8c02215 	stw	r3,136(sp)
 401e670:	1801321e 	bne	r3,zero,401eb3c <___svfiprintf_internal_r+0xa8c>
 401e674:	d9002517 	ldw	r4,148(sp)
 401e678:	24b9c83a 	sub	fp,r4,r18
 401e67c:	07012f0e 	bge	zero,fp,401eb3c <___svfiprintf_internal_r+0xa8c>
 401e680:	02400404 	movi	r9,16
 401e684:	d8c01c17 	ldw	r3,112(sp)
 401e688:	d8801b17 	ldw	r2,108(sp)
 401e68c:	4f03250e 	bge	r9,fp,401f324 <___svfiprintf_internal_r+0x1274>
 401e690:	010100b4 	movhi	r4,1026
 401e694:	2115f004 	addi	r4,r4,22464
 401e698:	dc002a15 	stw	r16,168(sp)
 401e69c:	dc402b15 	stw	r17,172(sp)
 401e6a0:	d9002815 	stw	r4,160(sp)
 401e6a4:	e023883a 	mov	r17,fp
 401e6a8:	482f883a 	mov	r23,r9
 401e6ac:	9839883a 	mov	fp,r19
 401e6b0:	054001c4 	movi	r21,7
 401e6b4:	9027883a 	mov	r19,r18
 401e6b8:	dc002717 	ldw	r16,156(sp)
 401e6bc:	dc802317 	ldw	r18,140(sp)
 401e6c0:	00000306 	br	401e6d0 <___svfiprintf_internal_r+0x620>
 401e6c4:	8c7ffc04 	addi	r17,r17,-16
 401e6c8:	42000204 	addi	r8,r8,8
 401e6cc:	bc40130e 	bge	r23,r17,401e71c <___svfiprintf_internal_r+0x66c>
 401e6d0:	014100b4 	movhi	r5,1026
 401e6d4:	18c00404 	addi	r3,r3,16
 401e6d8:	10800044 	addi	r2,r2,1
 401e6dc:	2955f004 	addi	r5,r5,22464
 401e6e0:	41400015 	stw	r5,0(r8)
 401e6e4:	45c00115 	stw	r23,4(r8)
 401e6e8:	d8c01c15 	stw	r3,112(sp)
 401e6ec:	d8801b15 	stw	r2,108(sp)
 401e6f0:	a8bff40e 	bge	r21,r2,401e6c4 <__alt_mem_onchip_memory2_0+0xfc019504>
 401e6f4:	d9801a04 	addi	r6,sp,104
 401e6f8:	900b883a 	mov	r5,r18
 401e6fc:	8009883a 	mov	r4,r16
 401e700:	401dee00 	call	401dee0 <__ssprint_r>
 401e704:	1001aa1e 	bne	r2,zero,401edb0 <___svfiprintf_internal_r+0xd00>
 401e708:	8c7ffc04 	addi	r17,r17,-16
 401e70c:	d8c01c17 	ldw	r3,112(sp)
 401e710:	d8801b17 	ldw	r2,108(sp)
 401e714:	d811883a 	mov	r8,sp
 401e718:	bc7fed16 	blt	r23,r17,401e6d0 <__alt_mem_onchip_memory2_0+0xfc019510>
 401e71c:	9825883a 	mov	r18,r19
 401e720:	dc002a17 	ldw	r16,168(sp)
 401e724:	e027883a 	mov	r19,fp
 401e728:	8839883a 	mov	fp,r17
 401e72c:	dc402b17 	ldw	r17,172(sp)
 401e730:	d9002817 	ldw	r4,160(sp)
 401e734:	e0c7883a 	add	r3,fp,r3
 401e738:	10800044 	addi	r2,r2,1
 401e73c:	41000015 	stw	r4,0(r8)
 401e740:	47000115 	stw	fp,4(r8)
 401e744:	d8c01c15 	stw	r3,112(sp)
 401e748:	d8801b15 	stw	r2,108(sp)
 401e74c:	010001c4 	movi	r4,7
 401e750:	20821616 	blt	r4,r2,401efac <___svfiprintf_internal_r+0xefc>
 401e754:	42000204 	addi	r8,r8,8
 401e758:	0000fa06 	br	401eb44 <___svfiprintf_internal_r+0xa94>
 401e75c:	8821883a 	mov	r16,r17
 401e760:	dc402103 	ldbu	r17,132(sp)
 401e764:	b811883a 	mov	r8,r23
 401e768:	8c403fcc 	andi	r17,r17,255
 401e76c:	8803361e 	bne	r17,zero,401f448 <___svfiprintf_internal_r+0x1398>
 401e770:	014100b4 	movhi	r5,1026
 401e774:	29558004 	addi	r5,r5,22016
 401e778:	d9402915 	stw	r5,164(sp)
 401e77c:	8080080c 	andi	r2,r16,32
 401e780:	103f331e 	bne	r2,zero,401e450 <__alt_mem_onchip_memory2_0+0xfc019290>
 401e784:	8080040c 	andi	r2,r16,16
 401e788:	1002551e 	bne	r2,zero,401f0e0 <___svfiprintf_internal_r+0x1030>
 401e78c:	8080100c 	andi	r2,r16,64
 401e790:	1002a626 	beq	r2,zero,401f22c <___svfiprintf_internal_r+0x117c>
 401e794:	d8802417 	ldw	r2,144(sp)
 401e798:	0029883a 	mov	r20,zero
 401e79c:	1480000b 	ldhu	r18,0(r2)
 401e7a0:	10800104 	addi	r2,r2,4
 401e7a4:	d8802415 	stw	r2,144(sp)
 401e7a8:	003f2e06 	br	401e464 <__alt_mem_onchip_memory2_0+0xfc0192a4>
 401e7ac:	8821883a 	mov	r16,r17
 401e7b0:	dc402103 	ldbu	r17,132(sp)
 401e7b4:	b811883a 	mov	r8,r23
 401e7b8:	8c403fcc 	andi	r17,r17,255
 401e7bc:	88030b1e 	bne	r17,zero,401f3ec <___svfiprintf_internal_r+0x133c>
 401e7c0:	8080080c 	andi	r2,r16,32
 401e7c4:	1002271e 	bne	r2,zero,401f064 <___svfiprintf_internal_r+0xfb4>
 401e7c8:	8080040c 	andi	r2,r16,16
 401e7cc:	10028e26 	beq	r2,zero,401f208 <___svfiprintf_internal_r+0x1158>
 401e7d0:	d8c02417 	ldw	r3,144(sp)
 401e7d4:	d9002617 	ldw	r4,152(sp)
 401e7d8:	18800017 	ldw	r2,0(r3)
 401e7dc:	18c00104 	addi	r3,r3,4
 401e7e0:	d8c02415 	stw	r3,144(sp)
 401e7e4:	11000015 	stw	r4,0(r2)
 401e7e8:	003e5306 	br	401e138 <__alt_mem_onchip_memory2_0+0xfc018f78>
 401e7ec:	98c00007 	ldb	r3,0(r19)
 401e7f0:	01401b04 	movi	r5,108
 401e7f4:	19424f26 	beq	r3,r5,401f134 <___svfiprintf_internal_r+0x1084>
 401e7f8:	8c400414 	ori	r17,r17,16
 401e7fc:	003e7806 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401e800:	8c401014 	ori	r17,r17,64
 401e804:	98c00007 	ldb	r3,0(r19)
 401e808:	003e7506 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401e80c:	8821883a 	mov	r16,r17
 401e810:	dc402103 	ldbu	r17,132(sp)
 401e814:	b811883a 	mov	r8,r23
 401e818:	8c403fcc 	andi	r17,r17,255
 401e81c:	8802fe1e 	bne	r17,zero,401f418 <___svfiprintf_internal_r+0x1368>
 401e820:	8080080c 	andi	r2,r16,32
 401e824:	10004626 	beq	r2,zero,401e940 <___svfiprintf_internal_r+0x890>
 401e828:	d9002417 	ldw	r4,144(sp)
 401e82c:	20800117 	ldw	r2,4(r4)
 401e830:	24800017 	ldw	r18,0(r4)
 401e834:	21000204 	addi	r4,r4,8
 401e838:	d9002415 	stw	r4,144(sp)
 401e83c:	1029883a 	mov	r20,r2
 401e840:	10004a16 	blt	r2,zero,401e96c <___svfiprintf_internal_r+0x8bc>
 401e844:	d9002017 	ldw	r4,128(sp)
 401e848:	dd401d83 	ldbu	r21,118(sp)
 401e84c:	2001eb16 	blt	r4,zero,401effc <___svfiprintf_internal_r+0xf4c>
 401e850:	00ffdfc4 	movi	r3,-129
 401e854:	9504b03a 	or	r2,r18,r20
 401e858:	80e0703a 	and	r16,r16,r3
 401e85c:	103f3326 	beq	r2,zero,401e52c <__alt_mem_onchip_memory2_0+0xfc01936c>
 401e860:	a0009426 	beq	r20,zero,401eab4 <___svfiprintf_internal_r+0xa04>
 401e864:	dc401a04 	addi	r17,sp,104
 401e868:	402f883a 	mov	r23,r8
 401e86c:	9009883a 	mov	r4,r18
 401e870:	a00b883a 	mov	r5,r20
 401e874:	01800284 	movi	r6,10
 401e878:	000f883a 	mov	r7,zero
 401e87c:	4021b9c0 	call	4021b9c <__umoddi3>
 401e880:	10800c04 	addi	r2,r2,48
 401e884:	8c7fffc4 	addi	r17,r17,-1
 401e888:	9009883a 	mov	r4,r18
 401e88c:	a00b883a 	mov	r5,r20
 401e890:	88800005 	stb	r2,0(r17)
 401e894:	01800284 	movi	r6,10
 401e898:	000f883a 	mov	r7,zero
 401e89c:	40215a00 	call	40215a0 <__udivdi3>
 401e8a0:	1025883a 	mov	r18,r2
 401e8a4:	10c4b03a 	or	r2,r2,r3
 401e8a8:	1829883a 	mov	r20,r3
 401e8ac:	103fef1e 	bne	r2,zero,401e86c <__alt_mem_onchip_memory2_0+0xfc0196ac>
 401e8b0:	d9001e17 	ldw	r4,120(sp)
 401e8b4:	b811883a 	mov	r8,r23
 401e8b8:	2469c83a 	sub	r20,r4,r17
 401e8bc:	003f2006 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401e8c0:	d8802417 	ldw	r2,144(sp)
 401e8c4:	8821883a 	mov	r16,r17
 401e8c8:	d8001d85 	stb	zero,118(sp)
 401e8cc:	14400017 	ldw	r17,0(r2)
 401e8d0:	b811883a 	mov	r8,r23
 401e8d4:	15c00104 	addi	r23,r2,4
 401e8d8:	88026c26 	beq	r17,zero,401f28c <___svfiprintf_internal_r+0x11dc>
 401e8dc:	d8c02017 	ldw	r3,128(sp)
 401e8e0:	18025f16 	blt	r3,zero,401f260 <___svfiprintf_internal_r+0x11b0>
 401e8e4:	180d883a 	mov	r6,r3
 401e8e8:	000b883a 	mov	r5,zero
 401e8ec:	8809883a 	mov	r4,r17
 401e8f0:	da002d15 	stw	r8,180(sp)
 401e8f4:	401c0400 	call	401c040 <memchr>
 401e8f8:	da002d17 	ldw	r8,180(sp)
 401e8fc:	1002a526 	beq	r2,zero,401f394 <___svfiprintf_internal_r+0x12e4>
 401e900:	1469c83a 	sub	r20,r2,r17
 401e904:	dd401d83 	ldbu	r21,118(sp)
 401e908:	ddc02415 	stw	r23,144(sp)
 401e90c:	d8002015 	stw	zero,128(sp)
 401e910:	003f0b06 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401e914:	8c400814 	ori	r17,r17,32
 401e918:	98c00007 	ldb	r3,0(r19)
 401e91c:	003e3006 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401e920:	8821883a 	mov	r16,r17
 401e924:	dc402103 	ldbu	r17,132(sp)
 401e928:	b811883a 	mov	r8,r23
 401e92c:	8c403fcc 	andi	r17,r17,255
 401e930:	8802b01e 	bne	r17,zero,401f3f4 <___svfiprintf_internal_r+0x1344>
 401e934:	84000414 	ori	r16,r16,16
 401e938:	8080080c 	andi	r2,r16,32
 401e93c:	103fba1e 	bne	r2,zero,401e828 <__alt_mem_onchip_memory2_0+0xfc019668>
 401e940:	8080040c 	andi	r2,r16,16
 401e944:	1001df1e 	bne	r2,zero,401f0c4 <___svfiprintf_internal_r+0x1014>
 401e948:	8080100c 	andi	r2,r16,64
 401e94c:	10023d26 	beq	r2,zero,401f244 <___svfiprintf_internal_r+0x1194>
 401e950:	d8802417 	ldw	r2,144(sp)
 401e954:	1480000f 	ldh	r18,0(r2)
 401e958:	10800104 	addi	r2,r2,4
 401e95c:	d8802415 	stw	r2,144(sp)
 401e960:	9029d7fa 	srai	r20,r18,31
 401e964:	a005883a 	mov	r2,r20
 401e968:	103fb60e 	bge	r2,zero,401e844 <__alt_mem_onchip_memory2_0+0xfc019684>
 401e96c:	d9402017 	ldw	r5,128(sp)
 401e970:	04a5c83a 	sub	r18,zero,r18
 401e974:	05400b44 	movi	r21,45
 401e978:	9004c03a 	cmpne	r2,r18,zero
 401e97c:	0529c83a 	sub	r20,zero,r20
 401e980:	dd401d85 	stb	r21,118(sp)
 401e984:	a0a9c83a 	sub	r20,r20,r2
 401e988:	28026c16 	blt	r5,zero,401f33c <___svfiprintf_internal_r+0x128c>
 401e98c:	00bfdfc4 	movi	r2,-129
 401e990:	80a0703a 	and	r16,r16,r2
 401e994:	a03fb31e 	bne	r20,zero,401e864 <__alt_mem_onchip_memory2_0+0xfc0196a4>
 401e998:	00004606 	br	401eab4 <___svfiprintf_internal_r+0xa04>
 401e99c:	9839883a 	mov	fp,r19
 401e9a0:	d8002515 	stw	zero,148(sp)
 401e9a4:	1c3ff404 	addi	r16,r3,-48
 401e9a8:	0009883a 	mov	r4,zero
 401e9ac:	01400284 	movi	r5,10
 401e9b0:	40118340 	call	4011834 <__mulsi3>
 401e9b4:	e0c00007 	ldb	r3,0(fp)
 401e9b8:	8089883a 	add	r4,r16,r2
 401e9bc:	9cc00044 	addi	r19,r19,1
 401e9c0:	1c3ff404 	addi	r16,r3,-48
 401e9c4:	9839883a 	mov	fp,r19
 401e9c8:	a43ff82e 	bgeu	r20,r16,401e9ac <__alt_mem_onchip_memory2_0+0xfc0197ec>
 401e9cc:	d9002515 	stw	r4,148(sp)
 401e9d0:	18bff804 	addi	r2,r3,-32
 401e9d4:	90be052e 	bgeu	r18,r2,401e1ec <__alt_mem_onchip_memory2_0+0xfc01902c>
 401e9d8:	8821883a 	mov	r16,r17
 401e9dc:	dc402103 	ldbu	r17,132(sp)
 401e9e0:	b811883a 	mov	r8,r23
 401e9e4:	8c403fcc 	andi	r17,r17,255
 401e9e8:	88028d1e 	bne	r17,zero,401f420 <___svfiprintf_internal_r+0x1370>
 401e9ec:	1800ea26 	beq	r3,zero,401ed98 <___svfiprintf_internal_r+0xce8>
 401e9f0:	04800044 	movi	r18,1
 401e9f4:	d8c01005 	stb	r3,64(sp)
 401e9f8:	d8001d85 	stb	zero,118(sp)
 401e9fc:	9029883a 	mov	r20,r18
 401ea00:	dc401004 	addi	r17,sp,64
 401ea04:	003f1306 	br	401e654 <__alt_mem_onchip_memory2_0+0xfc019494>
 401ea08:	8c402014 	ori	r17,r17,128
 401ea0c:	98c00007 	ldb	r3,0(r19)
 401ea10:	003df306 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401ea14:	98c00007 	ldb	r3,0(r19)
 401ea18:	01000a84 	movi	r4,42
 401ea1c:	9f000044 	addi	fp,r19,1
 401ea20:	19026326 	beq	r3,r4,401f3b0 <___svfiprintf_internal_r+0x1300>
 401ea24:	1c3ff404 	addi	r16,r3,-48
 401ea28:	0009883a 	mov	r4,zero
 401ea2c:	a4025636 	bltu	r20,r16,401f388 <___svfiprintf_internal_r+0x12d8>
 401ea30:	01400284 	movi	r5,10
 401ea34:	40118340 	call	4011834 <__mulsi3>
 401ea38:	e0c00007 	ldb	r3,0(fp)
 401ea3c:	1409883a 	add	r4,r2,r16
 401ea40:	e4c00044 	addi	r19,fp,1
 401ea44:	1c3ff404 	addi	r16,r3,-48
 401ea48:	9839883a 	mov	fp,r19
 401ea4c:	a43ff82e 	bgeu	r20,r16,401ea30 <__alt_mem_onchip_memory2_0+0xfc019870>
 401ea50:	20020c16 	blt	r4,zero,401f284 <___svfiprintf_internal_r+0x11d4>
 401ea54:	d9002015 	stw	r4,128(sp)
 401ea58:	003de206 	br	401e1e4 <__alt_mem_onchip_memory2_0+0xfc019024>
 401ea5c:	8821883a 	mov	r16,r17
 401ea60:	dc402103 	ldbu	r17,132(sp)
 401ea64:	b811883a 	mov	r8,r23
 401ea68:	8c403fcc 	andi	r17,r17,255
 401ea6c:	8802721e 	bne	r17,zero,401f438 <___svfiprintf_internal_r+0x1388>
 401ea70:	84000414 	ori	r16,r16,16
 401ea74:	8080080c 	andi	r2,r16,32
 401ea78:	103e9f1e 	bne	r2,zero,401e4f8 <__alt_mem_onchip_memory2_0+0xfc019338>
 401ea7c:	8080040c 	andi	r2,r16,16
 401ea80:	10015326 	beq	r2,zero,401efd0 <___svfiprintf_internal_r+0xf20>
 401ea84:	d8c02417 	ldw	r3,144(sp)
 401ea88:	d9002017 	ldw	r4,128(sp)
 401ea8c:	d8001d85 	stb	zero,118(sp)
 401ea90:	18800104 	addi	r2,r3,4
 401ea94:	1c800017 	ldw	r18,0(r3)
 401ea98:	0029883a 	mov	r20,zero
 401ea9c:	20015516 	blt	r4,zero,401eff4 <___svfiprintf_internal_r+0xf44>
 401eaa0:	00ffdfc4 	movi	r3,-129
 401eaa4:	d8802415 	stw	r2,144(sp)
 401eaa8:	80e0703a 	and	r16,r16,r3
 401eaac:	002b883a 	mov	r21,zero
 401eab0:	903e9e26 	beq	r18,zero,401e52c <__alt_mem_onchip_memory2_0+0xfc01936c>
 401eab4:	00800244 	movi	r2,9
 401eab8:	14bf6a36 	bltu	r2,r18,401e864 <__alt_mem_onchip_memory2_0+0xfc0196a4>
 401eabc:	94800c04 	addi	r18,r18,48
 401eac0:	dc8019c5 	stb	r18,103(sp)
 401eac4:	dd002c17 	ldw	r20,176(sp)
 401eac8:	dc4019c4 	addi	r17,sp,103
 401eacc:	003e9c06 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401ead0:	8821883a 	mov	r16,r17
 401ead4:	dc402103 	ldbu	r17,132(sp)
 401ead8:	b811883a 	mov	r8,r23
 401eadc:	8c403fcc 	andi	r17,r17,255
 401eae0:	8802571e 	bne	r17,zero,401f440 <___svfiprintf_internal_r+0x1390>
 401eae4:	84000414 	ori	r16,r16,16
 401eae8:	8080080c 	andi	r2,r16,32
 401eaec:	103ea91e 	bne	r2,zero,401e594 <__alt_mem_onchip_memory2_0+0xfc0193d4>
 401eaf0:	8080040c 	andi	r2,r16,16
 401eaf4:	10018026 	beq	r2,zero,401f0f8 <___svfiprintf_internal_r+0x1048>
 401eaf8:	d9402417 	ldw	r5,144(sp)
 401eafc:	d8c02017 	ldw	r3,128(sp)
 401eb00:	d8001d85 	stb	zero,118(sp)
 401eb04:	28800104 	addi	r2,r5,4
 401eb08:	2c800017 	ldw	r18,0(r5)
 401eb0c:	0029883a 	mov	r20,zero
 401eb10:	18018216 	blt	r3,zero,401f11c <___svfiprintf_internal_r+0x106c>
 401eb14:	00ffdfc4 	movi	r3,-129
 401eb18:	d8802415 	stw	r2,144(sp)
 401eb1c:	80e0703a 	and	r16,r16,r3
 401eb20:	903ea81e 	bne	r18,zero,401e5c4 <__alt_mem_onchip_memory2_0+0xfc019404>
 401eb24:	d8802017 	ldw	r2,128(sp)
 401eb28:	002b883a 	mov	r21,zero
 401eb2c:	1001f226 	beq	r2,zero,401f2f8 <___svfiprintf_internal_r+0x1248>
 401eb30:	0025883a 	mov	r18,zero
 401eb34:	0029883a 	mov	r20,zero
 401eb38:	003ea306 	br	401e5c8 <__alt_mem_onchip_memory2_0+0xfc019408>
 401eb3c:	d8c01c17 	ldw	r3,112(sp)
 401eb40:	d8801b17 	ldw	r2,108(sp)
 401eb44:	d9001d87 	ldb	r4,118(sp)
 401eb48:	20000b26 	beq	r4,zero,401eb78 <___svfiprintf_internal_r+0xac8>
 401eb4c:	d9001d84 	addi	r4,sp,118
 401eb50:	18c00044 	addi	r3,r3,1
 401eb54:	10800044 	addi	r2,r2,1
 401eb58:	41000015 	stw	r4,0(r8)
 401eb5c:	01000044 	movi	r4,1
 401eb60:	41000115 	stw	r4,4(r8)
 401eb64:	d8c01c15 	stw	r3,112(sp)
 401eb68:	d8801b15 	stw	r2,108(sp)
 401eb6c:	010001c4 	movi	r4,7
 401eb70:	2080f316 	blt	r4,r2,401ef40 <___svfiprintf_internal_r+0xe90>
 401eb74:	42000204 	addi	r8,r8,8
 401eb78:	d9402117 	ldw	r5,132(sp)
 401eb7c:	28000b26 	beq	r5,zero,401ebac <___svfiprintf_internal_r+0xafc>
 401eb80:	d9001d04 	addi	r4,sp,116
 401eb84:	18c00084 	addi	r3,r3,2
 401eb88:	10800044 	addi	r2,r2,1
 401eb8c:	41000015 	stw	r4,0(r8)
 401eb90:	01000084 	movi	r4,2
 401eb94:	41000115 	stw	r4,4(r8)
 401eb98:	d8c01c15 	stw	r3,112(sp)
 401eb9c:	d8801b15 	stw	r2,108(sp)
 401eba0:	010001c4 	movi	r4,7
 401eba4:	2080ef16 	blt	r4,r2,401ef64 <___svfiprintf_internal_r+0xeb4>
 401eba8:	42000204 	addi	r8,r8,8
 401ebac:	d9402217 	ldw	r5,136(sp)
 401ebb0:	01002004 	movi	r4,128
 401ebb4:	29008f26 	beq	r5,r4,401edf4 <___svfiprintf_internal_r+0xd44>
 401ebb8:	d9002017 	ldw	r4,128(sp)
 401ebbc:	252fc83a 	sub	r23,r4,r20
 401ebc0:	05c0310e 	bge	zero,r23,401ec88 <___svfiprintf_internal_r+0xbd8>
 401ebc4:	07000404 	movi	fp,16
 401ebc8:	e5c17d0e 	bge	fp,r23,401f1c0 <___svfiprintf_internal_r+0x1110>
 401ebcc:	010100b4 	movhi	r4,1026
 401ebd0:	2115ec04 	addi	r4,r4,22448
 401ebd4:	dc002015 	stw	r16,128(sp)
 401ebd8:	dc402215 	stw	r17,136(sp)
 401ebdc:	d9002115 	stw	r4,132(sp)
 401ebe0:	b823883a 	mov	r17,r23
 401ebe4:	054001c4 	movi	r21,7
 401ebe8:	982f883a 	mov	r23,r19
 401ebec:	dc002717 	ldw	r16,156(sp)
 401ebf0:	9027883a 	mov	r19,r18
 401ebf4:	dc802317 	ldw	r18,140(sp)
 401ebf8:	00000306 	br	401ec08 <___svfiprintf_internal_r+0xb58>
 401ebfc:	8c7ffc04 	addi	r17,r17,-16
 401ec00:	42000204 	addi	r8,r8,8
 401ec04:	e440110e 	bge	fp,r17,401ec4c <___svfiprintf_internal_r+0xb9c>
 401ec08:	18c00404 	addi	r3,r3,16
 401ec0c:	10800044 	addi	r2,r2,1
 401ec10:	45800015 	stw	r22,0(r8)
 401ec14:	47000115 	stw	fp,4(r8)
 401ec18:	d8c01c15 	stw	r3,112(sp)
 401ec1c:	d8801b15 	stw	r2,108(sp)
 401ec20:	a8bff60e 	bge	r21,r2,401ebfc <__alt_mem_onchip_memory2_0+0xfc019a3c>
 401ec24:	d9801a04 	addi	r6,sp,104
 401ec28:	900b883a 	mov	r5,r18
 401ec2c:	8009883a 	mov	r4,r16
 401ec30:	401dee00 	call	401dee0 <__ssprint_r>
 401ec34:	10005e1e 	bne	r2,zero,401edb0 <___svfiprintf_internal_r+0xd00>
 401ec38:	8c7ffc04 	addi	r17,r17,-16
 401ec3c:	d8c01c17 	ldw	r3,112(sp)
 401ec40:	d8801b17 	ldw	r2,108(sp)
 401ec44:	d811883a 	mov	r8,sp
 401ec48:	e47fef16 	blt	fp,r17,401ec08 <__alt_mem_onchip_memory2_0+0xfc019a48>
 401ec4c:	9825883a 	mov	r18,r19
 401ec50:	dc002017 	ldw	r16,128(sp)
 401ec54:	b827883a 	mov	r19,r23
 401ec58:	882f883a 	mov	r23,r17
 401ec5c:	dc402217 	ldw	r17,136(sp)
 401ec60:	d9402117 	ldw	r5,132(sp)
 401ec64:	1dc7883a 	add	r3,r3,r23
 401ec68:	10800044 	addi	r2,r2,1
 401ec6c:	41400015 	stw	r5,0(r8)
 401ec70:	45c00115 	stw	r23,4(r8)
 401ec74:	d8c01c15 	stw	r3,112(sp)
 401ec78:	d8801b15 	stw	r2,108(sp)
 401ec7c:	010001c4 	movi	r4,7
 401ec80:	2080a616 	blt	r4,r2,401ef1c <___svfiprintf_internal_r+0xe6c>
 401ec84:	42000204 	addi	r8,r8,8
 401ec88:	a0c7883a 	add	r3,r20,r3
 401ec8c:	10800044 	addi	r2,r2,1
 401ec90:	44400015 	stw	r17,0(r8)
 401ec94:	45000115 	stw	r20,4(r8)
 401ec98:	d8c01c15 	stw	r3,112(sp)
 401ec9c:	d8801b15 	stw	r2,108(sp)
 401eca0:	010001c4 	movi	r4,7
 401eca4:	20808816 	blt	r4,r2,401eec8 <___svfiprintf_internal_r+0xe18>
 401eca8:	42000204 	addi	r8,r8,8
 401ecac:	8400010c 	andi	r16,r16,4
 401ecb0:	80002c26 	beq	r16,zero,401ed64 <___svfiprintf_internal_r+0xcb4>
 401ecb4:	d8802517 	ldw	r2,148(sp)
 401ecb8:	14a1c83a 	sub	r16,r2,r18
 401ecbc:	0400290e 	bge	zero,r16,401ed64 <___svfiprintf_internal_r+0xcb4>
 401ecc0:	04400404 	movi	r17,16
 401ecc4:	d8801b17 	ldw	r2,108(sp)
 401ecc8:	8c01a70e 	bge	r17,r16,401f368 <___svfiprintf_internal_r+0x12b8>
 401eccc:	014100b4 	movhi	r5,1026
 401ecd0:	2955f004 	addi	r5,r5,22464
 401ecd4:	d9402815 	stw	r5,160(sp)
 401ecd8:	050001c4 	movi	r20,7
 401ecdc:	dd402717 	ldw	r21,156(sp)
 401ece0:	ddc02317 	ldw	r23,140(sp)
 401ece4:	00000306 	br	401ecf4 <___svfiprintf_internal_r+0xc44>
 401ece8:	843ffc04 	addi	r16,r16,-16
 401ecec:	42000204 	addi	r8,r8,8
 401ecf0:	8c00130e 	bge	r17,r16,401ed40 <___svfiprintf_internal_r+0xc90>
 401ecf4:	010100b4 	movhi	r4,1026
 401ecf8:	18c00404 	addi	r3,r3,16
 401ecfc:	10800044 	addi	r2,r2,1
 401ed00:	2115f004 	addi	r4,r4,22464
 401ed04:	41000015 	stw	r4,0(r8)
 401ed08:	44400115 	stw	r17,4(r8)
 401ed0c:	d8c01c15 	stw	r3,112(sp)
 401ed10:	d8801b15 	stw	r2,108(sp)
 401ed14:	a0bff40e 	bge	r20,r2,401ece8 <__alt_mem_onchip_memory2_0+0xfc019b28>
 401ed18:	d9801a04 	addi	r6,sp,104
 401ed1c:	b80b883a 	mov	r5,r23
 401ed20:	a809883a 	mov	r4,r21
 401ed24:	401dee00 	call	401dee0 <__ssprint_r>
 401ed28:	1000211e 	bne	r2,zero,401edb0 <___svfiprintf_internal_r+0xd00>
 401ed2c:	843ffc04 	addi	r16,r16,-16
 401ed30:	d8c01c17 	ldw	r3,112(sp)
 401ed34:	d8801b17 	ldw	r2,108(sp)
 401ed38:	d811883a 	mov	r8,sp
 401ed3c:	8c3fed16 	blt	r17,r16,401ecf4 <__alt_mem_onchip_memory2_0+0xfc019b34>
 401ed40:	d9402817 	ldw	r5,160(sp)
 401ed44:	1c07883a 	add	r3,r3,r16
 401ed48:	10800044 	addi	r2,r2,1
 401ed4c:	41400015 	stw	r5,0(r8)
 401ed50:	44000115 	stw	r16,4(r8)
 401ed54:	d8c01c15 	stw	r3,112(sp)
 401ed58:	d8801b15 	stw	r2,108(sp)
 401ed5c:	010001c4 	movi	r4,7
 401ed60:	2080b516 	blt	r4,r2,401f038 <___svfiprintf_internal_r+0xf88>
 401ed64:	d8802517 	ldw	r2,148(sp)
 401ed68:	1480010e 	bge	r2,r18,401ed70 <___svfiprintf_internal_r+0xcc0>
 401ed6c:	9005883a 	mov	r2,r18
 401ed70:	d9002617 	ldw	r4,152(sp)
 401ed74:	2089883a 	add	r4,r4,r2
 401ed78:	d9002615 	stw	r4,152(sp)
 401ed7c:	18005a1e 	bne	r3,zero,401eee8 <___svfiprintf_internal_r+0xe38>
 401ed80:	98800007 	ldb	r2,0(r19)
 401ed84:	d8001b15 	stw	zero,108(sp)
 401ed88:	d811883a 	mov	r8,sp
 401ed8c:	103cec1e 	bne	r2,zero,401e140 <__alt_mem_onchip_memory2_0+0xfc018f80>
 401ed90:	9825883a 	mov	r18,r19
 401ed94:	003d0206 	br	401e1a0 <__alt_mem_onchip_memory2_0+0xfc018fe0>
 401ed98:	d8801c17 	ldw	r2,112(sp)
 401ed9c:	10000426 	beq	r2,zero,401edb0 <___svfiprintf_internal_r+0xd00>
 401eda0:	d9402317 	ldw	r5,140(sp)
 401eda4:	d9002717 	ldw	r4,156(sp)
 401eda8:	d9801a04 	addi	r6,sp,104
 401edac:	401dee00 	call	401dee0 <__ssprint_r>
 401edb0:	d9402317 	ldw	r5,140(sp)
 401edb4:	d8802617 	ldw	r2,152(sp)
 401edb8:	28c0030b 	ldhu	r3,12(r5)
 401edbc:	18c0100c 	andi	r3,r3,64
 401edc0:	18015c1e 	bne	r3,zero,401f334 <___svfiprintf_internal_r+0x1284>
 401edc4:	dfc03717 	ldw	ra,220(sp)
 401edc8:	df003617 	ldw	fp,216(sp)
 401edcc:	ddc03517 	ldw	r23,212(sp)
 401edd0:	dd803417 	ldw	r22,208(sp)
 401edd4:	dd403317 	ldw	r21,204(sp)
 401edd8:	dd003217 	ldw	r20,200(sp)
 401eddc:	dcc03117 	ldw	r19,196(sp)
 401ede0:	dc803017 	ldw	r18,192(sp)
 401ede4:	dc402f17 	ldw	r17,188(sp)
 401ede8:	dc002e17 	ldw	r16,184(sp)
 401edec:	dec03804 	addi	sp,sp,224
 401edf0:	f800283a 	ret
 401edf4:	d9002517 	ldw	r4,148(sp)
 401edf8:	24afc83a 	sub	r23,r4,r18
 401edfc:	05ff6e0e 	bge	zero,r23,401ebb8 <__alt_mem_onchip_memory2_0+0xfc0199f8>
 401ee00:	07000404 	movi	fp,16
 401ee04:	e5c15c0e 	bge	fp,r23,401f378 <___svfiprintf_internal_r+0x12c8>
 401ee08:	010100b4 	movhi	r4,1026
 401ee0c:	2115ec04 	addi	r4,r4,22448
 401ee10:	dc002215 	stw	r16,136(sp)
 401ee14:	dc402815 	stw	r17,160(sp)
 401ee18:	d9002115 	stw	r4,132(sp)
 401ee1c:	b823883a 	mov	r17,r23
 401ee20:	054001c4 	movi	r21,7
 401ee24:	982f883a 	mov	r23,r19
 401ee28:	dc002717 	ldw	r16,156(sp)
 401ee2c:	9027883a 	mov	r19,r18
 401ee30:	dc802317 	ldw	r18,140(sp)
 401ee34:	00000306 	br	401ee44 <___svfiprintf_internal_r+0xd94>
 401ee38:	8c7ffc04 	addi	r17,r17,-16
 401ee3c:	42000204 	addi	r8,r8,8
 401ee40:	e440110e 	bge	fp,r17,401ee88 <___svfiprintf_internal_r+0xdd8>
 401ee44:	18c00404 	addi	r3,r3,16
 401ee48:	10800044 	addi	r2,r2,1
 401ee4c:	45800015 	stw	r22,0(r8)
 401ee50:	47000115 	stw	fp,4(r8)
 401ee54:	d8c01c15 	stw	r3,112(sp)
 401ee58:	d8801b15 	stw	r2,108(sp)
 401ee5c:	a8bff60e 	bge	r21,r2,401ee38 <__alt_mem_onchip_memory2_0+0xfc019c78>
 401ee60:	d9801a04 	addi	r6,sp,104
 401ee64:	900b883a 	mov	r5,r18
 401ee68:	8009883a 	mov	r4,r16
 401ee6c:	401dee00 	call	401dee0 <__ssprint_r>
 401ee70:	103fcf1e 	bne	r2,zero,401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401ee74:	8c7ffc04 	addi	r17,r17,-16
 401ee78:	d8c01c17 	ldw	r3,112(sp)
 401ee7c:	d8801b17 	ldw	r2,108(sp)
 401ee80:	d811883a 	mov	r8,sp
 401ee84:	e47fef16 	blt	fp,r17,401ee44 <__alt_mem_onchip_memory2_0+0xfc019c84>
 401ee88:	9825883a 	mov	r18,r19
 401ee8c:	dc002217 	ldw	r16,136(sp)
 401ee90:	b827883a 	mov	r19,r23
 401ee94:	882f883a 	mov	r23,r17
 401ee98:	dc402817 	ldw	r17,160(sp)
 401ee9c:	d9402117 	ldw	r5,132(sp)
 401eea0:	1dc7883a 	add	r3,r3,r23
 401eea4:	10800044 	addi	r2,r2,1
 401eea8:	41400015 	stw	r5,0(r8)
 401eeac:	45c00115 	stw	r23,4(r8)
 401eeb0:	d8c01c15 	stw	r3,112(sp)
 401eeb4:	d8801b15 	stw	r2,108(sp)
 401eeb8:	010001c4 	movi	r4,7
 401eebc:	2080b716 	blt	r4,r2,401f19c <___svfiprintf_internal_r+0x10ec>
 401eec0:	42000204 	addi	r8,r8,8
 401eec4:	003f3c06 	br	401ebb8 <__alt_mem_onchip_memory2_0+0xfc0199f8>
 401eec8:	d9402317 	ldw	r5,140(sp)
 401eecc:	d9002717 	ldw	r4,156(sp)
 401eed0:	d9801a04 	addi	r6,sp,104
 401eed4:	401dee00 	call	401dee0 <__ssprint_r>
 401eed8:	103fb51e 	bne	r2,zero,401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401eedc:	d8c01c17 	ldw	r3,112(sp)
 401eee0:	d811883a 	mov	r8,sp
 401eee4:	003f7106 	br	401ecac <__alt_mem_onchip_memory2_0+0xfc019aec>
 401eee8:	d9402317 	ldw	r5,140(sp)
 401eeec:	d9002717 	ldw	r4,156(sp)
 401eef0:	d9801a04 	addi	r6,sp,104
 401eef4:	401dee00 	call	401dee0 <__ssprint_r>
 401eef8:	103fa126 	beq	r2,zero,401ed80 <__alt_mem_onchip_memory2_0+0xfc019bc0>
 401eefc:	003fac06 	br	401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401ef00:	d9402317 	ldw	r5,140(sp)
 401ef04:	d9002717 	ldw	r4,156(sp)
 401ef08:	d9801a04 	addi	r6,sp,104
 401ef0c:	401dee00 	call	401dee0 <__ssprint_r>
 401ef10:	103fa71e 	bne	r2,zero,401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401ef14:	d811883a 	mov	r8,sp
 401ef18:	003c9e06 	br	401e194 <__alt_mem_onchip_memory2_0+0xfc018fd4>
 401ef1c:	d9402317 	ldw	r5,140(sp)
 401ef20:	d9002717 	ldw	r4,156(sp)
 401ef24:	d9801a04 	addi	r6,sp,104
 401ef28:	401dee00 	call	401dee0 <__ssprint_r>
 401ef2c:	103fa01e 	bne	r2,zero,401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401ef30:	d8c01c17 	ldw	r3,112(sp)
 401ef34:	d8801b17 	ldw	r2,108(sp)
 401ef38:	d811883a 	mov	r8,sp
 401ef3c:	003f5206 	br	401ec88 <__alt_mem_onchip_memory2_0+0xfc019ac8>
 401ef40:	d9402317 	ldw	r5,140(sp)
 401ef44:	d9002717 	ldw	r4,156(sp)
 401ef48:	d9801a04 	addi	r6,sp,104
 401ef4c:	401dee00 	call	401dee0 <__ssprint_r>
 401ef50:	103f971e 	bne	r2,zero,401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401ef54:	d8c01c17 	ldw	r3,112(sp)
 401ef58:	d8801b17 	ldw	r2,108(sp)
 401ef5c:	d811883a 	mov	r8,sp
 401ef60:	003f0506 	br	401eb78 <__alt_mem_onchip_memory2_0+0xfc0199b8>
 401ef64:	d9402317 	ldw	r5,140(sp)
 401ef68:	d9002717 	ldw	r4,156(sp)
 401ef6c:	d9801a04 	addi	r6,sp,104
 401ef70:	401dee00 	call	401dee0 <__ssprint_r>
 401ef74:	103f8e1e 	bne	r2,zero,401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401ef78:	d8c01c17 	ldw	r3,112(sp)
 401ef7c:	d8801b17 	ldw	r2,108(sp)
 401ef80:	d811883a 	mov	r8,sp
 401ef84:	003f0906 	br	401ebac <__alt_mem_onchip_memory2_0+0xfc0199ec>
 401ef88:	d9402017 	ldw	r5,128(sp)
 401ef8c:	d8001d85 	stb	zero,118(sp)
 401ef90:	28007716 	blt	r5,zero,401f170 <___svfiprintf_internal_r+0x10c0>
 401ef94:	00ffdfc4 	movi	r3,-129
 401ef98:	9504b03a 	or	r2,r18,r20
 401ef9c:	80e0703a 	and	r16,r16,r3
 401efa0:	103d3926 	beq	r2,zero,401e488 <__alt_mem_onchip_memory2_0+0xfc0192c8>
 401efa4:	002b883a 	mov	r21,zero
 401efa8:	003d3c06 	br	401e49c <__alt_mem_onchip_memory2_0+0xfc0192dc>
 401efac:	d9402317 	ldw	r5,140(sp)
 401efb0:	d9002717 	ldw	r4,156(sp)
 401efb4:	d9801a04 	addi	r6,sp,104
 401efb8:	401dee00 	call	401dee0 <__ssprint_r>
 401efbc:	103f7c1e 	bne	r2,zero,401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401efc0:	d8c01c17 	ldw	r3,112(sp)
 401efc4:	d8801b17 	ldw	r2,108(sp)
 401efc8:	d811883a 	mov	r8,sp
 401efcc:	003edd06 	br	401eb44 <__alt_mem_onchip_memory2_0+0xfc019984>
 401efd0:	8080100c 	andi	r2,r16,64
 401efd4:	d8001d85 	stb	zero,118(sp)
 401efd8:	10008426 	beq	r2,zero,401f1ec <___svfiprintf_internal_r+0x113c>
 401efdc:	d9402417 	ldw	r5,144(sp)
 401efe0:	d8c02017 	ldw	r3,128(sp)
 401efe4:	0029883a 	mov	r20,zero
 401efe8:	28800104 	addi	r2,r5,4
 401efec:	2c80000b 	ldhu	r18,0(r5)
 401eff0:	183eab0e 	bge	r3,zero,401eaa0 <__alt_mem_onchip_memory2_0+0xfc0198e0>
 401eff4:	d8802415 	stw	r2,144(sp)
 401eff8:	002b883a 	mov	r21,zero
 401effc:	9504b03a 	or	r2,r18,r20
 401f000:	103e171e 	bne	r2,zero,401e860 <__alt_mem_onchip_memory2_0+0xfc0196a0>
 401f004:	00800044 	movi	r2,1
 401f008:	10803fcc 	andi	r2,r2,255
 401f00c:	00c00044 	movi	r3,1
 401f010:	10c05c26 	beq	r2,r3,401f184 <___svfiprintf_internal_r+0x10d4>
 401f014:	00c00084 	movi	r3,2
 401f018:	10fd1e26 	beq	r2,r3,401e494 <__alt_mem_onchip_memory2_0+0xfc0192d4>
 401f01c:	003ec406 	br	401eb30 <__alt_mem_onchip_memory2_0+0xfc019970>
 401f020:	d9401e17 	ldw	r5,120(sp)
 401f024:	2c69c83a 	sub	r20,r5,r17
 401f028:	003d4506 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401f02c:	d8802415 	stw	r2,144(sp)
 401f030:	98c00007 	ldb	r3,0(r19)
 401f034:	003c6a06 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401f038:	d9402317 	ldw	r5,140(sp)
 401f03c:	d9002717 	ldw	r4,156(sp)
 401f040:	d9801a04 	addi	r6,sp,104
 401f044:	401dee00 	call	401dee0 <__ssprint_r>
 401f048:	103f591e 	bne	r2,zero,401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401f04c:	d8c01c17 	ldw	r3,112(sp)
 401f050:	003f4406 	br	401ed64 <__alt_mem_onchip_memory2_0+0xfc019ba4>
 401f054:	014100b4 	movhi	r5,1026
 401f058:	29558504 	addi	r5,r5,22036
 401f05c:	d9402915 	stw	r5,164(sp)
 401f060:	003d0906 	br	401e488 <__alt_mem_onchip_memory2_0+0xfc0192c8>
 401f064:	d8c02417 	ldw	r3,144(sp)
 401f068:	d9002617 	ldw	r4,152(sp)
 401f06c:	d9402417 	ldw	r5,144(sp)
 401f070:	18800017 	ldw	r2,0(r3)
 401f074:	2007d7fa 	srai	r3,r4,31
 401f078:	29400104 	addi	r5,r5,4
 401f07c:	d9402415 	stw	r5,144(sp)
 401f080:	11000015 	stw	r4,0(r2)
 401f084:	10c00115 	stw	r3,4(r2)
 401f088:	003c2b06 	br	401e138 <__alt_mem_onchip_memory2_0+0xfc018f78>
 401f08c:	d8c01d45 	stb	r3,117(sp)
 401f090:	d8c02017 	ldw	r3,128(sp)
 401f094:	00800c04 	movi	r2,48
 401f098:	d8801d05 	stb	r2,116(sp)
 401f09c:	d8001d85 	stb	zero,118(sp)
 401f0a0:	80800094 	ori	r2,r16,2
 401f0a4:	1800ac16 	blt	r3,zero,401f358 <___svfiprintf_internal_r+0x12a8>
 401f0a8:	00bfdfc4 	movi	r2,-129
 401f0ac:	80a0703a 	and	r16,r16,r2
 401f0b0:	84000094 	ori	r16,r16,2
 401f0b4:	002b883a 	mov	r21,zero
 401f0b8:	003cf806 	br	401e49c <__alt_mem_onchip_memory2_0+0xfc0192dc>
 401f0bc:	98c00007 	ldb	r3,0(r19)
 401f0c0:	003c4706 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401f0c4:	d9402417 	ldw	r5,144(sp)
 401f0c8:	2c800017 	ldw	r18,0(r5)
 401f0cc:	29400104 	addi	r5,r5,4
 401f0d0:	d9402415 	stw	r5,144(sp)
 401f0d4:	9029d7fa 	srai	r20,r18,31
 401f0d8:	a005883a 	mov	r2,r20
 401f0dc:	003dd806 	br	401e840 <__alt_mem_onchip_memory2_0+0xfc019680>
 401f0e0:	d9402417 	ldw	r5,144(sp)
 401f0e4:	0029883a 	mov	r20,zero
 401f0e8:	2c800017 	ldw	r18,0(r5)
 401f0ec:	29400104 	addi	r5,r5,4
 401f0f0:	d9402415 	stw	r5,144(sp)
 401f0f4:	003cdb06 	br	401e464 <__alt_mem_onchip_memory2_0+0xfc0192a4>
 401f0f8:	8080100c 	andi	r2,r16,64
 401f0fc:	d8001d85 	stb	zero,118(sp)
 401f100:	10003326 	beq	r2,zero,401f1d0 <___svfiprintf_internal_r+0x1120>
 401f104:	d9002417 	ldw	r4,144(sp)
 401f108:	d9402017 	ldw	r5,128(sp)
 401f10c:	0029883a 	mov	r20,zero
 401f110:	20800104 	addi	r2,r4,4
 401f114:	2480000b 	ldhu	r18,0(r4)
 401f118:	283e7e0e 	bge	r5,zero,401eb14 <__alt_mem_onchip_memory2_0+0xfc019954>
 401f11c:	9506b03a 	or	r3,r18,r20
 401f120:	d8802415 	stw	r2,144(sp)
 401f124:	183d271e 	bne	r3,zero,401e5c4 <__alt_mem_onchip_memory2_0+0xfc019404>
 401f128:	002b883a 	mov	r21,zero
 401f12c:	0005883a 	mov	r2,zero
 401f130:	003fb506 	br	401f008 <__alt_mem_onchip_memory2_0+0xfc019e48>
 401f134:	98c00043 	ldbu	r3,1(r19)
 401f138:	8c400814 	ori	r17,r17,32
 401f13c:	9cc00044 	addi	r19,r19,1
 401f140:	18c03fcc 	andi	r3,r3,255
 401f144:	18c0201c 	xori	r3,r3,128
 401f148:	18ffe004 	addi	r3,r3,-128
 401f14c:	003c2406 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401f150:	d8c02415 	stw	r3,144(sp)
 401f154:	002b883a 	mov	r21,zero
 401f158:	003fa806 	br	401effc <__alt_mem_onchip_memory2_0+0xfc019e3c>
 401f15c:	010100b4 	movhi	r4,1026
 401f160:	21158504 	addi	r4,r4,22036
 401f164:	d9002915 	stw	r4,164(sp)
 401f168:	d8c02415 	stw	r3,144(sp)
 401f16c:	1021883a 	mov	r16,r2
 401f170:	9504b03a 	or	r2,r18,r20
 401f174:	103f8b1e 	bne	r2,zero,401efa4 <__alt_mem_onchip_memory2_0+0xfc019de4>
 401f178:	002b883a 	mov	r21,zero
 401f17c:	00800084 	movi	r2,2
 401f180:	003fa106 	br	401f008 <__alt_mem_onchip_memory2_0+0xfc019e48>
 401f184:	0025883a 	mov	r18,zero
 401f188:	94800c04 	addi	r18,r18,48
 401f18c:	dc8019c5 	stb	r18,103(sp)
 401f190:	dd002c17 	ldw	r20,176(sp)
 401f194:	dc4019c4 	addi	r17,sp,103
 401f198:	003ce906 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401f19c:	d9402317 	ldw	r5,140(sp)
 401f1a0:	d9002717 	ldw	r4,156(sp)
 401f1a4:	d9801a04 	addi	r6,sp,104
 401f1a8:	401dee00 	call	401dee0 <__ssprint_r>
 401f1ac:	103f001e 	bne	r2,zero,401edb0 <__alt_mem_onchip_memory2_0+0xfc019bf0>
 401f1b0:	d8c01c17 	ldw	r3,112(sp)
 401f1b4:	d8801b17 	ldw	r2,108(sp)
 401f1b8:	d811883a 	mov	r8,sp
 401f1bc:	003e7e06 	br	401ebb8 <__alt_mem_onchip_memory2_0+0xfc0199f8>
 401f1c0:	014100b4 	movhi	r5,1026
 401f1c4:	2955ec04 	addi	r5,r5,22448
 401f1c8:	d9402115 	stw	r5,132(sp)
 401f1cc:	003ea406 	br	401ec60 <__alt_mem_onchip_memory2_0+0xfc019aa0>
 401f1d0:	d8c02417 	ldw	r3,144(sp)
 401f1d4:	d9002017 	ldw	r4,128(sp)
 401f1d8:	0029883a 	mov	r20,zero
 401f1dc:	18800104 	addi	r2,r3,4
 401f1e0:	1c800017 	ldw	r18,0(r3)
 401f1e4:	203e4b0e 	bge	r4,zero,401eb14 <__alt_mem_onchip_memory2_0+0xfc019954>
 401f1e8:	003fcc06 	br	401f11c <__alt_mem_onchip_memory2_0+0xfc019f5c>
 401f1ec:	d9002417 	ldw	r4,144(sp)
 401f1f0:	d9402017 	ldw	r5,128(sp)
 401f1f4:	0029883a 	mov	r20,zero
 401f1f8:	20800104 	addi	r2,r4,4
 401f1fc:	24800017 	ldw	r18,0(r4)
 401f200:	283e270e 	bge	r5,zero,401eaa0 <__alt_mem_onchip_memory2_0+0xfc0198e0>
 401f204:	003f7b06 	br	401eff4 <__alt_mem_onchip_memory2_0+0xfc019e34>
 401f208:	8400100c 	andi	r16,r16,64
 401f20c:	80003326 	beq	r16,zero,401f2dc <___svfiprintf_internal_r+0x122c>
 401f210:	d9402417 	ldw	r5,144(sp)
 401f214:	d8c02617 	ldw	r3,152(sp)
 401f218:	28800017 	ldw	r2,0(r5)
 401f21c:	29400104 	addi	r5,r5,4
 401f220:	d9402415 	stw	r5,144(sp)
 401f224:	10c0000d 	sth	r3,0(r2)
 401f228:	003bc306 	br	401e138 <__alt_mem_onchip_memory2_0+0xfc018f78>
 401f22c:	d9002417 	ldw	r4,144(sp)
 401f230:	0029883a 	mov	r20,zero
 401f234:	24800017 	ldw	r18,0(r4)
 401f238:	21000104 	addi	r4,r4,4
 401f23c:	d9002415 	stw	r4,144(sp)
 401f240:	003c8806 	br	401e464 <__alt_mem_onchip_memory2_0+0xfc0192a4>
 401f244:	d8c02417 	ldw	r3,144(sp)
 401f248:	1c800017 	ldw	r18,0(r3)
 401f24c:	18c00104 	addi	r3,r3,4
 401f250:	d8c02415 	stw	r3,144(sp)
 401f254:	9029d7fa 	srai	r20,r18,31
 401f258:	a005883a 	mov	r2,r20
 401f25c:	003d7806 	br	401e840 <__alt_mem_onchip_memory2_0+0xfc019680>
 401f260:	8809883a 	mov	r4,r17
 401f264:	da002d15 	stw	r8,180(sp)
 401f268:	40143080 	call	4014308 <strlen>
 401f26c:	1029883a 	mov	r20,r2
 401f270:	dd401d83 	ldbu	r21,118(sp)
 401f274:	ddc02415 	stw	r23,144(sp)
 401f278:	d8002015 	stw	zero,128(sp)
 401f27c:	da002d17 	ldw	r8,180(sp)
 401f280:	003caf06 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401f284:	013fffc4 	movi	r4,-1
 401f288:	003df206 	br	401ea54 <__alt_mem_onchip_memory2_0+0xfc019894>
 401f28c:	dd002017 	ldw	r20,128(sp)
 401f290:	00800184 	movi	r2,6
 401f294:	1500012e 	bgeu	r2,r20,401f29c <___svfiprintf_internal_r+0x11ec>
 401f298:	1029883a 	mov	r20,r2
 401f29c:	a025883a 	mov	r18,r20
 401f2a0:	a0004116 	blt	r20,zero,401f3a8 <___svfiprintf_internal_r+0x12f8>
 401f2a4:	044100b4 	movhi	r17,1026
 401f2a8:	ddc02415 	stw	r23,144(sp)
 401f2ac:	8c558a04 	addi	r17,r17,22056
 401f2b0:	003ce806 	br	401e654 <__alt_mem_onchip_memory2_0+0xfc019494>
 401f2b4:	04001004 	movi	r16,64
 401f2b8:	800b883a 	mov	r5,r16
 401f2bc:	401b8340 	call	401b834 <_malloc_r>
 401f2c0:	d8c02317 	ldw	r3,140(sp)
 401f2c4:	18800015 	stw	r2,0(r3)
 401f2c8:	18800415 	stw	r2,16(r3)
 401f2cc:	10004d26 	beq	r2,zero,401f404 <___svfiprintf_internal_r+0x1354>
 401f2d0:	d9402317 	ldw	r5,140(sp)
 401f2d4:	2c000515 	stw	r16,20(r5)
 401f2d8:	003b8906 	br	401e100 <__alt_mem_onchip_memory2_0+0xfc018f40>
 401f2dc:	d9002417 	ldw	r4,144(sp)
 401f2e0:	d9402617 	ldw	r5,152(sp)
 401f2e4:	20800017 	ldw	r2,0(r4)
 401f2e8:	21000104 	addi	r4,r4,4
 401f2ec:	d9002415 	stw	r4,144(sp)
 401f2f0:	11400015 	stw	r5,0(r2)
 401f2f4:	003b9006 	br	401e138 <__alt_mem_onchip_memory2_0+0xfc018f78>
 401f2f8:	8080004c 	andi	r2,r16,1
 401f2fc:	002b883a 	mov	r21,zero
 401f300:	10000526 	beq	r2,zero,401f318 <___svfiprintf_internal_r+0x1268>
 401f304:	00800c04 	movi	r2,48
 401f308:	d88019c5 	stb	r2,103(sp)
 401f30c:	dd002c17 	ldw	r20,176(sp)
 401f310:	dc4019c4 	addi	r17,sp,103
 401f314:	003c8a06 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401f318:	0029883a 	mov	r20,zero
 401f31c:	dc401a04 	addi	r17,sp,104
 401f320:	003c8706 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401f324:	014100b4 	movhi	r5,1026
 401f328:	2955f004 	addi	r5,r5,22464
 401f32c:	d9402815 	stw	r5,160(sp)
 401f330:	003cff06 	br	401e730 <__alt_mem_onchip_memory2_0+0xfc019570>
 401f334:	00bfffc4 	movi	r2,-1
 401f338:	003ea206 	br	401edc4 <__alt_mem_onchip_memory2_0+0xfc019c04>
 401f33c:	00800044 	movi	r2,1
 401f340:	10803fcc 	andi	r2,r2,255
 401f344:	00c00044 	movi	r3,1
 401f348:	10fd4526 	beq	r2,r3,401e860 <__alt_mem_onchip_memory2_0+0xfc0196a0>
 401f34c:	00c00084 	movi	r3,2
 401f350:	10fc5226 	beq	r2,r3,401e49c <__alt_mem_onchip_memory2_0+0xfc0192dc>
 401f354:	003c9c06 	br	401e5c8 <__alt_mem_onchip_memory2_0+0xfc019408>
 401f358:	1021883a 	mov	r16,r2
 401f35c:	002b883a 	mov	r21,zero
 401f360:	00800084 	movi	r2,2
 401f364:	003ff606 	br	401f340 <__alt_mem_onchip_memory2_0+0xfc01a180>
 401f368:	010100b4 	movhi	r4,1026
 401f36c:	2115f004 	addi	r4,r4,22464
 401f370:	d9002815 	stw	r4,160(sp)
 401f374:	003e7206 	br	401ed40 <__alt_mem_onchip_memory2_0+0xfc019b80>
 401f378:	014100b4 	movhi	r5,1026
 401f37c:	2955ec04 	addi	r5,r5,22448
 401f380:	d9402115 	stw	r5,132(sp)
 401f384:	003ec506 	br	401ee9c <__alt_mem_onchip_memory2_0+0xfc019cdc>
 401f388:	e027883a 	mov	r19,fp
 401f38c:	d8002015 	stw	zero,128(sp)
 401f390:	003b9406 	br	401e1e4 <__alt_mem_onchip_memory2_0+0xfc019024>
 401f394:	dd002017 	ldw	r20,128(sp)
 401f398:	dd401d83 	ldbu	r21,118(sp)
 401f39c:	ddc02415 	stw	r23,144(sp)
 401f3a0:	d8002015 	stw	zero,128(sp)
 401f3a4:	003c6606 	br	401e540 <__alt_mem_onchip_memory2_0+0xfc019380>
 401f3a8:	0025883a 	mov	r18,zero
 401f3ac:	003fbd06 	br	401f2a4 <__alt_mem_onchip_memory2_0+0xfc01a0e4>
 401f3b0:	d9402417 	ldw	r5,144(sp)
 401f3b4:	d8c02417 	ldw	r3,144(sp)
 401f3b8:	29400017 	ldw	r5,0(r5)
 401f3bc:	19000104 	addi	r4,r3,4
 401f3c0:	d9002415 	stw	r4,144(sp)
 401f3c4:	d9402015 	stw	r5,128(sp)
 401f3c8:	98c00043 	ldbu	r3,1(r19)
 401f3cc:	e027883a 	mov	r19,fp
 401f3d0:	283f5b0e 	bge	r5,zero,401f140 <__alt_mem_onchip_memory2_0+0xfc019f80>
 401f3d4:	18c03fcc 	andi	r3,r3,255
 401f3d8:	013fffc4 	movi	r4,-1
 401f3dc:	18c0201c 	xori	r3,r3,128
 401f3e0:	d9002015 	stw	r4,128(sp)
 401f3e4:	18ffe004 	addi	r3,r3,-128
 401f3e8:	003b7d06 	br	401e1e0 <__alt_mem_onchip_memory2_0+0xfc019020>
 401f3ec:	dd401d85 	stb	r21,118(sp)
 401f3f0:	003cf306 	br	401e7c0 <__alt_mem_onchip_memory2_0+0xfc019600>
 401f3f4:	dd401d85 	stb	r21,118(sp)
 401f3f8:	003d4e06 	br	401e934 <__alt_mem_onchip_memory2_0+0xfc019774>
 401f3fc:	dd401d85 	stb	r21,118(sp)
 401f400:	003c0e06 	br	401e43c <__alt_mem_onchip_memory2_0+0xfc01927c>
 401f404:	d9002717 	ldw	r4,156(sp)
 401f408:	00800304 	movi	r2,12
 401f40c:	20800015 	stw	r2,0(r4)
 401f410:	00bfffc4 	movi	r2,-1
 401f414:	003e6b06 	br	401edc4 <__alt_mem_onchip_memory2_0+0xfc019c04>
 401f418:	dd401d85 	stb	r21,118(sp)
 401f41c:	003d0006 	br	401e820 <__alt_mem_onchip_memory2_0+0xfc019660>
 401f420:	dd401d85 	stb	r21,118(sp)
 401f424:	003d7106 	br	401e9ec <__alt_mem_onchip_memory2_0+0xfc01982c>
 401f428:	dd401d85 	stb	r21,118(sp)
 401f42c:	003c5706 	br	401e58c <__alt_mem_onchip_memory2_0+0xfc0193cc>
 401f430:	dd401d85 	stb	r21,118(sp)
 401f434:	003c2e06 	br	401e4f0 <__alt_mem_onchip_memory2_0+0xfc019330>
 401f438:	dd401d85 	stb	r21,118(sp)
 401f43c:	003d8c06 	br	401ea70 <__alt_mem_onchip_memory2_0+0xfc0198b0>
 401f440:	dd401d85 	stb	r21,118(sp)
 401f444:	003da706 	br	401eae4 <__alt_mem_onchip_memory2_0+0xfc019924>
 401f448:	dd401d85 	stb	r21,118(sp)
 401f44c:	003cc806 	br	401e770 <__alt_mem_onchip_memory2_0+0xfc0195b0>

0401f450 <__sprint_r.part.0>:
 401f450:	28801917 	ldw	r2,100(r5)
 401f454:	defff604 	addi	sp,sp,-40
 401f458:	dd400515 	stw	r21,20(sp)
 401f45c:	dfc00915 	stw	ra,36(sp)
 401f460:	df000815 	stw	fp,32(sp)
 401f464:	ddc00715 	stw	r23,28(sp)
 401f468:	dd800615 	stw	r22,24(sp)
 401f46c:	dd000415 	stw	r20,16(sp)
 401f470:	dcc00315 	stw	r19,12(sp)
 401f474:	dc800215 	stw	r18,8(sp)
 401f478:	dc400115 	stw	r17,4(sp)
 401f47c:	dc000015 	stw	r16,0(sp)
 401f480:	1088000c 	andi	r2,r2,8192
 401f484:	302b883a 	mov	r21,r6
 401f488:	10002e26 	beq	r2,zero,401f544 <__sprint_r.part.0+0xf4>
 401f48c:	30800217 	ldw	r2,8(r6)
 401f490:	35800017 	ldw	r22,0(r6)
 401f494:	10002926 	beq	r2,zero,401f53c <__sprint_r.part.0+0xec>
 401f498:	2827883a 	mov	r19,r5
 401f49c:	2029883a 	mov	r20,r4
 401f4a0:	b5c00104 	addi	r23,r22,4
 401f4a4:	04bfffc4 	movi	r18,-1
 401f4a8:	bc400017 	ldw	r17,0(r23)
 401f4ac:	b4000017 	ldw	r16,0(r22)
 401f4b0:	0039883a 	mov	fp,zero
 401f4b4:	8822d0ba 	srli	r17,r17,2
 401f4b8:	8800031e 	bne	r17,zero,401f4c8 <__sprint_r.part.0+0x78>
 401f4bc:	00001806 	br	401f520 <__sprint_r.part.0+0xd0>
 401f4c0:	84000104 	addi	r16,r16,4
 401f4c4:	8f001526 	beq	r17,fp,401f51c <__sprint_r.part.0+0xcc>
 401f4c8:	81400017 	ldw	r5,0(r16)
 401f4cc:	980d883a 	mov	r6,r19
 401f4d0:	a009883a 	mov	r4,r20
 401f4d4:	40210980 	call	4021098 <_fputwc_r>
 401f4d8:	e7000044 	addi	fp,fp,1
 401f4dc:	14bff81e 	bne	r2,r18,401f4c0 <__alt_mem_onchip_memory2_0+0xfc01a300>
 401f4e0:	9005883a 	mov	r2,r18
 401f4e4:	a8000215 	stw	zero,8(r21)
 401f4e8:	a8000115 	stw	zero,4(r21)
 401f4ec:	dfc00917 	ldw	ra,36(sp)
 401f4f0:	df000817 	ldw	fp,32(sp)
 401f4f4:	ddc00717 	ldw	r23,28(sp)
 401f4f8:	dd800617 	ldw	r22,24(sp)
 401f4fc:	dd400517 	ldw	r21,20(sp)
 401f500:	dd000417 	ldw	r20,16(sp)
 401f504:	dcc00317 	ldw	r19,12(sp)
 401f508:	dc800217 	ldw	r18,8(sp)
 401f50c:	dc400117 	ldw	r17,4(sp)
 401f510:	dc000017 	ldw	r16,0(sp)
 401f514:	dec00a04 	addi	sp,sp,40
 401f518:	f800283a 	ret
 401f51c:	a8800217 	ldw	r2,8(r21)
 401f520:	8c63883a 	add	r17,r17,r17
 401f524:	8c63883a 	add	r17,r17,r17
 401f528:	1445c83a 	sub	r2,r2,r17
 401f52c:	a8800215 	stw	r2,8(r21)
 401f530:	b5800204 	addi	r22,r22,8
 401f534:	bdc00204 	addi	r23,r23,8
 401f538:	103fdb1e 	bne	r2,zero,401f4a8 <__alt_mem_onchip_memory2_0+0xfc01a2e8>
 401f53c:	0005883a 	mov	r2,zero
 401f540:	003fe806 	br	401f4e4 <__alt_mem_onchip_memory2_0+0xfc01a324>
 401f544:	401aef00 	call	401aef0 <__sfvwrite_r>
 401f548:	003fe606 	br	401f4e4 <__alt_mem_onchip_memory2_0+0xfc01a324>

0401f54c <__sprint_r>:
 401f54c:	30c00217 	ldw	r3,8(r6)
 401f550:	18000126 	beq	r3,zero,401f558 <__sprint_r+0xc>
 401f554:	401f4501 	jmpi	401f450 <__sprint_r.part.0>
 401f558:	30000115 	stw	zero,4(r6)
 401f55c:	0005883a 	mov	r2,zero
 401f560:	f800283a 	ret

0401f564 <___vfiprintf_internal_r>:
 401f564:	deffca04 	addi	sp,sp,-216
 401f568:	dd403115 	stw	r21,196(sp)
 401f56c:	dfc03515 	stw	ra,212(sp)
 401f570:	df003415 	stw	fp,208(sp)
 401f574:	ddc03315 	stw	r23,204(sp)
 401f578:	dd803215 	stw	r22,200(sp)
 401f57c:	dd003015 	stw	r20,192(sp)
 401f580:	dcc02f15 	stw	r19,188(sp)
 401f584:	dc802e15 	stw	r18,184(sp)
 401f588:	dc402d15 	stw	r17,180(sp)
 401f58c:	dc002c15 	stw	r16,176(sp)
 401f590:	d9002115 	stw	r4,132(sp)
 401f594:	d9402015 	stw	r5,128(sp)
 401f598:	d9c02215 	stw	r7,136(sp)
 401f59c:	302b883a 	mov	r21,r6
 401f5a0:	20000226 	beq	r4,zero,401f5ac <___vfiprintf_internal_r+0x48>
 401f5a4:	20800e17 	ldw	r2,56(r4)
 401f5a8:	1000cf26 	beq	r2,zero,401f8e8 <___vfiprintf_internal_r+0x384>
 401f5ac:	d8c02017 	ldw	r3,128(sp)
 401f5b0:	1880030b 	ldhu	r2,12(r3)
 401f5b4:	10c8000c 	andi	r3,r2,8192
 401f5b8:	1800071e 	bne	r3,zero,401f5d8 <___vfiprintf_internal_r+0x74>
 401f5bc:	d9402017 	ldw	r5,128(sp)
 401f5c0:	00f7ffc4 	movi	r3,-8193
 401f5c4:	10880014 	ori	r2,r2,8192
 401f5c8:	29001917 	ldw	r4,100(r5)
 401f5cc:	2880030d 	sth	r2,12(r5)
 401f5d0:	20c6703a 	and	r3,r4,r3
 401f5d4:	28c01915 	stw	r3,100(r5)
 401f5d8:	10c0020c 	andi	r3,r2,8
 401f5dc:	1800a526 	beq	r3,zero,401f874 <___vfiprintf_internal_r+0x310>
 401f5e0:	d9002017 	ldw	r4,128(sp)
 401f5e4:	20c00417 	ldw	r3,16(r4)
 401f5e8:	1800a226 	beq	r3,zero,401f874 <___vfiprintf_internal_r+0x310>
 401f5ec:	1080068c 	andi	r2,r2,26
 401f5f0:	00c00284 	movi	r3,10
 401f5f4:	10c0a826 	beq	r2,r3,401f898 <___vfiprintf_internal_r+0x334>
 401f5f8:	d9001a04 	addi	r4,sp,104
 401f5fc:	d94019c4 	addi	r5,sp,103
 401f600:	048100b4 	movhi	r18,1026
 401f604:	2145c83a 	sub	r2,r4,r5
 401f608:	9495f404 	addi	r18,r18,22480
 401f60c:	d9001e15 	stw	r4,120(sp)
 401f610:	d9401f15 	stw	r5,124(sp)
 401f614:	dec01a15 	stw	sp,104(sp)
 401f618:	d8001c15 	stw	zero,112(sp)
 401f61c:	d8001b15 	stw	zero,108(sp)
 401f620:	d811883a 	mov	r8,sp
 401f624:	d8002615 	stw	zero,152(sp)
 401f628:	d8002415 	stw	zero,144(sp)
 401f62c:	d8802815 	stw	r2,160(sp)
 401f630:	a82d883a 	mov	r22,r21
 401f634:	b0800007 	ldb	r2,0(r22)
 401f638:	10040d26 	beq	r2,zero,4020670 <___vfiprintf_internal_r+0x110c>
 401f63c:	00c00944 	movi	r3,37
 401f640:	b029883a 	mov	r20,r22
 401f644:	10c0021e 	bne	r2,r3,401f650 <___vfiprintf_internal_r+0xec>
 401f648:	00001606 	br	401f6a4 <___vfiprintf_internal_r+0x140>
 401f64c:	10c00326 	beq	r2,r3,401f65c <___vfiprintf_internal_r+0xf8>
 401f650:	a5000044 	addi	r20,r20,1
 401f654:	a0800007 	ldb	r2,0(r20)
 401f658:	103ffc1e 	bne	r2,zero,401f64c <__alt_mem_onchip_memory2_0+0xfc01a48c>
 401f65c:	a5a1c83a 	sub	r16,r20,r22
 401f660:	80001026 	beq	r16,zero,401f6a4 <___vfiprintf_internal_r+0x140>
 401f664:	d8c01c17 	ldw	r3,112(sp)
 401f668:	d8801b17 	ldw	r2,108(sp)
 401f66c:	45800015 	stw	r22,0(r8)
 401f670:	80c7883a 	add	r3,r16,r3
 401f674:	10800044 	addi	r2,r2,1
 401f678:	44000115 	stw	r16,4(r8)
 401f67c:	d8c01c15 	stw	r3,112(sp)
 401f680:	d8801b15 	stw	r2,108(sp)
 401f684:	010001c4 	movi	r4,7
 401f688:	2080750e 	bge	r4,r2,401f860 <___vfiprintf_internal_r+0x2fc>
 401f68c:	1803951e 	bne	r3,zero,40204e4 <___vfiprintf_internal_r+0xf80>
 401f690:	d8c02417 	ldw	r3,144(sp)
 401f694:	d8001b15 	stw	zero,108(sp)
 401f698:	d811883a 	mov	r8,sp
 401f69c:	1c07883a 	add	r3,r3,r16
 401f6a0:	d8c02415 	stw	r3,144(sp)
 401f6a4:	a0800007 	ldb	r2,0(r20)
 401f6a8:	1002e026 	beq	r2,zero,402022c <___vfiprintf_internal_r+0xcc8>
 401f6ac:	a5800044 	addi	r22,r20,1
 401f6b0:	a0c00047 	ldb	r3,1(r20)
 401f6b4:	d8001d85 	stb	zero,118(sp)
 401f6b8:	0027883a 	mov	r19,zero
 401f6bc:	d8002305 	stb	zero,140(sp)
 401f6c0:	043fffc4 	movi	r16,-1
 401f6c4:	d8002515 	stw	zero,148(sp)
 401f6c8:	0023883a 	mov	r17,zero
 401f6cc:	05001604 	movi	r20,88
 401f6d0:	05400244 	movi	r21,9
 401f6d4:	402f883a 	mov	r23,r8
 401f6d8:	b5800044 	addi	r22,r22,1
 401f6dc:	18bff804 	addi	r2,r3,-32
 401f6e0:	a0827736 	bltu	r20,r2,40200c0 <___vfiprintf_internal_r+0xb5c>
 401f6e4:	100490ba 	slli	r2,r2,2
 401f6e8:	010100b4 	movhi	r4,1026
 401f6ec:	213dbf04 	addi	r4,r4,-2308
 401f6f0:	1105883a 	add	r2,r2,r4
 401f6f4:	10800017 	ldw	r2,0(r2)
 401f6f8:	1000683a 	jmp	r2
 401f6fc:	0401fdc0 	call	401fdc <__alt_mem_sdram-0x3bfe024>
 401f700:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f704:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f708:	0401fddc 	xori	r16,zero,2039
 401f70c:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f710:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f714:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f718:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f71c:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f720:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f724:	0401ffe4 	muli	r16,zero,2047
 401f728:	04020008 	cmpgei	r16,zero,2048
 401f72c:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f730:	0401f900 	call	401f90 <__alt_mem_sdram-0x3bfe070>
 401f734:	0402001c 	xori	r16,zero,2048
 401f738:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f73c:	0401fde8 	cmpgeui	r16,zero,2039
 401f740:	0401fdf4 	movhi	r16,2039
 401f744:	0401fdf4 	movhi	r16,2039
 401f748:	0401fdf4 	movhi	r16,2039
 401f74c:	0401fdf4 	movhi	r16,2039
 401f750:	0401fdf4 	movhi	r16,2039
 401f754:	0401fdf4 	movhi	r16,2039
 401f758:	0401fdf4 	movhi	r16,2039
 401f75c:	0401fdf4 	movhi	r16,2039
 401f760:	0401fdf4 	movhi	r16,2039
 401f764:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f768:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f76c:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f770:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f774:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f778:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f77c:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f780:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f784:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f788:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f78c:	0401fe34 	movhi	r16,2040
 401f790:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f794:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f798:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f79c:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7a0:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7a4:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7a8:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7ac:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7b0:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7b4:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7b8:	0401fe70 	cmpltui	r16,zero,2041
 401f7bc:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7c0:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7c4:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7c8:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7cc:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7d0:	0401fecc 	andi	r16,zero,2043
 401f7d4:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7d8:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7dc:	0401ff40 	call	401ff4 <__alt_mem_sdram-0x3bfe00c>
 401f7e0:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7e4:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7e8:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7ec:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7f0:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7f4:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7f8:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f7fc:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f800:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f804:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f808:	0401fce8 	cmpgeui	r16,zero,2035
 401f80c:	0401fd18 	cmpnei	r16,zero,2036
 401f810:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f814:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f818:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f81c:	04020068 	cmpgeui	r16,zero,2049
 401f820:	0401fd18 	cmpnei	r16,zero,2036
 401f824:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f828:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f82c:	0401fbc0 	call	401fbc <__alt_mem_sdram-0x3bfe044>
 401f830:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f834:	0401fbd4 	movui	r16,2031
 401f838:	0401fc0c 	andi	r16,zero,2032
 401f83c:	0401f90c 	andi	r16,zero,2020
 401f840:	0401fbb4 	movhi	r16,2030
 401f844:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f848:	0401ff80 	call	401ff8 <__alt_mem_sdram-0x3bfe008>
 401f84c:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f850:	0401ffcc 	andi	r16,zero,2047
 401f854:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f858:	040200c0 	call	40200c <__alt_mem_sdram-0x3bfdff4>
 401f85c:	0401fc90 	cmplti	r16,zero,2034
 401f860:	42000204 	addi	r8,r8,8
 401f864:	d8c02417 	ldw	r3,144(sp)
 401f868:	1c07883a 	add	r3,r3,r16
 401f86c:	d8c02415 	stw	r3,144(sp)
 401f870:	003f8c06 	br	401f6a4 <__alt_mem_onchip_memory2_0+0xfc01a4e4>
 401f874:	d9402017 	ldw	r5,128(sp)
 401f878:	d9002117 	ldw	r4,132(sp)
 401f87c:	4018a600 	call	4018a60 <__swsetup_r>
 401f880:	1003c11e 	bne	r2,zero,4020788 <___vfiprintf_internal_r+0x1224>
 401f884:	d9402017 	ldw	r5,128(sp)
 401f888:	00c00284 	movi	r3,10
 401f88c:	2880030b 	ldhu	r2,12(r5)
 401f890:	1080068c 	andi	r2,r2,26
 401f894:	10ff581e 	bne	r2,r3,401f5f8 <__alt_mem_onchip_memory2_0+0xfc01a438>
 401f898:	d8c02017 	ldw	r3,128(sp)
 401f89c:	1880038f 	ldh	r2,14(r3)
 401f8a0:	103f5516 	blt	r2,zero,401f5f8 <__alt_mem_onchip_memory2_0+0xfc01a438>
 401f8a4:	d9c02217 	ldw	r7,136(sp)
 401f8a8:	d9002117 	ldw	r4,132(sp)
 401f8ac:	a80d883a 	mov	r6,r21
 401f8b0:	180b883a 	mov	r5,r3
 401f8b4:	4020a8c0 	call	4020a8c <__sbprintf>
 401f8b8:	dfc03517 	ldw	ra,212(sp)
 401f8bc:	df003417 	ldw	fp,208(sp)
 401f8c0:	ddc03317 	ldw	r23,204(sp)
 401f8c4:	dd803217 	ldw	r22,200(sp)
 401f8c8:	dd403117 	ldw	r21,196(sp)
 401f8cc:	dd003017 	ldw	r20,192(sp)
 401f8d0:	dcc02f17 	ldw	r19,188(sp)
 401f8d4:	dc802e17 	ldw	r18,184(sp)
 401f8d8:	dc402d17 	ldw	r17,180(sp)
 401f8dc:	dc002c17 	ldw	r16,176(sp)
 401f8e0:	dec03604 	addi	sp,sp,216
 401f8e4:	f800283a 	ret
 401f8e8:	401aa6c0 	call	401aa6c <__sinit>
 401f8ec:	003f2f06 	br	401f5ac <__alt_mem_onchip_memory2_0+0xfc01a3ec>
 401f8f0:	d8c02517 	ldw	r3,148(sp)
 401f8f4:	d8802215 	stw	r2,136(sp)
 401f8f8:	00c7c83a 	sub	r3,zero,r3
 401f8fc:	d8c02515 	stw	r3,148(sp)
 401f900:	8c400114 	ori	r17,r17,4
 401f904:	b0c00007 	ldb	r3,0(r22)
 401f908:	003f7306 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 401f90c:	00800c04 	movi	r2,48
 401f910:	d9402217 	ldw	r5,136(sp)
 401f914:	d8801d05 	stb	r2,116(sp)
 401f918:	00801e04 	movi	r2,120
 401f91c:	d8801d45 	stb	r2,117(sp)
 401f920:	d8001d85 	stb	zero,118(sp)
 401f924:	b811883a 	mov	r8,r23
 401f928:	28c00104 	addi	r3,r5,4
 401f92c:	2cc00017 	ldw	r19,0(r5)
 401f930:	0029883a 	mov	r20,zero
 401f934:	88800094 	ori	r2,r17,2
 401f938:	80032516 	blt	r16,zero,40205d0 <___vfiprintf_internal_r+0x106c>
 401f93c:	00bfdfc4 	movi	r2,-129
 401f940:	88a2703a 	and	r17,r17,r2
 401f944:	d8c02215 	stw	r3,136(sp)
 401f948:	8c400094 	ori	r17,r17,2
 401f94c:	98032a1e 	bne	r19,zero,40205f8 <___vfiprintf_internal_r+0x1094>
 401f950:	008100b4 	movhi	r2,1026
 401f954:	10958504 	addi	r2,r2,22036
 401f958:	d8802615 	stw	r2,152(sp)
 401f95c:	002b883a 	mov	r21,zero
 401f960:	8001741e 	bne	r16,zero,401ff34 <___vfiprintf_internal_r+0x9d0>
 401f964:	0021883a 	mov	r16,zero
 401f968:	0029883a 	mov	r20,zero
 401f96c:	ddc01a04 	addi	r23,sp,104
 401f970:	8027883a 	mov	r19,r16
 401f974:	8500010e 	bge	r16,r20,401f97c <___vfiprintf_internal_r+0x418>
 401f978:	a027883a 	mov	r19,r20
 401f97c:	ad403fcc 	andi	r21,r21,255
 401f980:	ad40201c 	xori	r21,r21,128
 401f984:	ad7fe004 	addi	r21,r21,-128
 401f988:	a8000126 	beq	r21,zero,401f990 <___vfiprintf_internal_r+0x42c>
 401f98c:	9cc00044 	addi	r19,r19,1
 401f990:	89c0008c 	andi	r7,r17,2
 401f994:	38000126 	beq	r7,zero,401f99c <___vfiprintf_internal_r+0x438>
 401f998:	9cc00084 	addi	r19,r19,2
 401f99c:	88c0210c 	andi	r3,r17,132
 401f9a0:	1801dd1e 	bne	r3,zero,4020118 <___vfiprintf_internal_r+0xbb4>
 401f9a4:	d9402517 	ldw	r5,148(sp)
 401f9a8:	2cebc83a 	sub	r21,r5,r19
 401f9ac:	0541da0e 	bge	zero,r21,4020118 <___vfiprintf_internal_r+0xbb4>
 401f9b0:	07000404 	movi	fp,16
 401f9b4:	d8801c17 	ldw	r2,112(sp)
 401f9b8:	e543be0e 	bge	fp,r21,40208b4 <___vfiprintf_internal_r+0x1350>
 401f9bc:	014100b4 	movhi	r5,1026
 401f9c0:	2955f804 	addi	r5,r5,22496
 401f9c4:	dc002715 	stw	r16,156(sp)
 401f9c8:	d9801b17 	ldw	r6,108(sp)
 401f9cc:	a821883a 	mov	r16,r21
 401f9d0:	d9402315 	stw	r5,140(sp)
 401f9d4:	028001c4 	movi	r10,7
 401f9d8:	d9c02915 	stw	r7,164(sp)
 401f9dc:	182b883a 	mov	r21,r3
 401f9e0:	00000506 	br	401f9f8 <___vfiprintf_internal_r+0x494>
 401f9e4:	31000084 	addi	r4,r6,2
 401f9e8:	42000204 	addi	r8,r8,8
 401f9ec:	180d883a 	mov	r6,r3
 401f9f0:	843ffc04 	addi	r16,r16,-16
 401f9f4:	e4000f0e 	bge	fp,r16,401fa34 <___vfiprintf_internal_r+0x4d0>
 401f9f8:	010100b4 	movhi	r4,1026
 401f9fc:	10800404 	addi	r2,r2,16
 401fa00:	30c00044 	addi	r3,r6,1
 401fa04:	2115f804 	addi	r4,r4,22496
 401fa08:	41000015 	stw	r4,0(r8)
 401fa0c:	47000115 	stw	fp,4(r8)
 401fa10:	d8801c15 	stw	r2,112(sp)
 401fa14:	d8c01b15 	stw	r3,108(sp)
 401fa18:	50fff20e 	bge	r10,r3,401f9e4 <__alt_mem_onchip_memory2_0+0xfc01a824>
 401fa1c:	1001b21e 	bne	r2,zero,40200e8 <___vfiprintf_internal_r+0xb84>
 401fa20:	843ffc04 	addi	r16,r16,-16
 401fa24:	000d883a 	mov	r6,zero
 401fa28:	01000044 	movi	r4,1
 401fa2c:	d811883a 	mov	r8,sp
 401fa30:	e43ff116 	blt	fp,r16,401f9f8 <__alt_mem_onchip_memory2_0+0xfc01a838>
 401fa34:	a807883a 	mov	r3,r21
 401fa38:	d9c02917 	ldw	r7,164(sp)
 401fa3c:	802b883a 	mov	r21,r16
 401fa40:	dc002717 	ldw	r16,156(sp)
 401fa44:	d9402317 	ldw	r5,140(sp)
 401fa48:	a885883a 	add	r2,r21,r2
 401fa4c:	45400115 	stw	r21,4(r8)
 401fa50:	41400015 	stw	r5,0(r8)
 401fa54:	d8801c15 	stw	r2,112(sp)
 401fa58:	d9001b15 	stw	r4,108(sp)
 401fa5c:	014001c4 	movi	r5,7
 401fa60:	29026216 	blt	r5,r4,40203ec <___vfiprintf_internal_r+0xe88>
 401fa64:	d9801d87 	ldb	r6,118(sp)
 401fa68:	42000204 	addi	r8,r8,8
 401fa6c:	21400044 	addi	r5,r4,1
 401fa70:	3001ae1e 	bne	r6,zero,402012c <___vfiprintf_internal_r+0xbc8>
 401fa74:	3801bb26 	beq	r7,zero,4020164 <___vfiprintf_internal_r+0xc00>
 401fa78:	d9001d04 	addi	r4,sp,116
 401fa7c:	10800084 	addi	r2,r2,2
 401fa80:	41000015 	stw	r4,0(r8)
 401fa84:	01000084 	movi	r4,2
 401fa88:	41000115 	stw	r4,4(r8)
 401fa8c:	d8801c15 	stw	r2,112(sp)
 401fa90:	d9401b15 	stw	r5,108(sp)
 401fa94:	010001c4 	movi	r4,7
 401fa98:	2142680e 	bge	r4,r5,402043c <___vfiprintf_internal_r+0xed8>
 401fa9c:	1002b11e 	bne	r2,zero,4020564 <___vfiprintf_internal_r+0x1000>
 401faa0:	01802004 	movi	r6,128
 401faa4:	01400044 	movi	r5,1
 401faa8:	0009883a 	mov	r4,zero
 401faac:	d811883a 	mov	r8,sp
 401fab0:	1981ae1e 	bne	r3,r6,402016c <___vfiprintf_internal_r+0xc08>
 401fab4:	d8c02517 	ldw	r3,148(sp)
 401fab8:	1cf9c83a 	sub	fp,r3,r19
 401fabc:	0701ab0e 	bge	zero,fp,402016c <___vfiprintf_internal_r+0xc08>
 401fac0:	05400404 	movi	r21,16
 401fac4:	af03a90e 	bge	r21,fp,402096c <___vfiprintf_internal_r+0x1408>
 401fac8:	014100b4 	movhi	r5,1026
 401facc:	2955f404 	addi	r5,r5,22480
 401fad0:	d9402315 	stw	r5,140(sp)
 401fad4:	01c001c4 	movi	r7,7
 401fad8:	00000506 	br	401faf0 <___vfiprintf_internal_r+0x58c>
 401fadc:	21800084 	addi	r6,r4,2
 401fae0:	42000204 	addi	r8,r8,8
 401fae4:	1809883a 	mov	r4,r3
 401fae8:	e73ffc04 	addi	fp,fp,-16
 401faec:	af000d0e 	bge	r21,fp,401fb24 <___vfiprintf_internal_r+0x5c0>
 401faf0:	10800404 	addi	r2,r2,16
 401faf4:	20c00044 	addi	r3,r4,1
 401faf8:	44800015 	stw	r18,0(r8)
 401fafc:	45400115 	stw	r21,4(r8)
 401fb00:	d8801c15 	stw	r2,112(sp)
 401fb04:	d8c01b15 	stw	r3,108(sp)
 401fb08:	38fff40e 	bge	r7,r3,401fadc <__alt_mem_onchip_memory2_0+0xfc01a91c>
 401fb0c:	10022b1e 	bne	r2,zero,40203bc <___vfiprintf_internal_r+0xe58>
 401fb10:	e73ffc04 	addi	fp,fp,-16
 401fb14:	01800044 	movi	r6,1
 401fb18:	0009883a 	mov	r4,zero
 401fb1c:	d811883a 	mov	r8,sp
 401fb20:	af3ff316 	blt	r21,fp,401faf0 <__alt_mem_onchip_memory2_0+0xfc01a930>
 401fb24:	d8c02317 	ldw	r3,140(sp)
 401fb28:	1705883a 	add	r2,r2,fp
 401fb2c:	47000115 	stw	fp,4(r8)
 401fb30:	40c00015 	stw	r3,0(r8)
 401fb34:	d8801c15 	stw	r2,112(sp)
 401fb38:	d9801b15 	stw	r6,108(sp)
 401fb3c:	00c001c4 	movi	r3,7
 401fb40:	19829416 	blt	r3,r6,4020594 <___vfiprintf_internal_r+0x1030>
 401fb44:	8521c83a 	sub	r16,r16,r20
 401fb48:	42000204 	addi	r8,r8,8
 401fb4c:	31400044 	addi	r5,r6,1
 401fb50:	3009883a 	mov	r4,r6
 401fb54:	04018716 	blt	zero,r16,4020174 <___vfiprintf_internal_r+0xc10>
 401fb58:	a085883a 	add	r2,r20,r2
 401fb5c:	45c00015 	stw	r23,0(r8)
 401fb60:	45000115 	stw	r20,4(r8)
 401fb64:	d8801c15 	stw	r2,112(sp)
 401fb68:	d9401b15 	stw	r5,108(sp)
 401fb6c:	00c001c4 	movi	r3,7
 401fb70:	1941c20e 	bge	r3,r5,402027c <___vfiprintf_internal_r+0xd18>
 401fb74:	1002531e 	bne	r2,zero,40204c4 <___vfiprintf_internal_r+0xf60>
 401fb78:	d8001b15 	stw	zero,108(sp)
 401fb7c:	8c40010c 	andi	r17,r17,4
 401fb80:	88023226 	beq	r17,zero,402044c <___vfiprintf_internal_r+0xee8>
 401fb84:	d9002517 	ldw	r4,148(sp)
 401fb88:	24e3c83a 	sub	r17,r4,r19
 401fb8c:	04432916 	blt	zero,r17,4020834 <___vfiprintf_internal_r+0x12d0>
 401fb90:	d8802517 	ldw	r2,148(sp)
 401fb94:	14c0010e 	bge	r2,r19,401fb9c <___vfiprintf_internal_r+0x638>
 401fb98:	9805883a 	mov	r2,r19
 401fb9c:	d8c02417 	ldw	r3,144(sp)
 401fba0:	1887883a 	add	r3,r3,r2
 401fba4:	d8c02415 	stw	r3,144(sp)
 401fba8:	d8001b15 	stw	zero,108(sp)
 401fbac:	d811883a 	mov	r8,sp
 401fbb0:	003ea006 	br	401f634 <__alt_mem_onchip_memory2_0+0xfc01a474>
 401fbb4:	8c400814 	ori	r17,r17,32
 401fbb8:	b0c00007 	ldb	r3,0(r22)
 401fbbc:	003ec606 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 401fbc0:	b0c00007 	ldb	r3,0(r22)
 401fbc4:	00801b04 	movi	r2,108
 401fbc8:	18832026 	beq	r3,r2,402084c <___vfiprintf_internal_r+0x12e8>
 401fbcc:	8c400414 	ori	r17,r17,16
 401fbd0:	003ec106 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 401fbd4:	9cc03fcc 	andi	r19,r19,255
 401fbd8:	b811883a 	mov	r8,r23
 401fbdc:	9803981e 	bne	r19,zero,4020a40 <___vfiprintf_internal_r+0x14dc>
 401fbe0:	8880080c 	andi	r2,r17,32
 401fbe4:	1002be26 	beq	r2,zero,40206e0 <___vfiprintf_internal_r+0x117c>
 401fbe8:	d9002217 	ldw	r4,136(sp)
 401fbec:	d9402417 	ldw	r5,144(sp)
 401fbf0:	20800017 	ldw	r2,0(r4)
 401fbf4:	2807d7fa 	srai	r3,r5,31
 401fbf8:	21000104 	addi	r4,r4,4
 401fbfc:	d9002215 	stw	r4,136(sp)
 401fc00:	11400015 	stw	r5,0(r2)
 401fc04:	10c00115 	stw	r3,4(r2)
 401fc08:	003e8a06 	br	401f634 <__alt_mem_onchip_memory2_0+0xfc01a474>
 401fc0c:	9cc03fcc 	andi	r19,r19,255
 401fc10:	b811883a 	mov	r8,r23
 401fc14:	9803871e 	bne	r19,zero,4020a34 <___vfiprintf_internal_r+0x14d0>
 401fc18:	8880080c 	andi	r2,r17,32
 401fc1c:	10009a26 	beq	r2,zero,401fe88 <___vfiprintf_internal_r+0x924>
 401fc20:	d9002217 	ldw	r4,136(sp)
 401fc24:	d8001d85 	stb	zero,118(sp)
 401fc28:	20800204 	addi	r2,r4,8
 401fc2c:	24c00017 	ldw	r19,0(r4)
 401fc30:	25000117 	ldw	r20,4(r4)
 401fc34:	8002a416 	blt	r16,zero,40206c8 <___vfiprintf_internal_r+0x1164>
 401fc38:	013fdfc4 	movi	r4,-129
 401fc3c:	9d06b03a 	or	r3,r19,r20
 401fc40:	d8802215 	stw	r2,136(sp)
 401fc44:	8922703a 	and	r17,r17,r4
 401fc48:	18009b26 	beq	r3,zero,401feb8 <___vfiprintf_internal_r+0x954>
 401fc4c:	002b883a 	mov	r21,zero
 401fc50:	ddc01a04 	addi	r23,sp,104
 401fc54:	9806d0fa 	srli	r3,r19,3
 401fc58:	a008977a 	slli	r4,r20,29
 401fc5c:	a028d0fa 	srli	r20,r20,3
 401fc60:	9cc001cc 	andi	r19,r19,7
 401fc64:	98800c04 	addi	r2,r19,48
 401fc68:	bdffffc4 	addi	r23,r23,-1
 401fc6c:	20e6b03a 	or	r19,r4,r3
 401fc70:	b8800005 	stb	r2,0(r23)
 401fc74:	9d06b03a 	or	r3,r19,r20
 401fc78:	183ff61e 	bne	r3,zero,401fc54 <__alt_mem_onchip_memory2_0+0xfc01aa94>
 401fc7c:	88c0004c 	andi	r3,r17,1
 401fc80:	18021f1e 	bne	r3,zero,4020500 <___vfiprintf_internal_r+0xf9c>
 401fc84:	d9401e17 	ldw	r5,120(sp)
 401fc88:	2de9c83a 	sub	r20,r5,r23
 401fc8c:	003f3806 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 401fc90:	9cc03fcc 	andi	r19,r19,255
 401fc94:	b811883a 	mov	r8,r23
 401fc98:	98034f1e 	bne	r19,zero,40209d8 <___vfiprintf_internal_r+0x1474>
 401fc9c:	008100b4 	movhi	r2,1026
 401fca0:	10958504 	addi	r2,r2,22036
 401fca4:	d8802615 	stw	r2,152(sp)
 401fca8:	8880080c 	andi	r2,r17,32
 401fcac:	1000ac26 	beq	r2,zero,401ff60 <___vfiprintf_internal_r+0x9fc>
 401fcb0:	d9002217 	ldw	r4,136(sp)
 401fcb4:	24c00017 	ldw	r19,0(r4)
 401fcb8:	25000117 	ldw	r20,4(r4)
 401fcbc:	21000204 	addi	r4,r4,8
 401fcc0:	d9002215 	stw	r4,136(sp)
 401fcc4:	8880004c 	andi	r2,r17,1
 401fcc8:	1001e726 	beq	r2,zero,4020468 <___vfiprintf_internal_r+0xf04>
 401fccc:	9d04b03a 	or	r2,r19,r20
 401fcd0:	10025c1e 	bne	r2,zero,4020644 <___vfiprintf_internal_r+0x10e0>
 401fcd4:	d8001d85 	stb	zero,118(sp)
 401fcd8:	80024416 	blt	r16,zero,40205ec <___vfiprintf_internal_r+0x1088>
 401fcdc:	00bfdfc4 	movi	r2,-129
 401fce0:	88a2703a 	and	r17,r17,r2
 401fce4:	003f1d06 	br	401f95c <__alt_mem_onchip_memory2_0+0xfc01a79c>
 401fce8:	d8c02217 	ldw	r3,136(sp)
 401fcec:	04c00044 	movi	r19,1
 401fcf0:	b811883a 	mov	r8,r23
 401fcf4:	18800017 	ldw	r2,0(r3)
 401fcf8:	18c00104 	addi	r3,r3,4
 401fcfc:	d8001d85 	stb	zero,118(sp)
 401fd00:	d8801005 	stb	r2,64(sp)
 401fd04:	d8c02215 	stw	r3,136(sp)
 401fd08:	9829883a 	mov	r20,r19
 401fd0c:	ddc01004 	addi	r23,sp,64
 401fd10:	0021883a 	mov	r16,zero
 401fd14:	003f1e06 	br	401f990 <__alt_mem_onchip_memory2_0+0xfc01a7d0>
 401fd18:	9cc03fcc 	andi	r19,r19,255
 401fd1c:	b811883a 	mov	r8,r23
 401fd20:	9803331e 	bne	r19,zero,40209f0 <___vfiprintf_internal_r+0x148c>
 401fd24:	8880080c 	andi	r2,r17,32
 401fd28:	10004826 	beq	r2,zero,401fe4c <___vfiprintf_internal_r+0x8e8>
 401fd2c:	d9002217 	ldw	r4,136(sp)
 401fd30:	20800117 	ldw	r2,4(r4)
 401fd34:	24c00017 	ldw	r19,0(r4)
 401fd38:	21000204 	addi	r4,r4,8
 401fd3c:	d9002215 	stw	r4,136(sp)
 401fd40:	1029883a 	mov	r20,r2
 401fd44:	10024c16 	blt	r2,zero,4020678 <___vfiprintf_internal_r+0x1114>
 401fd48:	dd401d83 	ldbu	r21,118(sp)
 401fd4c:	80007116 	blt	r16,zero,401ff14 <___vfiprintf_internal_r+0x9b0>
 401fd50:	00ffdfc4 	movi	r3,-129
 401fd54:	9d04b03a 	or	r2,r19,r20
 401fd58:	88e2703a 	and	r17,r17,r3
 401fd5c:	1000d126 	beq	r2,zero,40200a4 <___vfiprintf_internal_r+0xb40>
 401fd60:	a0023526 	beq	r20,zero,4020638 <___vfiprintf_internal_r+0x10d4>
 401fd64:	ddc01a04 	addi	r23,sp,104
 401fd68:	4039883a 	mov	fp,r8
 401fd6c:	9809883a 	mov	r4,r19
 401fd70:	a00b883a 	mov	r5,r20
 401fd74:	01800284 	movi	r6,10
 401fd78:	000f883a 	mov	r7,zero
 401fd7c:	4021b9c0 	call	4021b9c <__umoddi3>
 401fd80:	10800c04 	addi	r2,r2,48
 401fd84:	bdffffc4 	addi	r23,r23,-1
 401fd88:	9809883a 	mov	r4,r19
 401fd8c:	a00b883a 	mov	r5,r20
 401fd90:	b8800005 	stb	r2,0(r23)
 401fd94:	01800284 	movi	r6,10
 401fd98:	000f883a 	mov	r7,zero
 401fd9c:	40215a00 	call	40215a0 <__udivdi3>
 401fda0:	1027883a 	mov	r19,r2
 401fda4:	10c4b03a 	or	r2,r2,r3
 401fda8:	1829883a 	mov	r20,r3
 401fdac:	103fef1e 	bne	r2,zero,401fd6c <__alt_mem_onchip_memory2_0+0xfc01abac>
 401fdb0:	d9001e17 	ldw	r4,120(sp)
 401fdb4:	e011883a 	mov	r8,fp
 401fdb8:	25e9c83a 	sub	r20,r4,r23
 401fdbc:	003eec06 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 401fdc0:	d8802307 	ldb	r2,140(sp)
 401fdc4:	1002361e 	bne	r2,zero,40206a0 <___vfiprintf_internal_r+0x113c>
 401fdc8:	00c00804 	movi	r3,32
 401fdcc:	d8c02305 	stb	r3,140(sp)
 401fdd0:	04c00044 	movi	r19,1
 401fdd4:	b0c00007 	ldb	r3,0(r22)
 401fdd8:	003e3f06 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 401fddc:	8c400054 	ori	r17,r17,1
 401fde0:	b0c00007 	ldb	r3,0(r22)
 401fde4:	003e3c06 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 401fde8:	8c402014 	ori	r17,r17,128
 401fdec:	b0c00007 	ldb	r3,0(r22)
 401fdf0:	003e3906 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 401fdf4:	dc002715 	stw	r16,156(sp)
 401fdf8:	d8002515 	stw	zero,148(sp)
 401fdfc:	1f3ff404 	addi	fp,r3,-48
 401fe00:	0009883a 	mov	r4,zero
 401fe04:	b021883a 	mov	r16,r22
 401fe08:	01400284 	movi	r5,10
 401fe0c:	40118340 	call	4011834 <__mulsi3>
 401fe10:	80c00007 	ldb	r3,0(r16)
 401fe14:	e089883a 	add	r4,fp,r2
 401fe18:	b5800044 	addi	r22,r22,1
 401fe1c:	1f3ff404 	addi	fp,r3,-48
 401fe20:	b021883a 	mov	r16,r22
 401fe24:	af3ff82e 	bgeu	r21,fp,401fe08 <__alt_mem_onchip_memory2_0+0xfc01ac48>
 401fe28:	d9002515 	stw	r4,148(sp)
 401fe2c:	dc002717 	ldw	r16,156(sp)
 401fe30:	003e2a06 	br	401f6dc <__alt_mem_onchip_memory2_0+0xfc01a51c>
 401fe34:	9cc03fcc 	andi	r19,r19,255
 401fe38:	b811883a 	mov	r8,r23
 401fe3c:	9802e91e 	bne	r19,zero,40209e4 <___vfiprintf_internal_r+0x1480>
 401fe40:	8c400414 	ori	r17,r17,16
 401fe44:	8880080c 	andi	r2,r17,32
 401fe48:	103fb81e 	bne	r2,zero,401fd2c <__alt_mem_onchip_memory2_0+0xfc01ab6c>
 401fe4c:	8880040c 	andi	r2,r17,16
 401fe50:	10022e26 	beq	r2,zero,402070c <___vfiprintf_internal_r+0x11a8>
 401fe54:	d9402217 	ldw	r5,136(sp)
 401fe58:	2cc00017 	ldw	r19,0(r5)
 401fe5c:	29400104 	addi	r5,r5,4
 401fe60:	d9402215 	stw	r5,136(sp)
 401fe64:	9829d7fa 	srai	r20,r19,31
 401fe68:	a005883a 	mov	r2,r20
 401fe6c:	003fb506 	br	401fd44 <__alt_mem_onchip_memory2_0+0xfc01ab84>
 401fe70:	9cc03fcc 	andi	r19,r19,255
 401fe74:	b811883a 	mov	r8,r23
 401fe78:	9802fa1e 	bne	r19,zero,4020a64 <___vfiprintf_internal_r+0x1500>
 401fe7c:	8c400414 	ori	r17,r17,16
 401fe80:	8880080c 	andi	r2,r17,32
 401fe84:	103f661e 	bne	r2,zero,401fc20 <__alt_mem_onchip_memory2_0+0xfc01aa60>
 401fe88:	8880040c 	andi	r2,r17,16
 401fe8c:	10020626 	beq	r2,zero,40206a8 <___vfiprintf_internal_r+0x1144>
 401fe90:	d9402217 	ldw	r5,136(sp)
 401fe94:	d8001d85 	stb	zero,118(sp)
 401fe98:	0029883a 	mov	r20,zero
 401fe9c:	28800104 	addi	r2,r5,4
 401fea0:	2cc00017 	ldw	r19,0(r5)
 401fea4:	80020816 	blt	r16,zero,40206c8 <___vfiprintf_internal_r+0x1164>
 401fea8:	00ffdfc4 	movi	r3,-129
 401feac:	d8802215 	stw	r2,136(sp)
 401feb0:	88e2703a 	and	r17,r17,r3
 401feb4:	983f651e 	bne	r19,zero,401fc4c <__alt_mem_onchip_memory2_0+0xfc01aa8c>
 401feb8:	002b883a 	mov	r21,zero
 401febc:	8002cf26 	beq	r16,zero,40209fc <___vfiprintf_internal_r+0x1498>
 401fec0:	0027883a 	mov	r19,zero
 401fec4:	0029883a 	mov	r20,zero
 401fec8:	003f6106 	br	401fc50 <__alt_mem_onchip_memory2_0+0xfc01aa90>
 401fecc:	9cc03fcc 	andi	r19,r19,255
 401fed0:	b811883a 	mov	r8,r23
 401fed4:	9802e01e 	bne	r19,zero,4020a58 <___vfiprintf_internal_r+0x14f4>
 401fed8:	8c400414 	ori	r17,r17,16
 401fedc:	8880080c 	andi	r2,r17,32
 401fee0:	1000641e 	bne	r2,zero,4020074 <___vfiprintf_internal_r+0xb10>
 401fee4:	8880040c 	andi	r2,r17,16
 401fee8:	1001c81e 	bne	r2,zero,402060c <___vfiprintf_internal_r+0x10a8>
 401feec:	8880100c 	andi	r2,r17,64
 401fef0:	d8001d85 	stb	zero,118(sp)
 401fef4:	1002281e 	bne	r2,zero,4020798 <___vfiprintf_internal_r+0x1234>
 401fef8:	d9002217 	ldw	r4,136(sp)
 401fefc:	0029883a 	mov	r20,zero
 401ff00:	20800104 	addi	r2,r4,4
 401ff04:	24c00017 	ldw	r19,0(r4)
 401ff08:	8001c60e 	bge	r16,zero,4020624 <___vfiprintf_internal_r+0x10c0>
 401ff0c:	d8802215 	stw	r2,136(sp)
 401ff10:	002b883a 	mov	r21,zero
 401ff14:	9d04b03a 	or	r2,r19,r20
 401ff18:	103f911e 	bne	r2,zero,401fd60 <__alt_mem_onchip_memory2_0+0xfc01aba0>
 401ff1c:	00800044 	movi	r2,1
 401ff20:	10803fcc 	andi	r2,r2,255
 401ff24:	00c00044 	movi	r3,1
 401ff28:	10c05f26 	beq	r2,r3,40200a8 <___vfiprintf_internal_r+0xb44>
 401ff2c:	00c00084 	movi	r3,2
 401ff30:	10ffe31e 	bne	r2,r3,401fec0 <__alt_mem_onchip_memory2_0+0xfc01ad00>
 401ff34:	0027883a 	mov	r19,zero
 401ff38:	0029883a 	mov	r20,zero
 401ff3c:	00015106 	br	4020484 <___vfiprintf_internal_r+0xf20>
 401ff40:	9cc03fcc 	andi	r19,r19,255
 401ff44:	b811883a 	mov	r8,r23
 401ff48:	9802c01e 	bne	r19,zero,4020a4c <___vfiprintf_internal_r+0x14e8>
 401ff4c:	014100b4 	movhi	r5,1026
 401ff50:	29558004 	addi	r5,r5,22016
 401ff54:	d9402615 	stw	r5,152(sp)
 401ff58:	8880080c 	andi	r2,r17,32
 401ff5c:	103f541e 	bne	r2,zero,401fcb0 <__alt_mem_onchip_memory2_0+0xfc01aaf0>
 401ff60:	8880040c 	andi	r2,r17,16
 401ff64:	1001f226 	beq	r2,zero,4020730 <___vfiprintf_internal_r+0x11cc>
 401ff68:	d9402217 	ldw	r5,136(sp)
 401ff6c:	0029883a 	mov	r20,zero
 401ff70:	2cc00017 	ldw	r19,0(r5)
 401ff74:	29400104 	addi	r5,r5,4
 401ff78:	d9402215 	stw	r5,136(sp)
 401ff7c:	003f5106 	br	401fcc4 <__alt_mem_onchip_memory2_0+0xfc01ab04>
 401ff80:	d8c02217 	ldw	r3,136(sp)
 401ff84:	b811883a 	mov	r8,r23
 401ff88:	d8001d85 	stb	zero,118(sp)
 401ff8c:	1dc00017 	ldw	r23,0(r3)
 401ff90:	1f000104 	addi	fp,r3,4
 401ff94:	b8025926 	beq	r23,zero,40208fc <___vfiprintf_internal_r+0x1398>
 401ff98:	80023316 	blt	r16,zero,4020868 <___vfiprintf_internal_r+0x1304>
 401ff9c:	800d883a 	mov	r6,r16
 401ffa0:	000b883a 	mov	r5,zero
 401ffa4:	b809883a 	mov	r4,r23
 401ffa8:	da002a15 	stw	r8,168(sp)
 401ffac:	401c0400 	call	401c040 <memchr>
 401ffb0:	da002a17 	ldw	r8,168(sp)
 401ffb4:	10026826 	beq	r2,zero,4020958 <___vfiprintf_internal_r+0x13f4>
 401ffb8:	15e9c83a 	sub	r20,r2,r23
 401ffbc:	dd401d83 	ldbu	r21,118(sp)
 401ffc0:	df002215 	stw	fp,136(sp)
 401ffc4:	0021883a 	mov	r16,zero
 401ffc8:	003e6906 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 401ffcc:	9cc03fcc 	andi	r19,r19,255
 401ffd0:	b811883a 	mov	r8,r23
 401ffd4:	983fc126 	beq	r19,zero,401fedc <__alt_mem_onchip_memory2_0+0xfc01ad1c>
 401ffd8:	d8c02303 	ldbu	r3,140(sp)
 401ffdc:	d8c01d85 	stb	r3,118(sp)
 401ffe0:	003fbe06 	br	401fedc <__alt_mem_onchip_memory2_0+0xfc01ad1c>
 401ffe4:	d9002217 	ldw	r4,136(sp)
 401ffe8:	d9402217 	ldw	r5,136(sp)
 401ffec:	21000017 	ldw	r4,0(r4)
 401fff0:	28800104 	addi	r2,r5,4
 401fff4:	d9002515 	stw	r4,148(sp)
 401fff8:	203e3d16 	blt	r4,zero,401f8f0 <__alt_mem_onchip_memory2_0+0xfc01a730>
 401fffc:	d8802215 	stw	r2,136(sp)
 4020000:	b0c00007 	ldb	r3,0(r22)
 4020004:	003db406 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 4020008:	00c00ac4 	movi	r3,43
 402000c:	d8c02305 	stb	r3,140(sp)
 4020010:	04c00044 	movi	r19,1
 4020014:	b0c00007 	ldb	r3,0(r22)
 4020018:	003daf06 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 402001c:	b0c00007 	ldb	r3,0(r22)
 4020020:	01000a84 	movi	r4,42
 4020024:	b4000044 	addi	r16,r22,1
 4020028:	19025e26 	beq	r3,r4,40209a4 <___vfiprintf_internal_r+0x1440>
 402002c:	1f3ff404 	addi	fp,r3,-48
 4020030:	0009883a 	mov	r4,zero
 4020034:	af025236 	bltu	r21,fp,4020980 <___vfiprintf_internal_r+0x141c>
 4020038:	01400284 	movi	r5,10
 402003c:	40118340 	call	4011834 <__mulsi3>
 4020040:	80c00007 	ldb	r3,0(r16)
 4020044:	1709883a 	add	r4,r2,fp
 4020048:	85800044 	addi	r22,r16,1
 402004c:	1f3ff404 	addi	fp,r3,-48
 4020050:	b021883a 	mov	r16,r22
 4020054:	af3ff82e 	bgeu	r21,fp,4020038 <__alt_mem_onchip_memory2_0+0xfc01ae78>
 4020058:	2021883a 	mov	r16,r4
 402005c:	203d9f0e 	bge	r4,zero,401f6dc <__alt_mem_onchip_memory2_0+0xfc01a51c>
 4020060:	043fffc4 	movi	r16,-1
 4020064:	003d9d06 	br	401f6dc <__alt_mem_onchip_memory2_0+0xfc01a51c>
 4020068:	8c401014 	ori	r17,r17,64
 402006c:	b0c00007 	ldb	r3,0(r22)
 4020070:	003d9906 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 4020074:	d9002217 	ldw	r4,136(sp)
 4020078:	d8001d85 	stb	zero,118(sp)
 402007c:	20c00204 	addi	r3,r4,8
 4020080:	24c00017 	ldw	r19,0(r4)
 4020084:	25000117 	ldw	r20,4(r4)
 4020088:	8001e716 	blt	r16,zero,4020828 <___vfiprintf_internal_r+0x12c4>
 402008c:	013fdfc4 	movi	r4,-129
 4020090:	9d04b03a 	or	r2,r19,r20
 4020094:	d8c02215 	stw	r3,136(sp)
 4020098:	8922703a 	and	r17,r17,r4
 402009c:	002b883a 	mov	r21,zero
 40200a0:	103f2f1e 	bne	r2,zero,401fd60 <__alt_mem_onchip_memory2_0+0xfc01aba0>
 40200a4:	803e2f26 	beq	r16,zero,401f964 <__alt_mem_onchip_memory2_0+0xfc01a7a4>
 40200a8:	0027883a 	mov	r19,zero
 40200ac:	9cc00c04 	addi	r19,r19,48
 40200b0:	dcc019c5 	stb	r19,103(sp)
 40200b4:	dd002817 	ldw	r20,160(sp)
 40200b8:	ddc019c4 	addi	r23,sp,103
 40200bc:	003e2c06 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 40200c0:	9cc03fcc 	andi	r19,r19,255
 40200c4:	b811883a 	mov	r8,r23
 40200c8:	9802571e 	bne	r19,zero,4020a28 <___vfiprintf_internal_r+0x14c4>
 40200cc:	18005726 	beq	r3,zero,402022c <___vfiprintf_internal_r+0xcc8>
 40200d0:	04c00044 	movi	r19,1
 40200d4:	d8c01005 	stb	r3,64(sp)
 40200d8:	d8001d85 	stb	zero,118(sp)
 40200dc:	9829883a 	mov	r20,r19
 40200e0:	ddc01004 	addi	r23,sp,64
 40200e4:	003f0a06 	br	401fd10 <__alt_mem_onchip_memory2_0+0xfc01ab50>
 40200e8:	d9402017 	ldw	r5,128(sp)
 40200ec:	d9002117 	ldw	r4,132(sp)
 40200f0:	d9801a04 	addi	r6,sp,104
 40200f4:	da802a15 	stw	r10,168(sp)
 40200f8:	401f4500 	call	401f450 <__sprint_r.part.0>
 40200fc:	da802a17 	ldw	r10,168(sp)
 4020100:	1000501e 	bne	r2,zero,4020244 <___vfiprintf_internal_r+0xce0>
 4020104:	d9801b17 	ldw	r6,108(sp)
 4020108:	d8801c17 	ldw	r2,112(sp)
 402010c:	d811883a 	mov	r8,sp
 4020110:	31000044 	addi	r4,r6,1
 4020114:	003e3606 	br	401f9f0 <__alt_mem_onchip_memory2_0+0xfc01a830>
 4020118:	d9001b17 	ldw	r4,108(sp)
 402011c:	d8801c17 	ldw	r2,112(sp)
 4020120:	21400044 	addi	r5,r4,1
 4020124:	d9801d87 	ldb	r6,118(sp)
 4020128:	303e5226 	beq	r6,zero,401fa74 <__alt_mem_onchip_memory2_0+0xfc01a8b4>
 402012c:	01800044 	movi	r6,1
 4020130:	d9001d84 	addi	r4,sp,118
 4020134:	1185883a 	add	r2,r2,r6
 4020138:	41000015 	stw	r4,0(r8)
 402013c:	41800115 	stw	r6,4(r8)
 4020140:	d8801c15 	stw	r2,112(sp)
 4020144:	d9401b15 	stw	r5,108(sp)
 4020148:	010001c4 	movi	r4,7
 402014c:	2140b00e 	bge	r4,r5,4020410 <___vfiprintf_internal_r+0xeac>
 4020150:	1000f61e 	bne	r2,zero,402052c <___vfiprintf_internal_r+0xfc8>
 4020154:	3800b31e 	bne	r7,zero,4020424 <___vfiprintf_internal_r+0xec0>
 4020158:	0009883a 	mov	r4,zero
 402015c:	300b883a 	mov	r5,r6
 4020160:	d811883a 	mov	r8,sp
 4020164:	01802004 	movi	r6,128
 4020168:	19be5226 	beq	r3,r6,401fab4 <__alt_mem_onchip_memory2_0+0xfc01a8f4>
 402016c:	8521c83a 	sub	r16,r16,r20
 4020170:	043e790e 	bge	zero,r16,401fb58 <__alt_mem_onchip_memory2_0+0xfc01a998>
 4020174:	05400404 	movi	r21,16
 4020178:	ac01b00e 	bge	r21,r16,402083c <___vfiprintf_internal_r+0x12d8>
 402017c:	014100b4 	movhi	r5,1026
 4020180:	2955f404 	addi	r5,r5,22480
 4020184:	d9402315 	stw	r5,140(sp)
 4020188:	070001c4 	movi	fp,7
 402018c:	00000506 	br	40201a4 <___vfiprintf_internal_r+0xc40>
 4020190:	21400084 	addi	r5,r4,2
 4020194:	42000204 	addi	r8,r8,8
 4020198:	1809883a 	mov	r4,r3
 402019c:	843ffc04 	addi	r16,r16,-16
 40201a0:	ac000d0e 	bge	r21,r16,40201d8 <___vfiprintf_internal_r+0xc74>
 40201a4:	10800404 	addi	r2,r2,16
 40201a8:	20c00044 	addi	r3,r4,1
 40201ac:	44800015 	stw	r18,0(r8)
 40201b0:	45400115 	stw	r21,4(r8)
 40201b4:	d8801c15 	stw	r2,112(sp)
 40201b8:	d8c01b15 	stw	r3,108(sp)
 40201bc:	e0fff40e 	bge	fp,r3,4020190 <__alt_mem_onchip_memory2_0+0xfc01afd0>
 40201c0:	1000101e 	bne	r2,zero,4020204 <___vfiprintf_internal_r+0xca0>
 40201c4:	843ffc04 	addi	r16,r16,-16
 40201c8:	01400044 	movi	r5,1
 40201cc:	0009883a 	mov	r4,zero
 40201d0:	d811883a 	mov	r8,sp
 40201d4:	ac3ff316 	blt	r21,r16,40201a4 <__alt_mem_onchip_memory2_0+0xfc01afe4>
 40201d8:	d8c02317 	ldw	r3,140(sp)
 40201dc:	1405883a 	add	r2,r2,r16
 40201e0:	44000115 	stw	r16,4(r8)
 40201e4:	40c00015 	stw	r3,0(r8)
 40201e8:	d8801c15 	stw	r2,112(sp)
 40201ec:	d9401b15 	stw	r5,108(sp)
 40201f0:	00c001c4 	movi	r3,7
 40201f4:	19401916 	blt	r3,r5,402025c <___vfiprintf_internal_r+0xcf8>
 40201f8:	42000204 	addi	r8,r8,8
 40201fc:	29400044 	addi	r5,r5,1
 4020200:	003e5506 	br	401fb58 <__alt_mem_onchip_memory2_0+0xfc01a998>
 4020204:	d9402017 	ldw	r5,128(sp)
 4020208:	d9002117 	ldw	r4,132(sp)
 402020c:	d9801a04 	addi	r6,sp,104
 4020210:	401f4500 	call	401f450 <__sprint_r.part.0>
 4020214:	10000b1e 	bne	r2,zero,4020244 <___vfiprintf_internal_r+0xce0>
 4020218:	d9001b17 	ldw	r4,108(sp)
 402021c:	d8801c17 	ldw	r2,112(sp)
 4020220:	d811883a 	mov	r8,sp
 4020224:	21400044 	addi	r5,r4,1
 4020228:	003fdc06 	br	402019c <__alt_mem_onchip_memory2_0+0xfc01afdc>
 402022c:	d8801c17 	ldw	r2,112(sp)
 4020230:	10000426 	beq	r2,zero,4020244 <___vfiprintf_internal_r+0xce0>
 4020234:	d9402017 	ldw	r5,128(sp)
 4020238:	d9002117 	ldw	r4,132(sp)
 402023c:	d9801a04 	addi	r6,sp,104
 4020240:	401f4500 	call	401f450 <__sprint_r.part.0>
 4020244:	d9402017 	ldw	r5,128(sp)
 4020248:	2880030b 	ldhu	r2,12(r5)
 402024c:	1080100c 	andi	r2,r2,64
 4020250:	10014d1e 	bne	r2,zero,4020788 <___vfiprintf_internal_r+0x1224>
 4020254:	d8802417 	ldw	r2,144(sp)
 4020258:	003d9706 	br	401f8b8 <__alt_mem_onchip_memory2_0+0xfc01a6f8>
 402025c:	1000d21e 	bne	r2,zero,40205a8 <___vfiprintf_internal_r+0x1044>
 4020260:	00c00044 	movi	r3,1
 4020264:	a005883a 	mov	r2,r20
 4020268:	ddc00015 	stw	r23,0(sp)
 402026c:	dd000115 	stw	r20,4(sp)
 4020270:	dd001c15 	stw	r20,112(sp)
 4020274:	d8c01b15 	stw	r3,108(sp)
 4020278:	d811883a 	mov	r8,sp
 402027c:	42000204 	addi	r8,r8,8
 4020280:	8c40010c 	andi	r17,r17,4
 4020284:	88004026 	beq	r17,zero,4020388 <___vfiprintf_internal_r+0xe24>
 4020288:	d9002517 	ldw	r4,148(sp)
 402028c:	24e3c83a 	sub	r17,r4,r19
 4020290:	04403d0e 	bge	zero,r17,4020388 <___vfiprintf_internal_r+0xe24>
 4020294:	04000404 	movi	r16,16
 4020298:	8441a90e 	bge	r16,r17,4020940 <___vfiprintf_internal_r+0x13dc>
 402029c:	00c100b4 	movhi	r3,1026
 40202a0:	18d5f804 	addi	r3,r3,22496
 40202a4:	d9001b17 	ldw	r4,108(sp)
 40202a8:	d8c02315 	stw	r3,140(sp)
 40202ac:	050001c4 	movi	r20,7
 40202b0:	dd402117 	ldw	r21,132(sp)
 40202b4:	ddc02017 	ldw	r23,128(sp)
 40202b8:	00000506 	br	40202d0 <___vfiprintf_internal_r+0xd6c>
 40202bc:	21400084 	addi	r5,r4,2
 40202c0:	42000204 	addi	r8,r8,8
 40202c4:	1809883a 	mov	r4,r3
 40202c8:	8c7ffc04 	addi	r17,r17,-16
 40202cc:	84400f0e 	bge	r16,r17,402030c <___vfiprintf_internal_r+0xda8>
 40202d0:	014100b4 	movhi	r5,1026
 40202d4:	10800404 	addi	r2,r2,16
 40202d8:	20c00044 	addi	r3,r4,1
 40202dc:	2955f804 	addi	r5,r5,22496
 40202e0:	41400015 	stw	r5,0(r8)
 40202e4:	44000115 	stw	r16,4(r8)
 40202e8:	d8801c15 	stw	r2,112(sp)
 40202ec:	d8c01b15 	stw	r3,108(sp)
 40202f0:	a0fff20e 	bge	r20,r3,40202bc <__alt_mem_onchip_memory2_0+0xfc01b0fc>
 40202f4:	1000141e 	bne	r2,zero,4020348 <___vfiprintf_internal_r+0xde4>
 40202f8:	8c7ffc04 	addi	r17,r17,-16
 40202fc:	01400044 	movi	r5,1
 4020300:	0009883a 	mov	r4,zero
 4020304:	d811883a 	mov	r8,sp
 4020308:	847ff116 	blt	r16,r17,40202d0 <__alt_mem_onchip_memory2_0+0xfc01b110>
 402030c:	d8c02317 	ldw	r3,140(sp)
 4020310:	1445883a 	add	r2,r2,r17
 4020314:	44400115 	stw	r17,4(r8)
 4020318:	40c00015 	stw	r3,0(r8)
 402031c:	d8801c15 	stw	r2,112(sp)
 4020320:	d9401b15 	stw	r5,108(sp)
 4020324:	00c001c4 	movi	r3,7
 4020328:	1940170e 	bge	r3,r5,4020388 <___vfiprintf_internal_r+0xe24>
 402032c:	1000101e 	bne	r2,zero,4020370 <___vfiprintf_internal_r+0xe0c>
 4020330:	d8802517 	ldw	r2,148(sp)
 4020334:	14c11616 	blt	r2,r19,4020790 <___vfiprintf_internal_r+0x122c>
 4020338:	d9002417 	ldw	r4,144(sp)
 402033c:	2089883a 	add	r4,r4,r2
 4020340:	d9002415 	stw	r4,144(sp)
 4020344:	003e1806 	br	401fba8 <__alt_mem_onchip_memory2_0+0xfc01a9e8>
 4020348:	d9801a04 	addi	r6,sp,104
 402034c:	b80b883a 	mov	r5,r23
 4020350:	a809883a 	mov	r4,r21
 4020354:	401f4500 	call	401f450 <__sprint_r.part.0>
 4020358:	103fba1e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 402035c:	d9001b17 	ldw	r4,108(sp)
 4020360:	d8801c17 	ldw	r2,112(sp)
 4020364:	d811883a 	mov	r8,sp
 4020368:	21400044 	addi	r5,r4,1
 402036c:	003fd606 	br	40202c8 <__alt_mem_onchip_memory2_0+0xfc01b108>
 4020370:	d9402017 	ldw	r5,128(sp)
 4020374:	d9002117 	ldw	r4,132(sp)
 4020378:	d9801a04 	addi	r6,sp,104
 402037c:	401f4500 	call	401f450 <__sprint_r.part.0>
 4020380:	103fb01e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 4020384:	d8801c17 	ldw	r2,112(sp)
 4020388:	d8c02517 	ldw	r3,148(sp)
 402038c:	1cc0010e 	bge	r3,r19,4020394 <___vfiprintf_internal_r+0xe30>
 4020390:	9807883a 	mov	r3,r19
 4020394:	d9002417 	ldw	r4,144(sp)
 4020398:	20c9883a 	add	r4,r4,r3
 402039c:	d9002415 	stw	r4,144(sp)
 40203a0:	103e0126 	beq	r2,zero,401fba8 <__alt_mem_onchip_memory2_0+0xfc01a9e8>
 40203a4:	d9402017 	ldw	r5,128(sp)
 40203a8:	d9002117 	ldw	r4,132(sp)
 40203ac:	d9801a04 	addi	r6,sp,104
 40203b0:	401f4500 	call	401f450 <__sprint_r.part.0>
 40203b4:	103dfc26 	beq	r2,zero,401fba8 <__alt_mem_onchip_memory2_0+0xfc01a9e8>
 40203b8:	003fa206 	br	4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 40203bc:	d9402017 	ldw	r5,128(sp)
 40203c0:	d9002117 	ldw	r4,132(sp)
 40203c4:	d9801a04 	addi	r6,sp,104
 40203c8:	d9c02b15 	stw	r7,172(sp)
 40203cc:	401f4500 	call	401f450 <__sprint_r.part.0>
 40203d0:	d9c02b17 	ldw	r7,172(sp)
 40203d4:	103f9b1e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 40203d8:	d9001b17 	ldw	r4,108(sp)
 40203dc:	d8801c17 	ldw	r2,112(sp)
 40203e0:	d811883a 	mov	r8,sp
 40203e4:	21800044 	addi	r6,r4,1
 40203e8:	003dbf06 	br	401fae8 <__alt_mem_onchip_memory2_0+0xfc01a928>
 40203ec:	1000d81e 	bne	r2,zero,4020750 <___vfiprintf_internal_r+0x11ec>
 40203f0:	d9001d87 	ldb	r4,118(sp)
 40203f4:	20000a26 	beq	r4,zero,4020420 <___vfiprintf_internal_r+0xebc>
 40203f8:	00800044 	movi	r2,1
 40203fc:	d9001d84 	addi	r4,sp,118
 4020400:	100b883a 	mov	r5,r2
 4020404:	d9000015 	stw	r4,0(sp)
 4020408:	d8800115 	stw	r2,4(sp)
 402040c:	d811883a 	mov	r8,sp
 4020410:	2809883a 	mov	r4,r5
 4020414:	42000204 	addi	r8,r8,8
 4020418:	29400044 	addi	r5,r5,1
 402041c:	003d9506 	br	401fa74 <__alt_mem_onchip_memory2_0+0xfc01a8b4>
 4020420:	3800fd26 	beq	r7,zero,4020818 <___vfiprintf_internal_r+0x12b4>
 4020424:	00800084 	movi	r2,2
 4020428:	d9001d04 	addi	r4,sp,116
 402042c:	d9000015 	stw	r4,0(sp)
 4020430:	d8800115 	stw	r2,4(sp)
 4020434:	01400044 	movi	r5,1
 4020438:	d811883a 	mov	r8,sp
 402043c:	2809883a 	mov	r4,r5
 4020440:	42000204 	addi	r8,r8,8
 4020444:	29400044 	addi	r5,r5,1
 4020448:	003f4606 	br	4020164 <__alt_mem_onchip_memory2_0+0xfc01afa4>
 402044c:	d8802517 	ldw	r2,148(sp)
 4020450:	14c0010e 	bge	r2,r19,4020458 <___vfiprintf_internal_r+0xef4>
 4020454:	9805883a 	mov	r2,r19
 4020458:	d9402417 	ldw	r5,144(sp)
 402045c:	288b883a 	add	r5,r5,r2
 4020460:	d9402415 	stw	r5,144(sp)
 4020464:	003dd006 	br	401fba8 <__alt_mem_onchip_memory2_0+0xfc01a9e8>
 4020468:	d8001d85 	stb	zero,118(sp)
 402046c:	80005d16 	blt	r16,zero,40205e4 <___vfiprintf_internal_r+0x1080>
 4020470:	00ffdfc4 	movi	r3,-129
 4020474:	9d04b03a 	or	r2,r19,r20
 4020478:	88e2703a 	and	r17,r17,r3
 402047c:	103d3726 	beq	r2,zero,401f95c <__alt_mem_onchip_memory2_0+0xfc01a79c>
 4020480:	002b883a 	mov	r21,zero
 4020484:	d9002617 	ldw	r4,152(sp)
 4020488:	ddc01a04 	addi	r23,sp,104
 402048c:	988003cc 	andi	r2,r19,15
 4020490:	a006973a 	slli	r3,r20,28
 4020494:	2085883a 	add	r2,r4,r2
 4020498:	9826d13a 	srli	r19,r19,4
 402049c:	10800003 	ldbu	r2,0(r2)
 40204a0:	a028d13a 	srli	r20,r20,4
 40204a4:	bdffffc4 	addi	r23,r23,-1
 40204a8:	1ce6b03a 	or	r19,r3,r19
 40204ac:	b8800005 	stb	r2,0(r23)
 40204b0:	9d04b03a 	or	r2,r19,r20
 40204b4:	103ff51e 	bne	r2,zero,402048c <__alt_mem_onchip_memory2_0+0xfc01b2cc>
 40204b8:	d8801e17 	ldw	r2,120(sp)
 40204bc:	15e9c83a 	sub	r20,r2,r23
 40204c0:	003d2b06 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 40204c4:	d9402017 	ldw	r5,128(sp)
 40204c8:	d9002117 	ldw	r4,132(sp)
 40204cc:	d9801a04 	addi	r6,sp,104
 40204d0:	401f4500 	call	401f450 <__sprint_r.part.0>
 40204d4:	103f5b1e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 40204d8:	d8801c17 	ldw	r2,112(sp)
 40204dc:	d811883a 	mov	r8,sp
 40204e0:	003f6706 	br	4020280 <__alt_mem_onchip_memory2_0+0xfc01b0c0>
 40204e4:	d9402017 	ldw	r5,128(sp)
 40204e8:	d9002117 	ldw	r4,132(sp)
 40204ec:	d9801a04 	addi	r6,sp,104
 40204f0:	401f4500 	call	401f450 <__sprint_r.part.0>
 40204f4:	103f531e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 40204f8:	d811883a 	mov	r8,sp
 40204fc:	003cd906 	br	401f864 <__alt_mem_onchip_memory2_0+0xfc01a6a4>
 4020500:	10803fcc 	andi	r2,r2,255
 4020504:	1080201c 	xori	r2,r2,128
 4020508:	10bfe004 	addi	r2,r2,-128
 402050c:	00c00c04 	movi	r3,48
 4020510:	10ffe926 	beq	r2,r3,40204b8 <__alt_mem_onchip_memory2_0+0xfc01b2f8>
 4020514:	b8ffffc5 	stb	r3,-1(r23)
 4020518:	d8c01e17 	ldw	r3,120(sp)
 402051c:	b8bfffc4 	addi	r2,r23,-1
 4020520:	102f883a 	mov	r23,r2
 4020524:	18a9c83a 	sub	r20,r3,r2
 4020528:	003d1106 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 402052c:	d9402017 	ldw	r5,128(sp)
 4020530:	d9002117 	ldw	r4,132(sp)
 4020534:	d9801a04 	addi	r6,sp,104
 4020538:	d8c02a15 	stw	r3,168(sp)
 402053c:	d9c02b15 	stw	r7,172(sp)
 4020540:	401f4500 	call	401f450 <__sprint_r.part.0>
 4020544:	d8c02a17 	ldw	r3,168(sp)
 4020548:	d9c02b17 	ldw	r7,172(sp)
 402054c:	103f3d1e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 4020550:	d9001b17 	ldw	r4,108(sp)
 4020554:	d8801c17 	ldw	r2,112(sp)
 4020558:	d811883a 	mov	r8,sp
 402055c:	21400044 	addi	r5,r4,1
 4020560:	003d4406 	br	401fa74 <__alt_mem_onchip_memory2_0+0xfc01a8b4>
 4020564:	d9402017 	ldw	r5,128(sp)
 4020568:	d9002117 	ldw	r4,132(sp)
 402056c:	d9801a04 	addi	r6,sp,104
 4020570:	d8c02a15 	stw	r3,168(sp)
 4020574:	401f4500 	call	401f450 <__sprint_r.part.0>
 4020578:	d8c02a17 	ldw	r3,168(sp)
 402057c:	103f311e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 4020580:	d9001b17 	ldw	r4,108(sp)
 4020584:	d8801c17 	ldw	r2,112(sp)
 4020588:	d811883a 	mov	r8,sp
 402058c:	21400044 	addi	r5,r4,1
 4020590:	003ef406 	br	4020164 <__alt_mem_onchip_memory2_0+0xfc01afa4>
 4020594:	1000bd1e 	bne	r2,zero,402088c <___vfiprintf_internal_r+0x1328>
 4020598:	01400044 	movi	r5,1
 402059c:	0009883a 	mov	r4,zero
 40205a0:	d811883a 	mov	r8,sp
 40205a4:	003ef106 	br	402016c <__alt_mem_onchip_memory2_0+0xfc01afac>
 40205a8:	d9402017 	ldw	r5,128(sp)
 40205ac:	d9002117 	ldw	r4,132(sp)
 40205b0:	d9801a04 	addi	r6,sp,104
 40205b4:	401f4500 	call	401f450 <__sprint_r.part.0>
 40205b8:	103f221e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 40205bc:	d9401b17 	ldw	r5,108(sp)
 40205c0:	d8801c17 	ldw	r2,112(sp)
 40205c4:	d811883a 	mov	r8,sp
 40205c8:	29400044 	addi	r5,r5,1
 40205cc:	003d6206 	br	401fb58 <__alt_mem_onchip_memory2_0+0xfc01a998>
 40205d0:	014100b4 	movhi	r5,1026
 40205d4:	29558504 	addi	r5,r5,22036
 40205d8:	d9402615 	stw	r5,152(sp)
 40205dc:	d8c02215 	stw	r3,136(sp)
 40205e0:	1023883a 	mov	r17,r2
 40205e4:	9d04b03a 	or	r2,r19,r20
 40205e8:	103fa51e 	bne	r2,zero,4020480 <__alt_mem_onchip_memory2_0+0xfc01b2c0>
 40205ec:	002b883a 	mov	r21,zero
 40205f0:	00800084 	movi	r2,2
 40205f4:	003e4a06 	br	401ff20 <__alt_mem_onchip_memory2_0+0xfc01ad60>
 40205f8:	014100b4 	movhi	r5,1026
 40205fc:	29558504 	addi	r5,r5,22036
 4020600:	002b883a 	mov	r21,zero
 4020604:	d9402615 	stw	r5,152(sp)
 4020608:	003f9e06 	br	4020484 <__alt_mem_onchip_memory2_0+0xfc01b2c4>
 402060c:	d9402217 	ldw	r5,136(sp)
 4020610:	d8001d85 	stb	zero,118(sp)
 4020614:	0029883a 	mov	r20,zero
 4020618:	28800104 	addi	r2,r5,4
 402061c:	2cc00017 	ldw	r19,0(r5)
 4020620:	803e3a16 	blt	r16,zero,401ff0c <__alt_mem_onchip_memory2_0+0xfc01ad4c>
 4020624:	00ffdfc4 	movi	r3,-129
 4020628:	d8802215 	stw	r2,136(sp)
 402062c:	88e2703a 	and	r17,r17,r3
 4020630:	002b883a 	mov	r21,zero
 4020634:	983e9b26 	beq	r19,zero,40200a4 <__alt_mem_onchip_memory2_0+0xfc01aee4>
 4020638:	00800244 	movi	r2,9
 402063c:	14fdc936 	bltu	r2,r19,401fd64 <__alt_mem_onchip_memory2_0+0xfc01aba4>
 4020640:	003e9a06 	br	40200ac <__alt_mem_onchip_memory2_0+0xfc01aeec>
 4020644:	00800c04 	movi	r2,48
 4020648:	d8c01d45 	stb	r3,117(sp)
 402064c:	d8801d05 	stb	r2,116(sp)
 4020650:	d8001d85 	stb	zero,118(sp)
 4020654:	88c00094 	ori	r3,r17,2
 4020658:	80009c16 	blt	r16,zero,40208cc <___vfiprintf_internal_r+0x1368>
 402065c:	00bfdfc4 	movi	r2,-129
 4020660:	88a2703a 	and	r17,r17,r2
 4020664:	8c400094 	ori	r17,r17,2
 4020668:	002b883a 	mov	r21,zero
 402066c:	003f8506 	br	4020484 <__alt_mem_onchip_memory2_0+0xfc01b2c4>
 4020670:	b029883a 	mov	r20,r22
 4020674:	003c0b06 	br	401f6a4 <__alt_mem_onchip_memory2_0+0xfc01a4e4>
 4020678:	04e7c83a 	sub	r19,zero,r19
 402067c:	05400b44 	movi	r21,45
 4020680:	9804c03a 	cmpne	r2,r19,zero
 4020684:	0529c83a 	sub	r20,zero,r20
 4020688:	dd401d85 	stb	r21,118(sp)
 402068c:	a0a9c83a 	sub	r20,r20,r2
 4020690:	80009716 	blt	r16,zero,40208f0 <___vfiprintf_internal_r+0x138c>
 4020694:	00bfdfc4 	movi	r2,-129
 4020698:	88a2703a 	and	r17,r17,r2
 402069c:	003db006 	br	401fd60 <__alt_mem_onchip_memory2_0+0xfc01aba0>
 40206a0:	b0c00007 	ldb	r3,0(r22)
 40206a4:	003c0c06 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 40206a8:	8880100c 	andi	r2,r17,64
 40206ac:	d8001d85 	stb	zero,118(sp)
 40206b0:	1000461e 	bne	r2,zero,40207cc <___vfiprintf_internal_r+0x1268>
 40206b4:	d9002217 	ldw	r4,136(sp)
 40206b8:	0029883a 	mov	r20,zero
 40206bc:	20800104 	addi	r2,r4,4
 40206c0:	24c00017 	ldw	r19,0(r4)
 40206c4:	803df80e 	bge	r16,zero,401fea8 <__alt_mem_onchip_memory2_0+0xfc01ace8>
 40206c8:	9d06b03a 	or	r3,r19,r20
 40206cc:	d8802215 	stw	r2,136(sp)
 40206d0:	183d5e1e 	bne	r3,zero,401fc4c <__alt_mem_onchip_memory2_0+0xfc01aa8c>
 40206d4:	002b883a 	mov	r21,zero
 40206d8:	0005883a 	mov	r2,zero
 40206dc:	003e1006 	br	401ff20 <__alt_mem_onchip_memory2_0+0xfc01ad60>
 40206e0:	8880040c 	andi	r2,r17,16
 40206e4:	1000321e 	bne	r2,zero,40207b0 <___vfiprintf_internal_r+0x124c>
 40206e8:	8c40100c 	andi	r17,r17,64
 40206ec:	88008d26 	beq	r17,zero,4020924 <___vfiprintf_internal_r+0x13c0>
 40206f0:	d9402217 	ldw	r5,136(sp)
 40206f4:	d8c02417 	ldw	r3,144(sp)
 40206f8:	28800017 	ldw	r2,0(r5)
 40206fc:	29400104 	addi	r5,r5,4
 4020700:	d9402215 	stw	r5,136(sp)
 4020704:	10c0000d 	sth	r3,0(r2)
 4020708:	003bca06 	br	401f634 <__alt_mem_onchip_memory2_0+0xfc01a474>
 402070c:	8880100c 	andi	r2,r17,64
 4020710:	10003a26 	beq	r2,zero,40207fc <___vfiprintf_internal_r+0x1298>
 4020714:	d8802217 	ldw	r2,136(sp)
 4020718:	14c0000f 	ldh	r19,0(r2)
 402071c:	10800104 	addi	r2,r2,4
 4020720:	d8802215 	stw	r2,136(sp)
 4020724:	9829d7fa 	srai	r20,r19,31
 4020728:	a005883a 	mov	r2,r20
 402072c:	003d8506 	br	401fd44 <__alt_mem_onchip_memory2_0+0xfc01ab84>
 4020730:	8880100c 	andi	r2,r17,64
 4020734:	10002b26 	beq	r2,zero,40207e4 <___vfiprintf_internal_r+0x1280>
 4020738:	d8802217 	ldw	r2,136(sp)
 402073c:	0029883a 	mov	r20,zero
 4020740:	14c0000b 	ldhu	r19,0(r2)
 4020744:	10800104 	addi	r2,r2,4
 4020748:	d8802215 	stw	r2,136(sp)
 402074c:	003d5d06 	br	401fcc4 <__alt_mem_onchip_memory2_0+0xfc01ab04>
 4020750:	d9402017 	ldw	r5,128(sp)
 4020754:	d9002117 	ldw	r4,132(sp)
 4020758:	d9801a04 	addi	r6,sp,104
 402075c:	d8c02a15 	stw	r3,168(sp)
 4020760:	d9c02b15 	stw	r7,172(sp)
 4020764:	401f4500 	call	401f450 <__sprint_r.part.0>
 4020768:	d8c02a17 	ldw	r3,168(sp)
 402076c:	d9c02b17 	ldw	r7,172(sp)
 4020770:	103eb41e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 4020774:	d9001b17 	ldw	r4,108(sp)
 4020778:	d8801c17 	ldw	r2,112(sp)
 402077c:	d811883a 	mov	r8,sp
 4020780:	21400044 	addi	r5,r4,1
 4020784:	003e6706 	br	4020124 <__alt_mem_onchip_memory2_0+0xfc01af64>
 4020788:	00bfffc4 	movi	r2,-1
 402078c:	003c4a06 	br	401f8b8 <__alt_mem_onchip_memory2_0+0xfc01a6f8>
 4020790:	9805883a 	mov	r2,r19
 4020794:	003ee806 	br	4020338 <__alt_mem_onchip_memory2_0+0xfc01b178>
 4020798:	d8c02217 	ldw	r3,136(sp)
 402079c:	0029883a 	mov	r20,zero
 40207a0:	18800104 	addi	r2,r3,4
 40207a4:	1cc0000b 	ldhu	r19,0(r3)
 40207a8:	803f9e0e 	bge	r16,zero,4020624 <__alt_mem_onchip_memory2_0+0xfc01b464>
 40207ac:	003dd706 	br	401ff0c <__alt_mem_onchip_memory2_0+0xfc01ad4c>
 40207b0:	d8c02217 	ldw	r3,136(sp)
 40207b4:	d9002417 	ldw	r4,144(sp)
 40207b8:	18800017 	ldw	r2,0(r3)
 40207bc:	18c00104 	addi	r3,r3,4
 40207c0:	d8c02215 	stw	r3,136(sp)
 40207c4:	11000015 	stw	r4,0(r2)
 40207c8:	003b9a06 	br	401f634 <__alt_mem_onchip_memory2_0+0xfc01a474>
 40207cc:	d8c02217 	ldw	r3,136(sp)
 40207d0:	0029883a 	mov	r20,zero
 40207d4:	18800104 	addi	r2,r3,4
 40207d8:	1cc0000b 	ldhu	r19,0(r3)
 40207dc:	803db20e 	bge	r16,zero,401fea8 <__alt_mem_onchip_memory2_0+0xfc01ace8>
 40207e0:	003fb906 	br	40206c8 <__alt_mem_onchip_memory2_0+0xfc01b508>
 40207e4:	d9002217 	ldw	r4,136(sp)
 40207e8:	0029883a 	mov	r20,zero
 40207ec:	24c00017 	ldw	r19,0(r4)
 40207f0:	21000104 	addi	r4,r4,4
 40207f4:	d9002215 	stw	r4,136(sp)
 40207f8:	003d3206 	br	401fcc4 <__alt_mem_onchip_memory2_0+0xfc01ab04>
 40207fc:	d8c02217 	ldw	r3,136(sp)
 4020800:	1cc00017 	ldw	r19,0(r3)
 4020804:	18c00104 	addi	r3,r3,4
 4020808:	d8c02215 	stw	r3,136(sp)
 402080c:	9829d7fa 	srai	r20,r19,31
 4020810:	a005883a 	mov	r2,r20
 4020814:	003d4b06 	br	401fd44 <__alt_mem_onchip_memory2_0+0xfc01ab84>
 4020818:	0009883a 	mov	r4,zero
 402081c:	01400044 	movi	r5,1
 4020820:	d811883a 	mov	r8,sp
 4020824:	003e4f06 	br	4020164 <__alt_mem_onchip_memory2_0+0xfc01afa4>
 4020828:	d8c02215 	stw	r3,136(sp)
 402082c:	002b883a 	mov	r21,zero
 4020830:	003db806 	br	401ff14 <__alt_mem_onchip_memory2_0+0xfc01ad54>
 4020834:	d811883a 	mov	r8,sp
 4020838:	003e9606 	br	4020294 <__alt_mem_onchip_memory2_0+0xfc01b0d4>
 402083c:	010100b4 	movhi	r4,1026
 4020840:	2115f404 	addi	r4,r4,22480
 4020844:	d9002315 	stw	r4,140(sp)
 4020848:	003e6306 	br	40201d8 <__alt_mem_onchip_memory2_0+0xfc01b018>
 402084c:	b0c00043 	ldbu	r3,1(r22)
 4020850:	8c400814 	ori	r17,r17,32
 4020854:	b5800044 	addi	r22,r22,1
 4020858:	18c03fcc 	andi	r3,r3,255
 402085c:	18c0201c 	xori	r3,r3,128
 4020860:	18ffe004 	addi	r3,r3,-128
 4020864:	003b9c06 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 4020868:	b809883a 	mov	r4,r23
 402086c:	da002a15 	stw	r8,168(sp)
 4020870:	40143080 	call	4014308 <strlen>
 4020874:	1029883a 	mov	r20,r2
 4020878:	dd401d83 	ldbu	r21,118(sp)
 402087c:	df002215 	stw	fp,136(sp)
 4020880:	0021883a 	mov	r16,zero
 4020884:	da002a17 	ldw	r8,168(sp)
 4020888:	003c3906 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 402088c:	d9402017 	ldw	r5,128(sp)
 4020890:	d9002117 	ldw	r4,132(sp)
 4020894:	d9801a04 	addi	r6,sp,104
 4020898:	401f4500 	call	401f450 <__sprint_r.part.0>
 402089c:	103e691e 	bne	r2,zero,4020244 <__alt_mem_onchip_memory2_0+0xfc01b084>
 40208a0:	d9001b17 	ldw	r4,108(sp)
 40208a4:	d8801c17 	ldw	r2,112(sp)
 40208a8:	d811883a 	mov	r8,sp
 40208ac:	21400044 	addi	r5,r4,1
 40208b0:	003e2e06 	br	402016c <__alt_mem_onchip_memory2_0+0xfc01afac>
 40208b4:	010100b4 	movhi	r4,1026
 40208b8:	2115f804 	addi	r4,r4,22496
 40208bc:	d9002315 	stw	r4,140(sp)
 40208c0:	d9001b17 	ldw	r4,108(sp)
 40208c4:	21000044 	addi	r4,r4,1
 40208c8:	003c5e06 	br	401fa44 <__alt_mem_onchip_memory2_0+0xfc01a884>
 40208cc:	002b883a 	mov	r21,zero
 40208d0:	00800084 	movi	r2,2
 40208d4:	10803fcc 	andi	r2,r2,255
 40208d8:	01000044 	movi	r4,1
 40208dc:	11002b26 	beq	r2,r4,402098c <___vfiprintf_internal_r+0x1428>
 40208e0:	01000084 	movi	r4,2
 40208e4:	11002b1e 	bne	r2,r4,4020994 <___vfiprintf_internal_r+0x1430>
 40208e8:	1823883a 	mov	r17,r3
 40208ec:	003ee506 	br	4020484 <__alt_mem_onchip_memory2_0+0xfc01b2c4>
 40208f0:	8807883a 	mov	r3,r17
 40208f4:	00800044 	movi	r2,1
 40208f8:	003ff606 	br	40208d4 <__alt_mem_onchip_memory2_0+0xfc01b714>
 40208fc:	00800184 	movi	r2,6
 4020900:	1400012e 	bgeu	r2,r16,4020908 <___vfiprintf_internal_r+0x13a4>
 4020904:	1021883a 	mov	r16,r2
 4020908:	8029883a 	mov	r20,r16
 402090c:	8027883a 	mov	r19,r16
 4020910:	80002216 	blt	r16,zero,402099c <___vfiprintf_internal_r+0x1438>
 4020914:	05c100b4 	movhi	r23,1026
 4020918:	df002215 	stw	fp,136(sp)
 402091c:	bdd58a04 	addi	r23,r23,22056
 4020920:	003cfb06 	br	401fd10 <__alt_mem_onchip_memory2_0+0xfc01ab50>
 4020924:	d9002217 	ldw	r4,136(sp)
 4020928:	d9402417 	ldw	r5,144(sp)
 402092c:	20800017 	ldw	r2,0(r4)
 4020930:	21000104 	addi	r4,r4,4
 4020934:	d9002215 	stw	r4,136(sp)
 4020938:	11400015 	stw	r5,0(r2)
 402093c:	003b3d06 	br	401f634 <__alt_mem_onchip_memory2_0+0xfc01a474>
 4020940:	014100b4 	movhi	r5,1026
 4020944:	2955f804 	addi	r5,r5,22496
 4020948:	d9402315 	stw	r5,140(sp)
 402094c:	d9401b17 	ldw	r5,108(sp)
 4020950:	29400044 	addi	r5,r5,1
 4020954:	003e6d06 	br	402030c <__alt_mem_onchip_memory2_0+0xfc01b14c>
 4020958:	8029883a 	mov	r20,r16
 402095c:	dd401d83 	ldbu	r21,118(sp)
 4020960:	df002215 	stw	fp,136(sp)
 4020964:	0021883a 	mov	r16,zero
 4020968:	003c0106 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 402096c:	00c100b4 	movhi	r3,1026
 4020970:	18d5f404 	addi	r3,r3,22480
 4020974:	d8c02315 	stw	r3,140(sp)
 4020978:	280d883a 	mov	r6,r5
 402097c:	003c6906 	br	401fb24 <__alt_mem_onchip_memory2_0+0xfc01a964>
 4020980:	802d883a 	mov	r22,r16
 4020984:	0021883a 	mov	r16,zero
 4020988:	003b5406 	br	401f6dc <__alt_mem_onchip_memory2_0+0xfc01a51c>
 402098c:	1823883a 	mov	r17,r3
 4020990:	003cf306 	br	401fd60 <__alt_mem_onchip_memory2_0+0xfc01aba0>
 4020994:	1823883a 	mov	r17,r3
 4020998:	003cad06 	br	401fc50 <__alt_mem_onchip_memory2_0+0xfc01aa90>
 402099c:	0027883a 	mov	r19,zero
 40209a0:	003fdc06 	br	4020914 <__alt_mem_onchip_memory2_0+0xfc01b754>
 40209a4:	d9402217 	ldw	r5,136(sp)
 40209a8:	8005883a 	mov	r2,r16
 40209ac:	b0c00043 	ldbu	r3,1(r22)
 40209b0:	2c000017 	ldw	r16,0(r5)
 40209b4:	29000104 	addi	r4,r5,4
 40209b8:	d9002215 	stw	r4,136(sp)
 40209bc:	102d883a 	mov	r22,r2
 40209c0:	803fa50e 	bge	r16,zero,4020858 <__alt_mem_onchip_memory2_0+0xfc01b698>
 40209c4:	18c03fcc 	andi	r3,r3,255
 40209c8:	18c0201c 	xori	r3,r3,128
 40209cc:	043fffc4 	movi	r16,-1
 40209d0:	18ffe004 	addi	r3,r3,-128
 40209d4:	003b4006 	br	401f6d8 <__alt_mem_onchip_memory2_0+0xfc01a518>
 40209d8:	d9402303 	ldbu	r5,140(sp)
 40209dc:	d9401d85 	stb	r5,118(sp)
 40209e0:	003cae06 	br	401fc9c <__alt_mem_onchip_memory2_0+0xfc01aadc>
 40209e4:	d8c02303 	ldbu	r3,140(sp)
 40209e8:	d8c01d85 	stb	r3,118(sp)
 40209ec:	003d1406 	br	401fe40 <__alt_mem_onchip_memory2_0+0xfc01ac80>
 40209f0:	d8c02303 	ldbu	r3,140(sp)
 40209f4:	d8c01d85 	stb	r3,118(sp)
 40209f8:	003cca06 	br	401fd24 <__alt_mem_onchip_memory2_0+0xfc01ab64>
 40209fc:	8880004c 	andi	r2,r17,1
 4020a00:	002b883a 	mov	r21,zero
 4020a04:	10000526 	beq	r2,zero,4020a1c <___vfiprintf_internal_r+0x14b8>
 4020a08:	00800c04 	movi	r2,48
 4020a0c:	d88019c5 	stb	r2,103(sp)
 4020a10:	dd002817 	ldw	r20,160(sp)
 4020a14:	ddc019c4 	addi	r23,sp,103
 4020a18:	003bd506 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 4020a1c:	0029883a 	mov	r20,zero
 4020a20:	ddc01a04 	addi	r23,sp,104
 4020a24:	003bd206 	br	401f970 <__alt_mem_onchip_memory2_0+0xfc01a7b0>
 4020a28:	d9002303 	ldbu	r4,140(sp)
 4020a2c:	d9001d85 	stb	r4,118(sp)
 4020a30:	003da606 	br	40200cc <__alt_mem_onchip_memory2_0+0xfc01af0c>
 4020a34:	d8c02303 	ldbu	r3,140(sp)
 4020a38:	d8c01d85 	stb	r3,118(sp)
 4020a3c:	003c7606 	br	401fc18 <__alt_mem_onchip_memory2_0+0xfc01aa58>
 4020a40:	d8c02303 	ldbu	r3,140(sp)
 4020a44:	d8c01d85 	stb	r3,118(sp)
 4020a48:	003c6506 	br	401fbe0 <__alt_mem_onchip_memory2_0+0xfc01aa20>
 4020a4c:	d9002303 	ldbu	r4,140(sp)
 4020a50:	d9001d85 	stb	r4,118(sp)
 4020a54:	003d3d06 	br	401ff4c <__alt_mem_onchip_memory2_0+0xfc01ad8c>
 4020a58:	d8c02303 	ldbu	r3,140(sp)
 4020a5c:	d8c01d85 	stb	r3,118(sp)
 4020a60:	003d1d06 	br	401fed8 <__alt_mem_onchip_memory2_0+0xfc01ad18>
 4020a64:	d8c02303 	ldbu	r3,140(sp)
 4020a68:	d8c01d85 	stb	r3,118(sp)
 4020a6c:	003d0306 	br	401fe7c <__alt_mem_onchip_memory2_0+0xfc01acbc>

04020a70 <__vfiprintf_internal>:
 4020a70:	008100b4 	movhi	r2,1026
 4020a74:	109ddd04 	addi	r2,r2,30580
 4020a78:	300f883a 	mov	r7,r6
 4020a7c:	280d883a 	mov	r6,r5
 4020a80:	200b883a 	mov	r5,r4
 4020a84:	11000017 	ldw	r4,0(r2)
 4020a88:	401f5641 	jmpi	401f564 <___vfiprintf_internal_r>

04020a8c <__sbprintf>:
 4020a8c:	2880030b 	ldhu	r2,12(r5)
 4020a90:	2ac01917 	ldw	r11,100(r5)
 4020a94:	2a80038b 	ldhu	r10,14(r5)
 4020a98:	2a400717 	ldw	r9,28(r5)
 4020a9c:	2a000917 	ldw	r8,36(r5)
 4020aa0:	defee204 	addi	sp,sp,-1144
 4020aa4:	00c10004 	movi	r3,1024
 4020aa8:	dc011a15 	stw	r16,1128(sp)
 4020aac:	10bfff4c 	andi	r2,r2,65533
 4020ab0:	2821883a 	mov	r16,r5
 4020ab4:	d8cb883a 	add	r5,sp,r3
 4020ab8:	dc811c15 	stw	r18,1136(sp)
 4020abc:	dc411b15 	stw	r17,1132(sp)
 4020ac0:	dfc11d15 	stw	ra,1140(sp)
 4020ac4:	2025883a 	mov	r18,r4
 4020ac8:	d881030d 	sth	r2,1036(sp)
 4020acc:	dac11915 	stw	r11,1124(sp)
 4020ad0:	da81038d 	sth	r10,1038(sp)
 4020ad4:	da410715 	stw	r9,1052(sp)
 4020ad8:	da010915 	stw	r8,1060(sp)
 4020adc:	dec10015 	stw	sp,1024(sp)
 4020ae0:	dec10415 	stw	sp,1040(sp)
 4020ae4:	d8c10215 	stw	r3,1032(sp)
 4020ae8:	d8c10515 	stw	r3,1044(sp)
 4020aec:	d8010615 	stw	zero,1048(sp)
 4020af0:	401f5640 	call	401f564 <___vfiprintf_internal_r>
 4020af4:	1023883a 	mov	r17,r2
 4020af8:	10000416 	blt	r2,zero,4020b0c <__sbprintf+0x80>
 4020afc:	d9410004 	addi	r5,sp,1024
 4020b00:	9009883a 	mov	r4,r18
 4020b04:	401a6800 	call	401a680 <_fflush_r>
 4020b08:	10000d1e 	bne	r2,zero,4020b40 <__sbprintf+0xb4>
 4020b0c:	d881030b 	ldhu	r2,1036(sp)
 4020b10:	1080100c 	andi	r2,r2,64
 4020b14:	10000326 	beq	r2,zero,4020b24 <__sbprintf+0x98>
 4020b18:	8080030b 	ldhu	r2,12(r16)
 4020b1c:	10801014 	ori	r2,r2,64
 4020b20:	8080030d 	sth	r2,12(r16)
 4020b24:	8805883a 	mov	r2,r17
 4020b28:	dfc11d17 	ldw	ra,1140(sp)
 4020b2c:	dc811c17 	ldw	r18,1136(sp)
 4020b30:	dc411b17 	ldw	r17,1132(sp)
 4020b34:	dc011a17 	ldw	r16,1128(sp)
 4020b38:	dec11e04 	addi	sp,sp,1144
 4020b3c:	f800283a 	ret
 4020b40:	047fffc4 	movi	r17,-1
 4020b44:	003ff106 	br	4020b0c <__alt_mem_onchip_memory2_0+0xfc01b94c>

04020b48 <__swbuf_r>:
 4020b48:	defffb04 	addi	sp,sp,-20
 4020b4c:	dcc00315 	stw	r19,12(sp)
 4020b50:	dc800215 	stw	r18,8(sp)
 4020b54:	dc000015 	stw	r16,0(sp)
 4020b58:	dfc00415 	stw	ra,16(sp)
 4020b5c:	dc400115 	stw	r17,4(sp)
 4020b60:	2025883a 	mov	r18,r4
 4020b64:	2827883a 	mov	r19,r5
 4020b68:	3021883a 	mov	r16,r6
 4020b6c:	20000226 	beq	r4,zero,4020b78 <__swbuf_r+0x30>
 4020b70:	20800e17 	ldw	r2,56(r4)
 4020b74:	10004226 	beq	r2,zero,4020c80 <__swbuf_r+0x138>
 4020b78:	80800617 	ldw	r2,24(r16)
 4020b7c:	8100030b 	ldhu	r4,12(r16)
 4020b80:	80800215 	stw	r2,8(r16)
 4020b84:	2080020c 	andi	r2,r4,8
 4020b88:	10003626 	beq	r2,zero,4020c64 <__swbuf_r+0x11c>
 4020b8c:	80c00417 	ldw	r3,16(r16)
 4020b90:	18003426 	beq	r3,zero,4020c64 <__swbuf_r+0x11c>
 4020b94:	2088000c 	andi	r2,r4,8192
 4020b98:	9c403fcc 	andi	r17,r19,255
 4020b9c:	10001a26 	beq	r2,zero,4020c08 <__swbuf_r+0xc0>
 4020ba0:	80800017 	ldw	r2,0(r16)
 4020ba4:	81000517 	ldw	r4,20(r16)
 4020ba8:	10c7c83a 	sub	r3,r2,r3
 4020bac:	1900200e 	bge	r3,r4,4020c30 <__swbuf_r+0xe8>
 4020bb0:	18c00044 	addi	r3,r3,1
 4020bb4:	81000217 	ldw	r4,8(r16)
 4020bb8:	11400044 	addi	r5,r2,1
 4020bbc:	81400015 	stw	r5,0(r16)
 4020bc0:	213fffc4 	addi	r4,r4,-1
 4020bc4:	81000215 	stw	r4,8(r16)
 4020bc8:	14c00005 	stb	r19,0(r2)
 4020bcc:	80800517 	ldw	r2,20(r16)
 4020bd0:	10c01e26 	beq	r2,r3,4020c4c <__swbuf_r+0x104>
 4020bd4:	8080030b 	ldhu	r2,12(r16)
 4020bd8:	1080004c 	andi	r2,r2,1
 4020bdc:	10000226 	beq	r2,zero,4020be8 <__swbuf_r+0xa0>
 4020be0:	00800284 	movi	r2,10
 4020be4:	88801926 	beq	r17,r2,4020c4c <__swbuf_r+0x104>
 4020be8:	8805883a 	mov	r2,r17
 4020bec:	dfc00417 	ldw	ra,16(sp)
 4020bf0:	dcc00317 	ldw	r19,12(sp)
 4020bf4:	dc800217 	ldw	r18,8(sp)
 4020bf8:	dc400117 	ldw	r17,4(sp)
 4020bfc:	dc000017 	ldw	r16,0(sp)
 4020c00:	dec00504 	addi	sp,sp,20
 4020c04:	f800283a 	ret
 4020c08:	81401917 	ldw	r5,100(r16)
 4020c0c:	00b7ffc4 	movi	r2,-8193
 4020c10:	21080014 	ori	r4,r4,8192
 4020c14:	2884703a 	and	r2,r5,r2
 4020c18:	80801915 	stw	r2,100(r16)
 4020c1c:	80800017 	ldw	r2,0(r16)
 4020c20:	8100030d 	sth	r4,12(r16)
 4020c24:	81000517 	ldw	r4,20(r16)
 4020c28:	10c7c83a 	sub	r3,r2,r3
 4020c2c:	193fe016 	blt	r3,r4,4020bb0 <__alt_mem_onchip_memory2_0+0xfc01b9f0>
 4020c30:	800b883a 	mov	r5,r16
 4020c34:	9009883a 	mov	r4,r18
 4020c38:	401a6800 	call	401a680 <_fflush_r>
 4020c3c:	1000071e 	bne	r2,zero,4020c5c <__swbuf_r+0x114>
 4020c40:	80800017 	ldw	r2,0(r16)
 4020c44:	00c00044 	movi	r3,1
 4020c48:	003fda06 	br	4020bb4 <__alt_mem_onchip_memory2_0+0xfc01b9f4>
 4020c4c:	800b883a 	mov	r5,r16
 4020c50:	9009883a 	mov	r4,r18
 4020c54:	401a6800 	call	401a680 <_fflush_r>
 4020c58:	103fe326 	beq	r2,zero,4020be8 <__alt_mem_onchip_memory2_0+0xfc01ba28>
 4020c5c:	00bfffc4 	movi	r2,-1
 4020c60:	003fe206 	br	4020bec <__alt_mem_onchip_memory2_0+0xfc01ba2c>
 4020c64:	800b883a 	mov	r5,r16
 4020c68:	9009883a 	mov	r4,r18
 4020c6c:	4018a600 	call	4018a60 <__swsetup_r>
 4020c70:	103ffa1e 	bne	r2,zero,4020c5c <__alt_mem_onchip_memory2_0+0xfc01ba9c>
 4020c74:	8100030b 	ldhu	r4,12(r16)
 4020c78:	80c00417 	ldw	r3,16(r16)
 4020c7c:	003fc506 	br	4020b94 <__alt_mem_onchip_memory2_0+0xfc01b9d4>
 4020c80:	401aa6c0 	call	401aa6c <__sinit>
 4020c84:	003fbc06 	br	4020b78 <__alt_mem_onchip_memory2_0+0xfc01b9b8>

04020c88 <__swbuf>:
 4020c88:	008100b4 	movhi	r2,1026
 4020c8c:	109ddd04 	addi	r2,r2,30580
 4020c90:	280d883a 	mov	r6,r5
 4020c94:	200b883a 	mov	r5,r4
 4020c98:	11000017 	ldw	r4,0(r2)
 4020c9c:	4020b481 	jmpi	4020b48 <__swbuf_r>

04020ca0 <_write_r>:
 4020ca0:	defffd04 	addi	sp,sp,-12
 4020ca4:	2805883a 	mov	r2,r5
 4020ca8:	dc000015 	stw	r16,0(sp)
 4020cac:	040100f4 	movhi	r16,1027
 4020cb0:	dc400115 	stw	r17,4(sp)
 4020cb4:	300b883a 	mov	r5,r6
 4020cb8:	8425de04 	addi	r16,r16,-26760
 4020cbc:	2023883a 	mov	r17,r4
 4020cc0:	380d883a 	mov	r6,r7
 4020cc4:	1009883a 	mov	r4,r2
 4020cc8:	dfc00215 	stw	ra,8(sp)
 4020ccc:	80000015 	stw	zero,0(r16)
 4020cd0:	40230cc0 	call	40230cc <write>
 4020cd4:	00ffffc4 	movi	r3,-1
 4020cd8:	10c00526 	beq	r2,r3,4020cf0 <_write_r+0x50>
 4020cdc:	dfc00217 	ldw	ra,8(sp)
 4020ce0:	dc400117 	ldw	r17,4(sp)
 4020ce4:	dc000017 	ldw	r16,0(sp)
 4020ce8:	dec00304 	addi	sp,sp,12
 4020cec:	f800283a 	ret
 4020cf0:	80c00017 	ldw	r3,0(r16)
 4020cf4:	183ff926 	beq	r3,zero,4020cdc <__alt_mem_onchip_memory2_0+0xfc01bb1c>
 4020cf8:	88c00015 	stw	r3,0(r17)
 4020cfc:	003ff706 	br	4020cdc <__alt_mem_onchip_memory2_0+0xfc01bb1c>

04020d00 <_close_r>:
 4020d00:	defffd04 	addi	sp,sp,-12
 4020d04:	dc000015 	stw	r16,0(sp)
 4020d08:	040100f4 	movhi	r16,1027
 4020d0c:	dc400115 	stw	r17,4(sp)
 4020d10:	8425de04 	addi	r16,r16,-26760
 4020d14:	2023883a 	mov	r17,r4
 4020d18:	2809883a 	mov	r4,r5
 4020d1c:	dfc00215 	stw	ra,8(sp)
 4020d20:	80000015 	stw	zero,0(r16)
 4020d24:	40222440 	call	4022244 <close>
 4020d28:	00ffffc4 	movi	r3,-1
 4020d2c:	10c00526 	beq	r2,r3,4020d44 <_close_r+0x44>
 4020d30:	dfc00217 	ldw	ra,8(sp)
 4020d34:	dc400117 	ldw	r17,4(sp)
 4020d38:	dc000017 	ldw	r16,0(sp)
 4020d3c:	dec00304 	addi	sp,sp,12
 4020d40:	f800283a 	ret
 4020d44:	80c00017 	ldw	r3,0(r16)
 4020d48:	183ff926 	beq	r3,zero,4020d30 <__alt_mem_onchip_memory2_0+0xfc01bb70>
 4020d4c:	88c00015 	stw	r3,0(r17)
 4020d50:	003ff706 	br	4020d30 <__alt_mem_onchip_memory2_0+0xfc01bb70>

04020d54 <_calloc_r>:
 4020d54:	defffe04 	addi	sp,sp,-8
 4020d58:	2805883a 	mov	r2,r5
 4020d5c:	dc000015 	stw	r16,0(sp)
 4020d60:	300b883a 	mov	r5,r6
 4020d64:	2021883a 	mov	r16,r4
 4020d68:	1009883a 	mov	r4,r2
 4020d6c:	dfc00115 	stw	ra,4(sp)
 4020d70:	40118340 	call	4011834 <__mulsi3>
 4020d74:	100b883a 	mov	r5,r2
 4020d78:	8009883a 	mov	r4,r16
 4020d7c:	401b8340 	call	401b834 <_malloc_r>
 4020d80:	10002926 	beq	r2,zero,4020e28 <_calloc_r+0xd4>
 4020d84:	11bfff17 	ldw	r6,-4(r2)
 4020d88:	1021883a 	mov	r16,r2
 4020d8c:	00bfff04 	movi	r2,-4
 4020d90:	308c703a 	and	r6,r6,r2
 4020d94:	00c00904 	movi	r3,36
 4020d98:	308d883a 	add	r6,r6,r2
 4020d9c:	19801636 	bltu	r3,r6,4020df8 <_calloc_r+0xa4>
 4020da0:	008004c4 	movi	r2,19
 4020da4:	11800b2e 	bgeu	r2,r6,4020dd4 <_calloc_r+0x80>
 4020da8:	80000015 	stw	zero,0(r16)
 4020dac:	80000115 	stw	zero,4(r16)
 4020db0:	008006c4 	movi	r2,27
 4020db4:	11801a2e 	bgeu	r2,r6,4020e20 <_calloc_r+0xcc>
 4020db8:	80000215 	stw	zero,8(r16)
 4020dbc:	80000315 	stw	zero,12(r16)
 4020dc0:	30c0151e 	bne	r6,r3,4020e18 <_calloc_r+0xc4>
 4020dc4:	80000415 	stw	zero,16(r16)
 4020dc8:	80800604 	addi	r2,r16,24
 4020dcc:	80000515 	stw	zero,20(r16)
 4020dd0:	00000106 	br	4020dd8 <_calloc_r+0x84>
 4020dd4:	8005883a 	mov	r2,r16
 4020dd8:	10000015 	stw	zero,0(r2)
 4020ddc:	10000115 	stw	zero,4(r2)
 4020de0:	10000215 	stw	zero,8(r2)
 4020de4:	8005883a 	mov	r2,r16
 4020de8:	dfc00117 	ldw	ra,4(sp)
 4020dec:	dc000017 	ldw	r16,0(sp)
 4020df0:	dec00204 	addi	sp,sp,8
 4020df4:	f800283a 	ret
 4020df8:	000b883a 	mov	r5,zero
 4020dfc:	8009883a 	mov	r4,r16
 4020e00:	401c3c80 	call	401c3c8 <memset>
 4020e04:	8005883a 	mov	r2,r16
 4020e08:	dfc00117 	ldw	ra,4(sp)
 4020e0c:	dc000017 	ldw	r16,0(sp)
 4020e10:	dec00204 	addi	sp,sp,8
 4020e14:	f800283a 	ret
 4020e18:	80800404 	addi	r2,r16,16
 4020e1c:	003fee06 	br	4020dd8 <__alt_mem_onchip_memory2_0+0xfc01bc18>
 4020e20:	80800204 	addi	r2,r16,8
 4020e24:	003fec06 	br	4020dd8 <__alt_mem_onchip_memory2_0+0xfc01bc18>
 4020e28:	0005883a 	mov	r2,zero
 4020e2c:	003fee06 	br	4020de8 <__alt_mem_onchip_memory2_0+0xfc01bc28>

04020e30 <_fclose_r>:
 4020e30:	28003926 	beq	r5,zero,4020f18 <_fclose_r+0xe8>
 4020e34:	defffc04 	addi	sp,sp,-16
 4020e38:	dc400115 	stw	r17,4(sp)
 4020e3c:	dc000015 	stw	r16,0(sp)
 4020e40:	dfc00315 	stw	ra,12(sp)
 4020e44:	dc800215 	stw	r18,8(sp)
 4020e48:	2023883a 	mov	r17,r4
 4020e4c:	2821883a 	mov	r16,r5
 4020e50:	20000226 	beq	r4,zero,4020e5c <_fclose_r+0x2c>
 4020e54:	20800e17 	ldw	r2,56(r4)
 4020e58:	10002726 	beq	r2,zero,4020ef8 <_fclose_r+0xc8>
 4020e5c:	8080030f 	ldh	r2,12(r16)
 4020e60:	1000071e 	bne	r2,zero,4020e80 <_fclose_r+0x50>
 4020e64:	0005883a 	mov	r2,zero
 4020e68:	dfc00317 	ldw	ra,12(sp)
 4020e6c:	dc800217 	ldw	r18,8(sp)
 4020e70:	dc400117 	ldw	r17,4(sp)
 4020e74:	dc000017 	ldw	r16,0(sp)
 4020e78:	dec00404 	addi	sp,sp,16
 4020e7c:	f800283a 	ret
 4020e80:	800b883a 	mov	r5,r16
 4020e84:	8809883a 	mov	r4,r17
 4020e88:	401a4640 	call	401a464 <__sflush_r>
 4020e8c:	1025883a 	mov	r18,r2
 4020e90:	80800b17 	ldw	r2,44(r16)
 4020e94:	10000426 	beq	r2,zero,4020ea8 <_fclose_r+0x78>
 4020e98:	81400717 	ldw	r5,28(r16)
 4020e9c:	8809883a 	mov	r4,r17
 4020ea0:	103ee83a 	callr	r2
 4020ea4:	10001616 	blt	r2,zero,4020f00 <_fclose_r+0xd0>
 4020ea8:	8080030b 	ldhu	r2,12(r16)
 4020eac:	1080200c 	andi	r2,r2,128
 4020eb0:	1000151e 	bne	r2,zero,4020f08 <_fclose_r+0xd8>
 4020eb4:	81400c17 	ldw	r5,48(r16)
 4020eb8:	28000526 	beq	r5,zero,4020ed0 <_fclose_r+0xa0>
 4020ebc:	80801004 	addi	r2,r16,64
 4020ec0:	28800226 	beq	r5,r2,4020ecc <_fclose_r+0x9c>
 4020ec4:	8809883a 	mov	r4,r17
 4020ec8:	401abe00 	call	401abe0 <_free_r>
 4020ecc:	80000c15 	stw	zero,48(r16)
 4020ed0:	81401117 	ldw	r5,68(r16)
 4020ed4:	28000326 	beq	r5,zero,4020ee4 <_fclose_r+0xb4>
 4020ed8:	8809883a 	mov	r4,r17
 4020edc:	401abe00 	call	401abe0 <_free_r>
 4020ee0:	80001115 	stw	zero,68(r16)
 4020ee4:	401aa7c0 	call	401aa7c <__sfp_lock_acquire>
 4020ee8:	8000030d 	sth	zero,12(r16)
 4020eec:	401aa800 	call	401aa80 <__sfp_lock_release>
 4020ef0:	9005883a 	mov	r2,r18
 4020ef4:	003fdc06 	br	4020e68 <__alt_mem_onchip_memory2_0+0xfc01bca8>
 4020ef8:	401aa6c0 	call	401aa6c <__sinit>
 4020efc:	003fd706 	br	4020e5c <__alt_mem_onchip_memory2_0+0xfc01bc9c>
 4020f00:	04bfffc4 	movi	r18,-1
 4020f04:	003fe806 	br	4020ea8 <__alt_mem_onchip_memory2_0+0xfc01bce8>
 4020f08:	81400417 	ldw	r5,16(r16)
 4020f0c:	8809883a 	mov	r4,r17
 4020f10:	401abe00 	call	401abe0 <_free_r>
 4020f14:	003fe706 	br	4020eb4 <__alt_mem_onchip_memory2_0+0xfc01bcf4>
 4020f18:	0005883a 	mov	r2,zero
 4020f1c:	f800283a 	ret

04020f20 <fclose>:
 4020f20:	008100b4 	movhi	r2,1026
 4020f24:	109ddd04 	addi	r2,r2,30580
 4020f28:	200b883a 	mov	r5,r4
 4020f2c:	11000017 	ldw	r4,0(r2)
 4020f30:	4020e301 	jmpi	4020e30 <_fclose_r>

04020f34 <__fputwc>:
 4020f34:	defff804 	addi	sp,sp,-32
 4020f38:	dcc00415 	stw	r19,16(sp)
 4020f3c:	dc800315 	stw	r18,12(sp)
 4020f40:	dc000115 	stw	r16,4(sp)
 4020f44:	dfc00715 	stw	ra,28(sp)
 4020f48:	dd400615 	stw	r21,24(sp)
 4020f4c:	dd000515 	stw	r20,20(sp)
 4020f50:	dc400215 	stw	r17,8(sp)
 4020f54:	2027883a 	mov	r19,r4
 4020f58:	2825883a 	mov	r18,r5
 4020f5c:	3021883a 	mov	r16,r6
 4020f60:	401b6240 	call	401b624 <__locale_mb_cur_max>
 4020f64:	00c00044 	movi	r3,1
 4020f68:	10c03e26 	beq	r2,r3,4021064 <__fputwc+0x130>
 4020f6c:	81c01704 	addi	r7,r16,92
 4020f70:	900d883a 	mov	r6,r18
 4020f74:	d80b883a 	mov	r5,sp
 4020f78:	9809883a 	mov	r4,r19
 4020f7c:	40212ac0 	call	40212ac <_wcrtomb_r>
 4020f80:	1029883a 	mov	r20,r2
 4020f84:	00bfffc4 	movi	r2,-1
 4020f88:	a0802026 	beq	r20,r2,402100c <__fputwc+0xd8>
 4020f8c:	d9400003 	ldbu	r5,0(sp)
 4020f90:	a0001c26 	beq	r20,zero,4021004 <__fputwc+0xd0>
 4020f94:	0023883a 	mov	r17,zero
 4020f98:	05400284 	movi	r21,10
 4020f9c:	00000906 	br	4020fc4 <__fputwc+0x90>
 4020fa0:	80800017 	ldw	r2,0(r16)
 4020fa4:	11400005 	stb	r5,0(r2)
 4020fa8:	80c00017 	ldw	r3,0(r16)
 4020fac:	18c00044 	addi	r3,r3,1
 4020fb0:	80c00015 	stw	r3,0(r16)
 4020fb4:	8c400044 	addi	r17,r17,1
 4020fb8:	dc45883a 	add	r2,sp,r17
 4020fbc:	8d00112e 	bgeu	r17,r20,4021004 <__fputwc+0xd0>
 4020fc0:	11400003 	ldbu	r5,0(r2)
 4020fc4:	80c00217 	ldw	r3,8(r16)
 4020fc8:	18ffffc4 	addi	r3,r3,-1
 4020fcc:	80c00215 	stw	r3,8(r16)
 4020fd0:	183ff30e 	bge	r3,zero,4020fa0 <__alt_mem_onchip_memory2_0+0xfc01bde0>
 4020fd4:	80800617 	ldw	r2,24(r16)
 4020fd8:	18801916 	blt	r3,r2,4021040 <__fputwc+0x10c>
 4020fdc:	80800017 	ldw	r2,0(r16)
 4020fe0:	11400005 	stb	r5,0(r2)
 4020fe4:	80800017 	ldw	r2,0(r16)
 4020fe8:	10c00003 	ldbu	r3,0(r2)
 4020fec:	10800044 	addi	r2,r2,1
 4020ff0:	1d402326 	beq	r3,r21,4021080 <__fputwc+0x14c>
 4020ff4:	80800015 	stw	r2,0(r16)
 4020ff8:	8c400044 	addi	r17,r17,1
 4020ffc:	dc45883a 	add	r2,sp,r17
 4021000:	8d3fef36 	bltu	r17,r20,4020fc0 <__alt_mem_onchip_memory2_0+0xfc01be00>
 4021004:	9005883a 	mov	r2,r18
 4021008:	00000406 	br	402101c <__fputwc+0xe8>
 402100c:	80c0030b 	ldhu	r3,12(r16)
 4021010:	a005883a 	mov	r2,r20
 4021014:	18c01014 	ori	r3,r3,64
 4021018:	80c0030d 	sth	r3,12(r16)
 402101c:	dfc00717 	ldw	ra,28(sp)
 4021020:	dd400617 	ldw	r21,24(sp)
 4021024:	dd000517 	ldw	r20,20(sp)
 4021028:	dcc00417 	ldw	r19,16(sp)
 402102c:	dc800317 	ldw	r18,12(sp)
 4021030:	dc400217 	ldw	r17,8(sp)
 4021034:	dc000117 	ldw	r16,4(sp)
 4021038:	dec00804 	addi	sp,sp,32
 402103c:	f800283a 	ret
 4021040:	800d883a 	mov	r6,r16
 4021044:	29403fcc 	andi	r5,r5,255
 4021048:	9809883a 	mov	r4,r19
 402104c:	4020b480 	call	4020b48 <__swbuf_r>
 4021050:	10bfffe0 	cmpeqi	r2,r2,-1
 4021054:	10803fcc 	andi	r2,r2,255
 4021058:	103fd626 	beq	r2,zero,4020fb4 <__alt_mem_onchip_memory2_0+0xfc01bdf4>
 402105c:	00bfffc4 	movi	r2,-1
 4021060:	003fee06 	br	402101c <__alt_mem_onchip_memory2_0+0xfc01be5c>
 4021064:	90ffffc4 	addi	r3,r18,-1
 4021068:	01003f84 	movi	r4,254
 402106c:	20ffbf36 	bltu	r4,r3,4020f6c <__alt_mem_onchip_memory2_0+0xfc01bdac>
 4021070:	900b883a 	mov	r5,r18
 4021074:	dc800005 	stb	r18,0(sp)
 4021078:	1029883a 	mov	r20,r2
 402107c:	003fc506 	br	4020f94 <__alt_mem_onchip_memory2_0+0xfc01bdd4>
 4021080:	800d883a 	mov	r6,r16
 4021084:	a80b883a 	mov	r5,r21
 4021088:	9809883a 	mov	r4,r19
 402108c:	4020b480 	call	4020b48 <__swbuf_r>
 4021090:	10bfffe0 	cmpeqi	r2,r2,-1
 4021094:	003fef06 	br	4021054 <__alt_mem_onchip_memory2_0+0xfc01be94>

04021098 <_fputwc_r>:
 4021098:	3080030b 	ldhu	r2,12(r6)
 402109c:	10c8000c 	andi	r3,r2,8192
 40210a0:	1800051e 	bne	r3,zero,40210b8 <_fputwc_r+0x20>
 40210a4:	30c01917 	ldw	r3,100(r6)
 40210a8:	10880014 	ori	r2,r2,8192
 40210ac:	3080030d 	sth	r2,12(r6)
 40210b0:	18880014 	ori	r2,r3,8192
 40210b4:	30801915 	stw	r2,100(r6)
 40210b8:	4020f341 	jmpi	4020f34 <__fputwc>

040210bc <fputwc>:
 40210bc:	008100b4 	movhi	r2,1026
 40210c0:	defffc04 	addi	sp,sp,-16
 40210c4:	109ddd04 	addi	r2,r2,30580
 40210c8:	dc000115 	stw	r16,4(sp)
 40210cc:	14000017 	ldw	r16,0(r2)
 40210d0:	dc400215 	stw	r17,8(sp)
 40210d4:	dfc00315 	stw	ra,12(sp)
 40210d8:	2023883a 	mov	r17,r4
 40210dc:	80000226 	beq	r16,zero,40210e8 <fputwc+0x2c>
 40210e0:	80800e17 	ldw	r2,56(r16)
 40210e4:	10001026 	beq	r2,zero,4021128 <fputwc+0x6c>
 40210e8:	2880030b 	ldhu	r2,12(r5)
 40210ec:	10c8000c 	andi	r3,r2,8192
 40210f0:	1800051e 	bne	r3,zero,4021108 <fputwc+0x4c>
 40210f4:	28c01917 	ldw	r3,100(r5)
 40210f8:	10880014 	ori	r2,r2,8192
 40210fc:	2880030d 	sth	r2,12(r5)
 4021100:	18880014 	ori	r2,r3,8192
 4021104:	28801915 	stw	r2,100(r5)
 4021108:	280d883a 	mov	r6,r5
 402110c:	8009883a 	mov	r4,r16
 4021110:	880b883a 	mov	r5,r17
 4021114:	dfc00317 	ldw	ra,12(sp)
 4021118:	dc400217 	ldw	r17,8(sp)
 402111c:	dc000117 	ldw	r16,4(sp)
 4021120:	dec00404 	addi	sp,sp,16
 4021124:	4020f341 	jmpi	4020f34 <__fputwc>
 4021128:	8009883a 	mov	r4,r16
 402112c:	d9400015 	stw	r5,0(sp)
 4021130:	401aa6c0 	call	401aa6c <__sinit>
 4021134:	d9400017 	ldw	r5,0(sp)
 4021138:	003feb06 	br	40210e8 <__alt_mem_onchip_memory2_0+0xfc01bf28>

0402113c <_fstat_r>:
 402113c:	defffd04 	addi	sp,sp,-12
 4021140:	2805883a 	mov	r2,r5
 4021144:	dc000015 	stw	r16,0(sp)
 4021148:	040100f4 	movhi	r16,1027
 402114c:	dc400115 	stw	r17,4(sp)
 4021150:	8425de04 	addi	r16,r16,-26760
 4021154:	2023883a 	mov	r17,r4
 4021158:	300b883a 	mov	r5,r6
 402115c:	1009883a 	mov	r4,r2
 4021160:	dfc00215 	stw	ra,8(sp)
 4021164:	80000015 	stw	zero,0(r16)
 4021168:	40223840 	call	4022384 <fstat>
 402116c:	00ffffc4 	movi	r3,-1
 4021170:	10c00526 	beq	r2,r3,4021188 <_fstat_r+0x4c>
 4021174:	dfc00217 	ldw	ra,8(sp)
 4021178:	dc400117 	ldw	r17,4(sp)
 402117c:	dc000017 	ldw	r16,0(sp)
 4021180:	dec00304 	addi	sp,sp,12
 4021184:	f800283a 	ret
 4021188:	80c00017 	ldw	r3,0(r16)
 402118c:	183ff926 	beq	r3,zero,4021174 <__alt_mem_onchip_memory2_0+0xfc01bfb4>
 4021190:	88c00015 	stw	r3,0(r17)
 4021194:	003ff706 	br	4021174 <__alt_mem_onchip_memory2_0+0xfc01bfb4>

04021198 <_isatty_r>:
 4021198:	defffd04 	addi	sp,sp,-12
 402119c:	dc000015 	stw	r16,0(sp)
 40211a0:	040100f4 	movhi	r16,1027
 40211a4:	dc400115 	stw	r17,4(sp)
 40211a8:	8425de04 	addi	r16,r16,-26760
 40211ac:	2023883a 	mov	r17,r4
 40211b0:	2809883a 	mov	r4,r5
 40211b4:	dfc00215 	stw	ra,8(sp)
 40211b8:	80000015 	stw	zero,0(r16)
 40211bc:	402266c0 	call	402266c <isatty>
 40211c0:	00ffffc4 	movi	r3,-1
 40211c4:	10c00526 	beq	r2,r3,40211dc <_isatty_r+0x44>
 40211c8:	dfc00217 	ldw	ra,8(sp)
 40211cc:	dc400117 	ldw	r17,4(sp)
 40211d0:	dc000017 	ldw	r16,0(sp)
 40211d4:	dec00304 	addi	sp,sp,12
 40211d8:	f800283a 	ret
 40211dc:	80c00017 	ldw	r3,0(r16)
 40211e0:	183ff926 	beq	r3,zero,40211c8 <__alt_mem_onchip_memory2_0+0xfc01c008>
 40211e4:	88c00015 	stw	r3,0(r17)
 40211e8:	003ff706 	br	40211c8 <__alt_mem_onchip_memory2_0+0xfc01c008>

040211ec <_lseek_r>:
 40211ec:	defffd04 	addi	sp,sp,-12
 40211f0:	2805883a 	mov	r2,r5
 40211f4:	dc000015 	stw	r16,0(sp)
 40211f8:	040100f4 	movhi	r16,1027
 40211fc:	dc400115 	stw	r17,4(sp)
 4021200:	300b883a 	mov	r5,r6
 4021204:	8425de04 	addi	r16,r16,-26760
 4021208:	2023883a 	mov	r17,r4
 402120c:	380d883a 	mov	r6,r7
 4021210:	1009883a 	mov	r4,r2
 4021214:	dfc00215 	stw	ra,8(sp)
 4021218:	80000015 	stw	zero,0(r16)
 402121c:	40228400 	call	4022840 <lseek>
 4021220:	00ffffc4 	movi	r3,-1
 4021224:	10c00526 	beq	r2,r3,402123c <_lseek_r+0x50>
 4021228:	dfc00217 	ldw	ra,8(sp)
 402122c:	dc400117 	ldw	r17,4(sp)
 4021230:	dc000017 	ldw	r16,0(sp)
 4021234:	dec00304 	addi	sp,sp,12
 4021238:	f800283a 	ret
 402123c:	80c00017 	ldw	r3,0(r16)
 4021240:	183ff926 	beq	r3,zero,4021228 <__alt_mem_onchip_memory2_0+0xfc01c068>
 4021244:	88c00015 	stw	r3,0(r17)
 4021248:	003ff706 	br	4021228 <__alt_mem_onchip_memory2_0+0xfc01c068>

0402124c <_read_r>:
 402124c:	defffd04 	addi	sp,sp,-12
 4021250:	2805883a 	mov	r2,r5
 4021254:	dc000015 	stw	r16,0(sp)
 4021258:	040100f4 	movhi	r16,1027
 402125c:	dc400115 	stw	r17,4(sp)
 4021260:	300b883a 	mov	r5,r6
 4021264:	8425de04 	addi	r16,r16,-26760
 4021268:	2023883a 	mov	r17,r4
 402126c:	380d883a 	mov	r6,r7
 4021270:	1009883a 	mov	r4,r2
 4021274:	dfc00215 	stw	ra,8(sp)
 4021278:	80000015 	stw	zero,0(r16)
 402127c:	4022c840 	call	4022c84 <read>
 4021280:	00ffffc4 	movi	r3,-1
 4021284:	10c00526 	beq	r2,r3,402129c <_read_r+0x50>
 4021288:	dfc00217 	ldw	ra,8(sp)
 402128c:	dc400117 	ldw	r17,4(sp)
 4021290:	dc000017 	ldw	r16,0(sp)
 4021294:	dec00304 	addi	sp,sp,12
 4021298:	f800283a 	ret
 402129c:	80c00017 	ldw	r3,0(r16)
 40212a0:	183ff926 	beq	r3,zero,4021288 <__alt_mem_onchip_memory2_0+0xfc01c0c8>
 40212a4:	88c00015 	stw	r3,0(r17)
 40212a8:	003ff706 	br	4021288 <__alt_mem_onchip_memory2_0+0xfc01c0c8>

040212ac <_wcrtomb_r>:
 40212ac:	defff604 	addi	sp,sp,-40
 40212b0:	008100b4 	movhi	r2,1026
 40212b4:	dc800815 	stw	r18,32(sp)
 40212b8:	dc400715 	stw	r17,28(sp)
 40212bc:	dc000615 	stw	r16,24(sp)
 40212c0:	109de104 	addi	r2,r2,30596
 40212c4:	dfc00915 	stw	ra,36(sp)
 40212c8:	2021883a 	mov	r16,r4
 40212cc:	3823883a 	mov	r17,r7
 40212d0:	14800017 	ldw	r18,0(r2)
 40212d4:	28001426 	beq	r5,zero,4021328 <_wcrtomb_r+0x7c>
 40212d8:	d9400415 	stw	r5,16(sp)
 40212dc:	d9800515 	stw	r6,20(sp)
 40212e0:	401b6180 	call	401b618 <__locale_charset>
 40212e4:	d9800517 	ldw	r6,20(sp)
 40212e8:	d9400417 	ldw	r5,16(sp)
 40212ec:	100f883a 	mov	r7,r2
 40212f0:	dc400015 	stw	r17,0(sp)
 40212f4:	8009883a 	mov	r4,r16
 40212f8:	903ee83a 	callr	r18
 40212fc:	00ffffc4 	movi	r3,-1
 4021300:	10c0031e 	bne	r2,r3,4021310 <_wcrtomb_r+0x64>
 4021304:	88000015 	stw	zero,0(r17)
 4021308:	00c02284 	movi	r3,138
 402130c:	80c00015 	stw	r3,0(r16)
 4021310:	dfc00917 	ldw	ra,36(sp)
 4021314:	dc800817 	ldw	r18,32(sp)
 4021318:	dc400717 	ldw	r17,28(sp)
 402131c:	dc000617 	ldw	r16,24(sp)
 4021320:	dec00a04 	addi	sp,sp,40
 4021324:	f800283a 	ret
 4021328:	401b6180 	call	401b618 <__locale_charset>
 402132c:	100f883a 	mov	r7,r2
 4021330:	dc400015 	stw	r17,0(sp)
 4021334:	000d883a 	mov	r6,zero
 4021338:	d9400104 	addi	r5,sp,4
 402133c:	8009883a 	mov	r4,r16
 4021340:	903ee83a 	callr	r18
 4021344:	003fed06 	br	40212fc <__alt_mem_onchip_memory2_0+0xfc01c13c>

04021348 <wcrtomb>:
 4021348:	defff604 	addi	sp,sp,-40
 402134c:	008100b4 	movhi	r2,1026
 4021350:	dc800615 	stw	r18,24(sp)
 4021354:	dc400515 	stw	r17,20(sp)
 4021358:	109ddd04 	addi	r2,r2,30580
 402135c:	dfc00915 	stw	ra,36(sp)
 4021360:	dd000815 	stw	r20,32(sp)
 4021364:	dcc00715 	stw	r19,28(sp)
 4021368:	dc000415 	stw	r16,16(sp)
 402136c:	3025883a 	mov	r18,r6
 4021370:	14400017 	ldw	r17,0(r2)
 4021374:	20001926 	beq	r4,zero,40213dc <wcrtomb+0x94>
 4021378:	008100b4 	movhi	r2,1026
 402137c:	109de104 	addi	r2,r2,30596
 4021380:	15000017 	ldw	r20,0(r2)
 4021384:	2021883a 	mov	r16,r4
 4021388:	2827883a 	mov	r19,r5
 402138c:	401b6180 	call	401b618 <__locale_charset>
 4021390:	100f883a 	mov	r7,r2
 4021394:	dc800015 	stw	r18,0(sp)
 4021398:	980d883a 	mov	r6,r19
 402139c:	800b883a 	mov	r5,r16
 40213a0:	8809883a 	mov	r4,r17
 40213a4:	a03ee83a 	callr	r20
 40213a8:	00ffffc4 	movi	r3,-1
 40213ac:	10c0031e 	bne	r2,r3,40213bc <wcrtomb+0x74>
 40213b0:	90000015 	stw	zero,0(r18)
 40213b4:	00c02284 	movi	r3,138
 40213b8:	88c00015 	stw	r3,0(r17)
 40213bc:	dfc00917 	ldw	ra,36(sp)
 40213c0:	dd000817 	ldw	r20,32(sp)
 40213c4:	dcc00717 	ldw	r19,28(sp)
 40213c8:	dc800617 	ldw	r18,24(sp)
 40213cc:	dc400517 	ldw	r17,20(sp)
 40213d0:	dc000417 	ldw	r16,16(sp)
 40213d4:	dec00a04 	addi	sp,sp,40
 40213d8:	f800283a 	ret
 40213dc:	008100b4 	movhi	r2,1026
 40213e0:	109de104 	addi	r2,r2,30596
 40213e4:	14000017 	ldw	r16,0(r2)
 40213e8:	401b6180 	call	401b618 <__locale_charset>
 40213ec:	100f883a 	mov	r7,r2
 40213f0:	dc800015 	stw	r18,0(sp)
 40213f4:	000d883a 	mov	r6,zero
 40213f8:	d9400104 	addi	r5,sp,4
 40213fc:	8809883a 	mov	r4,r17
 4021400:	803ee83a 	callr	r16
 4021404:	003fe806 	br	40213a8 <__alt_mem_onchip_memory2_0+0xfc01c1e8>

04021408 <__ascii_wctomb>:
 4021408:	28000526 	beq	r5,zero,4021420 <__ascii_wctomb+0x18>
 402140c:	00803fc4 	movi	r2,255
 4021410:	11800536 	bltu	r2,r6,4021428 <__ascii_wctomb+0x20>
 4021414:	29800005 	stb	r6,0(r5)
 4021418:	00800044 	movi	r2,1
 402141c:	f800283a 	ret
 4021420:	0005883a 	mov	r2,zero
 4021424:	f800283a 	ret
 4021428:	00802284 	movi	r2,138
 402142c:	20800015 	stw	r2,0(r4)
 4021430:	00bfffc4 	movi	r2,-1
 4021434:	f800283a 	ret

04021438 <_wctomb_r>:
 4021438:	008100b4 	movhi	r2,1026
 402143c:	defff904 	addi	sp,sp,-28
 4021440:	109de104 	addi	r2,r2,30596
 4021444:	dfc00615 	stw	ra,24(sp)
 4021448:	dc400515 	stw	r17,20(sp)
 402144c:	dc000415 	stw	r16,16(sp)
 4021450:	3823883a 	mov	r17,r7
 4021454:	14000017 	ldw	r16,0(r2)
 4021458:	d9000115 	stw	r4,4(sp)
 402145c:	d9400215 	stw	r5,8(sp)
 4021460:	d9800315 	stw	r6,12(sp)
 4021464:	401b6180 	call	401b618 <__locale_charset>
 4021468:	d9800317 	ldw	r6,12(sp)
 402146c:	d9400217 	ldw	r5,8(sp)
 4021470:	d9000117 	ldw	r4,4(sp)
 4021474:	100f883a 	mov	r7,r2
 4021478:	dc400015 	stw	r17,0(sp)
 402147c:	803ee83a 	callr	r16
 4021480:	dfc00617 	ldw	ra,24(sp)
 4021484:	dc400517 	ldw	r17,20(sp)
 4021488:	dc000417 	ldw	r16,16(sp)
 402148c:	dec00704 	addi	sp,sp,28
 4021490:	f800283a 	ret

04021494 <__muldi3>:
 4021494:	defff604 	addi	sp,sp,-40
 4021498:	dd800615 	stw	r22,24(sp)
 402149c:	dd400515 	stw	r21,20(sp)
 40214a0:	dc400115 	stw	r17,4(sp)
 40214a4:	357fffcc 	andi	r21,r6,65535
 40214a8:	2022d43a 	srli	r17,r4,16
 40214ac:	25bfffcc 	andi	r22,r4,65535
 40214b0:	dcc00315 	stw	r19,12(sp)
 40214b4:	dc800215 	stw	r18,8(sp)
 40214b8:	2027883a 	mov	r19,r4
 40214bc:	2825883a 	mov	r18,r5
 40214c0:	b009883a 	mov	r4,r22
 40214c4:	a80b883a 	mov	r5,r21
 40214c8:	dfc00915 	stw	ra,36(sp)
 40214cc:	df000815 	stw	fp,32(sp)
 40214d0:	ddc00715 	stw	r23,28(sp)
 40214d4:	3839883a 	mov	fp,r7
 40214d8:	302ed43a 	srli	r23,r6,16
 40214dc:	dd000415 	stw	r20,16(sp)
 40214e0:	dc000015 	stw	r16,0(sp)
 40214e4:	3029883a 	mov	r20,r6
 40214e8:	40118340 	call	4011834 <__mulsi3>
 40214ec:	a80b883a 	mov	r5,r21
 40214f0:	8809883a 	mov	r4,r17
 40214f4:	1021883a 	mov	r16,r2
 40214f8:	40118340 	call	4011834 <__mulsi3>
 40214fc:	8809883a 	mov	r4,r17
 4021500:	b80b883a 	mov	r5,r23
 4021504:	102b883a 	mov	r21,r2
 4021508:	40118340 	call	4011834 <__mulsi3>
 402150c:	b80b883a 	mov	r5,r23
 4021510:	b009883a 	mov	r4,r22
 4021514:	1023883a 	mov	r17,r2
 4021518:	40118340 	call	4011834 <__mulsi3>
 402151c:	8006d43a 	srli	r3,r16,16
 4021520:	1545883a 	add	r2,r2,r21
 4021524:	1885883a 	add	r2,r3,r2
 4021528:	1540022e 	bgeu	r2,r21,4021534 <__muldi3+0xa0>
 402152c:	00c00074 	movhi	r3,1
 4021530:	88e3883a 	add	r17,r17,r3
 4021534:	1006d43a 	srli	r3,r2,16
 4021538:	1004943a 	slli	r2,r2,16
 402153c:	e00b883a 	mov	r5,fp
 4021540:	9809883a 	mov	r4,r19
 4021544:	843fffcc 	andi	r16,r16,65535
 4021548:	1c63883a 	add	r17,r3,r17
 402154c:	1421883a 	add	r16,r2,r16
 4021550:	40118340 	call	4011834 <__mulsi3>
 4021554:	900b883a 	mov	r5,r18
 4021558:	a009883a 	mov	r4,r20
 402155c:	1027883a 	mov	r19,r2
 4021560:	40118340 	call	4011834 <__mulsi3>
 4021564:	9885883a 	add	r2,r19,r2
 4021568:	1447883a 	add	r3,r2,r17
 402156c:	8005883a 	mov	r2,r16
 4021570:	dfc00917 	ldw	ra,36(sp)
 4021574:	df000817 	ldw	fp,32(sp)
 4021578:	ddc00717 	ldw	r23,28(sp)
 402157c:	dd800617 	ldw	r22,24(sp)
 4021580:	dd400517 	ldw	r21,20(sp)
 4021584:	dd000417 	ldw	r20,16(sp)
 4021588:	dcc00317 	ldw	r19,12(sp)
 402158c:	dc800217 	ldw	r18,8(sp)
 4021590:	dc400117 	ldw	r17,4(sp)
 4021594:	dc000017 	ldw	r16,0(sp)
 4021598:	dec00a04 	addi	sp,sp,40
 402159c:	f800283a 	ret

040215a0 <__udivdi3>:
 40215a0:	defff404 	addi	sp,sp,-48
 40215a4:	dcc00515 	stw	r19,20(sp)
 40215a8:	dc000215 	stw	r16,8(sp)
 40215ac:	dfc00b15 	stw	ra,44(sp)
 40215b0:	df000a15 	stw	fp,40(sp)
 40215b4:	ddc00915 	stw	r23,36(sp)
 40215b8:	dd800815 	stw	r22,32(sp)
 40215bc:	dd400715 	stw	r21,28(sp)
 40215c0:	dd000615 	stw	r20,24(sp)
 40215c4:	dc800415 	stw	r18,16(sp)
 40215c8:	dc400315 	stw	r17,12(sp)
 40215cc:	2027883a 	mov	r19,r4
 40215d0:	2821883a 	mov	r16,r5
 40215d4:	3800461e 	bne	r7,zero,40216f0 <__udivdi3+0x150>
 40215d8:	3023883a 	mov	r17,r6
 40215dc:	2025883a 	mov	r18,r4
 40215e0:	2980572e 	bgeu	r5,r6,4021740 <__udivdi3+0x1a0>
 40215e4:	00bfffd4 	movui	r2,65535
 40215e8:	282d883a 	mov	r22,r5
 40215ec:	1180b236 	bltu	r2,r6,40218b8 <__udivdi3+0x318>
 40215f0:	00803fc4 	movi	r2,255
 40215f4:	1185803a 	cmpltu	r2,r2,r6
 40215f8:	100490fa 	slli	r2,r2,3
 40215fc:	3086d83a 	srl	r3,r6,r2
 4021600:	010100b4 	movhi	r4,1026
 4021604:	21153984 	addi	r4,r4,21734
 4021608:	20c7883a 	add	r3,r4,r3
 402160c:	18c00003 	ldbu	r3,0(r3)
 4021610:	1885883a 	add	r2,r3,r2
 4021614:	00c00804 	movi	r3,32
 4021618:	1887c83a 	sub	r3,r3,r2
 402161c:	18000526 	beq	r3,zero,4021634 <__udivdi3+0x94>
 4021620:	80e0983a 	sll	r16,r16,r3
 4021624:	9884d83a 	srl	r2,r19,r2
 4021628:	30e2983a 	sll	r17,r6,r3
 402162c:	98e4983a 	sll	r18,r19,r3
 4021630:	142cb03a 	or	r22,r2,r16
 4021634:	882ad43a 	srli	r21,r17,16
 4021638:	b009883a 	mov	r4,r22
 402163c:	8d3fffcc 	andi	r20,r17,65535
 4021640:	a80b883a 	mov	r5,r21
 4021644:	40117dc0 	call	40117dc <__umodsi3>
 4021648:	b009883a 	mov	r4,r22
 402164c:	a80b883a 	mov	r5,r21
 4021650:	1027883a 	mov	r19,r2
 4021654:	40117780 	call	4011778 <__udivsi3>
 4021658:	100b883a 	mov	r5,r2
 402165c:	a009883a 	mov	r4,r20
 4021660:	102d883a 	mov	r22,r2
 4021664:	40118340 	call	4011834 <__mulsi3>
 4021668:	9826943a 	slli	r19,r19,16
 402166c:	9006d43a 	srli	r3,r18,16
 4021670:	1cc6b03a 	or	r3,r3,r19
 4021674:	1880052e 	bgeu	r3,r2,402168c <__udivdi3+0xec>
 4021678:	1c47883a 	add	r3,r3,r17
 402167c:	b13fffc4 	addi	r4,r22,-1
 4021680:	1c400136 	bltu	r3,r17,4021688 <__udivdi3+0xe8>
 4021684:	18814236 	bltu	r3,r2,4021b90 <__udivdi3+0x5f0>
 4021688:	202d883a 	mov	r22,r4
 402168c:	18a1c83a 	sub	r16,r3,r2
 4021690:	8009883a 	mov	r4,r16
 4021694:	a80b883a 	mov	r5,r21
 4021698:	40117dc0 	call	40117dc <__umodsi3>
 402169c:	1027883a 	mov	r19,r2
 40216a0:	8009883a 	mov	r4,r16
 40216a4:	a80b883a 	mov	r5,r21
 40216a8:	9826943a 	slli	r19,r19,16
 40216ac:	40117780 	call	4011778 <__udivsi3>
 40216b0:	100b883a 	mov	r5,r2
 40216b4:	a009883a 	mov	r4,r20
 40216b8:	94bfffcc 	andi	r18,r18,65535
 40216bc:	1021883a 	mov	r16,r2
 40216c0:	94e4b03a 	or	r18,r18,r19
 40216c4:	40118340 	call	4011834 <__mulsi3>
 40216c8:	9080052e 	bgeu	r18,r2,40216e0 <__udivdi3+0x140>
 40216cc:	8ca5883a 	add	r18,r17,r18
 40216d0:	80ffffc4 	addi	r3,r16,-1
 40216d4:	94410c36 	bltu	r18,r17,4021b08 <__udivdi3+0x568>
 40216d8:	90810b2e 	bgeu	r18,r2,4021b08 <__udivdi3+0x568>
 40216dc:	843fff84 	addi	r16,r16,-2
 40216e0:	b004943a 	slli	r2,r22,16
 40216e4:	0007883a 	mov	r3,zero
 40216e8:	1404b03a 	or	r2,r2,r16
 40216ec:	00005e06 	br	4021868 <__udivdi3+0x2c8>
 40216f0:	29c05b36 	bltu	r5,r7,4021860 <__udivdi3+0x2c0>
 40216f4:	00bfffd4 	movui	r2,65535
 40216f8:	11c0672e 	bgeu	r2,r7,4021898 <__udivdi3+0x2f8>
 40216fc:	00804034 	movhi	r2,256
 4021700:	10bfffc4 	addi	r2,r2,-1
 4021704:	11c10a36 	bltu	r2,r7,4021b30 <__udivdi3+0x590>
 4021708:	00800404 	movi	r2,16
 402170c:	3886d83a 	srl	r3,r7,r2
 4021710:	010100b4 	movhi	r4,1026
 4021714:	21153984 	addi	r4,r4,21734
 4021718:	20c7883a 	add	r3,r4,r3
 402171c:	18c00003 	ldbu	r3,0(r3)
 4021720:	05c00804 	movi	r23,32
 4021724:	1885883a 	add	r2,r3,r2
 4021728:	b8afc83a 	sub	r23,r23,r2
 402172c:	b800671e 	bne	r23,zero,40218cc <__udivdi3+0x32c>
 4021730:	3c010536 	bltu	r7,r16,4021b48 <__udivdi3+0x5a8>
 4021734:	9985403a 	cmpgeu	r2,r19,r6
 4021738:	0007883a 	mov	r3,zero
 402173c:	00004a06 	br	4021868 <__udivdi3+0x2c8>
 4021740:	3000041e 	bne	r6,zero,4021754 <__udivdi3+0x1b4>
 4021744:	000b883a 	mov	r5,zero
 4021748:	01000044 	movi	r4,1
 402174c:	40117780 	call	4011778 <__udivsi3>
 4021750:	1023883a 	mov	r17,r2
 4021754:	00bfffd4 	movui	r2,65535
 4021758:	1440532e 	bgeu	r2,r17,40218a8 <__udivdi3+0x308>
 402175c:	00804034 	movhi	r2,256
 4021760:	10bfffc4 	addi	r2,r2,-1
 4021764:	1440f436 	bltu	r2,r17,4021b38 <__udivdi3+0x598>
 4021768:	00800404 	movi	r2,16
 402176c:	8886d83a 	srl	r3,r17,r2
 4021770:	010100b4 	movhi	r4,1026
 4021774:	21153984 	addi	r4,r4,21734
 4021778:	20c7883a 	add	r3,r4,r3
 402177c:	18c00003 	ldbu	r3,0(r3)
 4021780:	1885883a 	add	r2,r3,r2
 4021784:	00c00804 	movi	r3,32
 4021788:	1887c83a 	sub	r3,r3,r2
 402178c:	1800a51e 	bne	r3,zero,4021a24 <__udivdi3+0x484>
 4021790:	882ad43a 	srli	r21,r17,16
 4021794:	8461c83a 	sub	r16,r16,r17
 4021798:	8d3fffcc 	andi	r20,r17,65535
 402179c:	00c00044 	movi	r3,1
 40217a0:	a80b883a 	mov	r5,r21
 40217a4:	8009883a 	mov	r4,r16
 40217a8:	d8c00115 	stw	r3,4(sp)
 40217ac:	40117dc0 	call	40117dc <__umodsi3>
 40217b0:	a80b883a 	mov	r5,r21
 40217b4:	8009883a 	mov	r4,r16
 40217b8:	1027883a 	mov	r19,r2
 40217bc:	40117780 	call	4011778 <__udivsi3>
 40217c0:	a00b883a 	mov	r5,r20
 40217c4:	1009883a 	mov	r4,r2
 40217c8:	102d883a 	mov	r22,r2
 40217cc:	40118340 	call	4011834 <__mulsi3>
 40217d0:	9826943a 	slli	r19,r19,16
 40217d4:	900ed43a 	srli	r7,r18,16
 40217d8:	d8c00117 	ldw	r3,4(sp)
 40217dc:	3cceb03a 	or	r7,r7,r19
 40217e0:	3880052e 	bgeu	r7,r2,40217f8 <__udivdi3+0x258>
 40217e4:	3c4f883a 	add	r7,r7,r17
 40217e8:	b13fffc4 	addi	r4,r22,-1
 40217ec:	3c400136 	bltu	r7,r17,40217f4 <__udivdi3+0x254>
 40217f0:	3880e436 	bltu	r7,r2,4021b84 <__udivdi3+0x5e4>
 40217f4:	202d883a 	mov	r22,r4
 40217f8:	38a1c83a 	sub	r16,r7,r2
 40217fc:	8009883a 	mov	r4,r16
 4021800:	a80b883a 	mov	r5,r21
 4021804:	d8c00115 	stw	r3,4(sp)
 4021808:	40117dc0 	call	40117dc <__umodsi3>
 402180c:	1027883a 	mov	r19,r2
 4021810:	8009883a 	mov	r4,r16
 4021814:	a80b883a 	mov	r5,r21
 4021818:	9826943a 	slli	r19,r19,16
 402181c:	40117780 	call	4011778 <__udivsi3>
 4021820:	a00b883a 	mov	r5,r20
 4021824:	1009883a 	mov	r4,r2
 4021828:	94bfffcc 	andi	r18,r18,65535
 402182c:	1021883a 	mov	r16,r2
 4021830:	94e4b03a 	or	r18,r18,r19
 4021834:	40118340 	call	4011834 <__mulsi3>
 4021838:	d8c00117 	ldw	r3,4(sp)
 402183c:	9080052e 	bgeu	r18,r2,4021854 <__udivdi3+0x2b4>
 4021840:	8ca5883a 	add	r18,r17,r18
 4021844:	813fffc4 	addi	r4,r16,-1
 4021848:	9440ad36 	bltu	r18,r17,4021b00 <__udivdi3+0x560>
 402184c:	9080ac2e 	bgeu	r18,r2,4021b00 <__udivdi3+0x560>
 4021850:	843fff84 	addi	r16,r16,-2
 4021854:	b004943a 	slli	r2,r22,16
 4021858:	1404b03a 	or	r2,r2,r16
 402185c:	00000206 	br	4021868 <__udivdi3+0x2c8>
 4021860:	0007883a 	mov	r3,zero
 4021864:	0005883a 	mov	r2,zero
 4021868:	dfc00b17 	ldw	ra,44(sp)
 402186c:	df000a17 	ldw	fp,40(sp)
 4021870:	ddc00917 	ldw	r23,36(sp)
 4021874:	dd800817 	ldw	r22,32(sp)
 4021878:	dd400717 	ldw	r21,28(sp)
 402187c:	dd000617 	ldw	r20,24(sp)
 4021880:	dcc00517 	ldw	r19,20(sp)
 4021884:	dc800417 	ldw	r18,16(sp)
 4021888:	dc400317 	ldw	r17,12(sp)
 402188c:	dc000217 	ldw	r16,8(sp)
 4021890:	dec00c04 	addi	sp,sp,48
 4021894:	f800283a 	ret
 4021898:	00803fc4 	movi	r2,255
 402189c:	11c5803a 	cmpltu	r2,r2,r7
 40218a0:	100490fa 	slli	r2,r2,3
 40218a4:	003f9906 	br	402170c <__alt_mem_onchip_memory2_0+0xfc01c54c>
 40218a8:	00803fc4 	movi	r2,255
 40218ac:	1445803a 	cmpltu	r2,r2,r17
 40218b0:	100490fa 	slli	r2,r2,3
 40218b4:	003fad06 	br	402176c <__alt_mem_onchip_memory2_0+0xfc01c5ac>
 40218b8:	00804034 	movhi	r2,256
 40218bc:	10bfffc4 	addi	r2,r2,-1
 40218c0:	11809f36 	bltu	r2,r6,4021b40 <__udivdi3+0x5a0>
 40218c4:	00800404 	movi	r2,16
 40218c8:	003f4c06 	br	40215fc <__alt_mem_onchip_memory2_0+0xfc01c43c>
 40218cc:	3dce983a 	sll	r7,r7,r23
 40218d0:	30b8d83a 	srl	fp,r6,r2
 40218d4:	80a2d83a 	srl	r17,r16,r2
 40218d8:	35cc983a 	sll	r6,r6,r23
 40218dc:	3f38b03a 	or	fp,r7,fp
 40218e0:	e024d43a 	srli	r18,fp,16
 40218e4:	9884d83a 	srl	r2,r19,r2
 40218e8:	85e0983a 	sll	r16,r16,r23
 40218ec:	8809883a 	mov	r4,r17
 40218f0:	900b883a 	mov	r5,r18
 40218f4:	d9800015 	stw	r6,0(sp)
 40218f8:	1420b03a 	or	r16,r2,r16
 40218fc:	40117dc0 	call	40117dc <__umodsi3>
 4021900:	900b883a 	mov	r5,r18
 4021904:	8809883a 	mov	r4,r17
 4021908:	1029883a 	mov	r20,r2
 402190c:	e5bfffcc 	andi	r22,fp,65535
 4021910:	40117780 	call	4011778 <__udivsi3>
 4021914:	100b883a 	mov	r5,r2
 4021918:	b009883a 	mov	r4,r22
 402191c:	102b883a 	mov	r21,r2
 4021920:	40118340 	call	4011834 <__mulsi3>
 4021924:	a028943a 	slli	r20,r20,16
 4021928:	8006d43a 	srli	r3,r16,16
 402192c:	1d06b03a 	or	r3,r3,r20
 4021930:	1880042e 	bgeu	r3,r2,4021944 <__udivdi3+0x3a4>
 4021934:	1f07883a 	add	r3,r3,fp
 4021938:	a93fffc4 	addi	r4,r21,-1
 402193c:	1f00892e 	bgeu	r3,fp,4021b64 <__udivdi3+0x5c4>
 4021940:	202b883a 	mov	r21,r4
 4021944:	18a3c83a 	sub	r17,r3,r2
 4021948:	8809883a 	mov	r4,r17
 402194c:	900b883a 	mov	r5,r18
 4021950:	40117dc0 	call	40117dc <__umodsi3>
 4021954:	1029883a 	mov	r20,r2
 4021958:	8809883a 	mov	r4,r17
 402195c:	900b883a 	mov	r5,r18
 4021960:	a028943a 	slli	r20,r20,16
 4021964:	40117780 	call	4011778 <__udivsi3>
 4021968:	100b883a 	mov	r5,r2
 402196c:	b009883a 	mov	r4,r22
 4021970:	843fffcc 	andi	r16,r16,65535
 4021974:	1023883a 	mov	r17,r2
 4021978:	8520b03a 	or	r16,r16,r20
 402197c:	40118340 	call	4011834 <__mulsi3>
 4021980:	8080042e 	bgeu	r16,r2,4021994 <__udivdi3+0x3f4>
 4021984:	8721883a 	add	r16,r16,fp
 4021988:	88ffffc4 	addi	r3,r17,-1
 402198c:	8700712e 	bgeu	r16,fp,4021b54 <__udivdi3+0x5b4>
 4021990:	1823883a 	mov	r17,r3
 4021994:	a80e943a 	slli	r7,r21,16
 4021998:	d8c00017 	ldw	r3,0(sp)
 402199c:	80a1c83a 	sub	r16,r16,r2
 40219a0:	3c64b03a 	or	r18,r7,r17
 40219a4:	1d3fffcc 	andi	r20,r3,65535
 40219a8:	9022d43a 	srli	r17,r18,16
 40219ac:	95bfffcc 	andi	r22,r18,65535
 40219b0:	a00b883a 	mov	r5,r20
 40219b4:	b009883a 	mov	r4,r22
 40219b8:	182ad43a 	srli	r21,r3,16
 40219bc:	40118340 	call	4011834 <__mulsi3>
 40219c0:	a00b883a 	mov	r5,r20
 40219c4:	8809883a 	mov	r4,r17
 40219c8:	1039883a 	mov	fp,r2
 40219cc:	40118340 	call	4011834 <__mulsi3>
 40219d0:	8809883a 	mov	r4,r17
 40219d4:	a80b883a 	mov	r5,r21
 40219d8:	1029883a 	mov	r20,r2
 40219dc:	40118340 	call	4011834 <__mulsi3>
 40219e0:	a80b883a 	mov	r5,r21
 40219e4:	b009883a 	mov	r4,r22
 40219e8:	1023883a 	mov	r17,r2
 40219ec:	40118340 	call	4011834 <__mulsi3>
 40219f0:	e006d43a 	srli	r3,fp,16
 40219f4:	1505883a 	add	r2,r2,r20
 40219f8:	1887883a 	add	r3,r3,r2
 40219fc:	1d00022e 	bgeu	r3,r20,4021a08 <__udivdi3+0x468>
 4021a00:	00800074 	movhi	r2,1
 4021a04:	88a3883a 	add	r17,r17,r2
 4021a08:	1804d43a 	srli	r2,r3,16
 4021a0c:	1463883a 	add	r17,r2,r17
 4021a10:	84404436 	bltu	r16,r17,4021b24 <__udivdi3+0x584>
 4021a14:	84403e26 	beq	r16,r17,4021b10 <__udivdi3+0x570>
 4021a18:	9005883a 	mov	r2,r18
 4021a1c:	0007883a 	mov	r3,zero
 4021a20:	003f9106 	br	4021868 <__alt_mem_onchip_memory2_0+0xfc01c6a8>
 4021a24:	88e2983a 	sll	r17,r17,r3
 4021a28:	80aed83a 	srl	r23,r16,r2
 4021a2c:	80e0983a 	sll	r16,r16,r3
 4021a30:	882ad43a 	srli	r21,r17,16
 4021a34:	9884d83a 	srl	r2,r19,r2
 4021a38:	b809883a 	mov	r4,r23
 4021a3c:	a80b883a 	mov	r5,r21
 4021a40:	98e4983a 	sll	r18,r19,r3
 4021a44:	142cb03a 	or	r22,r2,r16
 4021a48:	40117dc0 	call	40117dc <__umodsi3>
 4021a4c:	b809883a 	mov	r4,r23
 4021a50:	a80b883a 	mov	r5,r21
 4021a54:	1027883a 	mov	r19,r2
 4021a58:	8d3fffcc 	andi	r20,r17,65535
 4021a5c:	40117780 	call	4011778 <__udivsi3>
 4021a60:	a009883a 	mov	r4,r20
 4021a64:	100b883a 	mov	r5,r2
 4021a68:	102f883a 	mov	r23,r2
 4021a6c:	40118340 	call	4011834 <__mulsi3>
 4021a70:	9826943a 	slli	r19,r19,16
 4021a74:	b008d43a 	srli	r4,r22,16
 4021a78:	24c8b03a 	or	r4,r4,r19
 4021a7c:	2080062e 	bgeu	r4,r2,4021a98 <__udivdi3+0x4f8>
 4021a80:	2449883a 	add	r4,r4,r17
 4021a84:	b8ffffc4 	addi	r3,r23,-1
 4021a88:	24403c36 	bltu	r4,r17,4021b7c <__udivdi3+0x5dc>
 4021a8c:	20803b2e 	bgeu	r4,r2,4021b7c <__udivdi3+0x5dc>
 4021a90:	bdffff84 	addi	r23,r23,-2
 4021a94:	2449883a 	add	r4,r4,r17
 4021a98:	20a1c83a 	sub	r16,r4,r2
 4021a9c:	a80b883a 	mov	r5,r21
 4021aa0:	8009883a 	mov	r4,r16
 4021aa4:	40117dc0 	call	40117dc <__umodsi3>
 4021aa8:	a80b883a 	mov	r5,r21
 4021aac:	8009883a 	mov	r4,r16
 4021ab0:	1027883a 	mov	r19,r2
 4021ab4:	40117780 	call	4011778 <__udivsi3>
 4021ab8:	a009883a 	mov	r4,r20
 4021abc:	100b883a 	mov	r5,r2
 4021ac0:	9826943a 	slli	r19,r19,16
 4021ac4:	1039883a 	mov	fp,r2
 4021ac8:	40118340 	call	4011834 <__mulsi3>
 4021acc:	b13fffcc 	andi	r4,r22,65535
 4021ad0:	24c8b03a 	or	r4,r4,r19
 4021ad4:	2080062e 	bgeu	r4,r2,4021af0 <__udivdi3+0x550>
 4021ad8:	2449883a 	add	r4,r4,r17
 4021adc:	e0ffffc4 	addi	r3,fp,-1
 4021ae0:	24402436 	bltu	r4,r17,4021b74 <__udivdi3+0x5d4>
 4021ae4:	2080232e 	bgeu	r4,r2,4021b74 <__udivdi3+0x5d4>
 4021ae8:	e73fff84 	addi	fp,fp,-2
 4021aec:	2449883a 	add	r4,r4,r17
 4021af0:	b82e943a 	slli	r23,r23,16
 4021af4:	20a1c83a 	sub	r16,r4,r2
 4021af8:	bf06b03a 	or	r3,r23,fp
 4021afc:	003f2806 	br	40217a0 <__alt_mem_onchip_memory2_0+0xfc01c5e0>
 4021b00:	2021883a 	mov	r16,r4
 4021b04:	003f5306 	br	4021854 <__alt_mem_onchip_memory2_0+0xfc01c694>
 4021b08:	1821883a 	mov	r16,r3
 4021b0c:	003ef406 	br	40216e0 <__alt_mem_onchip_memory2_0+0xfc01c520>
 4021b10:	1806943a 	slli	r3,r3,16
 4021b14:	9de6983a 	sll	r19,r19,r23
 4021b18:	e73fffcc 	andi	fp,fp,65535
 4021b1c:	1f07883a 	add	r3,r3,fp
 4021b20:	98ffbd2e 	bgeu	r19,r3,4021a18 <__alt_mem_onchip_memory2_0+0xfc01c858>
 4021b24:	90bfffc4 	addi	r2,r18,-1
 4021b28:	0007883a 	mov	r3,zero
 4021b2c:	003f4e06 	br	4021868 <__alt_mem_onchip_memory2_0+0xfc01c6a8>
 4021b30:	00800604 	movi	r2,24
 4021b34:	003ef506 	br	402170c <__alt_mem_onchip_memory2_0+0xfc01c54c>
 4021b38:	00800604 	movi	r2,24
 4021b3c:	003f0b06 	br	402176c <__alt_mem_onchip_memory2_0+0xfc01c5ac>
 4021b40:	00800604 	movi	r2,24
 4021b44:	003ead06 	br	40215fc <__alt_mem_onchip_memory2_0+0xfc01c43c>
 4021b48:	0007883a 	mov	r3,zero
 4021b4c:	00800044 	movi	r2,1
 4021b50:	003f4506 	br	4021868 <__alt_mem_onchip_memory2_0+0xfc01c6a8>
 4021b54:	80bf8e2e 	bgeu	r16,r2,4021990 <__alt_mem_onchip_memory2_0+0xfc01c7d0>
 4021b58:	8c7fff84 	addi	r17,r17,-2
 4021b5c:	8721883a 	add	r16,r16,fp
 4021b60:	003f8c06 	br	4021994 <__alt_mem_onchip_memory2_0+0xfc01c7d4>
 4021b64:	18bf762e 	bgeu	r3,r2,4021940 <__alt_mem_onchip_memory2_0+0xfc01c780>
 4021b68:	ad7fff84 	addi	r21,r21,-2
 4021b6c:	1f07883a 	add	r3,r3,fp
 4021b70:	003f7406 	br	4021944 <__alt_mem_onchip_memory2_0+0xfc01c784>
 4021b74:	1839883a 	mov	fp,r3
 4021b78:	003fdd06 	br	4021af0 <__alt_mem_onchip_memory2_0+0xfc01c930>
 4021b7c:	182f883a 	mov	r23,r3
 4021b80:	003fc506 	br	4021a98 <__alt_mem_onchip_memory2_0+0xfc01c8d8>
 4021b84:	b5bfff84 	addi	r22,r22,-2
 4021b88:	3c4f883a 	add	r7,r7,r17
 4021b8c:	003f1a06 	br	40217f8 <__alt_mem_onchip_memory2_0+0xfc01c638>
 4021b90:	b5bfff84 	addi	r22,r22,-2
 4021b94:	1c47883a 	add	r3,r3,r17
 4021b98:	003ebc06 	br	402168c <__alt_mem_onchip_memory2_0+0xfc01c4cc>

04021b9c <__umoddi3>:
 4021b9c:	defff304 	addi	sp,sp,-52
 4021ba0:	df000b15 	stw	fp,44(sp)
 4021ba4:	dc400415 	stw	r17,16(sp)
 4021ba8:	dc000315 	stw	r16,12(sp)
 4021bac:	dfc00c15 	stw	ra,48(sp)
 4021bb0:	ddc00a15 	stw	r23,40(sp)
 4021bb4:	dd800915 	stw	r22,36(sp)
 4021bb8:	dd400815 	stw	r21,32(sp)
 4021bbc:	dd000715 	stw	r20,28(sp)
 4021bc0:	dcc00615 	stw	r19,24(sp)
 4021bc4:	dc800515 	stw	r18,20(sp)
 4021bc8:	2021883a 	mov	r16,r4
 4021bcc:	2823883a 	mov	r17,r5
 4021bd0:	2839883a 	mov	fp,r5
 4021bd4:	3800401e 	bne	r7,zero,4021cd8 <__umoddi3+0x13c>
 4021bd8:	3027883a 	mov	r19,r6
 4021bdc:	2029883a 	mov	r20,r4
 4021be0:	2980552e 	bgeu	r5,r6,4021d38 <__umoddi3+0x19c>
 4021be4:	00bfffd4 	movui	r2,65535
 4021be8:	1180a236 	bltu	r2,r6,4021e74 <__umoddi3+0x2d8>
 4021bec:	01003fc4 	movi	r4,255
 4021bf0:	2189803a 	cmpltu	r4,r4,r6
 4021bf4:	200890fa 	slli	r4,r4,3
 4021bf8:	3104d83a 	srl	r2,r6,r4
 4021bfc:	00c100b4 	movhi	r3,1026
 4021c00:	18d53984 	addi	r3,r3,21734
 4021c04:	1885883a 	add	r2,r3,r2
 4021c08:	10c00003 	ldbu	r3,0(r2)
 4021c0c:	00800804 	movi	r2,32
 4021c10:	1909883a 	add	r4,r3,r4
 4021c14:	1125c83a 	sub	r18,r2,r4
 4021c18:	90000526 	beq	r18,zero,4021c30 <__umoddi3+0x94>
 4021c1c:	8ca2983a 	sll	r17,r17,r18
 4021c20:	8108d83a 	srl	r4,r16,r4
 4021c24:	34a6983a 	sll	r19,r6,r18
 4021c28:	84a8983a 	sll	r20,r16,r18
 4021c2c:	2478b03a 	or	fp,r4,r17
 4021c30:	982cd43a 	srli	r22,r19,16
 4021c34:	e009883a 	mov	r4,fp
 4021c38:	9dffffcc 	andi	r23,r19,65535
 4021c3c:	b00b883a 	mov	r5,r22
 4021c40:	40117dc0 	call	40117dc <__umodsi3>
 4021c44:	b00b883a 	mov	r5,r22
 4021c48:	e009883a 	mov	r4,fp
 4021c4c:	102b883a 	mov	r21,r2
 4021c50:	40117780 	call	4011778 <__udivsi3>
 4021c54:	100b883a 	mov	r5,r2
 4021c58:	b809883a 	mov	r4,r23
 4021c5c:	40118340 	call	4011834 <__mulsi3>
 4021c60:	a82a943a 	slli	r21,r21,16
 4021c64:	a006d43a 	srli	r3,r20,16
 4021c68:	1d46b03a 	or	r3,r3,r21
 4021c6c:	1880032e 	bgeu	r3,r2,4021c7c <__umoddi3+0xe0>
 4021c70:	1cc7883a 	add	r3,r3,r19
 4021c74:	1cc00136 	bltu	r3,r19,4021c7c <__umoddi3+0xe0>
 4021c78:	18813136 	bltu	r3,r2,4022140 <__umoddi3+0x5a4>
 4021c7c:	18a1c83a 	sub	r16,r3,r2
 4021c80:	b00b883a 	mov	r5,r22
 4021c84:	8009883a 	mov	r4,r16
 4021c88:	40117dc0 	call	40117dc <__umodsi3>
 4021c8c:	b00b883a 	mov	r5,r22
 4021c90:	8009883a 	mov	r4,r16
 4021c94:	1023883a 	mov	r17,r2
 4021c98:	40117780 	call	4011778 <__udivsi3>
 4021c9c:	100b883a 	mov	r5,r2
 4021ca0:	b809883a 	mov	r4,r23
 4021ca4:	8822943a 	slli	r17,r17,16
 4021ca8:	40118340 	call	4011834 <__mulsi3>
 4021cac:	a0ffffcc 	andi	r3,r20,65535
 4021cb0:	1c46b03a 	or	r3,r3,r17
 4021cb4:	1880042e 	bgeu	r3,r2,4021cc8 <__umoddi3+0x12c>
 4021cb8:	1cc7883a 	add	r3,r3,r19
 4021cbc:	1cc00236 	bltu	r3,r19,4021cc8 <__umoddi3+0x12c>
 4021cc0:	1880012e 	bgeu	r3,r2,4021cc8 <__umoddi3+0x12c>
 4021cc4:	1cc7883a 	add	r3,r3,r19
 4021cc8:	1885c83a 	sub	r2,r3,r2
 4021ccc:	1484d83a 	srl	r2,r2,r18
 4021cd0:	0007883a 	mov	r3,zero
 4021cd4:	00005306 	br	4021e24 <__umoddi3+0x288>
 4021cd8:	29c05036 	bltu	r5,r7,4021e1c <__umoddi3+0x280>
 4021cdc:	00bfffd4 	movui	r2,65535
 4021ce0:	11c05c2e 	bgeu	r2,r7,4021e54 <__umoddi3+0x2b8>
 4021ce4:	00804034 	movhi	r2,256
 4021ce8:	10bfffc4 	addi	r2,r2,-1
 4021cec:	11c10636 	bltu	r2,r7,4022108 <__umoddi3+0x56c>
 4021cf0:	01000404 	movi	r4,16
 4021cf4:	3904d83a 	srl	r2,r7,r4
 4021cf8:	00c100b4 	movhi	r3,1026
 4021cfc:	18d53984 	addi	r3,r3,21734
 4021d00:	1885883a 	add	r2,r3,r2
 4021d04:	14c00003 	ldbu	r19,0(r2)
 4021d08:	00c00804 	movi	r3,32
 4021d0c:	9927883a 	add	r19,r19,r4
 4021d10:	1ce9c83a 	sub	r20,r3,r19
 4021d14:	a0005c1e 	bne	r20,zero,4021e88 <__umoddi3+0x2ec>
 4021d18:	3c400136 	bltu	r7,r17,4021d20 <__umoddi3+0x184>
 4021d1c:	81810a36 	bltu	r16,r6,4022148 <__umoddi3+0x5ac>
 4021d20:	8185c83a 	sub	r2,r16,r6
 4021d24:	89e3c83a 	sub	r17,r17,r7
 4021d28:	8089803a 	cmpltu	r4,r16,r2
 4021d2c:	8939c83a 	sub	fp,r17,r4
 4021d30:	e007883a 	mov	r3,fp
 4021d34:	00003b06 	br	4021e24 <__umoddi3+0x288>
 4021d38:	3000041e 	bne	r6,zero,4021d4c <__umoddi3+0x1b0>
 4021d3c:	000b883a 	mov	r5,zero
 4021d40:	01000044 	movi	r4,1
 4021d44:	40117780 	call	4011778 <__udivsi3>
 4021d48:	1027883a 	mov	r19,r2
 4021d4c:	00bfffd4 	movui	r2,65535
 4021d50:	14c0442e 	bgeu	r2,r19,4021e64 <__umoddi3+0x2c8>
 4021d54:	00804034 	movhi	r2,256
 4021d58:	10bfffc4 	addi	r2,r2,-1
 4021d5c:	14c0ec36 	bltu	r2,r19,4022110 <__umoddi3+0x574>
 4021d60:	00800404 	movi	r2,16
 4021d64:	9886d83a 	srl	r3,r19,r2
 4021d68:	010100b4 	movhi	r4,1026
 4021d6c:	21153984 	addi	r4,r4,21734
 4021d70:	20c7883a 	add	r3,r4,r3
 4021d74:	18c00003 	ldbu	r3,0(r3)
 4021d78:	1887883a 	add	r3,r3,r2
 4021d7c:	00800804 	movi	r2,32
 4021d80:	10e5c83a 	sub	r18,r2,r3
 4021d84:	9000ab1e 	bne	r18,zero,4022034 <__umoddi3+0x498>
 4021d88:	982cd43a 	srli	r22,r19,16
 4021d8c:	8ce3c83a 	sub	r17,r17,r19
 4021d90:	9dffffcc 	andi	r23,r19,65535
 4021d94:	b00b883a 	mov	r5,r22
 4021d98:	8809883a 	mov	r4,r17
 4021d9c:	40117dc0 	call	40117dc <__umodsi3>
 4021da0:	b00b883a 	mov	r5,r22
 4021da4:	8809883a 	mov	r4,r17
 4021da8:	102b883a 	mov	r21,r2
 4021dac:	40117780 	call	4011778 <__udivsi3>
 4021db0:	b80b883a 	mov	r5,r23
 4021db4:	1009883a 	mov	r4,r2
 4021db8:	40118340 	call	4011834 <__mulsi3>
 4021dbc:	a82a943a 	slli	r21,r21,16
 4021dc0:	a006d43a 	srli	r3,r20,16
 4021dc4:	1d46b03a 	or	r3,r3,r21
 4021dc8:	1880042e 	bgeu	r3,r2,4021ddc <__umoddi3+0x240>
 4021dcc:	1cc7883a 	add	r3,r3,r19
 4021dd0:	1cc00236 	bltu	r3,r19,4021ddc <__umoddi3+0x240>
 4021dd4:	1880012e 	bgeu	r3,r2,4021ddc <__umoddi3+0x240>
 4021dd8:	1cc7883a 	add	r3,r3,r19
 4021ddc:	18a1c83a 	sub	r16,r3,r2
 4021de0:	b00b883a 	mov	r5,r22
 4021de4:	8009883a 	mov	r4,r16
 4021de8:	40117dc0 	call	40117dc <__umodsi3>
 4021dec:	1023883a 	mov	r17,r2
 4021df0:	b00b883a 	mov	r5,r22
 4021df4:	8009883a 	mov	r4,r16
 4021df8:	40117780 	call	4011778 <__udivsi3>
 4021dfc:	8822943a 	slli	r17,r17,16
 4021e00:	b80b883a 	mov	r5,r23
 4021e04:	1009883a 	mov	r4,r2
 4021e08:	40118340 	call	4011834 <__mulsi3>
 4021e0c:	a53fffcc 	andi	r20,r20,65535
 4021e10:	a446b03a 	or	r3,r20,r17
 4021e14:	18bfac2e 	bgeu	r3,r2,4021cc8 <__alt_mem_onchip_memory2_0+0xfc01cb08>
 4021e18:	003fa706 	br	4021cb8 <__alt_mem_onchip_memory2_0+0xfc01caf8>
 4021e1c:	2005883a 	mov	r2,r4
 4021e20:	2807883a 	mov	r3,r5
 4021e24:	dfc00c17 	ldw	ra,48(sp)
 4021e28:	df000b17 	ldw	fp,44(sp)
 4021e2c:	ddc00a17 	ldw	r23,40(sp)
 4021e30:	dd800917 	ldw	r22,36(sp)
 4021e34:	dd400817 	ldw	r21,32(sp)
 4021e38:	dd000717 	ldw	r20,28(sp)
 4021e3c:	dcc00617 	ldw	r19,24(sp)
 4021e40:	dc800517 	ldw	r18,20(sp)
 4021e44:	dc400417 	ldw	r17,16(sp)
 4021e48:	dc000317 	ldw	r16,12(sp)
 4021e4c:	dec00d04 	addi	sp,sp,52
 4021e50:	f800283a 	ret
 4021e54:	04c03fc4 	movi	r19,255
 4021e58:	99c9803a 	cmpltu	r4,r19,r7
 4021e5c:	200890fa 	slli	r4,r4,3
 4021e60:	003fa406 	br	4021cf4 <__alt_mem_onchip_memory2_0+0xfc01cb34>
 4021e64:	00803fc4 	movi	r2,255
 4021e68:	14c5803a 	cmpltu	r2,r2,r19
 4021e6c:	100490fa 	slli	r2,r2,3
 4021e70:	003fbc06 	br	4021d64 <__alt_mem_onchip_memory2_0+0xfc01cba4>
 4021e74:	00804034 	movhi	r2,256
 4021e78:	10bfffc4 	addi	r2,r2,-1
 4021e7c:	1180a636 	bltu	r2,r6,4022118 <__umoddi3+0x57c>
 4021e80:	01000404 	movi	r4,16
 4021e84:	003f5c06 	br	4021bf8 <__alt_mem_onchip_memory2_0+0xfc01ca38>
 4021e88:	3d0e983a 	sll	r7,r7,r20
 4021e8c:	34ead83a 	srl	r21,r6,r19
 4021e90:	8cc6d83a 	srl	r3,r17,r19
 4021e94:	8d10983a 	sll	r8,r17,r20
 4021e98:	3d6ab03a 	or	r21,r7,r21
 4021e9c:	a82cd43a 	srli	r22,r21,16
 4021ea0:	84e2d83a 	srl	r17,r16,r19
 4021ea4:	1809883a 	mov	r4,r3
 4021ea8:	b00b883a 	mov	r5,r22
 4021eac:	8a22b03a 	or	r17,r17,r8
 4021eb0:	3524983a 	sll	r18,r6,r20
 4021eb4:	dc400015 	stw	r17,0(sp)
 4021eb8:	d8c00115 	stw	r3,4(sp)
 4021ebc:	40117dc0 	call	40117dc <__umodsi3>
 4021ec0:	d8c00117 	ldw	r3,4(sp)
 4021ec4:	b00b883a 	mov	r5,r22
 4021ec8:	1039883a 	mov	fp,r2
 4021ecc:	1809883a 	mov	r4,r3
 4021ed0:	40117780 	call	4011778 <__udivsi3>
 4021ed4:	adffffcc 	andi	r23,r21,65535
 4021ed8:	100b883a 	mov	r5,r2
 4021edc:	b809883a 	mov	r4,r23
 4021ee0:	1023883a 	mov	r17,r2
 4021ee4:	40118340 	call	4011834 <__mulsi3>
 4021ee8:	d9400017 	ldw	r5,0(sp)
 4021eec:	e008943a 	slli	r4,fp,16
 4021ef0:	8520983a 	sll	r16,r16,r20
 4021ef4:	2806d43a 	srli	r3,r5,16
 4021ef8:	1906b03a 	or	r3,r3,r4
 4021efc:	1880042e 	bgeu	r3,r2,4021f10 <__umoddi3+0x374>
 4021f00:	1d47883a 	add	r3,r3,r21
 4021f04:	893fffc4 	addi	r4,r17,-1
 4021f08:	1d40892e 	bgeu	r3,r21,4022130 <__umoddi3+0x594>
 4021f0c:	2023883a 	mov	r17,r4
 4021f10:	18b9c83a 	sub	fp,r3,r2
 4021f14:	b00b883a 	mov	r5,r22
 4021f18:	e009883a 	mov	r4,fp
 4021f1c:	40117dc0 	call	40117dc <__umodsi3>
 4021f20:	b00b883a 	mov	r5,r22
 4021f24:	e009883a 	mov	r4,fp
 4021f28:	d8800215 	stw	r2,8(sp)
 4021f2c:	40117780 	call	4011778 <__udivsi3>
 4021f30:	100b883a 	mov	r5,r2
 4021f34:	b809883a 	mov	r4,r23
 4021f38:	102d883a 	mov	r22,r2
 4021f3c:	40118340 	call	4011834 <__mulsi3>
 4021f40:	d9800217 	ldw	r6,8(sp)
 4021f44:	d8c00017 	ldw	r3,0(sp)
 4021f48:	300c943a 	slli	r6,r6,16
 4021f4c:	1a3fffcc 	andi	r8,r3,65535
 4021f50:	4190b03a 	or	r8,r8,r6
 4021f54:	4080042e 	bgeu	r8,r2,4021f68 <__umoddi3+0x3cc>
 4021f58:	4551883a 	add	r8,r8,r21
 4021f5c:	b0ffffc4 	addi	r3,r22,-1
 4021f60:	45406f2e 	bgeu	r8,r21,4022120 <__umoddi3+0x584>
 4021f64:	182d883a 	mov	r22,r3
 4021f68:	880e943a 	slli	r7,r17,16
 4021f6c:	9006d43a 	srli	r3,r18,16
 4021f70:	91bfffcc 	andi	r6,r18,65535
 4021f74:	3dacb03a 	or	r22,r7,r22
 4021f78:	b02ed43a 	srli	r23,r22,16
 4021f7c:	b5bfffcc 	andi	r22,r22,65535
 4021f80:	300b883a 	mov	r5,r6
 4021f84:	b009883a 	mov	r4,r22
 4021f88:	40a3c83a 	sub	r17,r8,r2
 4021f8c:	d8c00115 	stw	r3,4(sp)
 4021f90:	d9800215 	stw	r6,8(sp)
 4021f94:	40118340 	call	4011834 <__mulsi3>
 4021f98:	d9800217 	ldw	r6,8(sp)
 4021f9c:	b809883a 	mov	r4,r23
 4021fa0:	1039883a 	mov	fp,r2
 4021fa4:	300b883a 	mov	r5,r6
 4021fa8:	40118340 	call	4011834 <__mulsi3>
 4021fac:	d8c00117 	ldw	r3,4(sp)
 4021fb0:	b809883a 	mov	r4,r23
 4021fb4:	d8800215 	stw	r2,8(sp)
 4021fb8:	180b883a 	mov	r5,r3
 4021fbc:	40118340 	call	4011834 <__mulsi3>
 4021fc0:	d8c00117 	ldw	r3,4(sp)
 4021fc4:	b009883a 	mov	r4,r22
 4021fc8:	102f883a 	mov	r23,r2
 4021fcc:	180b883a 	mov	r5,r3
 4021fd0:	40118340 	call	4011834 <__mulsi3>
 4021fd4:	d9800217 	ldw	r6,8(sp)
 4021fd8:	e006d43a 	srli	r3,fp,16
 4021fdc:	1185883a 	add	r2,r2,r6
 4021fe0:	1885883a 	add	r2,r3,r2
 4021fe4:	1180022e 	bgeu	r2,r6,4021ff0 <__umoddi3+0x454>
 4021fe8:	00c00074 	movhi	r3,1
 4021fec:	b8ef883a 	add	r23,r23,r3
 4021ff0:	1006d43a 	srli	r3,r2,16
 4021ff4:	1004943a 	slli	r2,r2,16
 4021ff8:	e73fffcc 	andi	fp,fp,65535
 4021ffc:	1dc7883a 	add	r3,r3,r23
 4022000:	1739883a 	add	fp,r2,fp
 4022004:	88c03a36 	bltu	r17,r3,40220f0 <__umoddi3+0x554>
 4022008:	88c05126 	beq	r17,r3,4022150 <__umoddi3+0x5b4>
 402200c:	88c9c83a 	sub	r4,r17,r3
 4022010:	e00f883a 	mov	r7,fp
 4022014:	81cfc83a 	sub	r7,r16,r7
 4022018:	81c7803a 	cmpltu	r3,r16,r7
 402201c:	20c7c83a 	sub	r3,r4,r3
 4022020:	1cc4983a 	sll	r2,r3,r19
 4022024:	3d0ed83a 	srl	r7,r7,r20
 4022028:	1d06d83a 	srl	r3,r3,r20
 402202c:	11c4b03a 	or	r2,r2,r7
 4022030:	003f7c06 	br	4021e24 <__alt_mem_onchip_memory2_0+0xfc01cc64>
 4022034:	9ca6983a 	sll	r19,r19,r18
 4022038:	88f8d83a 	srl	fp,r17,r3
 402203c:	80c4d83a 	srl	r2,r16,r3
 4022040:	982cd43a 	srli	r22,r19,16
 4022044:	8ca2983a 	sll	r17,r17,r18
 4022048:	e009883a 	mov	r4,fp
 402204c:	b00b883a 	mov	r5,r22
 4022050:	146ab03a 	or	r21,r2,r17
 4022054:	40117dc0 	call	40117dc <__umodsi3>
 4022058:	b00b883a 	mov	r5,r22
 402205c:	e009883a 	mov	r4,fp
 4022060:	1029883a 	mov	r20,r2
 4022064:	9dffffcc 	andi	r23,r19,65535
 4022068:	40117780 	call	4011778 <__udivsi3>
 402206c:	b809883a 	mov	r4,r23
 4022070:	100b883a 	mov	r5,r2
 4022074:	40118340 	call	4011834 <__mulsi3>
 4022078:	a008943a 	slli	r4,r20,16
 402207c:	a806d43a 	srli	r3,r21,16
 4022080:	84a8983a 	sll	r20,r16,r18
 4022084:	1906b03a 	or	r3,r3,r4
 4022088:	1880042e 	bgeu	r3,r2,402209c <__umoddi3+0x500>
 402208c:	1cc7883a 	add	r3,r3,r19
 4022090:	1cc00236 	bltu	r3,r19,402209c <__umoddi3+0x500>
 4022094:	1880012e 	bgeu	r3,r2,402209c <__umoddi3+0x500>
 4022098:	1cc7883a 	add	r3,r3,r19
 402209c:	18a3c83a 	sub	r17,r3,r2
 40220a0:	b00b883a 	mov	r5,r22
 40220a4:	8809883a 	mov	r4,r17
 40220a8:	40117dc0 	call	40117dc <__umodsi3>
 40220ac:	b00b883a 	mov	r5,r22
 40220b0:	8809883a 	mov	r4,r17
 40220b4:	1021883a 	mov	r16,r2
 40220b8:	40117780 	call	4011778 <__udivsi3>
 40220bc:	100b883a 	mov	r5,r2
 40220c0:	b809883a 	mov	r4,r23
 40220c4:	8020943a 	slli	r16,r16,16
 40220c8:	40118340 	call	4011834 <__mulsi3>
 40220cc:	a8ffffcc 	andi	r3,r21,65535
 40220d0:	1c06b03a 	or	r3,r3,r16
 40220d4:	1880042e 	bgeu	r3,r2,40220e8 <__umoddi3+0x54c>
 40220d8:	1cc7883a 	add	r3,r3,r19
 40220dc:	1cc00236 	bltu	r3,r19,40220e8 <__umoddi3+0x54c>
 40220e0:	1880012e 	bgeu	r3,r2,40220e8 <__umoddi3+0x54c>
 40220e4:	1cc7883a 	add	r3,r3,r19
 40220e8:	18a3c83a 	sub	r17,r3,r2
 40220ec:	003f2906 	br	4021d94 <__alt_mem_onchip_memory2_0+0xfc01cbd4>
 40220f0:	e48fc83a 	sub	r7,fp,r18
 40220f4:	1d49c83a 	sub	r4,r3,r21
 40220f8:	e1f9803a 	cmpltu	fp,fp,r7
 40220fc:	2739c83a 	sub	fp,r4,fp
 4022100:	8f09c83a 	sub	r4,r17,fp
 4022104:	003fc306 	br	4022014 <__alt_mem_onchip_memory2_0+0xfc01ce54>
 4022108:	01000604 	movi	r4,24
 402210c:	003ef906 	br	4021cf4 <__alt_mem_onchip_memory2_0+0xfc01cb34>
 4022110:	00800604 	movi	r2,24
 4022114:	003f1306 	br	4021d64 <__alt_mem_onchip_memory2_0+0xfc01cba4>
 4022118:	01000604 	movi	r4,24
 402211c:	003eb606 	br	4021bf8 <__alt_mem_onchip_memory2_0+0xfc01ca38>
 4022120:	40bf902e 	bgeu	r8,r2,4021f64 <__alt_mem_onchip_memory2_0+0xfc01cda4>
 4022124:	b5bfff84 	addi	r22,r22,-2
 4022128:	4551883a 	add	r8,r8,r21
 402212c:	003f8e06 	br	4021f68 <__alt_mem_onchip_memory2_0+0xfc01cda8>
 4022130:	18bf762e 	bgeu	r3,r2,4021f0c <__alt_mem_onchip_memory2_0+0xfc01cd4c>
 4022134:	8c7fff84 	addi	r17,r17,-2
 4022138:	1d47883a 	add	r3,r3,r21
 402213c:	003f7406 	br	4021f10 <__alt_mem_onchip_memory2_0+0xfc01cd50>
 4022140:	1cc7883a 	add	r3,r3,r19
 4022144:	003ecd06 	br	4021c7c <__alt_mem_onchip_memory2_0+0xfc01cabc>
 4022148:	8005883a 	mov	r2,r16
 402214c:	003ef806 	br	4021d30 <__alt_mem_onchip_memory2_0+0xfc01cb70>
 4022150:	873fe736 	bltu	r16,fp,40220f0 <__alt_mem_onchip_memory2_0+0xfc01cf30>
 4022154:	e00f883a 	mov	r7,fp
 4022158:	0009883a 	mov	r4,zero
 402215c:	003fad06 	br	4022014 <__alt_mem_onchip_memory2_0+0xfc01ce54>

04022160 <__floatunsidf>:
 4022160:	defffe04 	addi	sp,sp,-8
 4022164:	dc000015 	stw	r16,0(sp)
 4022168:	dfc00115 	stw	ra,4(sp)
 402216c:	2021883a 	mov	r16,r4
 4022170:	20002226 	beq	r4,zero,40221fc <__floatunsidf+0x9c>
 4022174:	4013ff40 	call	4013ff4 <__clzsi2>
 4022178:	01010784 	movi	r4,1054
 402217c:	2089c83a 	sub	r4,r4,r2
 4022180:	01810cc4 	movi	r6,1075
 4022184:	310dc83a 	sub	r6,r6,r4
 4022188:	00c007c4 	movi	r3,31
 402218c:	1980120e 	bge	r3,r6,40221d8 <__floatunsidf+0x78>
 4022190:	00c104c4 	movi	r3,1043
 4022194:	1907c83a 	sub	r3,r3,r4
 4022198:	80ca983a 	sll	r5,r16,r3
 402219c:	00800434 	movhi	r2,16
 40221a0:	10bfffc4 	addi	r2,r2,-1
 40221a4:	2101ffcc 	andi	r4,r4,2047
 40221a8:	0021883a 	mov	r16,zero
 40221ac:	288a703a 	and	r5,r5,r2
 40221b0:	2008953a 	slli	r4,r4,20
 40221b4:	00c00434 	movhi	r3,16
 40221b8:	18ffffc4 	addi	r3,r3,-1
 40221bc:	28c6703a 	and	r3,r5,r3
 40221c0:	8005883a 	mov	r2,r16
 40221c4:	1906b03a 	or	r3,r3,r4
 40221c8:	dfc00117 	ldw	ra,4(sp)
 40221cc:	dc000017 	ldw	r16,0(sp)
 40221d0:	dec00204 	addi	sp,sp,8
 40221d4:	f800283a 	ret
 40221d8:	00c002c4 	movi	r3,11
 40221dc:	188bc83a 	sub	r5,r3,r2
 40221e0:	814ad83a 	srl	r5,r16,r5
 40221e4:	00c00434 	movhi	r3,16
 40221e8:	18ffffc4 	addi	r3,r3,-1
 40221ec:	81a0983a 	sll	r16,r16,r6
 40221f0:	2101ffcc 	andi	r4,r4,2047
 40221f4:	28ca703a 	and	r5,r5,r3
 40221f8:	003fed06 	br	40221b0 <__alt_mem_onchip_memory2_0+0xfc01cff0>
 40221fc:	0009883a 	mov	r4,zero
 4022200:	000b883a 	mov	r5,zero
 4022204:	003fea06 	br	40221b0 <__alt_mem_onchip_memory2_0+0xfc01cff0>

04022208 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4022208:	defffe04 	addi	sp,sp,-8
 402220c:	dfc00115 	stw	ra,4(sp)
 4022210:	df000015 	stw	fp,0(sp)
 4022214:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4022218:	d0a01317 	ldw	r2,-32692(gp)
 402221c:	10000326 	beq	r2,zero,402222c <alt_get_errno+0x24>
 4022220:	d0a01317 	ldw	r2,-32692(gp)
 4022224:	103ee83a 	callr	r2
 4022228:	00000106 	br	4022230 <alt_get_errno+0x28>
 402222c:	d0a80a04 	addi	r2,gp,-24536
}
 4022230:	e037883a 	mov	sp,fp
 4022234:	dfc00117 	ldw	ra,4(sp)
 4022238:	df000017 	ldw	fp,0(sp)
 402223c:	dec00204 	addi	sp,sp,8
 4022240:	f800283a 	ret

04022244 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4022244:	defffb04 	addi	sp,sp,-20
 4022248:	dfc00415 	stw	ra,16(sp)
 402224c:	df000315 	stw	fp,12(sp)
 4022250:	df000304 	addi	fp,sp,12
 4022254:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4022258:	e0bfff17 	ldw	r2,-4(fp)
 402225c:	10000816 	blt	r2,zero,4022280 <close+0x3c>
 4022260:	01400304 	movi	r5,12
 4022264:	e13fff17 	ldw	r4,-4(fp)
 4022268:	40118340 	call	4011834 <__mulsi3>
 402226c:	1007883a 	mov	r3,r2
 4022270:	008100b4 	movhi	r2,1026
 4022274:	10995c04 	addi	r2,r2,25968
 4022278:	1885883a 	add	r2,r3,r2
 402227c:	00000106 	br	4022284 <close+0x40>
 4022280:	0005883a 	mov	r2,zero
 4022284:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4022288:	e0bffd17 	ldw	r2,-12(fp)
 402228c:	10001926 	beq	r2,zero,40222f4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4022290:	e0bffd17 	ldw	r2,-12(fp)
 4022294:	10800017 	ldw	r2,0(r2)
 4022298:	10800417 	ldw	r2,16(r2)
 402229c:	10000626 	beq	r2,zero,40222b8 <close+0x74>
 40222a0:	e0bffd17 	ldw	r2,-12(fp)
 40222a4:	10800017 	ldw	r2,0(r2)
 40222a8:	10800417 	ldw	r2,16(r2)
 40222ac:	e13ffd17 	ldw	r4,-12(fp)
 40222b0:	103ee83a 	callr	r2
 40222b4:	00000106 	br	40222bc <close+0x78>
 40222b8:	0005883a 	mov	r2,zero
 40222bc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40222c0:	e13fff17 	ldw	r4,-4(fp)
 40222c4:	4022d880 	call	4022d88 <alt_release_fd>
    if (rval < 0)
 40222c8:	e0bffe17 	ldw	r2,-8(fp)
 40222cc:	1000070e 	bge	r2,zero,40222ec <close+0xa8>
    {
      ALT_ERRNO = -rval;
 40222d0:	40222080 	call	4022208 <alt_get_errno>
 40222d4:	1007883a 	mov	r3,r2
 40222d8:	e0bffe17 	ldw	r2,-8(fp)
 40222dc:	0085c83a 	sub	r2,zero,r2
 40222e0:	18800015 	stw	r2,0(r3)
      return -1;
 40222e4:	00bfffc4 	movi	r2,-1
 40222e8:	00000706 	br	4022308 <close+0xc4>
    }
    return 0;
 40222ec:	0005883a 	mov	r2,zero
 40222f0:	00000506 	br	4022308 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40222f4:	40222080 	call	4022208 <alt_get_errno>
 40222f8:	1007883a 	mov	r3,r2
 40222fc:	00801444 	movi	r2,81
 4022300:	18800015 	stw	r2,0(r3)
    return -1;
 4022304:	00bfffc4 	movi	r2,-1
  }
}
 4022308:	e037883a 	mov	sp,fp
 402230c:	dfc00117 	ldw	ra,4(sp)
 4022310:	df000017 	ldw	fp,0(sp)
 4022314:	dec00204 	addi	sp,sp,8
 4022318:	f800283a 	ret

0402231c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 402231c:	defffc04 	addi	sp,sp,-16
 4022320:	df000315 	stw	fp,12(sp)
 4022324:	df000304 	addi	fp,sp,12
 4022328:	e13ffd15 	stw	r4,-12(fp)
 402232c:	e17ffe15 	stw	r5,-8(fp)
 4022330:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4022334:	e0bfff17 	ldw	r2,-4(fp)
}
 4022338:	e037883a 	mov	sp,fp
 402233c:	df000017 	ldw	fp,0(sp)
 4022340:	dec00104 	addi	sp,sp,4
 4022344:	f800283a 	ret

04022348 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4022348:	defffe04 	addi	sp,sp,-8
 402234c:	dfc00115 	stw	ra,4(sp)
 4022350:	df000015 	stw	fp,0(sp)
 4022354:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4022358:	d0a01317 	ldw	r2,-32692(gp)
 402235c:	10000326 	beq	r2,zero,402236c <alt_get_errno+0x24>
 4022360:	d0a01317 	ldw	r2,-32692(gp)
 4022364:	103ee83a 	callr	r2
 4022368:	00000106 	br	4022370 <alt_get_errno+0x28>
 402236c:	d0a80a04 	addi	r2,gp,-24536
}
 4022370:	e037883a 	mov	sp,fp
 4022374:	dfc00117 	ldw	ra,4(sp)
 4022378:	df000017 	ldw	fp,0(sp)
 402237c:	dec00204 	addi	sp,sp,8
 4022380:	f800283a 	ret

04022384 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4022384:	defffb04 	addi	sp,sp,-20
 4022388:	dfc00415 	stw	ra,16(sp)
 402238c:	df000315 	stw	fp,12(sp)
 4022390:	df000304 	addi	fp,sp,12
 4022394:	e13ffe15 	stw	r4,-8(fp)
 4022398:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402239c:	e0bffe17 	ldw	r2,-8(fp)
 40223a0:	10000816 	blt	r2,zero,40223c4 <fstat+0x40>
 40223a4:	01400304 	movi	r5,12
 40223a8:	e13ffe17 	ldw	r4,-8(fp)
 40223ac:	40118340 	call	4011834 <__mulsi3>
 40223b0:	1007883a 	mov	r3,r2
 40223b4:	008100b4 	movhi	r2,1026
 40223b8:	10995c04 	addi	r2,r2,25968
 40223bc:	1885883a 	add	r2,r3,r2
 40223c0:	00000106 	br	40223c8 <fstat+0x44>
 40223c4:	0005883a 	mov	r2,zero
 40223c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 40223cc:	e0bffd17 	ldw	r2,-12(fp)
 40223d0:	10001026 	beq	r2,zero,4022414 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40223d4:	e0bffd17 	ldw	r2,-12(fp)
 40223d8:	10800017 	ldw	r2,0(r2)
 40223dc:	10800817 	ldw	r2,32(r2)
 40223e0:	10000726 	beq	r2,zero,4022400 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 40223e4:	e0bffd17 	ldw	r2,-12(fp)
 40223e8:	10800017 	ldw	r2,0(r2)
 40223ec:	10800817 	ldw	r2,32(r2)
 40223f0:	e17fff17 	ldw	r5,-4(fp)
 40223f4:	e13ffd17 	ldw	r4,-12(fp)
 40223f8:	103ee83a 	callr	r2
 40223fc:	00000a06 	br	4022428 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4022400:	e0bfff17 	ldw	r2,-4(fp)
 4022404:	00c80004 	movi	r3,8192
 4022408:	10c00115 	stw	r3,4(r2)
      return 0;
 402240c:	0005883a 	mov	r2,zero
 4022410:	00000506 	br	4022428 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4022414:	40223480 	call	4022348 <alt_get_errno>
 4022418:	1007883a 	mov	r3,r2
 402241c:	00801444 	movi	r2,81
 4022420:	18800015 	stw	r2,0(r3)
    return -1;
 4022424:	00bfffc4 	movi	r2,-1
  }
}
 4022428:	e037883a 	mov	sp,fp
 402242c:	dfc00117 	ldw	ra,4(sp)
 4022430:	df000017 	ldw	fp,0(sp)
 4022434:	dec00204 	addi	sp,sp,8
 4022438:	f800283a 	ret

0402243c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 402243c:	defff404 	addi	sp,sp,-48
 4022440:	dfc00b15 	stw	ra,44(sp)
 4022444:	df000a15 	stw	fp,40(sp)
 4022448:	dd000915 	stw	r20,36(sp)
 402244c:	dcc00815 	stw	r19,32(sp)
 4022450:	dc800715 	stw	r18,28(sp)
 4022454:	dc400615 	stw	r17,24(sp)
 4022458:	dc000515 	stw	r16,20(sp)
 402245c:	df000a04 	addi	fp,sp,40
 4022460:	e13ff915 	stw	r4,-28(fp)
 4022464:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 4022468:	e0bffa17 	ldw	r2,-24(fp)
 402246c:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4022470:	d0a81917 	ldw	r2,-24476(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 4022474:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4022478:	d0a81817 	ldw	r2,-24480(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 402247c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 4022480:	e0bff817 	ldw	r2,-32(fp)
 4022484:	10005f26 	beq	r2,zero,4022604 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 4022488:	d0a81317 	ldw	r2,-24500(gp)
 402248c:	1029883a 	mov	r20,r2
 4022490:	e17ff817 	ldw	r5,-32(fp)
 4022494:	e13ff717 	ldw	r4,-36(fp)
 4022498:	40117780 	call	4011778 <__udivsi3>
 402249c:	a085883a 	add	r2,r20,r2
 40224a0:	1007883a 	mov	r3,r2
 40224a4:	e0bff917 	ldw	r2,-28(fp)
 40224a8:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 40224ac:	d0a81417 	ldw	r2,-24496(gp)
 40224b0:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 40224b4:	e0bff717 	ldw	r2,-36(fp)
 40224b8:	1021883a 	mov	r16,r2
 40224bc:	0023883a 	mov	r17,zero
 40224c0:	e17ff817 	ldw	r5,-32(fp)
 40224c4:	010003f4 	movhi	r4,15
 40224c8:	21109004 	addi	r4,r4,16960
 40224cc:	40117780 	call	4011778 <__udivsi3>
 40224d0:	1025883a 	mov	r18,r2
 40224d4:	0027883a 	mov	r19,zero
 40224d8:	900d883a 	mov	r6,r18
 40224dc:	980f883a 	mov	r7,r19
 40224e0:	8009883a 	mov	r4,r16
 40224e4:	880b883a 	mov	r5,r17
 40224e8:	40214940 	call	4021494 <__muldi3>
 40224ec:	1009883a 	mov	r4,r2
 40224f0:	180b883a 	mov	r5,r3
 40224f4:	2005883a 	mov	r2,r4
 40224f8:	2807883a 	mov	r3,r5
 40224fc:	018003f4 	movhi	r6,15
 4022500:	31909004 	addi	r6,r6,16960
 4022504:	000f883a 	mov	r7,zero
 4022508:	1009883a 	mov	r4,r2
 402250c:	180b883a 	mov	r5,r3
 4022510:	4021b9c0 	call	4021b9c <__umoddi3>
 4022514:	1009883a 	mov	r4,r2
 4022518:	180b883a 	mov	r5,r3
 402251c:	2005883a 	mov	r2,r4
 4022520:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 4022524:	a085883a 	add	r2,r20,r2
 4022528:	1007883a 	mov	r3,r2
 402252c:	e0bff917 	ldw	r2,-28(fp)
 4022530:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 4022534:	00001406 	br	4022588 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 4022538:	e0bff917 	ldw	r2,-28(fp)
 402253c:	10800017 	ldw	r2,0(r2)
 4022540:	00800516 	blt	zero,r2,4022558 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 4022544:	e0bff917 	ldw	r2,-28(fp)
 4022548:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 402254c:	e0bff917 	ldw	r2,-28(fp)
 4022550:	10000115 	stw	zero,4(r2)
          break;
 4022554:	00000f06 	br	4022594 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 4022558:	e0bff917 	ldw	r2,-28(fp)
 402255c:	10800017 	ldw	r2,0(r2)
 4022560:	10ffffc4 	addi	r3,r2,-1
 4022564:	e0bff917 	ldw	r2,-28(fp)
 4022568:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 402256c:	e0bff917 	ldw	r2,-28(fp)
 4022570:	10c00117 	ldw	r3,4(r2)
 4022574:	008003f4 	movhi	r2,15
 4022578:	10909004 	addi	r2,r2,16960
 402257c:	1887883a 	add	r3,r3,r2
 4022580:	e0bff917 	ldw	r2,-28(fp)
 4022584:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 4022588:	e0bff917 	ldw	r2,-28(fp)
 402258c:	10800117 	ldw	r2,4(r2)
 4022590:	103fe916 	blt	r2,zero,4022538 <__alt_mem_onchip_memory2_0+0xfc01d378>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 4022594:	00000c06 	br	40225c8 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 4022598:	e0bff917 	ldw	r2,-28(fp)
 402259c:	10800017 	ldw	r2,0(r2)
 40225a0:	10c00044 	addi	r3,r2,1
 40225a4:	e0bff917 	ldw	r2,-28(fp)
 40225a8:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 40225ac:	e0bff917 	ldw	r2,-28(fp)
 40225b0:	10c00117 	ldw	r3,4(r2)
 40225b4:	00bffc74 	movhi	r2,65521
 40225b8:	10af7004 	addi	r2,r2,-16960
 40225bc:	1887883a 	add	r3,r3,r2
 40225c0:	e0bff917 	ldw	r2,-28(fp)
 40225c4:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 40225c8:	e0bff917 	ldw	r2,-28(fp)
 40225cc:	10c00117 	ldw	r3,4(r2)
 40225d0:	008003f4 	movhi	r2,15
 40225d4:	10908fc4 	addi	r2,r2,16959
 40225d8:	10ffef16 	blt	r2,r3,4022598 <__alt_mem_onchip_memory2_0+0xfc01d3d8>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 40225dc:	e0bff617 	ldw	r2,-40(fp)
 40225e0:	10000626 	beq	r2,zero,40225fc <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 40225e4:	d0e81117 	ldw	r3,-24508(gp)
 40225e8:	e0bff617 	ldw	r2,-40(fp)
 40225ec:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 40225f0:	d0e81217 	ldw	r3,-24504(gp)
 40225f4:	e0bff617 	ldw	r2,-40(fp)
 40225f8:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 40225fc:	0005883a 	mov	r2,zero
 4022600:	00000106 	br	4022608 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 4022604:	00bfde84 	movi	r2,-134
}
 4022608:	e6fffb04 	addi	sp,fp,-20
 402260c:	dfc00617 	ldw	ra,24(sp)
 4022610:	df000517 	ldw	fp,20(sp)
 4022614:	dd000417 	ldw	r20,16(sp)
 4022618:	dcc00317 	ldw	r19,12(sp)
 402261c:	dc800217 	ldw	r18,8(sp)
 4022620:	dc400117 	ldw	r17,4(sp)
 4022624:	dc000017 	ldw	r16,0(sp)
 4022628:	dec00704 	addi	sp,sp,28
 402262c:	f800283a 	ret

04022630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4022630:	defffe04 	addi	sp,sp,-8
 4022634:	dfc00115 	stw	ra,4(sp)
 4022638:	df000015 	stw	fp,0(sp)
 402263c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4022640:	d0a01317 	ldw	r2,-32692(gp)
 4022644:	10000326 	beq	r2,zero,4022654 <alt_get_errno+0x24>
 4022648:	d0a01317 	ldw	r2,-32692(gp)
 402264c:	103ee83a 	callr	r2
 4022650:	00000106 	br	4022658 <alt_get_errno+0x28>
 4022654:	d0a80a04 	addi	r2,gp,-24536
}
 4022658:	e037883a 	mov	sp,fp
 402265c:	dfc00117 	ldw	ra,4(sp)
 4022660:	df000017 	ldw	fp,0(sp)
 4022664:	dec00204 	addi	sp,sp,8
 4022668:	f800283a 	ret

0402266c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 402266c:	deffed04 	addi	sp,sp,-76
 4022670:	dfc01215 	stw	ra,72(sp)
 4022674:	df001115 	stw	fp,68(sp)
 4022678:	df001104 	addi	fp,sp,68
 402267c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4022680:	e0bfff17 	ldw	r2,-4(fp)
 4022684:	10000816 	blt	r2,zero,40226a8 <isatty+0x3c>
 4022688:	01400304 	movi	r5,12
 402268c:	e13fff17 	ldw	r4,-4(fp)
 4022690:	40118340 	call	4011834 <__mulsi3>
 4022694:	1007883a 	mov	r3,r2
 4022698:	008100b4 	movhi	r2,1026
 402269c:	10995c04 	addi	r2,r2,25968
 40226a0:	1885883a 	add	r2,r3,r2
 40226a4:	00000106 	br	40226ac <isatty+0x40>
 40226a8:	0005883a 	mov	r2,zero
 40226ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40226b0:	e0bfef17 	ldw	r2,-68(fp)
 40226b4:	10000e26 	beq	r2,zero,40226f0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40226b8:	e0bfef17 	ldw	r2,-68(fp)
 40226bc:	10800017 	ldw	r2,0(r2)
 40226c0:	10800817 	ldw	r2,32(r2)
 40226c4:	1000021e 	bne	r2,zero,40226d0 <isatty+0x64>
    {
      return 1;
 40226c8:	00800044 	movi	r2,1
 40226cc:	00000d06 	br	4022704 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40226d0:	e0bff004 	addi	r2,fp,-64
 40226d4:	100b883a 	mov	r5,r2
 40226d8:	e13fff17 	ldw	r4,-4(fp)
 40226dc:	40223840 	call	4022384 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 40226e0:	e0bff117 	ldw	r2,-60(fp)
 40226e4:	10880020 	cmpeqi	r2,r2,8192
 40226e8:	10803fcc 	andi	r2,r2,255
 40226ec:	00000506 	br	4022704 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40226f0:	40226300 	call	4022630 <alt_get_errno>
 40226f4:	1007883a 	mov	r3,r2
 40226f8:	00801444 	movi	r2,81
 40226fc:	18800015 	stw	r2,0(r3)
    return 0;
 4022700:	0005883a 	mov	r2,zero
  }
}
 4022704:	e037883a 	mov	sp,fp
 4022708:	dfc00117 	ldw	ra,4(sp)
 402270c:	df000017 	ldw	fp,0(sp)
 4022710:	dec00204 	addi	sp,sp,8
 4022714:	f800283a 	ret

04022718 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4022718:	defffc04 	addi	sp,sp,-16
 402271c:	df000315 	stw	fp,12(sp)
 4022720:	df000304 	addi	fp,sp,12
 4022724:	e13ffd15 	stw	r4,-12(fp)
 4022728:	e17ffe15 	stw	r5,-8(fp)
 402272c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4022730:	e0fffe17 	ldw	r3,-8(fp)
 4022734:	e0bffd17 	ldw	r2,-12(fp)
 4022738:	18800c26 	beq	r3,r2,402276c <alt_load_section+0x54>
  {
    while( to != end )
 402273c:	00000806 	br	4022760 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4022740:	e0bffe17 	ldw	r2,-8(fp)
 4022744:	10c00104 	addi	r3,r2,4
 4022748:	e0fffe15 	stw	r3,-8(fp)
 402274c:	e0fffd17 	ldw	r3,-12(fp)
 4022750:	19000104 	addi	r4,r3,4
 4022754:	e13ffd15 	stw	r4,-12(fp)
 4022758:	18c00017 	ldw	r3,0(r3)
 402275c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4022760:	e0fffe17 	ldw	r3,-8(fp)
 4022764:	e0bfff17 	ldw	r2,-4(fp)
 4022768:	18bff51e 	bne	r3,r2,4022740 <__alt_mem_onchip_memory2_0+0xfc01d580>
    {
      *to++ = *from++;
    }
  }
}
 402276c:	0001883a 	nop
 4022770:	e037883a 	mov	sp,fp
 4022774:	df000017 	ldw	fp,0(sp)
 4022778:	dec00104 	addi	sp,sp,4
 402277c:	f800283a 	ret

04022780 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4022780:	defffe04 	addi	sp,sp,-8
 4022784:	dfc00115 	stw	ra,4(sp)
 4022788:	df000015 	stw	fp,0(sp)
 402278c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4022790:	018100b4 	movhi	r6,1026
 4022794:	319dec04 	addi	r6,r6,30640
 4022798:	014100b4 	movhi	r5,1026
 402279c:	29560904 	addi	r5,r5,22564
 40227a0:	010100b4 	movhi	r4,1026
 40227a4:	211dec04 	addi	r4,r4,30640
 40227a8:	40227180 	call	4022718 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40227ac:	01810034 	movhi	r6,1024
 40227b0:	31808c04 	addi	r6,r6,560
 40227b4:	01410034 	movhi	r5,1024
 40227b8:	29400804 	addi	r5,r5,32
 40227bc:	01010034 	movhi	r4,1024
 40227c0:	21000804 	addi	r4,r4,32
 40227c4:	40227180 	call	4022718 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40227c8:	018100b4 	movhi	r6,1026
 40227cc:	31960904 	addi	r6,r6,22564
 40227d0:	014100b4 	movhi	r5,1026
 40227d4:	29546404 	addi	r5,r5,20880
 40227d8:	010100b4 	movhi	r4,1026
 40227dc:	21146404 	addi	r4,r4,20880
 40227e0:	40227180 	call	4022718 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40227e4:	402427c0 	call	402427c <alt_dcache_flush_all>
  alt_icache_flush_all();
 40227e8:	402443c0 	call	402443c <alt_icache_flush_all>
}
 40227ec:	0001883a 	nop
 40227f0:	e037883a 	mov	sp,fp
 40227f4:	dfc00117 	ldw	ra,4(sp)
 40227f8:	df000017 	ldw	fp,0(sp)
 40227fc:	dec00204 	addi	sp,sp,8
 4022800:	f800283a 	ret

04022804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4022804:	defffe04 	addi	sp,sp,-8
 4022808:	dfc00115 	stw	ra,4(sp)
 402280c:	df000015 	stw	fp,0(sp)
 4022810:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4022814:	d0a01317 	ldw	r2,-32692(gp)
 4022818:	10000326 	beq	r2,zero,4022828 <alt_get_errno+0x24>
 402281c:	d0a01317 	ldw	r2,-32692(gp)
 4022820:	103ee83a 	callr	r2
 4022824:	00000106 	br	402282c <alt_get_errno+0x28>
 4022828:	d0a80a04 	addi	r2,gp,-24536
}
 402282c:	e037883a 	mov	sp,fp
 4022830:	dfc00117 	ldw	ra,4(sp)
 4022834:	df000017 	ldw	fp,0(sp)
 4022838:	dec00204 	addi	sp,sp,8
 402283c:	f800283a 	ret

04022840 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4022840:	defff904 	addi	sp,sp,-28
 4022844:	dfc00615 	stw	ra,24(sp)
 4022848:	df000515 	stw	fp,20(sp)
 402284c:	df000504 	addi	fp,sp,20
 4022850:	e13ffd15 	stw	r4,-12(fp)
 4022854:	e17ffe15 	stw	r5,-8(fp)
 4022858:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 402285c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4022860:	e0bffd17 	ldw	r2,-12(fp)
 4022864:	10000816 	blt	r2,zero,4022888 <lseek+0x48>
 4022868:	01400304 	movi	r5,12
 402286c:	e13ffd17 	ldw	r4,-12(fp)
 4022870:	40118340 	call	4011834 <__mulsi3>
 4022874:	1007883a 	mov	r3,r2
 4022878:	008100b4 	movhi	r2,1026
 402287c:	10995c04 	addi	r2,r2,25968
 4022880:	1885883a 	add	r2,r3,r2
 4022884:	00000106 	br	402288c <lseek+0x4c>
 4022888:	0005883a 	mov	r2,zero
 402288c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4022890:	e0bffc17 	ldw	r2,-16(fp)
 4022894:	10001026 	beq	r2,zero,40228d8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4022898:	e0bffc17 	ldw	r2,-16(fp)
 402289c:	10800017 	ldw	r2,0(r2)
 40228a0:	10800717 	ldw	r2,28(r2)
 40228a4:	10000926 	beq	r2,zero,40228cc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40228a8:	e0bffc17 	ldw	r2,-16(fp)
 40228ac:	10800017 	ldw	r2,0(r2)
 40228b0:	10800717 	ldw	r2,28(r2)
 40228b4:	e1bfff17 	ldw	r6,-4(fp)
 40228b8:	e17ffe17 	ldw	r5,-8(fp)
 40228bc:	e13ffc17 	ldw	r4,-16(fp)
 40228c0:	103ee83a 	callr	r2
 40228c4:	e0bffb15 	stw	r2,-20(fp)
 40228c8:	00000506 	br	40228e0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40228cc:	00bfde84 	movi	r2,-134
 40228d0:	e0bffb15 	stw	r2,-20(fp)
 40228d4:	00000206 	br	40228e0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 40228d8:	00bfebc4 	movi	r2,-81
 40228dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40228e0:	e0bffb17 	ldw	r2,-20(fp)
 40228e4:	1000070e 	bge	r2,zero,4022904 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 40228e8:	40228040 	call	4022804 <alt_get_errno>
 40228ec:	1007883a 	mov	r3,r2
 40228f0:	e0bffb17 	ldw	r2,-20(fp)
 40228f4:	0085c83a 	sub	r2,zero,r2
 40228f8:	18800015 	stw	r2,0(r3)
    rc = -1;
 40228fc:	00bfffc4 	movi	r2,-1
 4022900:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4022904:	e0bffb17 	ldw	r2,-20(fp)
}
 4022908:	e037883a 	mov	sp,fp
 402290c:	dfc00117 	ldw	ra,4(sp)
 4022910:	df000017 	ldw	fp,0(sp)
 4022914:	dec00204 	addi	sp,sp,8
 4022918:	f800283a 	ret

0402291c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 402291c:	defffd04 	addi	sp,sp,-12
 4022920:	dfc00215 	stw	ra,8(sp)
 4022924:	df000115 	stw	fp,4(sp)
 4022928:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 402292c:	0009883a 	mov	r4,zero
 4022930:	40232000 	call	4023200 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4022934:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4022938:	40232380 	call	4023238 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 402293c:	018100b4 	movhi	r6,1026
 4022940:	3195ff04 	addi	r6,r6,22524
 4022944:	014100b4 	movhi	r5,1026
 4022948:	2955ff04 	addi	r5,r5,22524
 402294c:	010100b4 	movhi	r4,1026
 4022950:	2115ff04 	addi	r4,r4,22524
 4022954:	40247e00 	call	40247e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4022958:	402437c0 	call	402437c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 402295c:	010100b4 	movhi	r4,1026
 4022960:	2110f704 	addi	r4,r4,17372
 4022964:	4024dfc0 	call	4024dfc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4022968:	d0a81517 	ldw	r2,-24492(gp)
 402296c:	d0e81617 	ldw	r3,-24488(gp)
 4022970:	d1281717 	ldw	r4,-24484(gp)
 4022974:	200d883a 	mov	r6,r4
 4022978:	180b883a 	mov	r5,r3
 402297c:	1009883a 	mov	r4,r2
 4022980:	40006b00 	call	40006b0 <main>
 4022984:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4022988:	01000044 	movi	r4,1
 402298c:	40222440 	call	4022244 <close>
  exit (result);
 4022990:	e13fff17 	ldw	r4,-4(fp)
 4022994:	4024e100 	call	4024e10 <exit>

04022998 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4022998:	defffe04 	addi	sp,sp,-8
 402299c:	df000115 	stw	fp,4(sp)
 40229a0:	df000104 	addi	fp,sp,4
 40229a4:	e13fff15 	stw	r4,-4(fp)
}
 40229a8:	0001883a 	nop
 40229ac:	e037883a 	mov	sp,fp
 40229b0:	df000017 	ldw	fp,0(sp)
 40229b4:	dec00104 	addi	sp,sp,4
 40229b8:	f800283a 	ret

040229bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40229bc:	defffe04 	addi	sp,sp,-8
 40229c0:	df000115 	stw	fp,4(sp)
 40229c4:	df000104 	addi	fp,sp,4
 40229c8:	e13fff15 	stw	r4,-4(fp)
}
 40229cc:	0001883a 	nop
 40229d0:	e037883a 	mov	sp,fp
 40229d4:	df000017 	ldw	fp,0(sp)
 40229d8:	dec00104 	addi	sp,sp,4
 40229dc:	f800283a 	ret

040229e0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 40229e0:	defff204 	addi	sp,sp,-56
 40229e4:	dfc00a15 	stw	ra,40(sp)
 40229e8:	df000915 	stw	fp,36(sp)
 40229ec:	df000904 	addi	fp,sp,36
 40229f0:	e13fff15 	stw	r4,-4(fp)
 40229f4:	e1400215 	stw	r5,8(fp)
 40229f8:	e1800315 	stw	r6,12(fp)
 40229fc:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 4022a00:	e0800204 	addi	r2,fp,8
 4022a04:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 4022a08:	e0bfff17 	ldw	r2,-4(fp)
 4022a0c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 4022a10:	00006f06 	br	4022bd0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4022a14:	e0bff807 	ldb	r2,-32(fp)
 4022a18:	10800960 	cmpeqi	r2,r2,37
 4022a1c:	1000041e 	bne	r2,zero,4022a30 <alt_printf+0x50>
        {
            alt_putchar(c);
 4022a20:	e0bff807 	ldb	r2,-32(fp)
 4022a24:	1009883a 	mov	r4,r2
 4022a28:	4022c0c0 	call	4022c0c <alt_putchar>
 4022a2c:	00006806 	br	4022bd0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 4022a30:	e0bff717 	ldw	r2,-36(fp)
 4022a34:	10c00044 	addi	r3,r2,1
 4022a38:	e0fff715 	stw	r3,-36(fp)
 4022a3c:	10800003 	ldbu	r2,0(r2)
 4022a40:	e0bff805 	stb	r2,-32(fp)
 4022a44:	e0bff807 	ldb	r2,-32(fp)
 4022a48:	10006926 	beq	r2,zero,4022bf0 <alt_printf+0x210>
            {
                if (c == '%')
 4022a4c:	e0bff807 	ldb	r2,-32(fp)
 4022a50:	10800958 	cmpnei	r2,r2,37
 4022a54:	1000041e 	bne	r2,zero,4022a68 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4022a58:	e0bff807 	ldb	r2,-32(fp)
 4022a5c:	1009883a 	mov	r4,r2
 4022a60:	4022c0c0 	call	4022c0c <alt_putchar>
 4022a64:	00005a06 	br	4022bd0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 4022a68:	e0bff807 	ldb	r2,-32(fp)
 4022a6c:	108018d8 	cmpnei	r2,r2,99
 4022a70:	1000081e 	bne	r2,zero,4022a94 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 4022a74:	e0bffe17 	ldw	r2,-8(fp)
 4022a78:	10c00104 	addi	r3,r2,4
 4022a7c:	e0fffe15 	stw	r3,-8(fp)
 4022a80:	10800017 	ldw	r2,0(r2)
 4022a84:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 4022a88:	e13ffd17 	ldw	r4,-12(fp)
 4022a8c:	4022c0c0 	call	4022c0c <alt_putchar>
 4022a90:	00004f06 	br	4022bd0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 4022a94:	e0bff807 	ldb	r2,-32(fp)
 4022a98:	10801e18 	cmpnei	r2,r2,120
 4022a9c:	1000341e 	bne	r2,zero,4022b70 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 4022aa0:	e0bffe17 	ldw	r2,-8(fp)
 4022aa4:	10c00104 	addi	r3,r2,4
 4022aa8:	e0fffe15 	stw	r3,-8(fp)
 4022aac:	10800017 	ldw	r2,0(r2)
 4022ab0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4022ab4:	e0bffb17 	ldw	r2,-20(fp)
 4022ab8:	1000031e 	bne	r2,zero,4022ac8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 4022abc:	01000c04 	movi	r4,48
 4022ac0:	4022c0c0 	call	4022c0c <alt_putchar>
                        continue;
 4022ac4:	00004206 	br	4022bd0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 4022ac8:	00800704 	movi	r2,28
 4022acc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 4022ad0:	00000306 	br	4022ae0 <alt_printf+0x100>
                        digit_shift -= 4;
 4022ad4:	e0bff917 	ldw	r2,-28(fp)
 4022ad8:	10bfff04 	addi	r2,r2,-4
 4022adc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4022ae0:	00c003c4 	movi	r3,15
 4022ae4:	e0bff917 	ldw	r2,-28(fp)
 4022ae8:	1884983a 	sll	r2,r3,r2
 4022aec:	1007883a 	mov	r3,r2
 4022af0:	e0bffb17 	ldw	r2,-20(fp)
 4022af4:	1884703a 	and	r2,r3,r2
 4022af8:	103ff626 	beq	r2,zero,4022ad4 <__alt_mem_onchip_memory2_0+0xfc01d914>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4022afc:	00001906 	br	4022b64 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4022b00:	00c003c4 	movi	r3,15
 4022b04:	e0bff917 	ldw	r2,-28(fp)
 4022b08:	1884983a 	sll	r2,r3,r2
 4022b0c:	1007883a 	mov	r3,r2
 4022b10:	e0bffb17 	ldw	r2,-20(fp)
 4022b14:	1886703a 	and	r3,r3,r2
 4022b18:	e0bff917 	ldw	r2,-28(fp)
 4022b1c:	1884d83a 	srl	r2,r3,r2
 4022b20:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 4022b24:	e0bffc17 	ldw	r2,-16(fp)
 4022b28:	108002a8 	cmpgeui	r2,r2,10
 4022b2c:	1000041e 	bne	r2,zero,4022b40 <alt_printf+0x160>
                            c = '0' + digit;
 4022b30:	e0bffc17 	ldw	r2,-16(fp)
 4022b34:	10800c04 	addi	r2,r2,48
 4022b38:	e0bff805 	stb	r2,-32(fp)
 4022b3c:	00000306 	br	4022b4c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 4022b40:	e0bffc17 	ldw	r2,-16(fp)
 4022b44:	108015c4 	addi	r2,r2,87
 4022b48:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 4022b4c:	e0bff807 	ldb	r2,-32(fp)
 4022b50:	1009883a 	mov	r4,r2
 4022b54:	4022c0c0 	call	4022c0c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4022b58:	e0bff917 	ldw	r2,-28(fp)
 4022b5c:	10bfff04 	addi	r2,r2,-4
 4022b60:	e0bff915 	stw	r2,-28(fp)
 4022b64:	e0bff917 	ldw	r2,-28(fp)
 4022b68:	103fe50e 	bge	r2,zero,4022b00 <__alt_mem_onchip_memory2_0+0xfc01d940>
 4022b6c:	00001806 	br	4022bd0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 4022b70:	e0bff807 	ldb	r2,-32(fp)
 4022b74:	10801cd8 	cmpnei	r2,r2,115
 4022b78:	1000151e 	bne	r2,zero,4022bd0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 4022b7c:	e0bffe17 	ldw	r2,-8(fp)
 4022b80:	10c00104 	addi	r3,r2,4
 4022b84:	e0fffe15 	stw	r3,-8(fp)
 4022b88:	10800017 	ldw	r2,0(r2)
 4022b8c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 4022b90:	00000906 	br	4022bb8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 4022b94:	e0bffa17 	ldw	r2,-24(fp)
 4022b98:	10c00044 	addi	r3,r2,1
 4022b9c:	e0fffa15 	stw	r3,-24(fp)
 4022ba0:	10800003 	ldbu	r2,0(r2)
 4022ba4:	10803fcc 	andi	r2,r2,255
 4022ba8:	1080201c 	xori	r2,r2,128
 4022bac:	10bfe004 	addi	r2,r2,-128
 4022bb0:	1009883a 	mov	r4,r2
 4022bb4:	4022c0c0 	call	4022c0c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 4022bb8:	e0bffa17 	ldw	r2,-24(fp)
 4022bbc:	10800003 	ldbu	r2,0(r2)
 4022bc0:	10803fcc 	andi	r2,r2,255
 4022bc4:	1080201c 	xori	r2,r2,128
 4022bc8:	10bfe004 	addi	r2,r2,-128
 4022bcc:	103ff11e 	bne	r2,zero,4022b94 <__alt_mem_onchip_memory2_0+0xfc01d9d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4022bd0:	e0bff717 	ldw	r2,-36(fp)
 4022bd4:	10c00044 	addi	r3,r2,1
 4022bd8:	e0fff715 	stw	r3,-36(fp)
 4022bdc:	10800003 	ldbu	r2,0(r2)
 4022be0:	e0bff805 	stb	r2,-32(fp)
 4022be4:	e0bff807 	ldb	r2,-32(fp)
 4022be8:	103f8a1e 	bne	r2,zero,4022a14 <__alt_mem_onchip_memory2_0+0xfc01d854>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4022bec:	00000106 	br	4022bf4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 4022bf0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4022bf4:	0001883a 	nop
 4022bf8:	e037883a 	mov	sp,fp
 4022bfc:	dfc00117 	ldw	ra,4(sp)
 4022c00:	df000017 	ldw	fp,0(sp)
 4022c04:	dec00504 	addi	sp,sp,20
 4022c08:	f800283a 	ret

04022c0c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4022c0c:	defffd04 	addi	sp,sp,-12
 4022c10:	dfc00215 	stw	ra,8(sp)
 4022c14:	df000115 	stw	fp,4(sp)
 4022c18:	df000104 	addi	fp,sp,4
 4022c1c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 4022c20:	d0a00917 	ldw	r2,-32732(gp)
 4022c24:	10800217 	ldw	r2,8(r2)
 4022c28:	100b883a 	mov	r5,r2
 4022c2c:	e13fff17 	ldw	r4,-4(fp)
 4022c30:	401d6480 	call	401d648 <putc>
#endif
#endif
}
 4022c34:	e037883a 	mov	sp,fp
 4022c38:	dfc00117 	ldw	ra,4(sp)
 4022c3c:	df000017 	ldw	fp,0(sp)
 4022c40:	dec00204 	addi	sp,sp,8
 4022c44:	f800283a 	ret

04022c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4022c48:	defffe04 	addi	sp,sp,-8
 4022c4c:	dfc00115 	stw	ra,4(sp)
 4022c50:	df000015 	stw	fp,0(sp)
 4022c54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4022c58:	d0a01317 	ldw	r2,-32692(gp)
 4022c5c:	10000326 	beq	r2,zero,4022c6c <alt_get_errno+0x24>
 4022c60:	d0a01317 	ldw	r2,-32692(gp)
 4022c64:	103ee83a 	callr	r2
 4022c68:	00000106 	br	4022c70 <alt_get_errno+0x28>
 4022c6c:	d0a80a04 	addi	r2,gp,-24536
}
 4022c70:	e037883a 	mov	sp,fp
 4022c74:	dfc00117 	ldw	ra,4(sp)
 4022c78:	df000017 	ldw	fp,0(sp)
 4022c7c:	dec00204 	addi	sp,sp,8
 4022c80:	f800283a 	ret

04022c84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4022c84:	defff904 	addi	sp,sp,-28
 4022c88:	dfc00615 	stw	ra,24(sp)
 4022c8c:	df000515 	stw	fp,20(sp)
 4022c90:	df000504 	addi	fp,sp,20
 4022c94:	e13ffd15 	stw	r4,-12(fp)
 4022c98:	e17ffe15 	stw	r5,-8(fp)
 4022c9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4022ca0:	e0bffd17 	ldw	r2,-12(fp)
 4022ca4:	10000816 	blt	r2,zero,4022cc8 <read+0x44>
 4022ca8:	01400304 	movi	r5,12
 4022cac:	e13ffd17 	ldw	r4,-12(fp)
 4022cb0:	40118340 	call	4011834 <__mulsi3>
 4022cb4:	1007883a 	mov	r3,r2
 4022cb8:	008100b4 	movhi	r2,1026
 4022cbc:	10995c04 	addi	r2,r2,25968
 4022cc0:	1885883a 	add	r2,r3,r2
 4022cc4:	00000106 	br	4022ccc <read+0x48>
 4022cc8:	0005883a 	mov	r2,zero
 4022ccc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4022cd0:	e0bffb17 	ldw	r2,-20(fp)
 4022cd4:	10002226 	beq	r2,zero,4022d60 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4022cd8:	e0bffb17 	ldw	r2,-20(fp)
 4022cdc:	10800217 	ldw	r2,8(r2)
 4022ce0:	108000cc 	andi	r2,r2,3
 4022ce4:	10800060 	cmpeqi	r2,r2,1
 4022ce8:	1000181e 	bne	r2,zero,4022d4c <read+0xc8>
        (fd->dev->read))
 4022cec:	e0bffb17 	ldw	r2,-20(fp)
 4022cf0:	10800017 	ldw	r2,0(r2)
 4022cf4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4022cf8:	10001426 	beq	r2,zero,4022d4c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4022cfc:	e0bffb17 	ldw	r2,-20(fp)
 4022d00:	10800017 	ldw	r2,0(r2)
 4022d04:	10800517 	ldw	r2,20(r2)
 4022d08:	e0ffff17 	ldw	r3,-4(fp)
 4022d0c:	180d883a 	mov	r6,r3
 4022d10:	e17ffe17 	ldw	r5,-8(fp)
 4022d14:	e13ffb17 	ldw	r4,-20(fp)
 4022d18:	103ee83a 	callr	r2
 4022d1c:	e0bffc15 	stw	r2,-16(fp)
 4022d20:	e0bffc17 	ldw	r2,-16(fp)
 4022d24:	1000070e 	bge	r2,zero,4022d44 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 4022d28:	4022c480 	call	4022c48 <alt_get_errno>
 4022d2c:	1007883a 	mov	r3,r2
 4022d30:	e0bffc17 	ldw	r2,-16(fp)
 4022d34:	0085c83a 	sub	r2,zero,r2
 4022d38:	18800015 	stw	r2,0(r3)
          return -1;
 4022d3c:	00bfffc4 	movi	r2,-1
 4022d40:	00000c06 	br	4022d74 <read+0xf0>
        }
        return rval;
 4022d44:	e0bffc17 	ldw	r2,-16(fp)
 4022d48:	00000a06 	br	4022d74 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4022d4c:	4022c480 	call	4022c48 <alt_get_errno>
 4022d50:	1007883a 	mov	r3,r2
 4022d54:	00800344 	movi	r2,13
 4022d58:	18800015 	stw	r2,0(r3)
 4022d5c:	00000406 	br	4022d70 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4022d60:	4022c480 	call	4022c48 <alt_get_errno>
 4022d64:	1007883a 	mov	r3,r2
 4022d68:	00801444 	movi	r2,81
 4022d6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4022d70:	00bfffc4 	movi	r2,-1
}
 4022d74:	e037883a 	mov	sp,fp
 4022d78:	dfc00117 	ldw	ra,4(sp)
 4022d7c:	df000017 	ldw	fp,0(sp)
 4022d80:	dec00204 	addi	sp,sp,8
 4022d84:	f800283a 	ret

04022d88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4022d88:	defffc04 	addi	sp,sp,-16
 4022d8c:	dfc00315 	stw	ra,12(sp)
 4022d90:	df000215 	stw	fp,8(sp)
 4022d94:	dc000115 	stw	r16,4(sp)
 4022d98:	df000204 	addi	fp,sp,8
 4022d9c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4022da0:	e0bffe17 	ldw	r2,-8(fp)
 4022da4:	108000d0 	cmplti	r2,r2,3
 4022da8:	1000111e 	bne	r2,zero,4022df0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4022dac:	040100b4 	movhi	r16,1026
 4022db0:	84195c04 	addi	r16,r16,25968
 4022db4:	e0bffe17 	ldw	r2,-8(fp)
 4022db8:	01400304 	movi	r5,12
 4022dbc:	1009883a 	mov	r4,r2
 4022dc0:	40118340 	call	4011834 <__mulsi3>
 4022dc4:	8085883a 	add	r2,r16,r2
 4022dc8:	10800204 	addi	r2,r2,8
 4022dcc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4022dd0:	040100b4 	movhi	r16,1026
 4022dd4:	84195c04 	addi	r16,r16,25968
 4022dd8:	e0bffe17 	ldw	r2,-8(fp)
 4022ddc:	01400304 	movi	r5,12
 4022de0:	1009883a 	mov	r4,r2
 4022de4:	40118340 	call	4011834 <__mulsi3>
 4022de8:	8085883a 	add	r2,r16,r2
 4022dec:	10000015 	stw	zero,0(r2)
  }
}
 4022df0:	0001883a 	nop
 4022df4:	e6ffff04 	addi	sp,fp,-4
 4022df8:	dfc00217 	ldw	ra,8(sp)
 4022dfc:	df000117 	ldw	fp,4(sp)
 4022e00:	dc000017 	ldw	r16,0(sp)
 4022e04:	dec00304 	addi	sp,sp,12
 4022e08:	f800283a 	ret

04022e0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4022e0c:	defff904 	addi	sp,sp,-28
 4022e10:	df000615 	stw	fp,24(sp)
 4022e14:	df000604 	addi	fp,sp,24
 4022e18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022e1c:	0005303a 	rdctl	r2,status
 4022e20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4022e24:	e0fffe17 	ldw	r3,-8(fp)
 4022e28:	00bfff84 	movi	r2,-2
 4022e2c:	1884703a 	and	r2,r3,r2
 4022e30:	1001703a 	wrctl	status,r2
  
  return context;
 4022e34:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4022e38:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4022e3c:	d0a01417 	ldw	r2,-32688(gp)
 4022e40:	10c000c4 	addi	r3,r2,3
 4022e44:	00bfff04 	movi	r2,-4
 4022e48:	1884703a 	and	r2,r3,r2
 4022e4c:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4022e50:	d0e01417 	ldw	r3,-32688(gp)
 4022e54:	e0bfff17 	ldw	r2,-4(fp)
 4022e58:	1887883a 	add	r3,r3,r2
 4022e5c:	00820034 	movhi	r2,2048
 4022e60:	10800004 	addi	r2,r2,0
 4022e64:	10c0062e 	bgeu	r2,r3,4022e80 <sbrk+0x74>
 4022e68:	e0bffb17 	ldw	r2,-20(fp)
 4022e6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022e70:	e0bffa17 	ldw	r2,-24(fp)
 4022e74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4022e78:	00bfffc4 	movi	r2,-1
 4022e7c:	00000b06 	br	4022eac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4022e80:	d0a01417 	ldw	r2,-32688(gp)
 4022e84:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4022e88:	d0e01417 	ldw	r3,-32688(gp)
 4022e8c:	e0bfff17 	ldw	r2,-4(fp)
 4022e90:	1885883a 	add	r2,r3,r2
 4022e94:	d0a01415 	stw	r2,-32688(gp)
 4022e98:	e0bffb17 	ldw	r2,-20(fp)
 4022e9c:	e0bffc15 	stw	r2,-16(fp)
 4022ea0:	e0bffc17 	ldw	r2,-16(fp)
 4022ea4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4022ea8:	e0bffd17 	ldw	r2,-12(fp)
} 
 4022eac:	e037883a 	mov	sp,fp
 4022eb0:	df000017 	ldw	fp,0(sp)
 4022eb4:	dec00104 	addi	sp,sp,4
 4022eb8:	f800283a 	ret

04022ebc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4022ebc:	defffa04 	addi	sp,sp,-24
 4022ec0:	df000515 	stw	fp,20(sp)
 4022ec4:	df000504 	addi	fp,sp,20
 4022ec8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022ecc:	0005303a 	rdctl	r2,status
 4022ed0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4022ed4:	e0fffc17 	ldw	r3,-16(fp)
 4022ed8:	00bfff84 	movi	r2,-2
 4022edc:	1884703a 	and	r2,r3,r2
 4022ee0:	1001703a 	wrctl	status,r2
  
  return context;
 4022ee4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4022ee8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4022eec:	e0bfff17 	ldw	r2,-4(fp)
 4022ef0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4022ef4:	e0bffd17 	ldw	r2,-12(fp)
 4022ef8:	10800017 	ldw	r2,0(r2)
 4022efc:	e0fffd17 	ldw	r3,-12(fp)
 4022f00:	18c00117 	ldw	r3,4(r3)
 4022f04:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4022f08:	e0bffd17 	ldw	r2,-12(fp)
 4022f0c:	10800117 	ldw	r2,4(r2)
 4022f10:	e0fffd17 	ldw	r3,-12(fp)
 4022f14:	18c00017 	ldw	r3,0(r3)
 4022f18:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4022f1c:	e0bffd17 	ldw	r2,-12(fp)
 4022f20:	e0fffd17 	ldw	r3,-12(fp)
 4022f24:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4022f28:	e0bffd17 	ldw	r2,-12(fp)
 4022f2c:	e0fffd17 	ldw	r3,-12(fp)
 4022f30:	10c00015 	stw	r3,0(r2)
 4022f34:	e0bffb17 	ldw	r2,-20(fp)
 4022f38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022f3c:	e0bffe17 	ldw	r2,-8(fp)
 4022f40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4022f44:	0001883a 	nop
 4022f48:	e037883a 	mov	sp,fp
 4022f4c:	df000017 	ldw	fp,0(sp)
 4022f50:	dec00104 	addi	sp,sp,4
 4022f54:	f800283a 	ret

04022f58 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4022f58:	defffb04 	addi	sp,sp,-20
 4022f5c:	dfc00415 	stw	ra,16(sp)
 4022f60:	df000315 	stw	fp,12(sp)
 4022f64:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4022f68:	d0a01517 	ldw	r2,-32684(gp)
 4022f6c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4022f70:	d0a81917 	ldw	r2,-24476(gp)
 4022f74:	10800044 	addi	r2,r2,1
 4022f78:	d0a81915 	stw	r2,-24476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4022f7c:	00002e06 	br	4023038 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4022f80:	e0bffd17 	ldw	r2,-12(fp)
 4022f84:	10800017 	ldw	r2,0(r2)
 4022f88:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4022f8c:	e0bffd17 	ldw	r2,-12(fp)
 4022f90:	10800403 	ldbu	r2,16(r2)
 4022f94:	10803fcc 	andi	r2,r2,255
 4022f98:	10000426 	beq	r2,zero,4022fac <alt_tick+0x54>
 4022f9c:	d0a81917 	ldw	r2,-24476(gp)
 4022fa0:	1000021e 	bne	r2,zero,4022fac <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4022fa4:	e0bffd17 	ldw	r2,-12(fp)
 4022fa8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4022fac:	e0bffd17 	ldw	r2,-12(fp)
 4022fb0:	10800217 	ldw	r2,8(r2)
 4022fb4:	d0e81917 	ldw	r3,-24476(gp)
 4022fb8:	18801d36 	bltu	r3,r2,4023030 <alt_tick+0xd8>
 4022fbc:	e0bffd17 	ldw	r2,-12(fp)
 4022fc0:	10800403 	ldbu	r2,16(r2)
 4022fc4:	10803fcc 	andi	r2,r2,255
 4022fc8:	1000191e 	bne	r2,zero,4023030 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4022fcc:	e0bffd17 	ldw	r2,-12(fp)
 4022fd0:	10800317 	ldw	r2,12(r2)
 4022fd4:	e0fffd17 	ldw	r3,-12(fp)
 4022fd8:	18c00517 	ldw	r3,20(r3)
 4022fdc:	1809883a 	mov	r4,r3
 4022fe0:	103ee83a 	callr	r2
 4022fe4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4022fe8:	e0bfff17 	ldw	r2,-4(fp)
 4022fec:	1000031e 	bne	r2,zero,4022ffc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4022ff0:	e13ffd17 	ldw	r4,-12(fp)
 4022ff4:	4022ebc0 	call	4022ebc <alt_alarm_stop>
 4022ff8:	00000d06 	br	4023030 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4022ffc:	e0bffd17 	ldw	r2,-12(fp)
 4023000:	10c00217 	ldw	r3,8(r2)
 4023004:	e0bfff17 	ldw	r2,-4(fp)
 4023008:	1887883a 	add	r3,r3,r2
 402300c:	e0bffd17 	ldw	r2,-12(fp)
 4023010:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4023014:	e0bffd17 	ldw	r2,-12(fp)
 4023018:	10c00217 	ldw	r3,8(r2)
 402301c:	d0a81917 	ldw	r2,-24476(gp)
 4023020:	1880032e 	bgeu	r3,r2,4023030 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4023024:	e0bffd17 	ldw	r2,-12(fp)
 4023028:	00c00044 	movi	r3,1
 402302c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4023030:	e0bffe17 	ldw	r2,-8(fp)
 4023034:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4023038:	e0fffd17 	ldw	r3,-12(fp)
 402303c:	d0a01504 	addi	r2,gp,-32684
 4023040:	18bfcf1e 	bne	r3,r2,4022f80 <__alt_mem_onchip_memory2_0+0xfc01ddc0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4023044:	0001883a 	nop
}
 4023048:	0001883a 	nop
 402304c:	e037883a 	mov	sp,fp
 4023050:	dfc00117 	ldw	ra,4(sp)
 4023054:	df000017 	ldw	fp,0(sp)
 4023058:	dec00204 	addi	sp,sp,8
 402305c:	f800283a 	ret

04023060 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4023060:	defffd04 	addi	sp,sp,-12
 4023064:	dfc00215 	stw	ra,8(sp)
 4023068:	df000115 	stw	fp,4(sp)
 402306c:	df000104 	addi	fp,sp,4
 4023070:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4023074:	e13fff17 	ldw	r4,-4(fp)
 4023078:	40241240 	call	4024124 <alt_busy_sleep>
}
 402307c:	e037883a 	mov	sp,fp
 4023080:	dfc00117 	ldw	ra,4(sp)
 4023084:	df000017 	ldw	fp,0(sp)
 4023088:	dec00204 	addi	sp,sp,8
 402308c:	f800283a 	ret

04023090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023090:	defffe04 	addi	sp,sp,-8
 4023094:	dfc00115 	stw	ra,4(sp)
 4023098:	df000015 	stw	fp,0(sp)
 402309c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40230a0:	d0a01317 	ldw	r2,-32692(gp)
 40230a4:	10000326 	beq	r2,zero,40230b4 <alt_get_errno+0x24>
 40230a8:	d0a01317 	ldw	r2,-32692(gp)
 40230ac:	103ee83a 	callr	r2
 40230b0:	00000106 	br	40230b8 <alt_get_errno+0x28>
 40230b4:	d0a80a04 	addi	r2,gp,-24536
}
 40230b8:	e037883a 	mov	sp,fp
 40230bc:	dfc00117 	ldw	ra,4(sp)
 40230c0:	df000017 	ldw	fp,0(sp)
 40230c4:	dec00204 	addi	sp,sp,8
 40230c8:	f800283a 	ret

040230cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40230cc:	defff904 	addi	sp,sp,-28
 40230d0:	dfc00615 	stw	ra,24(sp)
 40230d4:	df000515 	stw	fp,20(sp)
 40230d8:	df000504 	addi	fp,sp,20
 40230dc:	e13ffd15 	stw	r4,-12(fp)
 40230e0:	e17ffe15 	stw	r5,-8(fp)
 40230e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40230e8:	e0bffd17 	ldw	r2,-12(fp)
 40230ec:	10000816 	blt	r2,zero,4023110 <write+0x44>
 40230f0:	01400304 	movi	r5,12
 40230f4:	e13ffd17 	ldw	r4,-12(fp)
 40230f8:	40118340 	call	4011834 <__mulsi3>
 40230fc:	1007883a 	mov	r3,r2
 4023100:	008100b4 	movhi	r2,1026
 4023104:	10995c04 	addi	r2,r2,25968
 4023108:	1885883a 	add	r2,r3,r2
 402310c:	00000106 	br	4023114 <write+0x48>
 4023110:	0005883a 	mov	r2,zero
 4023114:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4023118:	e0bffb17 	ldw	r2,-20(fp)
 402311c:	10002126 	beq	r2,zero,40231a4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4023120:	e0bffb17 	ldw	r2,-20(fp)
 4023124:	10800217 	ldw	r2,8(r2)
 4023128:	108000cc 	andi	r2,r2,3
 402312c:	10001826 	beq	r2,zero,4023190 <write+0xc4>
 4023130:	e0bffb17 	ldw	r2,-20(fp)
 4023134:	10800017 	ldw	r2,0(r2)
 4023138:	10800617 	ldw	r2,24(r2)
 402313c:	10001426 	beq	r2,zero,4023190 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4023140:	e0bffb17 	ldw	r2,-20(fp)
 4023144:	10800017 	ldw	r2,0(r2)
 4023148:	10800617 	ldw	r2,24(r2)
 402314c:	e0ffff17 	ldw	r3,-4(fp)
 4023150:	180d883a 	mov	r6,r3
 4023154:	e17ffe17 	ldw	r5,-8(fp)
 4023158:	e13ffb17 	ldw	r4,-20(fp)
 402315c:	103ee83a 	callr	r2
 4023160:	e0bffc15 	stw	r2,-16(fp)
 4023164:	e0bffc17 	ldw	r2,-16(fp)
 4023168:	1000070e 	bge	r2,zero,4023188 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 402316c:	40230900 	call	4023090 <alt_get_errno>
 4023170:	1007883a 	mov	r3,r2
 4023174:	e0bffc17 	ldw	r2,-16(fp)
 4023178:	0085c83a 	sub	r2,zero,r2
 402317c:	18800015 	stw	r2,0(r3)
        return -1;
 4023180:	00bfffc4 	movi	r2,-1
 4023184:	00000c06 	br	40231b8 <write+0xec>
      }
      return rval;
 4023188:	e0bffc17 	ldw	r2,-16(fp)
 402318c:	00000a06 	br	40231b8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4023190:	40230900 	call	4023090 <alt_get_errno>
 4023194:	1007883a 	mov	r3,r2
 4023198:	00800344 	movi	r2,13
 402319c:	18800015 	stw	r2,0(r3)
 40231a0:	00000406 	br	40231b4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40231a4:	40230900 	call	4023090 <alt_get_errno>
 40231a8:	1007883a 	mov	r3,r2
 40231ac:	00801444 	movi	r2,81
 40231b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40231b4:	00bfffc4 	movi	r2,-1
}
 40231b8:	e037883a 	mov	sp,fp
 40231bc:	dfc00117 	ldw	ra,4(sp)
 40231c0:	df000017 	ldw	fp,0(sp)
 40231c4:	dec00204 	addi	sp,sp,8
 40231c8:	f800283a 	ret

040231cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40231cc:	defffd04 	addi	sp,sp,-12
 40231d0:	dfc00215 	stw	ra,8(sp)
 40231d4:	df000115 	stw	fp,4(sp)
 40231d8:	df000104 	addi	fp,sp,4
 40231dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40231e0:	d1601004 	addi	r5,gp,-32704
 40231e4:	e13fff17 	ldw	r4,-4(fp)
 40231e8:	40242d80 	call	40242d8 <alt_dev_llist_insert>
}
 40231ec:	e037883a 	mov	sp,fp
 40231f0:	dfc00117 	ldw	ra,4(sp)
 40231f4:	df000017 	ldw	fp,0(sp)
 40231f8:	dec00204 	addi	sp,sp,8
 40231fc:	f800283a 	ret

04023200 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4023200:	defffd04 	addi	sp,sp,-12
 4023204:	dfc00215 	stw	ra,8(sp)
 4023208:	df000115 	stw	fp,4(sp)
 402320c:	df000104 	addi	fp,sp,4
 4023210:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4023214:	4024ae00 	call	4024ae0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4023218:	00800044 	movi	r2,1
 402321c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4023220:	0001883a 	nop
 4023224:	e037883a 	mov	sp,fp
 4023228:	dfc00117 	ldw	ra,4(sp)
 402322c:	df000017 	ldw	fp,0(sp)
 4023230:	dec00204 	addi	sp,sp,8
 4023234:	f800283a 	ret

04023238 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4023238:	defffe04 	addi	sp,sp,-8
 402323c:	dfc00115 	stw	ra,4(sp)
 4023240:	df000015 	stw	fp,0(sp)
 4023244:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4023248:	01c0fa04 	movi	r7,1000
 402324c:	01800084 	movi	r6,2
 4023250:	000b883a 	mov	r5,zero
 4023254:	01020034 	movhi	r4,2048
 4023258:	21141004 	addi	r4,r4,20544
 402325c:	4023f7c0 	call	4023f7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4023260:	01800044 	movi	r6,1
 4023264:	000b883a 	mov	r5,zero
 4023268:	010100b4 	movhi	r4,1026
 402326c:	2119c604 	addi	r4,r4,26392
 4023270:	40234040 	call	4023404 <altera_avalon_jtag_uart_init>
 4023274:	010100b4 	movhi	r4,1026
 4023278:	2119bc04 	addi	r4,r4,26352
 402327c:	40231cc0 	call	40231cc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 4023280:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4023284:	0001883a 	nop
}
 4023288:	0001883a 	nop
 402328c:	e037883a 	mov	sp,fp
 4023290:	dfc00117 	ldw	ra,4(sp)
 4023294:	df000017 	ldw	fp,0(sp)
 4023298:	dec00204 	addi	sp,sp,8
 402329c:	f800283a 	ret

040232a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40232a0:	defffa04 	addi	sp,sp,-24
 40232a4:	dfc00515 	stw	ra,20(sp)
 40232a8:	df000415 	stw	fp,16(sp)
 40232ac:	df000404 	addi	fp,sp,16
 40232b0:	e13ffd15 	stw	r4,-12(fp)
 40232b4:	e17ffe15 	stw	r5,-8(fp)
 40232b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40232bc:	e0bffd17 	ldw	r2,-12(fp)
 40232c0:	10800017 	ldw	r2,0(r2)
 40232c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40232c8:	e0bffc17 	ldw	r2,-16(fp)
 40232cc:	10c00a04 	addi	r3,r2,40
 40232d0:	e0bffd17 	ldw	r2,-12(fp)
 40232d4:	10800217 	ldw	r2,8(r2)
 40232d8:	100f883a 	mov	r7,r2
 40232dc:	e1bfff17 	ldw	r6,-4(fp)
 40232e0:	e17ffe17 	ldw	r5,-8(fp)
 40232e4:	1809883a 	mov	r4,r3
 40232e8:	40238c80 	call	40238c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40232ec:	e037883a 	mov	sp,fp
 40232f0:	dfc00117 	ldw	ra,4(sp)
 40232f4:	df000017 	ldw	fp,0(sp)
 40232f8:	dec00204 	addi	sp,sp,8
 40232fc:	f800283a 	ret

04023300 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4023300:	defffa04 	addi	sp,sp,-24
 4023304:	dfc00515 	stw	ra,20(sp)
 4023308:	df000415 	stw	fp,16(sp)
 402330c:	df000404 	addi	fp,sp,16
 4023310:	e13ffd15 	stw	r4,-12(fp)
 4023314:	e17ffe15 	stw	r5,-8(fp)
 4023318:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402331c:	e0bffd17 	ldw	r2,-12(fp)
 4023320:	10800017 	ldw	r2,0(r2)
 4023324:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4023328:	e0bffc17 	ldw	r2,-16(fp)
 402332c:	10c00a04 	addi	r3,r2,40
 4023330:	e0bffd17 	ldw	r2,-12(fp)
 4023334:	10800217 	ldw	r2,8(r2)
 4023338:	100f883a 	mov	r7,r2
 402333c:	e1bfff17 	ldw	r6,-4(fp)
 4023340:	e17ffe17 	ldw	r5,-8(fp)
 4023344:	1809883a 	mov	r4,r3
 4023348:	4023ae40 	call	4023ae4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 402334c:	e037883a 	mov	sp,fp
 4023350:	dfc00117 	ldw	ra,4(sp)
 4023354:	df000017 	ldw	fp,0(sp)
 4023358:	dec00204 	addi	sp,sp,8
 402335c:	f800283a 	ret

04023360 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4023360:	defffc04 	addi	sp,sp,-16
 4023364:	dfc00315 	stw	ra,12(sp)
 4023368:	df000215 	stw	fp,8(sp)
 402336c:	df000204 	addi	fp,sp,8
 4023370:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4023374:	e0bfff17 	ldw	r2,-4(fp)
 4023378:	10800017 	ldw	r2,0(r2)
 402337c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4023380:	e0bffe17 	ldw	r2,-8(fp)
 4023384:	10c00a04 	addi	r3,r2,40
 4023388:	e0bfff17 	ldw	r2,-4(fp)
 402338c:	10800217 	ldw	r2,8(r2)
 4023390:	100b883a 	mov	r5,r2
 4023394:	1809883a 	mov	r4,r3
 4023398:	40237700 	call	4023770 <altera_avalon_jtag_uart_close>
}
 402339c:	e037883a 	mov	sp,fp
 40233a0:	dfc00117 	ldw	ra,4(sp)
 40233a4:	df000017 	ldw	fp,0(sp)
 40233a8:	dec00204 	addi	sp,sp,8
 40233ac:	f800283a 	ret

040233b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40233b0:	defffa04 	addi	sp,sp,-24
 40233b4:	dfc00515 	stw	ra,20(sp)
 40233b8:	df000415 	stw	fp,16(sp)
 40233bc:	df000404 	addi	fp,sp,16
 40233c0:	e13ffd15 	stw	r4,-12(fp)
 40233c4:	e17ffe15 	stw	r5,-8(fp)
 40233c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40233cc:	e0bffd17 	ldw	r2,-12(fp)
 40233d0:	10800017 	ldw	r2,0(r2)
 40233d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40233d8:	e0bffc17 	ldw	r2,-16(fp)
 40233dc:	10800a04 	addi	r2,r2,40
 40233e0:	e1bfff17 	ldw	r6,-4(fp)
 40233e4:	e17ffe17 	ldw	r5,-8(fp)
 40233e8:	1009883a 	mov	r4,r2
 40233ec:	40237d80 	call	40237d8 <altera_avalon_jtag_uart_ioctl>
}
 40233f0:	e037883a 	mov	sp,fp
 40233f4:	dfc00117 	ldw	ra,4(sp)
 40233f8:	df000017 	ldw	fp,0(sp)
 40233fc:	dec00204 	addi	sp,sp,8
 4023400:	f800283a 	ret

04023404 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4023404:	defffa04 	addi	sp,sp,-24
 4023408:	dfc00515 	stw	ra,20(sp)
 402340c:	df000415 	stw	fp,16(sp)
 4023410:	df000404 	addi	fp,sp,16
 4023414:	e13ffd15 	stw	r4,-12(fp)
 4023418:	e17ffe15 	stw	r5,-8(fp)
 402341c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4023420:	e0bffd17 	ldw	r2,-12(fp)
 4023424:	00c00044 	movi	r3,1
 4023428:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 402342c:	e0bffd17 	ldw	r2,-12(fp)
 4023430:	10800017 	ldw	r2,0(r2)
 4023434:	10800104 	addi	r2,r2,4
 4023438:	1007883a 	mov	r3,r2
 402343c:	e0bffd17 	ldw	r2,-12(fp)
 4023440:	10800817 	ldw	r2,32(r2)
 4023444:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4023448:	e0bffe17 	ldw	r2,-8(fp)
 402344c:	e0ffff17 	ldw	r3,-4(fp)
 4023450:	d8000015 	stw	zero,0(sp)
 4023454:	e1fffd17 	ldw	r7,-12(fp)
 4023458:	018100b4 	movhi	r6,1026
 402345c:	318d3104 	addi	r6,r6,13508
 4023460:	180b883a 	mov	r5,r3
 4023464:	1009883a 	mov	r4,r2
 4023468:	402445c0 	call	402445c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 402346c:	e0bffd17 	ldw	r2,-12(fp)
 4023470:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4023474:	e0bffd17 	ldw	r2,-12(fp)
 4023478:	10800204 	addi	r2,r2,8
 402347c:	d0e81817 	ldw	r3,-24480(gp)
 4023480:	e1fffd17 	ldw	r7,-12(fp)
 4023484:	018100b4 	movhi	r6,1026
 4023488:	318db404 	addi	r6,r6,14032
 402348c:	180b883a 	mov	r5,r3
 4023490:	1009883a 	mov	r4,r2
 4023494:	4023ff80 	call	4023ff8 <alt_alarm_start>
 4023498:	1000040e 	bge	r2,zero,40234ac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 402349c:	e0fffd17 	ldw	r3,-12(fp)
 40234a0:	00a00034 	movhi	r2,32768
 40234a4:	10bfffc4 	addi	r2,r2,-1
 40234a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40234ac:	0001883a 	nop
 40234b0:	e037883a 	mov	sp,fp
 40234b4:	dfc00117 	ldw	ra,4(sp)
 40234b8:	df000017 	ldw	fp,0(sp)
 40234bc:	dec00204 	addi	sp,sp,8
 40234c0:	f800283a 	ret

040234c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40234c4:	defff804 	addi	sp,sp,-32
 40234c8:	df000715 	stw	fp,28(sp)
 40234cc:	df000704 	addi	fp,sp,28
 40234d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 40234d4:	e0bfff17 	ldw	r2,-4(fp)
 40234d8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 40234dc:	e0bffb17 	ldw	r2,-20(fp)
 40234e0:	10800017 	ldw	r2,0(r2)
 40234e4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40234e8:	e0bffc17 	ldw	r2,-16(fp)
 40234ec:	10800104 	addi	r2,r2,4
 40234f0:	10800037 	ldwio	r2,0(r2)
 40234f4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40234f8:	e0bffd17 	ldw	r2,-12(fp)
 40234fc:	1080c00c 	andi	r2,r2,768
 4023500:	10006d26 	beq	r2,zero,40236b8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4023504:	e0bffd17 	ldw	r2,-12(fp)
 4023508:	1080400c 	andi	r2,r2,256
 402350c:	10003526 	beq	r2,zero,40235e4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4023510:	00800074 	movhi	r2,1
 4023514:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4023518:	e0bffb17 	ldw	r2,-20(fp)
 402351c:	10800a17 	ldw	r2,40(r2)
 4023520:	10800044 	addi	r2,r2,1
 4023524:	1081ffcc 	andi	r2,r2,2047
 4023528:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 402352c:	e0bffb17 	ldw	r2,-20(fp)
 4023530:	10c00b17 	ldw	r3,44(r2)
 4023534:	e0bffe17 	ldw	r2,-8(fp)
 4023538:	18801526 	beq	r3,r2,4023590 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 402353c:	e0bffc17 	ldw	r2,-16(fp)
 4023540:	10800037 	ldwio	r2,0(r2)
 4023544:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4023548:	e0bff917 	ldw	r2,-28(fp)
 402354c:	10a0000c 	andi	r2,r2,32768
 4023550:	10001126 	beq	r2,zero,4023598 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4023554:	e0bffb17 	ldw	r2,-20(fp)
 4023558:	10800a17 	ldw	r2,40(r2)
 402355c:	e0fff917 	ldw	r3,-28(fp)
 4023560:	1809883a 	mov	r4,r3
 4023564:	e0fffb17 	ldw	r3,-20(fp)
 4023568:	1885883a 	add	r2,r3,r2
 402356c:	10800e04 	addi	r2,r2,56
 4023570:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4023574:	e0bffb17 	ldw	r2,-20(fp)
 4023578:	10800a17 	ldw	r2,40(r2)
 402357c:	10800044 	addi	r2,r2,1
 4023580:	10c1ffcc 	andi	r3,r2,2047
 4023584:	e0bffb17 	ldw	r2,-20(fp)
 4023588:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 402358c:	003fe206 	br	4023518 <__alt_mem_onchip_memory2_0+0xfc01e358>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4023590:	0001883a 	nop
 4023594:	00000106 	br	402359c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4023598:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 402359c:	e0bff917 	ldw	r2,-28(fp)
 40235a0:	10bfffec 	andhi	r2,r2,65535
 40235a4:	10000f26 	beq	r2,zero,40235e4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40235a8:	e0bffb17 	ldw	r2,-20(fp)
 40235ac:	10c00817 	ldw	r3,32(r2)
 40235b0:	00bfff84 	movi	r2,-2
 40235b4:	1886703a 	and	r3,r3,r2
 40235b8:	e0bffb17 	ldw	r2,-20(fp)
 40235bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40235c0:	e0bffc17 	ldw	r2,-16(fp)
 40235c4:	10800104 	addi	r2,r2,4
 40235c8:	1007883a 	mov	r3,r2
 40235cc:	e0bffb17 	ldw	r2,-20(fp)
 40235d0:	10800817 	ldw	r2,32(r2)
 40235d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40235d8:	e0bffc17 	ldw	r2,-16(fp)
 40235dc:	10800104 	addi	r2,r2,4
 40235e0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40235e4:	e0bffd17 	ldw	r2,-12(fp)
 40235e8:	1080800c 	andi	r2,r2,512
 40235ec:	103fbe26 	beq	r2,zero,40234e8 <__alt_mem_onchip_memory2_0+0xfc01e328>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40235f0:	e0bffd17 	ldw	r2,-12(fp)
 40235f4:	1004d43a 	srli	r2,r2,16
 40235f8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40235fc:	00001406 	br	4023650 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4023600:	e0bffc17 	ldw	r2,-16(fp)
 4023604:	e0fffb17 	ldw	r3,-20(fp)
 4023608:	18c00d17 	ldw	r3,52(r3)
 402360c:	e13ffb17 	ldw	r4,-20(fp)
 4023610:	20c7883a 	add	r3,r4,r3
 4023614:	18c20e04 	addi	r3,r3,2104
 4023618:	18c00003 	ldbu	r3,0(r3)
 402361c:	18c03fcc 	andi	r3,r3,255
 4023620:	18c0201c 	xori	r3,r3,128
 4023624:	18ffe004 	addi	r3,r3,-128
 4023628:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402362c:	e0bffb17 	ldw	r2,-20(fp)
 4023630:	10800d17 	ldw	r2,52(r2)
 4023634:	10800044 	addi	r2,r2,1
 4023638:	10c1ffcc 	andi	r3,r2,2047
 402363c:	e0bffb17 	ldw	r2,-20(fp)
 4023640:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4023644:	e0bffa17 	ldw	r2,-24(fp)
 4023648:	10bfffc4 	addi	r2,r2,-1
 402364c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4023650:	e0bffa17 	ldw	r2,-24(fp)
 4023654:	10000526 	beq	r2,zero,402366c <altera_avalon_jtag_uart_irq+0x1a8>
 4023658:	e0bffb17 	ldw	r2,-20(fp)
 402365c:	10c00d17 	ldw	r3,52(r2)
 4023660:	e0bffb17 	ldw	r2,-20(fp)
 4023664:	10800c17 	ldw	r2,48(r2)
 4023668:	18bfe51e 	bne	r3,r2,4023600 <__alt_mem_onchip_memory2_0+0xfc01e440>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 402366c:	e0bffa17 	ldw	r2,-24(fp)
 4023670:	103f9d26 	beq	r2,zero,40234e8 <__alt_mem_onchip_memory2_0+0xfc01e328>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4023674:	e0bffb17 	ldw	r2,-20(fp)
 4023678:	10c00817 	ldw	r3,32(r2)
 402367c:	00bfff44 	movi	r2,-3
 4023680:	1886703a 	and	r3,r3,r2
 4023684:	e0bffb17 	ldw	r2,-20(fp)
 4023688:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402368c:	e0bffb17 	ldw	r2,-20(fp)
 4023690:	10800017 	ldw	r2,0(r2)
 4023694:	10800104 	addi	r2,r2,4
 4023698:	1007883a 	mov	r3,r2
 402369c:	e0bffb17 	ldw	r2,-20(fp)
 40236a0:	10800817 	ldw	r2,32(r2)
 40236a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40236a8:	e0bffc17 	ldw	r2,-16(fp)
 40236ac:	10800104 	addi	r2,r2,4
 40236b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 40236b4:	003f8c06 	br	40234e8 <__alt_mem_onchip_memory2_0+0xfc01e328>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 40236b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 40236bc:	0001883a 	nop
 40236c0:	e037883a 	mov	sp,fp
 40236c4:	df000017 	ldw	fp,0(sp)
 40236c8:	dec00104 	addi	sp,sp,4
 40236cc:	f800283a 	ret

040236d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40236d0:	defff804 	addi	sp,sp,-32
 40236d4:	df000715 	stw	fp,28(sp)
 40236d8:	df000704 	addi	fp,sp,28
 40236dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40236e0:	e0bffb17 	ldw	r2,-20(fp)
 40236e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40236e8:	e0bff917 	ldw	r2,-28(fp)
 40236ec:	10800017 	ldw	r2,0(r2)
 40236f0:	10800104 	addi	r2,r2,4
 40236f4:	10800037 	ldwio	r2,0(r2)
 40236f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40236fc:	e0bffa17 	ldw	r2,-24(fp)
 4023700:	1081000c 	andi	r2,r2,1024
 4023704:	10000b26 	beq	r2,zero,4023734 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4023708:	e0bff917 	ldw	r2,-28(fp)
 402370c:	10800017 	ldw	r2,0(r2)
 4023710:	10800104 	addi	r2,r2,4
 4023714:	1007883a 	mov	r3,r2
 4023718:	e0bff917 	ldw	r2,-28(fp)
 402371c:	10800817 	ldw	r2,32(r2)
 4023720:	10810014 	ori	r2,r2,1024
 4023724:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4023728:	e0bff917 	ldw	r2,-28(fp)
 402372c:	10000915 	stw	zero,36(r2)
 4023730:	00000a06 	br	402375c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4023734:	e0bff917 	ldw	r2,-28(fp)
 4023738:	10c00917 	ldw	r3,36(r2)
 402373c:	00a00034 	movhi	r2,32768
 4023740:	10bfff04 	addi	r2,r2,-4
 4023744:	10c00536 	bltu	r2,r3,402375c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4023748:	e0bff917 	ldw	r2,-28(fp)
 402374c:	10800917 	ldw	r2,36(r2)
 4023750:	10c00044 	addi	r3,r2,1
 4023754:	e0bff917 	ldw	r2,-28(fp)
 4023758:	10c00915 	stw	r3,36(r2)
 402375c:	d0a81817 	ldw	r2,-24480(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4023760:	e037883a 	mov	sp,fp
 4023764:	df000017 	ldw	fp,0(sp)
 4023768:	dec00104 	addi	sp,sp,4
 402376c:	f800283a 	ret

04023770 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4023770:	defffd04 	addi	sp,sp,-12
 4023774:	df000215 	stw	fp,8(sp)
 4023778:	df000204 	addi	fp,sp,8
 402377c:	e13ffe15 	stw	r4,-8(fp)
 4023780:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4023784:	00000506 	br	402379c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4023788:	e0bfff17 	ldw	r2,-4(fp)
 402378c:	1090000c 	andi	r2,r2,16384
 4023790:	10000226 	beq	r2,zero,402379c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4023794:	00bffd44 	movi	r2,-11
 4023798:	00000b06 	br	40237c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402379c:	e0bffe17 	ldw	r2,-8(fp)
 40237a0:	10c00d17 	ldw	r3,52(r2)
 40237a4:	e0bffe17 	ldw	r2,-8(fp)
 40237a8:	10800c17 	ldw	r2,48(r2)
 40237ac:	18800526 	beq	r3,r2,40237c4 <altera_avalon_jtag_uart_close+0x54>
 40237b0:	e0bffe17 	ldw	r2,-8(fp)
 40237b4:	10c00917 	ldw	r3,36(r2)
 40237b8:	e0bffe17 	ldw	r2,-8(fp)
 40237bc:	10800117 	ldw	r2,4(r2)
 40237c0:	18bff136 	bltu	r3,r2,4023788 <__alt_mem_onchip_memory2_0+0xfc01e5c8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40237c4:	0005883a 	mov	r2,zero
}
 40237c8:	e037883a 	mov	sp,fp
 40237cc:	df000017 	ldw	fp,0(sp)
 40237d0:	dec00104 	addi	sp,sp,4
 40237d4:	f800283a 	ret

040237d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40237d8:	defffa04 	addi	sp,sp,-24
 40237dc:	df000515 	stw	fp,20(sp)
 40237e0:	df000504 	addi	fp,sp,20
 40237e4:	e13ffd15 	stw	r4,-12(fp)
 40237e8:	e17ffe15 	stw	r5,-8(fp)
 40237ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 40237f0:	00bff9c4 	movi	r2,-25
 40237f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 40237f8:	e0bffe17 	ldw	r2,-8(fp)
 40237fc:	10da8060 	cmpeqi	r3,r2,27137
 4023800:	1800031e 	bne	r3,zero,4023810 <altera_avalon_jtag_uart_ioctl+0x38>
 4023804:	109a80a0 	cmpeqi	r2,r2,27138
 4023808:	1000181e 	bne	r2,zero,402386c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 402380c:	00002906 	br	40238b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4023810:	e0bffd17 	ldw	r2,-12(fp)
 4023814:	10c00117 	ldw	r3,4(r2)
 4023818:	00a00034 	movhi	r2,32768
 402381c:	10bfffc4 	addi	r2,r2,-1
 4023820:	18802126 	beq	r3,r2,40238a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4023824:	e0bfff17 	ldw	r2,-4(fp)
 4023828:	10800017 	ldw	r2,0(r2)
 402382c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4023830:	e0bffc17 	ldw	r2,-16(fp)
 4023834:	10800090 	cmplti	r2,r2,2
 4023838:	1000061e 	bne	r2,zero,4023854 <altera_avalon_jtag_uart_ioctl+0x7c>
 402383c:	e0fffc17 	ldw	r3,-16(fp)
 4023840:	00a00034 	movhi	r2,32768
 4023844:	10bfffc4 	addi	r2,r2,-1
 4023848:	18800226 	beq	r3,r2,4023854 <altera_avalon_jtag_uart_ioctl+0x7c>
 402384c:	e0bffc17 	ldw	r2,-16(fp)
 4023850:	00000206 	br	402385c <altera_avalon_jtag_uart_ioctl+0x84>
 4023854:	00a00034 	movhi	r2,32768
 4023858:	10bfff84 	addi	r2,r2,-2
 402385c:	e0fffd17 	ldw	r3,-12(fp)
 4023860:	18800115 	stw	r2,4(r3)
      rc = 0;
 4023864:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4023868:	00000f06 	br	40238a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 402386c:	e0bffd17 	ldw	r2,-12(fp)
 4023870:	10c00117 	ldw	r3,4(r2)
 4023874:	00a00034 	movhi	r2,32768
 4023878:	10bfffc4 	addi	r2,r2,-1
 402387c:	18800c26 	beq	r3,r2,40238b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4023880:	e0bffd17 	ldw	r2,-12(fp)
 4023884:	10c00917 	ldw	r3,36(r2)
 4023888:	e0bffd17 	ldw	r2,-12(fp)
 402388c:	10800117 	ldw	r2,4(r2)
 4023890:	1885803a 	cmpltu	r2,r3,r2
 4023894:	10c03fcc 	andi	r3,r2,255
 4023898:	e0bfff17 	ldw	r2,-4(fp)
 402389c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40238a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40238a4:	00000206 	br	40238b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40238a8:	0001883a 	nop
 40238ac:	00000106 	br	40238b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 40238b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 40238b4:	e0bffb17 	ldw	r2,-20(fp)
}
 40238b8:	e037883a 	mov	sp,fp
 40238bc:	df000017 	ldw	fp,0(sp)
 40238c0:	dec00104 	addi	sp,sp,4
 40238c4:	f800283a 	ret

040238c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40238c8:	defff304 	addi	sp,sp,-52
 40238cc:	dfc00c15 	stw	ra,48(sp)
 40238d0:	df000b15 	stw	fp,44(sp)
 40238d4:	df000b04 	addi	fp,sp,44
 40238d8:	e13ffc15 	stw	r4,-16(fp)
 40238dc:	e17ffd15 	stw	r5,-12(fp)
 40238e0:	e1bffe15 	stw	r6,-8(fp)
 40238e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 40238e8:	e0bffd17 	ldw	r2,-12(fp)
 40238ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40238f0:	00004706 	br	4023a10 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40238f4:	e0bffc17 	ldw	r2,-16(fp)
 40238f8:	10800a17 	ldw	r2,40(r2)
 40238fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4023900:	e0bffc17 	ldw	r2,-16(fp)
 4023904:	10800b17 	ldw	r2,44(r2)
 4023908:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 402390c:	e0fff717 	ldw	r3,-36(fp)
 4023910:	e0bff817 	ldw	r2,-32(fp)
 4023914:	18800536 	bltu	r3,r2,402392c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4023918:	e0fff717 	ldw	r3,-36(fp)
 402391c:	e0bff817 	ldw	r2,-32(fp)
 4023920:	1885c83a 	sub	r2,r3,r2
 4023924:	e0bff615 	stw	r2,-40(fp)
 4023928:	00000406 	br	402393c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 402392c:	00c20004 	movi	r3,2048
 4023930:	e0bff817 	ldw	r2,-32(fp)
 4023934:	1885c83a 	sub	r2,r3,r2
 4023938:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402393c:	e0bff617 	ldw	r2,-40(fp)
 4023940:	10001e26 	beq	r2,zero,40239bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4023944:	e0fffe17 	ldw	r3,-8(fp)
 4023948:	e0bff617 	ldw	r2,-40(fp)
 402394c:	1880022e 	bgeu	r3,r2,4023958 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4023950:	e0bffe17 	ldw	r2,-8(fp)
 4023954:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4023958:	e0bffc17 	ldw	r2,-16(fp)
 402395c:	10c00e04 	addi	r3,r2,56
 4023960:	e0bff817 	ldw	r2,-32(fp)
 4023964:	1885883a 	add	r2,r3,r2
 4023968:	e1bff617 	ldw	r6,-40(fp)
 402396c:	100b883a 	mov	r5,r2
 4023970:	e13ff517 	ldw	r4,-44(fp)
 4023974:	401c1240 	call	401c124 <memcpy>
      ptr   += n;
 4023978:	e0fff517 	ldw	r3,-44(fp)
 402397c:	e0bff617 	ldw	r2,-40(fp)
 4023980:	1885883a 	add	r2,r3,r2
 4023984:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4023988:	e0fffe17 	ldw	r3,-8(fp)
 402398c:	e0bff617 	ldw	r2,-40(fp)
 4023990:	1885c83a 	sub	r2,r3,r2
 4023994:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4023998:	e0fff817 	ldw	r3,-32(fp)
 402399c:	e0bff617 	ldw	r2,-40(fp)
 40239a0:	1885883a 	add	r2,r3,r2
 40239a4:	10c1ffcc 	andi	r3,r2,2047
 40239a8:	e0bffc17 	ldw	r2,-16(fp)
 40239ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40239b0:	e0bffe17 	ldw	r2,-8(fp)
 40239b4:	00bfcf16 	blt	zero,r2,40238f4 <__alt_mem_onchip_memory2_0+0xfc01e734>
 40239b8:	00000106 	br	40239c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 40239bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 40239c0:	e0fff517 	ldw	r3,-44(fp)
 40239c4:	e0bffd17 	ldw	r2,-12(fp)
 40239c8:	1880141e 	bne	r3,r2,4023a1c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40239cc:	e0bfff17 	ldw	r2,-4(fp)
 40239d0:	1090000c 	andi	r2,r2,16384
 40239d4:	1000131e 	bne	r2,zero,4023a24 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40239d8:	0001883a 	nop
 40239dc:	e0bffc17 	ldw	r2,-16(fp)
 40239e0:	10c00a17 	ldw	r3,40(r2)
 40239e4:	e0bff717 	ldw	r2,-36(fp)
 40239e8:	1880051e 	bne	r3,r2,4023a00 <altera_avalon_jtag_uart_read+0x138>
 40239ec:	e0bffc17 	ldw	r2,-16(fp)
 40239f0:	10c00917 	ldw	r3,36(r2)
 40239f4:	e0bffc17 	ldw	r2,-16(fp)
 40239f8:	10800117 	ldw	r2,4(r2)
 40239fc:	18bff736 	bltu	r3,r2,40239dc <__alt_mem_onchip_memory2_0+0xfc01e81c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4023a00:	e0bffc17 	ldw	r2,-16(fp)
 4023a04:	10c00a17 	ldw	r3,40(r2)
 4023a08:	e0bff717 	ldw	r2,-36(fp)
 4023a0c:	18800726 	beq	r3,r2,4023a2c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4023a10:	e0bffe17 	ldw	r2,-8(fp)
 4023a14:	00bfb716 	blt	zero,r2,40238f4 <__alt_mem_onchip_memory2_0+0xfc01e734>
 4023a18:	00000506 	br	4023a30 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4023a1c:	0001883a 	nop
 4023a20:	00000306 	br	4023a30 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4023a24:	0001883a 	nop
 4023a28:	00000106 	br	4023a30 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4023a2c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4023a30:	e0fff517 	ldw	r3,-44(fp)
 4023a34:	e0bffd17 	ldw	r2,-12(fp)
 4023a38:	18801826 	beq	r3,r2,4023a9c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023a3c:	0005303a 	rdctl	r2,status
 4023a40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023a44:	e0fffb17 	ldw	r3,-20(fp)
 4023a48:	00bfff84 	movi	r2,-2
 4023a4c:	1884703a 	and	r2,r3,r2
 4023a50:	1001703a 	wrctl	status,r2
  
  return context;
 4023a54:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4023a58:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4023a5c:	e0bffc17 	ldw	r2,-16(fp)
 4023a60:	10800817 	ldw	r2,32(r2)
 4023a64:	10c00054 	ori	r3,r2,1
 4023a68:	e0bffc17 	ldw	r2,-16(fp)
 4023a6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4023a70:	e0bffc17 	ldw	r2,-16(fp)
 4023a74:	10800017 	ldw	r2,0(r2)
 4023a78:	10800104 	addi	r2,r2,4
 4023a7c:	1007883a 	mov	r3,r2
 4023a80:	e0bffc17 	ldw	r2,-16(fp)
 4023a84:	10800817 	ldw	r2,32(r2)
 4023a88:	18800035 	stwio	r2,0(r3)
 4023a8c:	e0bffa17 	ldw	r2,-24(fp)
 4023a90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023a94:	e0bff917 	ldw	r2,-28(fp)
 4023a98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4023a9c:	e0fff517 	ldw	r3,-44(fp)
 4023aa0:	e0bffd17 	ldw	r2,-12(fp)
 4023aa4:	18800426 	beq	r3,r2,4023ab8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4023aa8:	e0fff517 	ldw	r3,-44(fp)
 4023aac:	e0bffd17 	ldw	r2,-12(fp)
 4023ab0:	1885c83a 	sub	r2,r3,r2
 4023ab4:	00000606 	br	4023ad0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4023ab8:	e0bfff17 	ldw	r2,-4(fp)
 4023abc:	1090000c 	andi	r2,r2,16384
 4023ac0:	10000226 	beq	r2,zero,4023acc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4023ac4:	00bffd44 	movi	r2,-11
 4023ac8:	00000106 	br	4023ad0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4023acc:	00bffec4 	movi	r2,-5
}
 4023ad0:	e037883a 	mov	sp,fp
 4023ad4:	dfc00117 	ldw	ra,4(sp)
 4023ad8:	df000017 	ldw	fp,0(sp)
 4023adc:	dec00204 	addi	sp,sp,8
 4023ae0:	f800283a 	ret

04023ae4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4023ae4:	defff304 	addi	sp,sp,-52
 4023ae8:	dfc00c15 	stw	ra,48(sp)
 4023aec:	df000b15 	stw	fp,44(sp)
 4023af0:	df000b04 	addi	fp,sp,44
 4023af4:	e13ffc15 	stw	r4,-16(fp)
 4023af8:	e17ffd15 	stw	r5,-12(fp)
 4023afc:	e1bffe15 	stw	r6,-8(fp)
 4023b00:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4023b04:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4023b08:	e0bffd17 	ldw	r2,-12(fp)
 4023b0c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4023b10:	00003706 	br	4023bf0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4023b14:	e0bffc17 	ldw	r2,-16(fp)
 4023b18:	10800c17 	ldw	r2,48(r2)
 4023b1c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4023b20:	e0bffc17 	ldw	r2,-16(fp)
 4023b24:	10800d17 	ldw	r2,52(r2)
 4023b28:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4023b2c:	e0fff917 	ldw	r3,-28(fp)
 4023b30:	e0bff517 	ldw	r2,-44(fp)
 4023b34:	1880062e 	bgeu	r3,r2,4023b50 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4023b38:	e0fff517 	ldw	r3,-44(fp)
 4023b3c:	e0bff917 	ldw	r2,-28(fp)
 4023b40:	1885c83a 	sub	r2,r3,r2
 4023b44:	10bfffc4 	addi	r2,r2,-1
 4023b48:	e0bff615 	stw	r2,-40(fp)
 4023b4c:	00000b06 	br	4023b7c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4023b50:	e0bff517 	ldw	r2,-44(fp)
 4023b54:	10000526 	beq	r2,zero,4023b6c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4023b58:	00c20004 	movi	r3,2048
 4023b5c:	e0bff917 	ldw	r2,-28(fp)
 4023b60:	1885c83a 	sub	r2,r3,r2
 4023b64:	e0bff615 	stw	r2,-40(fp)
 4023b68:	00000406 	br	4023b7c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4023b6c:	00c1ffc4 	movi	r3,2047
 4023b70:	e0bff917 	ldw	r2,-28(fp)
 4023b74:	1885c83a 	sub	r2,r3,r2
 4023b78:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4023b7c:	e0bff617 	ldw	r2,-40(fp)
 4023b80:	10001e26 	beq	r2,zero,4023bfc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4023b84:	e0fffe17 	ldw	r3,-8(fp)
 4023b88:	e0bff617 	ldw	r2,-40(fp)
 4023b8c:	1880022e 	bgeu	r3,r2,4023b98 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4023b90:	e0bffe17 	ldw	r2,-8(fp)
 4023b94:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4023b98:	e0bffc17 	ldw	r2,-16(fp)
 4023b9c:	10c20e04 	addi	r3,r2,2104
 4023ba0:	e0bff917 	ldw	r2,-28(fp)
 4023ba4:	1885883a 	add	r2,r3,r2
 4023ba8:	e1bff617 	ldw	r6,-40(fp)
 4023bac:	e17ffd17 	ldw	r5,-12(fp)
 4023bb0:	1009883a 	mov	r4,r2
 4023bb4:	401c1240 	call	401c124 <memcpy>
      ptr   += n;
 4023bb8:	e0fffd17 	ldw	r3,-12(fp)
 4023bbc:	e0bff617 	ldw	r2,-40(fp)
 4023bc0:	1885883a 	add	r2,r3,r2
 4023bc4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4023bc8:	e0fffe17 	ldw	r3,-8(fp)
 4023bcc:	e0bff617 	ldw	r2,-40(fp)
 4023bd0:	1885c83a 	sub	r2,r3,r2
 4023bd4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4023bd8:	e0fff917 	ldw	r3,-28(fp)
 4023bdc:	e0bff617 	ldw	r2,-40(fp)
 4023be0:	1885883a 	add	r2,r3,r2
 4023be4:	10c1ffcc 	andi	r3,r2,2047
 4023be8:	e0bffc17 	ldw	r2,-16(fp)
 4023bec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4023bf0:	e0bffe17 	ldw	r2,-8(fp)
 4023bf4:	00bfc716 	blt	zero,r2,4023b14 <__alt_mem_onchip_memory2_0+0xfc01e954>
 4023bf8:	00000106 	br	4023c00 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4023bfc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023c00:	0005303a 	rdctl	r2,status
 4023c04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023c08:	e0fffb17 	ldw	r3,-20(fp)
 4023c0c:	00bfff84 	movi	r2,-2
 4023c10:	1884703a 	and	r2,r3,r2
 4023c14:	1001703a 	wrctl	status,r2
  
  return context;
 4023c18:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4023c1c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4023c20:	e0bffc17 	ldw	r2,-16(fp)
 4023c24:	10800817 	ldw	r2,32(r2)
 4023c28:	10c00094 	ori	r3,r2,2
 4023c2c:	e0bffc17 	ldw	r2,-16(fp)
 4023c30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4023c34:	e0bffc17 	ldw	r2,-16(fp)
 4023c38:	10800017 	ldw	r2,0(r2)
 4023c3c:	10800104 	addi	r2,r2,4
 4023c40:	1007883a 	mov	r3,r2
 4023c44:	e0bffc17 	ldw	r2,-16(fp)
 4023c48:	10800817 	ldw	r2,32(r2)
 4023c4c:	18800035 	stwio	r2,0(r3)
 4023c50:	e0bffa17 	ldw	r2,-24(fp)
 4023c54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023c58:	e0bff817 	ldw	r2,-32(fp)
 4023c5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4023c60:	e0bffe17 	ldw	r2,-8(fp)
 4023c64:	0080100e 	bge	zero,r2,4023ca8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4023c68:	e0bfff17 	ldw	r2,-4(fp)
 4023c6c:	1090000c 	andi	r2,r2,16384
 4023c70:	1000101e 	bne	r2,zero,4023cb4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4023c74:	0001883a 	nop
 4023c78:	e0bffc17 	ldw	r2,-16(fp)
 4023c7c:	10c00d17 	ldw	r3,52(r2)
 4023c80:	e0bff517 	ldw	r2,-44(fp)
 4023c84:	1880051e 	bne	r3,r2,4023c9c <altera_avalon_jtag_uart_write+0x1b8>
 4023c88:	e0bffc17 	ldw	r2,-16(fp)
 4023c8c:	10c00917 	ldw	r3,36(r2)
 4023c90:	e0bffc17 	ldw	r2,-16(fp)
 4023c94:	10800117 	ldw	r2,4(r2)
 4023c98:	18bff736 	bltu	r3,r2,4023c78 <__alt_mem_onchip_memory2_0+0xfc01eab8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4023c9c:	e0bffc17 	ldw	r2,-16(fp)
 4023ca0:	10800917 	ldw	r2,36(r2)
 4023ca4:	1000051e 	bne	r2,zero,4023cbc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4023ca8:	e0bffe17 	ldw	r2,-8(fp)
 4023cac:	00bfd016 	blt	zero,r2,4023bf0 <__alt_mem_onchip_memory2_0+0xfc01ea30>
 4023cb0:	00000306 	br	4023cc0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4023cb4:	0001883a 	nop
 4023cb8:	00000106 	br	4023cc0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4023cbc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4023cc0:	e0fffd17 	ldw	r3,-12(fp)
 4023cc4:	e0bff717 	ldw	r2,-36(fp)
 4023cc8:	18800426 	beq	r3,r2,4023cdc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4023ccc:	e0fffd17 	ldw	r3,-12(fp)
 4023cd0:	e0bff717 	ldw	r2,-36(fp)
 4023cd4:	1885c83a 	sub	r2,r3,r2
 4023cd8:	00000606 	br	4023cf4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4023cdc:	e0bfff17 	ldw	r2,-4(fp)
 4023ce0:	1090000c 	andi	r2,r2,16384
 4023ce4:	10000226 	beq	r2,zero,4023cf0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4023ce8:	00bffd44 	movi	r2,-11
 4023cec:	00000106 	br	4023cf4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4023cf0:	00bffec4 	movi	r2,-5
}
 4023cf4:	e037883a 	mov	sp,fp
 4023cf8:	dfc00117 	ldw	ra,4(sp)
 4023cfc:	df000017 	ldw	fp,0(sp)
 4023d00:	dec00204 	addi	sp,sp,8
 4023d04:	f800283a 	ret

04023d08 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4023d08:	defff404 	addi	sp,sp,-48
 4023d0c:	df000b15 	stw	fp,44(sp)
 4023d10:	df000b04 	addi	fp,sp,44
 4023d14:	e13ffc15 	stw	r4,-16(fp)
 4023d18:	e17ffd15 	stw	r5,-12(fp)
 4023d1c:	e1bffe15 	stw	r6,-8(fp)
 4023d20:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4023d24:	e0ffff17 	ldw	r3,-4(fp)
 4023d28:	e0bffe17 	ldw	r2,-8(fp)
 4023d2c:	1885883a 	add	r2,r3,r2
 4023d30:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 4023d34:	e0c00217 	ldw	r3,8(fp)
 4023d38:	e0800117 	ldw	r2,4(fp)
 4023d3c:	1885883a 	add	r2,r3,r2
 4023d40:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 4023d44:	e0800117 	ldw	r2,4(fp)
 4023d48:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4023d4c:	e0bffe17 	ldw	r2,-8(fp)
 4023d50:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4023d54:	00800044 	movi	r2,1
 4023d58:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4023d5c:	e0bffc17 	ldw	r2,-16(fp)
 4023d60:	10800504 	addi	r2,r2,20
 4023d64:	1009883a 	mov	r4,r2
 4023d68:	00c00044 	movi	r3,1
 4023d6c:	e0bffd17 	ldw	r2,-12(fp)
 4023d70:	1884983a 	sll	r2,r3,r2
 4023d74:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4023d78:	e0800317 	ldw	r2,12(fp)
 4023d7c:	1080008c 	andi	r2,r2,2
 4023d80:	1000051e 	bne	r2,zero,4023d98 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4023d84:	e0bffc17 	ldw	r2,-16(fp)
 4023d88:	10800304 	addi	r2,r2,12
 4023d8c:	1007883a 	mov	r3,r2
 4023d90:	00810004 	movi	r2,1024
 4023d94:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4023d98:	e0bffc17 	ldw	r2,-16(fp)
 4023d9c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4023da0:	e0bffc17 	ldw	r2,-16(fp)
 4023da4:	10800204 	addi	r2,r2,8
 4023da8:	10800037 	ldwio	r2,0(r2)
 4023dac:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4023db0:	e0bffa17 	ldw	r2,-24(fp)
 4023db4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4023db8:	10000226 	beq	r2,zero,4023dc4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4023dbc:	e0bff717 	ldw	r2,-36(fp)
 4023dc0:	1000031e 	bne	r2,zero,4023dd0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4023dc4:	e0bffa17 	ldw	r2,-24(fp)
 4023dc8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4023dcc:	103ff426 	beq	r2,zero,4023da0 <__alt_mem_onchip_memory2_0+0xfc01ebe0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4023dd0:	e0bffa17 	ldw	r2,-24(fp)
 4023dd4:	1080100c 	andi	r2,r2,64
 4023dd8:	10001e26 	beq	r2,zero,4023e54 <alt_avalon_spi_command+0x14c>
 4023ddc:	e0bff717 	ldw	r2,-36(fp)
 4023de0:	00801c0e 	bge	zero,r2,4023e54 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4023de4:	e0bff717 	ldw	r2,-36(fp)
 4023de8:	10bfffc4 	addi	r2,r2,-1
 4023dec:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4023df0:	e0ffff17 	ldw	r3,-4(fp)
 4023df4:	e0bff817 	ldw	r2,-32(fp)
 4023df8:	18800a2e 	bgeu	r3,r2,4023e24 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4023dfc:	e0bffc17 	ldw	r2,-16(fp)
 4023e00:	10800104 	addi	r2,r2,4
 4023e04:	1009883a 	mov	r4,r2
 4023e08:	e0bfff17 	ldw	r2,-4(fp)
 4023e0c:	10c00044 	addi	r3,r2,1
 4023e10:	e0ffff15 	stw	r3,-4(fp)
 4023e14:	10800003 	ldbu	r2,0(r2)
 4023e18:	10803fcc 	andi	r2,r2,255
 4023e1c:	20800035 	stwio	r2,0(r4)
 4023e20:	00000c06 	br	4023e54 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 4023e24:	e0bff517 	ldw	r2,-44(fp)
 4023e28:	10000826 	beq	r2,zero,4023e4c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4023e2c:	e0bff517 	ldw	r2,-44(fp)
 4023e30:	10bfffc4 	addi	r2,r2,-1
 4023e34:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4023e38:	e0bffc17 	ldw	r2,-16(fp)
 4023e3c:	10800104 	addi	r2,r2,4
 4023e40:	0007883a 	mov	r3,zero
 4023e44:	10c00035 	stwio	r3,0(r2)
 4023e48:	00000206 	br	4023e54 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4023e4c:	00bf0004 	movi	r2,-1024
 4023e50:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4023e54:	e0bffa17 	ldw	r2,-24(fp)
 4023e58:	1080200c 	andi	r2,r2,128
 4023e5c:	103fd026 	beq	r2,zero,4023da0 <__alt_mem_onchip_memory2_0+0xfc01ebe0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4023e60:	e0bffc17 	ldw	r2,-16(fp)
 4023e64:	10800037 	ldwio	r2,0(r2)
 4023e68:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4023e6c:	e0bff617 	ldw	r2,-40(fp)
 4023e70:	10000426 	beq	r2,zero,4023e84 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4023e74:	e0bff617 	ldw	r2,-40(fp)
 4023e78:	10bfffc4 	addi	r2,r2,-1
 4023e7c:	e0bff615 	stw	r2,-40(fp)
 4023e80:	00000506 	br	4023e98 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4023e84:	e0800217 	ldw	r2,8(fp)
 4023e88:	10c00044 	addi	r3,r2,1
 4023e8c:	e0c00215 	stw	r3,8(fp)
 4023e90:	e0fffb17 	ldw	r3,-20(fp)
 4023e94:	10c00005 	stb	r3,0(r2)
      credits++;
 4023e98:	e0bff717 	ldw	r2,-36(fp)
 4023e9c:	10800044 	addi	r2,r2,1
 4023ea0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4023ea4:	e0bff617 	ldw	r2,-40(fp)
 4023ea8:	103fbd1e 	bne	r2,zero,4023da0 <__alt_mem_onchip_memory2_0+0xfc01ebe0>
 4023eac:	e0c00217 	ldw	r3,8(fp)
 4023eb0:	e0bff917 	ldw	r2,-28(fp)
 4023eb4:	18bfba1e 	bne	r3,r2,4023da0 <__alt_mem_onchip_memory2_0+0xfc01ebe0>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4023eb8:	e0bffc17 	ldw	r2,-16(fp)
 4023ebc:	10800204 	addi	r2,r2,8
 4023ec0:	10800037 	ldwio	r2,0(r2)
 4023ec4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4023ec8:	e0bffa17 	ldw	r2,-24(fp)
 4023ecc:	1080080c 	andi	r2,r2,32
 4023ed0:	103ff926 	beq	r2,zero,4023eb8 <__alt_mem_onchip_memory2_0+0xfc01ecf8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4023ed4:	e0800317 	ldw	r2,12(fp)
 4023ed8:	1080004c 	andi	r2,r2,1
 4023edc:	1000041e 	bne	r2,zero,4023ef0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4023ee0:	e0bffc17 	ldw	r2,-16(fp)
 4023ee4:	10800304 	addi	r2,r2,12
 4023ee8:	0007883a 	mov	r3,zero
 4023eec:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4023ef0:	e0800117 	ldw	r2,4(fp)
}
 4023ef4:	e037883a 	mov	sp,fp
 4023ef8:	df000017 	ldw	fp,0(sp)
 4023efc:	dec00104 	addi	sp,sp,4
 4023f00:	f800283a 	ret

04023f04 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4023f04:	defffa04 	addi	sp,sp,-24
 4023f08:	dfc00515 	stw	ra,20(sp)
 4023f0c:	df000415 	stw	fp,16(sp)
 4023f10:	df000404 	addi	fp,sp,16
 4023f14:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4023f18:	0007883a 	mov	r3,zero
 4023f1c:	e0bfff17 	ldw	r2,-4(fp)
 4023f20:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4023f24:	e0bfff17 	ldw	r2,-4(fp)
 4023f28:	10800104 	addi	r2,r2,4
 4023f2c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023f30:	0005303a 	rdctl	r2,status
 4023f34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023f38:	e0fffd17 	ldw	r3,-12(fp)
 4023f3c:	00bfff84 	movi	r2,-2
 4023f40:	1884703a 	and	r2,r3,r2
 4023f44:	1001703a 	wrctl	status,r2
  
  return context;
 4023f48:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4023f4c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4023f50:	4022f580 	call	4022f58 <alt_tick>
 4023f54:	e0bffc17 	ldw	r2,-16(fp)
 4023f58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023f5c:	e0bffe17 	ldw	r2,-8(fp)
 4023f60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4023f64:	0001883a 	nop
 4023f68:	e037883a 	mov	sp,fp
 4023f6c:	dfc00117 	ldw	ra,4(sp)
 4023f70:	df000017 	ldw	fp,0(sp)
 4023f74:	dec00204 	addi	sp,sp,8
 4023f78:	f800283a 	ret

04023f7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4023f7c:	defff804 	addi	sp,sp,-32
 4023f80:	dfc00715 	stw	ra,28(sp)
 4023f84:	df000615 	stw	fp,24(sp)
 4023f88:	df000604 	addi	fp,sp,24
 4023f8c:	e13ffc15 	stw	r4,-16(fp)
 4023f90:	e17ffd15 	stw	r5,-12(fp)
 4023f94:	e1bffe15 	stw	r6,-8(fp)
 4023f98:	e1ffff15 	stw	r7,-4(fp)
 4023f9c:	e0bfff17 	ldw	r2,-4(fp)
 4023fa0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4023fa4:	d0a81817 	ldw	r2,-24480(gp)
 4023fa8:	1000021e 	bne	r2,zero,4023fb4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4023fac:	e0bffb17 	ldw	r2,-20(fp)
 4023fb0:	d0a81815 	stw	r2,-24480(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4023fb4:	e0bffc17 	ldw	r2,-16(fp)
 4023fb8:	10800104 	addi	r2,r2,4
 4023fbc:	00c001c4 	movi	r3,7
 4023fc0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4023fc4:	d8000015 	stw	zero,0(sp)
 4023fc8:	e1fffc17 	ldw	r7,-16(fp)
 4023fcc:	018100b4 	movhi	r6,1026
 4023fd0:	318fc104 	addi	r6,r6,16132
 4023fd4:	e17ffe17 	ldw	r5,-8(fp)
 4023fd8:	e13ffd17 	ldw	r4,-12(fp)
 4023fdc:	402445c0 	call	402445c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4023fe0:	0001883a 	nop
 4023fe4:	e037883a 	mov	sp,fp
 4023fe8:	dfc00117 	ldw	ra,4(sp)
 4023fec:	df000017 	ldw	fp,0(sp)
 4023ff0:	dec00204 	addi	sp,sp,8
 4023ff4:	f800283a 	ret

04023ff8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4023ff8:	defff504 	addi	sp,sp,-44
 4023ffc:	df000a15 	stw	fp,40(sp)
 4024000:	df000a04 	addi	fp,sp,40
 4024004:	e13ffc15 	stw	r4,-16(fp)
 4024008:	e17ffd15 	stw	r5,-12(fp)
 402400c:	e1bffe15 	stw	r6,-8(fp)
 4024010:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4024014:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4024018:	d0a81817 	ldw	r2,-24480(gp)
  
  if (alt_ticks_per_second ())
 402401c:	10003c26 	beq	r2,zero,4024110 <alt_alarm_start+0x118>
  {
    if (alarm)
 4024020:	e0bffc17 	ldw	r2,-16(fp)
 4024024:	10003826 	beq	r2,zero,4024108 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4024028:	e0bffc17 	ldw	r2,-16(fp)
 402402c:	e0fffe17 	ldw	r3,-8(fp)
 4024030:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4024034:	e0bffc17 	ldw	r2,-16(fp)
 4024038:	e0ffff17 	ldw	r3,-4(fp)
 402403c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024040:	0005303a 	rdctl	r2,status
 4024044:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024048:	e0fff917 	ldw	r3,-28(fp)
 402404c:	00bfff84 	movi	r2,-2
 4024050:	1884703a 	and	r2,r3,r2
 4024054:	1001703a 	wrctl	status,r2
  
  return context;
 4024058:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 402405c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4024060:	d0a81917 	ldw	r2,-24476(gp)
      
      current_nticks = alt_nticks();
 4024064:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4024068:	e0fffd17 	ldw	r3,-12(fp)
 402406c:	e0bff617 	ldw	r2,-40(fp)
 4024070:	1885883a 	add	r2,r3,r2
 4024074:	10c00044 	addi	r3,r2,1
 4024078:	e0bffc17 	ldw	r2,-16(fp)
 402407c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4024080:	e0bffc17 	ldw	r2,-16(fp)
 4024084:	10c00217 	ldw	r3,8(r2)
 4024088:	e0bff617 	ldw	r2,-40(fp)
 402408c:	1880042e 	bgeu	r3,r2,40240a0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4024090:	e0bffc17 	ldw	r2,-16(fp)
 4024094:	00c00044 	movi	r3,1
 4024098:	10c00405 	stb	r3,16(r2)
 402409c:	00000206 	br	40240a8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 40240a0:	e0bffc17 	ldw	r2,-16(fp)
 40240a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 40240a8:	e0bffc17 	ldw	r2,-16(fp)
 40240ac:	d0e01504 	addi	r3,gp,-32684
 40240b0:	e0fffa15 	stw	r3,-24(fp)
 40240b4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40240b8:	e0bffb17 	ldw	r2,-20(fp)
 40240bc:	e0fffa17 	ldw	r3,-24(fp)
 40240c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40240c4:	e0bffa17 	ldw	r2,-24(fp)
 40240c8:	10c00017 	ldw	r3,0(r2)
 40240cc:	e0bffb17 	ldw	r2,-20(fp)
 40240d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40240d4:	e0bffa17 	ldw	r2,-24(fp)
 40240d8:	10800017 	ldw	r2,0(r2)
 40240dc:	e0fffb17 	ldw	r3,-20(fp)
 40240e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40240e4:	e0bffa17 	ldw	r2,-24(fp)
 40240e8:	e0fffb17 	ldw	r3,-20(fp)
 40240ec:	10c00015 	stw	r3,0(r2)
 40240f0:	e0bff817 	ldw	r2,-32(fp)
 40240f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40240f8:	e0bff717 	ldw	r2,-36(fp)
 40240fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4024100:	0005883a 	mov	r2,zero
 4024104:	00000306 	br	4024114 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4024108:	00bffa84 	movi	r2,-22
 402410c:	00000106 	br	4024114 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4024110:	00bfde84 	movi	r2,-134
  }
}
 4024114:	e037883a 	mov	sp,fp
 4024118:	df000017 	ldw	fp,0(sp)
 402411c:	dec00104 	addi	sp,sp,4
 4024120:	f800283a 	ret

04024124 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4024124:	defffa04 	addi	sp,sp,-24
 4024128:	dfc00515 	stw	ra,20(sp)
 402412c:	df000415 	stw	fp,16(sp)
 4024130:	df000404 	addi	fp,sp,16
 4024134:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4024138:	00800244 	movi	r2,9
 402413c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4024140:	014003f4 	movhi	r5,15
 4024144:	29509004 	addi	r5,r5,16960
 4024148:	e13ffd17 	ldw	r4,-12(fp)
 402414c:	40118340 	call	4011834 <__mulsi3>
 4024150:	100b883a 	mov	r5,r2
 4024154:	0100bef4 	movhi	r4,763
 4024158:	213c2004 	addi	r4,r4,-3968
 402415c:	40117780 	call	4011778 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4024160:	100b883a 	mov	r5,r2
 4024164:	01200034 	movhi	r4,32768
 4024168:	213fffc4 	addi	r4,r4,-1
 402416c:	40117780 	call	4011778 <__udivsi3>
 4024170:	100b883a 	mov	r5,r2
 4024174:	e13fff17 	ldw	r4,-4(fp)
 4024178:	40117780 	call	4011778 <__udivsi3>
 402417c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4024180:	e0bffe17 	ldw	r2,-8(fp)
 4024184:	10002a26 	beq	r2,zero,4024230 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4024188:	e03ffc15 	stw	zero,-16(fp)
 402418c:	00001706 	br	40241ec <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4024190:	00a00034 	movhi	r2,32768
 4024194:	10bfffc4 	addi	r2,r2,-1
 4024198:	10bfffc4 	addi	r2,r2,-1
 402419c:	103ffe1e 	bne	r2,zero,4024198 <__alt_mem_onchip_memory2_0+0xfc01efd8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40241a0:	014003f4 	movhi	r5,15
 40241a4:	29509004 	addi	r5,r5,16960
 40241a8:	e13ffd17 	ldw	r4,-12(fp)
 40241ac:	40118340 	call	4011834 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40241b0:	100b883a 	mov	r5,r2
 40241b4:	0100bef4 	movhi	r4,763
 40241b8:	213c2004 	addi	r4,r4,-3968
 40241bc:	40117780 	call	4011778 <__udivsi3>
 40241c0:	100b883a 	mov	r5,r2
 40241c4:	01200034 	movhi	r4,32768
 40241c8:	213fffc4 	addi	r4,r4,-1
 40241cc:	40117780 	call	4011778 <__udivsi3>
 40241d0:	1007883a 	mov	r3,r2
 40241d4:	e0bfff17 	ldw	r2,-4(fp)
 40241d8:	10c5c83a 	sub	r2,r2,r3
 40241dc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 40241e0:	e0bffc17 	ldw	r2,-16(fp)
 40241e4:	10800044 	addi	r2,r2,1
 40241e8:	e0bffc15 	stw	r2,-16(fp)
 40241ec:	e0fffc17 	ldw	r3,-16(fp)
 40241f0:	e0bffe17 	ldw	r2,-8(fp)
 40241f4:	18bfe616 	blt	r3,r2,4024190 <__alt_mem_onchip_memory2_0+0xfc01efd0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40241f8:	014003f4 	movhi	r5,15
 40241fc:	29509004 	addi	r5,r5,16960
 4024200:	e13ffd17 	ldw	r4,-12(fp)
 4024204:	40118340 	call	4011834 <__mulsi3>
 4024208:	100b883a 	mov	r5,r2
 402420c:	0100bef4 	movhi	r4,763
 4024210:	213c2004 	addi	r4,r4,-3968
 4024214:	40117780 	call	4011778 <__udivsi3>
 4024218:	e17fff17 	ldw	r5,-4(fp)
 402421c:	1009883a 	mov	r4,r2
 4024220:	40118340 	call	4011834 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4024224:	10bfffc4 	addi	r2,r2,-1
 4024228:	103ffe1e 	bne	r2,zero,4024224 <__alt_mem_onchip_memory2_0+0xfc01f064>
 402422c:	00000d06 	br	4024264 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4024230:	014003f4 	movhi	r5,15
 4024234:	29509004 	addi	r5,r5,16960
 4024238:	e13ffd17 	ldw	r4,-12(fp)
 402423c:	40118340 	call	4011834 <__mulsi3>
 4024240:	100b883a 	mov	r5,r2
 4024244:	0100bef4 	movhi	r4,763
 4024248:	213c2004 	addi	r4,r4,-3968
 402424c:	40117780 	call	4011778 <__udivsi3>
 4024250:	e17fff17 	ldw	r5,-4(fp)
 4024254:	1009883a 	mov	r4,r2
 4024258:	40118340 	call	4011834 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402425c:	10bfffc4 	addi	r2,r2,-1
 4024260:	00bffe16 	blt	zero,r2,402425c <__alt_mem_onchip_memory2_0+0xfc01f09c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4024264:	0005883a 	mov	r2,zero
}
 4024268:	e037883a 	mov	sp,fp
 402426c:	dfc00117 	ldw	ra,4(sp)
 4024270:	df000017 	ldw	fp,0(sp)
 4024274:	dec00204 	addi	sp,sp,8
 4024278:	f800283a 	ret

0402427c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 402427c:	deffff04 	addi	sp,sp,-4
 4024280:	df000015 	stw	fp,0(sp)
 4024284:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4024288:	0001883a 	nop
 402428c:	e037883a 	mov	sp,fp
 4024290:	df000017 	ldw	fp,0(sp)
 4024294:	dec00104 	addi	sp,sp,4
 4024298:	f800283a 	ret

0402429c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402429c:	defffe04 	addi	sp,sp,-8
 40242a0:	dfc00115 	stw	ra,4(sp)
 40242a4:	df000015 	stw	fp,0(sp)
 40242a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40242ac:	d0a01317 	ldw	r2,-32692(gp)
 40242b0:	10000326 	beq	r2,zero,40242c0 <alt_get_errno+0x24>
 40242b4:	d0a01317 	ldw	r2,-32692(gp)
 40242b8:	103ee83a 	callr	r2
 40242bc:	00000106 	br	40242c4 <alt_get_errno+0x28>
 40242c0:	d0a80a04 	addi	r2,gp,-24536
}
 40242c4:	e037883a 	mov	sp,fp
 40242c8:	dfc00117 	ldw	ra,4(sp)
 40242cc:	df000017 	ldw	fp,0(sp)
 40242d0:	dec00204 	addi	sp,sp,8
 40242d4:	f800283a 	ret

040242d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40242d8:	defffa04 	addi	sp,sp,-24
 40242dc:	dfc00515 	stw	ra,20(sp)
 40242e0:	df000415 	stw	fp,16(sp)
 40242e4:	df000404 	addi	fp,sp,16
 40242e8:	e13ffe15 	stw	r4,-8(fp)
 40242ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40242f0:	e0bffe17 	ldw	r2,-8(fp)
 40242f4:	10000326 	beq	r2,zero,4024304 <alt_dev_llist_insert+0x2c>
 40242f8:	e0bffe17 	ldw	r2,-8(fp)
 40242fc:	10800217 	ldw	r2,8(r2)
 4024300:	1000061e 	bne	r2,zero,402431c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4024304:	402429c0 	call	402429c <alt_get_errno>
 4024308:	1007883a 	mov	r3,r2
 402430c:	00800584 	movi	r2,22
 4024310:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4024314:	00bffa84 	movi	r2,-22
 4024318:	00001306 	br	4024368 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 402431c:	e0bffe17 	ldw	r2,-8(fp)
 4024320:	e0ffff17 	ldw	r3,-4(fp)
 4024324:	e0fffc15 	stw	r3,-16(fp)
 4024328:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402432c:	e0bffd17 	ldw	r2,-12(fp)
 4024330:	e0fffc17 	ldw	r3,-16(fp)
 4024334:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4024338:	e0bffc17 	ldw	r2,-16(fp)
 402433c:	10c00017 	ldw	r3,0(r2)
 4024340:	e0bffd17 	ldw	r2,-12(fp)
 4024344:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4024348:	e0bffc17 	ldw	r2,-16(fp)
 402434c:	10800017 	ldw	r2,0(r2)
 4024350:	e0fffd17 	ldw	r3,-12(fp)
 4024354:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4024358:	e0bffc17 	ldw	r2,-16(fp)
 402435c:	e0fffd17 	ldw	r3,-12(fp)
 4024360:	10c00015 	stw	r3,0(r2)

  return 0;  
 4024364:	0005883a 	mov	r2,zero
}
 4024368:	e037883a 	mov	sp,fp
 402436c:	dfc00117 	ldw	ra,4(sp)
 4024370:	df000017 	ldw	fp,0(sp)
 4024374:	dec00204 	addi	sp,sp,8
 4024378:	f800283a 	ret

0402437c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 402437c:	defffd04 	addi	sp,sp,-12
 4024380:	dfc00215 	stw	ra,8(sp)
 4024384:	df000115 	stw	fp,4(sp)
 4024388:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402438c:	008100b4 	movhi	r2,1026
 4024390:	10946304 	addi	r2,r2,20876
 4024394:	e0bfff15 	stw	r2,-4(fp)
 4024398:	00000606 	br	40243b4 <_do_ctors+0x38>
        (*ctor) (); 
 402439c:	e0bfff17 	ldw	r2,-4(fp)
 40243a0:	10800017 	ldw	r2,0(r2)
 40243a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40243a8:	e0bfff17 	ldw	r2,-4(fp)
 40243ac:	10bfff04 	addi	r2,r2,-4
 40243b0:	e0bfff15 	stw	r2,-4(fp)
 40243b4:	e0ffff17 	ldw	r3,-4(fp)
 40243b8:	008100b4 	movhi	r2,1026
 40243bc:	10946404 	addi	r2,r2,20880
 40243c0:	18bff62e 	bgeu	r3,r2,402439c <__alt_mem_onchip_memory2_0+0xfc01f1dc>
        (*ctor) (); 
}
 40243c4:	0001883a 	nop
 40243c8:	e037883a 	mov	sp,fp
 40243cc:	dfc00117 	ldw	ra,4(sp)
 40243d0:	df000017 	ldw	fp,0(sp)
 40243d4:	dec00204 	addi	sp,sp,8
 40243d8:	f800283a 	ret

040243dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40243dc:	defffd04 	addi	sp,sp,-12
 40243e0:	dfc00215 	stw	ra,8(sp)
 40243e4:	df000115 	stw	fp,4(sp)
 40243e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40243ec:	008100b4 	movhi	r2,1026
 40243f0:	10946304 	addi	r2,r2,20876
 40243f4:	e0bfff15 	stw	r2,-4(fp)
 40243f8:	00000606 	br	4024414 <_do_dtors+0x38>
        (*dtor) (); 
 40243fc:	e0bfff17 	ldw	r2,-4(fp)
 4024400:	10800017 	ldw	r2,0(r2)
 4024404:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4024408:	e0bfff17 	ldw	r2,-4(fp)
 402440c:	10bfff04 	addi	r2,r2,-4
 4024410:	e0bfff15 	stw	r2,-4(fp)
 4024414:	e0ffff17 	ldw	r3,-4(fp)
 4024418:	008100b4 	movhi	r2,1026
 402441c:	10946404 	addi	r2,r2,20880
 4024420:	18bff62e 	bgeu	r3,r2,40243fc <__alt_mem_onchip_memory2_0+0xfc01f23c>
        (*dtor) (); 
}
 4024424:	0001883a 	nop
 4024428:	e037883a 	mov	sp,fp
 402442c:	dfc00117 	ldw	ra,4(sp)
 4024430:	df000017 	ldw	fp,0(sp)
 4024434:	dec00204 	addi	sp,sp,8
 4024438:	f800283a 	ret

0402443c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 402443c:	deffff04 	addi	sp,sp,-4
 4024440:	df000015 	stw	fp,0(sp)
 4024444:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4024448:	0001883a 	nop
 402444c:	e037883a 	mov	sp,fp
 4024450:	df000017 	ldw	fp,0(sp)
 4024454:	dec00104 	addi	sp,sp,4
 4024458:	f800283a 	ret

0402445c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402445c:	defff904 	addi	sp,sp,-28
 4024460:	dfc00615 	stw	ra,24(sp)
 4024464:	df000515 	stw	fp,20(sp)
 4024468:	df000504 	addi	fp,sp,20
 402446c:	e13ffc15 	stw	r4,-16(fp)
 4024470:	e17ffd15 	stw	r5,-12(fp)
 4024474:	e1bffe15 	stw	r6,-8(fp)
 4024478:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 402447c:	e0800217 	ldw	r2,8(fp)
 4024480:	d8800015 	stw	r2,0(sp)
 4024484:	e1ffff17 	ldw	r7,-4(fp)
 4024488:	e1bffe17 	ldw	r6,-8(fp)
 402448c:	e17ffd17 	ldw	r5,-12(fp)
 4024490:	e13ffc17 	ldw	r4,-16(fp)
 4024494:	402460c0 	call	402460c <alt_iic_isr_register>
}  
 4024498:	e037883a 	mov	sp,fp
 402449c:	dfc00117 	ldw	ra,4(sp)
 40244a0:	df000017 	ldw	fp,0(sp)
 40244a4:	dec00204 	addi	sp,sp,8
 40244a8:	f800283a 	ret

040244ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40244ac:	defff904 	addi	sp,sp,-28
 40244b0:	df000615 	stw	fp,24(sp)
 40244b4:	df000604 	addi	fp,sp,24
 40244b8:	e13ffe15 	stw	r4,-8(fp)
 40244bc:	e17fff15 	stw	r5,-4(fp)
 40244c0:	e0bfff17 	ldw	r2,-4(fp)
 40244c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40244c8:	0005303a 	rdctl	r2,status
 40244cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40244d0:	e0fffb17 	ldw	r3,-20(fp)
 40244d4:	00bfff84 	movi	r2,-2
 40244d8:	1884703a 	and	r2,r3,r2
 40244dc:	1001703a 	wrctl	status,r2
  
  return context;
 40244e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40244e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 40244e8:	00c00044 	movi	r3,1
 40244ec:	e0bffa17 	ldw	r2,-24(fp)
 40244f0:	1884983a 	sll	r2,r3,r2
 40244f4:	1007883a 	mov	r3,r2
 40244f8:	d0a81a17 	ldw	r2,-24472(gp)
 40244fc:	1884b03a 	or	r2,r3,r2
 4024500:	d0a81a15 	stw	r2,-24472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4024504:	d0a81a17 	ldw	r2,-24472(gp)
 4024508:	100170fa 	wrctl	ienable,r2
 402450c:	e0bffc17 	ldw	r2,-16(fp)
 4024510:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024514:	e0bffd17 	ldw	r2,-12(fp)
 4024518:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402451c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4024520:	0001883a 	nop
}
 4024524:	e037883a 	mov	sp,fp
 4024528:	df000017 	ldw	fp,0(sp)
 402452c:	dec00104 	addi	sp,sp,4
 4024530:	f800283a 	ret

04024534 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4024534:	defff904 	addi	sp,sp,-28
 4024538:	df000615 	stw	fp,24(sp)
 402453c:	df000604 	addi	fp,sp,24
 4024540:	e13ffe15 	stw	r4,-8(fp)
 4024544:	e17fff15 	stw	r5,-4(fp)
 4024548:	e0bfff17 	ldw	r2,-4(fp)
 402454c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024550:	0005303a 	rdctl	r2,status
 4024554:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024558:	e0fffb17 	ldw	r3,-20(fp)
 402455c:	00bfff84 	movi	r2,-2
 4024560:	1884703a 	and	r2,r3,r2
 4024564:	1001703a 	wrctl	status,r2
  
  return context;
 4024568:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402456c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4024570:	00c00044 	movi	r3,1
 4024574:	e0bffa17 	ldw	r2,-24(fp)
 4024578:	1884983a 	sll	r2,r3,r2
 402457c:	0084303a 	nor	r2,zero,r2
 4024580:	1007883a 	mov	r3,r2
 4024584:	d0a81a17 	ldw	r2,-24472(gp)
 4024588:	1884703a 	and	r2,r3,r2
 402458c:	d0a81a15 	stw	r2,-24472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4024590:	d0a81a17 	ldw	r2,-24472(gp)
 4024594:	100170fa 	wrctl	ienable,r2
 4024598:	e0bffc17 	ldw	r2,-16(fp)
 402459c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40245a0:	e0bffd17 	ldw	r2,-12(fp)
 40245a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40245a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 40245ac:	0001883a 	nop
}
 40245b0:	e037883a 	mov	sp,fp
 40245b4:	df000017 	ldw	fp,0(sp)
 40245b8:	dec00104 	addi	sp,sp,4
 40245bc:	f800283a 	ret

040245c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40245c0:	defffc04 	addi	sp,sp,-16
 40245c4:	df000315 	stw	fp,12(sp)
 40245c8:	df000304 	addi	fp,sp,12
 40245cc:	e13ffe15 	stw	r4,-8(fp)
 40245d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40245d4:	000530fa 	rdctl	r2,ienable
 40245d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40245dc:	00c00044 	movi	r3,1
 40245e0:	e0bfff17 	ldw	r2,-4(fp)
 40245e4:	1884983a 	sll	r2,r3,r2
 40245e8:	1007883a 	mov	r3,r2
 40245ec:	e0bffd17 	ldw	r2,-12(fp)
 40245f0:	1884703a 	and	r2,r3,r2
 40245f4:	1004c03a 	cmpne	r2,r2,zero
 40245f8:	10803fcc 	andi	r2,r2,255
}
 40245fc:	e037883a 	mov	sp,fp
 4024600:	df000017 	ldw	fp,0(sp)
 4024604:	dec00104 	addi	sp,sp,4
 4024608:	f800283a 	ret

0402460c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402460c:	defff504 	addi	sp,sp,-44
 4024610:	dfc00a15 	stw	ra,40(sp)
 4024614:	df000915 	stw	fp,36(sp)
 4024618:	df000904 	addi	fp,sp,36
 402461c:	e13ffc15 	stw	r4,-16(fp)
 4024620:	e17ffd15 	stw	r5,-12(fp)
 4024624:	e1bffe15 	stw	r6,-8(fp)
 4024628:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 402462c:	00bffa84 	movi	r2,-22
 4024630:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4024634:	e0bffd17 	ldw	r2,-12(fp)
 4024638:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 402463c:	e0bff817 	ldw	r2,-32(fp)
 4024640:	10800808 	cmpgei	r2,r2,32
 4024644:	1000271e 	bne	r2,zero,40246e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024648:	0005303a 	rdctl	r2,status
 402464c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024650:	e0fffb17 	ldw	r3,-20(fp)
 4024654:	00bfff84 	movi	r2,-2
 4024658:	1884703a 	and	r2,r3,r2
 402465c:	1001703a 	wrctl	status,r2
  
  return context;
 4024660:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4024664:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4024668:	008100f4 	movhi	r2,1027
 402466c:	10aac204 	addi	r2,r2,-21752
 4024670:	e0fff817 	ldw	r3,-32(fp)
 4024674:	180690fa 	slli	r3,r3,3
 4024678:	10c5883a 	add	r2,r2,r3
 402467c:	e0fffe17 	ldw	r3,-8(fp)
 4024680:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4024684:	008100f4 	movhi	r2,1027
 4024688:	10aac204 	addi	r2,r2,-21752
 402468c:	e0fff817 	ldw	r3,-32(fp)
 4024690:	180690fa 	slli	r3,r3,3
 4024694:	10c5883a 	add	r2,r2,r3
 4024698:	10800104 	addi	r2,r2,4
 402469c:	e0ffff17 	ldw	r3,-4(fp)
 40246a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40246a4:	e0bffe17 	ldw	r2,-8(fp)
 40246a8:	10000526 	beq	r2,zero,40246c0 <alt_iic_isr_register+0xb4>
 40246ac:	e0bff817 	ldw	r2,-32(fp)
 40246b0:	100b883a 	mov	r5,r2
 40246b4:	e13ffc17 	ldw	r4,-16(fp)
 40246b8:	40244ac0 	call	40244ac <alt_ic_irq_enable>
 40246bc:	00000406 	br	40246d0 <alt_iic_isr_register+0xc4>
 40246c0:	e0bff817 	ldw	r2,-32(fp)
 40246c4:	100b883a 	mov	r5,r2
 40246c8:	e13ffc17 	ldw	r4,-16(fp)
 40246cc:	40245340 	call	4024534 <alt_ic_irq_disable>
 40246d0:	e0bff715 	stw	r2,-36(fp)
 40246d4:	e0bffa17 	ldw	r2,-24(fp)
 40246d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40246dc:	e0bff917 	ldw	r2,-28(fp)
 40246e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40246e4:	e0bff717 	ldw	r2,-36(fp)
}
 40246e8:	e037883a 	mov	sp,fp
 40246ec:	dfc00117 	ldw	ra,4(sp)
 40246f0:	df000017 	ldw	fp,0(sp)
 40246f4:	dec00204 	addi	sp,sp,8
 40246f8:	f800283a 	ret

040246fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40246fc:	defff804 	addi	sp,sp,-32
 4024700:	dfc00715 	stw	ra,28(sp)
 4024704:	df000615 	stw	fp,24(sp)
 4024708:	dc000515 	stw	r16,20(sp)
 402470c:	df000604 	addi	fp,sp,24
 4024710:	e13ffb15 	stw	r4,-20(fp)
 4024714:	e17ffc15 	stw	r5,-16(fp)
 4024718:	e1bffd15 	stw	r6,-12(fp)
 402471c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4024720:	e1bffe17 	ldw	r6,-8(fp)
 4024724:	e17ffd17 	ldw	r5,-12(fp)
 4024728:	e13ffc17 	ldw	r4,-16(fp)
 402472c:	40249840 	call	4024984 <open>
 4024730:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4024734:	e0bffa17 	ldw	r2,-24(fp)
 4024738:	10002216 	blt	r2,zero,40247c4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 402473c:	040100b4 	movhi	r16,1026
 4024740:	84195c04 	addi	r16,r16,25968
 4024744:	e0bffa17 	ldw	r2,-24(fp)
 4024748:	01400304 	movi	r5,12
 402474c:	1009883a 	mov	r4,r2
 4024750:	40118340 	call	4011834 <__mulsi3>
 4024754:	8085883a 	add	r2,r16,r2
 4024758:	10c00017 	ldw	r3,0(r2)
 402475c:	e0bffb17 	ldw	r2,-20(fp)
 4024760:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4024764:	040100b4 	movhi	r16,1026
 4024768:	84195c04 	addi	r16,r16,25968
 402476c:	e0bffa17 	ldw	r2,-24(fp)
 4024770:	01400304 	movi	r5,12
 4024774:	1009883a 	mov	r4,r2
 4024778:	40118340 	call	4011834 <__mulsi3>
 402477c:	8085883a 	add	r2,r16,r2
 4024780:	10800104 	addi	r2,r2,4
 4024784:	10c00017 	ldw	r3,0(r2)
 4024788:	e0bffb17 	ldw	r2,-20(fp)
 402478c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4024790:	040100b4 	movhi	r16,1026
 4024794:	84195c04 	addi	r16,r16,25968
 4024798:	e0bffa17 	ldw	r2,-24(fp)
 402479c:	01400304 	movi	r5,12
 40247a0:	1009883a 	mov	r4,r2
 40247a4:	40118340 	call	4011834 <__mulsi3>
 40247a8:	8085883a 	add	r2,r16,r2
 40247ac:	10800204 	addi	r2,r2,8
 40247b0:	10c00017 	ldw	r3,0(r2)
 40247b4:	e0bffb17 	ldw	r2,-20(fp)
 40247b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40247bc:	e13ffa17 	ldw	r4,-24(fp)
 40247c0:	4022d880 	call	4022d88 <alt_release_fd>
  }
} 
 40247c4:	0001883a 	nop
 40247c8:	e6ffff04 	addi	sp,fp,-4
 40247cc:	dfc00217 	ldw	ra,8(sp)
 40247d0:	df000117 	ldw	fp,4(sp)
 40247d4:	dc000017 	ldw	r16,0(sp)
 40247d8:	dec00304 	addi	sp,sp,12
 40247dc:	f800283a 	ret

040247e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40247e0:	defffb04 	addi	sp,sp,-20
 40247e4:	dfc00415 	stw	ra,16(sp)
 40247e8:	df000315 	stw	fp,12(sp)
 40247ec:	df000304 	addi	fp,sp,12
 40247f0:	e13ffd15 	stw	r4,-12(fp)
 40247f4:	e17ffe15 	stw	r5,-8(fp)
 40247f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40247fc:	01c07fc4 	movi	r7,511
 4024800:	01800044 	movi	r6,1
 4024804:	e17ffd17 	ldw	r5,-12(fp)
 4024808:	010100b4 	movhi	r4,1026
 402480c:	21195f04 	addi	r4,r4,25980
 4024810:	40246fc0 	call	40246fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4024814:	01c07fc4 	movi	r7,511
 4024818:	000d883a 	mov	r6,zero
 402481c:	e17ffe17 	ldw	r5,-8(fp)
 4024820:	010100b4 	movhi	r4,1026
 4024824:	21195c04 	addi	r4,r4,25968
 4024828:	40246fc0 	call	40246fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 402482c:	01c07fc4 	movi	r7,511
 4024830:	01800044 	movi	r6,1
 4024834:	e17fff17 	ldw	r5,-4(fp)
 4024838:	010100b4 	movhi	r4,1026
 402483c:	21196204 	addi	r4,r4,25992
 4024840:	40246fc0 	call	40246fc <alt_open_fd>
}  
 4024844:	0001883a 	nop
 4024848:	e037883a 	mov	sp,fp
 402484c:	dfc00117 	ldw	ra,4(sp)
 4024850:	df000017 	ldw	fp,0(sp)
 4024854:	dec00204 	addi	sp,sp,8
 4024858:	f800283a 	ret

0402485c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402485c:	defffe04 	addi	sp,sp,-8
 4024860:	dfc00115 	stw	ra,4(sp)
 4024864:	df000015 	stw	fp,0(sp)
 4024868:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402486c:	d0a01317 	ldw	r2,-32692(gp)
 4024870:	10000326 	beq	r2,zero,4024880 <alt_get_errno+0x24>
 4024874:	d0a01317 	ldw	r2,-32692(gp)
 4024878:	103ee83a 	callr	r2
 402487c:	00000106 	br	4024884 <alt_get_errno+0x28>
 4024880:	d0a80a04 	addi	r2,gp,-24536
}
 4024884:	e037883a 	mov	sp,fp
 4024888:	dfc00117 	ldw	ra,4(sp)
 402488c:	df000017 	ldw	fp,0(sp)
 4024890:	dec00204 	addi	sp,sp,8
 4024894:	f800283a 	ret

04024898 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4024898:	defffb04 	addi	sp,sp,-20
 402489c:	dfc00415 	stw	ra,16(sp)
 40248a0:	df000315 	stw	fp,12(sp)
 40248a4:	dc000215 	stw	r16,8(sp)
 40248a8:	df000304 	addi	fp,sp,12
 40248ac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40248b0:	e0bffe17 	ldw	r2,-8(fp)
 40248b4:	10800217 	ldw	r2,8(r2)
 40248b8:	10d00034 	orhi	r3,r2,16384
 40248bc:	e0bffe17 	ldw	r2,-8(fp)
 40248c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40248c4:	e03ffd15 	stw	zero,-12(fp)
 40248c8:	00002306 	br	4024958 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40248cc:	040100b4 	movhi	r16,1026
 40248d0:	84195c04 	addi	r16,r16,25968
 40248d4:	e0bffd17 	ldw	r2,-12(fp)
 40248d8:	01400304 	movi	r5,12
 40248dc:	1009883a 	mov	r4,r2
 40248e0:	40118340 	call	4011834 <__mulsi3>
 40248e4:	8085883a 	add	r2,r16,r2
 40248e8:	10c00017 	ldw	r3,0(r2)
 40248ec:	e0bffe17 	ldw	r2,-8(fp)
 40248f0:	10800017 	ldw	r2,0(r2)
 40248f4:	1880151e 	bne	r3,r2,402494c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40248f8:	040100b4 	movhi	r16,1026
 40248fc:	84195c04 	addi	r16,r16,25968
 4024900:	e0bffd17 	ldw	r2,-12(fp)
 4024904:	01400304 	movi	r5,12
 4024908:	1009883a 	mov	r4,r2
 402490c:	40118340 	call	4011834 <__mulsi3>
 4024910:	8085883a 	add	r2,r16,r2
 4024914:	10800204 	addi	r2,r2,8
 4024918:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402491c:	10000b0e 	bge	r2,zero,402494c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4024920:	01400304 	movi	r5,12
 4024924:	e13ffd17 	ldw	r4,-12(fp)
 4024928:	40118340 	call	4011834 <__mulsi3>
 402492c:	1007883a 	mov	r3,r2
 4024930:	008100b4 	movhi	r2,1026
 4024934:	10995c04 	addi	r2,r2,25968
 4024938:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402493c:	e0bffe17 	ldw	r2,-8(fp)
 4024940:	18800226 	beq	r3,r2,402494c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4024944:	00bffcc4 	movi	r2,-13
 4024948:	00000806 	br	402496c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402494c:	e0bffd17 	ldw	r2,-12(fp)
 4024950:	10800044 	addi	r2,r2,1
 4024954:	e0bffd15 	stw	r2,-12(fp)
 4024958:	d0a01217 	ldw	r2,-32696(gp)
 402495c:	1007883a 	mov	r3,r2
 4024960:	e0bffd17 	ldw	r2,-12(fp)
 4024964:	18bfd92e 	bgeu	r3,r2,40248cc <__alt_mem_onchip_memory2_0+0xfc01f70c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4024968:	0005883a 	mov	r2,zero
}
 402496c:	e6ffff04 	addi	sp,fp,-4
 4024970:	dfc00217 	ldw	ra,8(sp)
 4024974:	df000117 	ldw	fp,4(sp)
 4024978:	dc000017 	ldw	r16,0(sp)
 402497c:	dec00304 	addi	sp,sp,12
 4024980:	f800283a 	ret

04024984 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4024984:	defff604 	addi	sp,sp,-40
 4024988:	dfc00915 	stw	ra,36(sp)
 402498c:	df000815 	stw	fp,32(sp)
 4024990:	df000804 	addi	fp,sp,32
 4024994:	e13ffd15 	stw	r4,-12(fp)
 4024998:	e17ffe15 	stw	r5,-8(fp)
 402499c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40249a0:	00bfffc4 	movi	r2,-1
 40249a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40249a8:	00bffb44 	movi	r2,-19
 40249ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40249b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40249b4:	d1601004 	addi	r5,gp,-32704
 40249b8:	e13ffd17 	ldw	r4,-12(fp)
 40249bc:	4024b040 	call	4024b04 <alt_find_dev>
 40249c0:	e0bff815 	stw	r2,-32(fp)
 40249c4:	e0bff817 	ldw	r2,-32(fp)
 40249c8:	1000051e 	bne	r2,zero,40249e0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40249cc:	e13ffd17 	ldw	r4,-12(fp)
 40249d0:	4024b940 	call	4024b94 <alt_find_file>
 40249d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40249d8:	00800044 	movi	r2,1
 40249dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40249e0:	e0bff817 	ldw	r2,-32(fp)
 40249e4:	10002b26 	beq	r2,zero,4024a94 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40249e8:	e13ff817 	ldw	r4,-32(fp)
 40249ec:	4024c9c0 	call	4024c9c <alt_get_fd>
 40249f0:	e0bff915 	stw	r2,-28(fp)
 40249f4:	e0bff917 	ldw	r2,-28(fp)
 40249f8:	1000030e 	bge	r2,zero,4024a08 <open+0x84>
    {
      status = index;
 40249fc:	e0bff917 	ldw	r2,-28(fp)
 4024a00:	e0bffa15 	stw	r2,-24(fp)
 4024a04:	00002506 	br	4024a9c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4024a08:	01400304 	movi	r5,12
 4024a0c:	e13ff917 	ldw	r4,-28(fp)
 4024a10:	40118340 	call	4011834 <__mulsi3>
 4024a14:	1007883a 	mov	r3,r2
 4024a18:	008100b4 	movhi	r2,1026
 4024a1c:	10995c04 	addi	r2,r2,25968
 4024a20:	1885883a 	add	r2,r3,r2
 4024a24:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4024a28:	e0fffe17 	ldw	r3,-8(fp)
 4024a2c:	00900034 	movhi	r2,16384
 4024a30:	10bfffc4 	addi	r2,r2,-1
 4024a34:	1886703a 	and	r3,r3,r2
 4024a38:	e0bffc17 	ldw	r2,-16(fp)
 4024a3c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4024a40:	e0bffb17 	ldw	r2,-20(fp)
 4024a44:	1000051e 	bne	r2,zero,4024a5c <open+0xd8>
 4024a48:	e13ffc17 	ldw	r4,-16(fp)
 4024a4c:	40248980 	call	4024898 <alt_file_locked>
 4024a50:	e0bffa15 	stw	r2,-24(fp)
 4024a54:	e0bffa17 	ldw	r2,-24(fp)
 4024a58:	10001016 	blt	r2,zero,4024a9c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4024a5c:	e0bff817 	ldw	r2,-32(fp)
 4024a60:	10800317 	ldw	r2,12(r2)
 4024a64:	10000826 	beq	r2,zero,4024a88 <open+0x104>
 4024a68:	e0bff817 	ldw	r2,-32(fp)
 4024a6c:	10800317 	ldw	r2,12(r2)
 4024a70:	e1ffff17 	ldw	r7,-4(fp)
 4024a74:	e1bffe17 	ldw	r6,-8(fp)
 4024a78:	e17ffd17 	ldw	r5,-12(fp)
 4024a7c:	e13ffc17 	ldw	r4,-16(fp)
 4024a80:	103ee83a 	callr	r2
 4024a84:	00000106 	br	4024a8c <open+0x108>
 4024a88:	0005883a 	mov	r2,zero
 4024a8c:	e0bffa15 	stw	r2,-24(fp)
 4024a90:	00000206 	br	4024a9c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4024a94:	00bffb44 	movi	r2,-19
 4024a98:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4024a9c:	e0bffa17 	ldw	r2,-24(fp)
 4024aa0:	1000090e 	bge	r2,zero,4024ac8 <open+0x144>
  {
    alt_release_fd (index);  
 4024aa4:	e13ff917 	ldw	r4,-28(fp)
 4024aa8:	4022d880 	call	4022d88 <alt_release_fd>
    ALT_ERRNO = -status;
 4024aac:	402485c0 	call	402485c <alt_get_errno>
 4024ab0:	1007883a 	mov	r3,r2
 4024ab4:	e0bffa17 	ldw	r2,-24(fp)
 4024ab8:	0085c83a 	sub	r2,zero,r2
 4024abc:	18800015 	stw	r2,0(r3)
    return -1;
 4024ac0:	00bfffc4 	movi	r2,-1
 4024ac4:	00000106 	br	4024acc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4024ac8:	e0bff917 	ldw	r2,-28(fp)
}
 4024acc:	e037883a 	mov	sp,fp
 4024ad0:	dfc00117 	ldw	ra,4(sp)
 4024ad4:	df000017 	ldw	fp,0(sp)
 4024ad8:	dec00204 	addi	sp,sp,8
 4024adc:	f800283a 	ret

04024ae0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4024ae0:	deffff04 	addi	sp,sp,-4
 4024ae4:	df000015 	stw	fp,0(sp)
 4024ae8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4024aec:	000170fa 	wrctl	ienable,zero
}
 4024af0:	0001883a 	nop
 4024af4:	e037883a 	mov	sp,fp
 4024af8:	df000017 	ldw	fp,0(sp)
 4024afc:	dec00104 	addi	sp,sp,4
 4024b00:	f800283a 	ret

04024b04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4024b04:	defffa04 	addi	sp,sp,-24
 4024b08:	dfc00515 	stw	ra,20(sp)
 4024b0c:	df000415 	stw	fp,16(sp)
 4024b10:	df000404 	addi	fp,sp,16
 4024b14:	e13ffe15 	stw	r4,-8(fp)
 4024b18:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4024b1c:	e0bfff17 	ldw	r2,-4(fp)
 4024b20:	10800017 	ldw	r2,0(r2)
 4024b24:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4024b28:	e13ffe17 	ldw	r4,-8(fp)
 4024b2c:	40143080 	call	4014308 <strlen>
 4024b30:	10800044 	addi	r2,r2,1
 4024b34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4024b38:	00000d06 	br	4024b70 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4024b3c:	e0bffc17 	ldw	r2,-16(fp)
 4024b40:	10800217 	ldw	r2,8(r2)
 4024b44:	e0fffd17 	ldw	r3,-12(fp)
 4024b48:	180d883a 	mov	r6,r3
 4024b4c:	e17ffe17 	ldw	r5,-8(fp)
 4024b50:	1009883a 	mov	r4,r2
 4024b54:	4024e480 	call	4024e48 <memcmp>
 4024b58:	1000021e 	bne	r2,zero,4024b64 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4024b5c:	e0bffc17 	ldw	r2,-16(fp)
 4024b60:	00000706 	br	4024b80 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4024b64:	e0bffc17 	ldw	r2,-16(fp)
 4024b68:	10800017 	ldw	r2,0(r2)
 4024b6c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4024b70:	e0fffc17 	ldw	r3,-16(fp)
 4024b74:	e0bfff17 	ldw	r2,-4(fp)
 4024b78:	18bff01e 	bne	r3,r2,4024b3c <__alt_mem_onchip_memory2_0+0xfc01f97c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4024b7c:	0005883a 	mov	r2,zero
}
 4024b80:	e037883a 	mov	sp,fp
 4024b84:	dfc00117 	ldw	ra,4(sp)
 4024b88:	df000017 	ldw	fp,0(sp)
 4024b8c:	dec00204 	addi	sp,sp,8
 4024b90:	f800283a 	ret

04024b94 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4024b94:	defffb04 	addi	sp,sp,-20
 4024b98:	dfc00415 	stw	ra,16(sp)
 4024b9c:	df000315 	stw	fp,12(sp)
 4024ba0:	df000304 	addi	fp,sp,12
 4024ba4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4024ba8:	d0a00e17 	ldw	r2,-32712(gp)
 4024bac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4024bb0:	00003106 	br	4024c78 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4024bb4:	e0bffd17 	ldw	r2,-12(fp)
 4024bb8:	10800217 	ldw	r2,8(r2)
 4024bbc:	1009883a 	mov	r4,r2
 4024bc0:	40143080 	call	4014308 <strlen>
 4024bc4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4024bc8:	e0bffd17 	ldw	r2,-12(fp)
 4024bcc:	10c00217 	ldw	r3,8(r2)
 4024bd0:	e0bffe17 	ldw	r2,-8(fp)
 4024bd4:	10bfffc4 	addi	r2,r2,-1
 4024bd8:	1885883a 	add	r2,r3,r2
 4024bdc:	10800003 	ldbu	r2,0(r2)
 4024be0:	10803fcc 	andi	r2,r2,255
 4024be4:	1080201c 	xori	r2,r2,128
 4024be8:	10bfe004 	addi	r2,r2,-128
 4024bec:	10800bd8 	cmpnei	r2,r2,47
 4024bf0:	1000031e 	bne	r2,zero,4024c00 <alt_find_file+0x6c>
    {
      len -= 1;
 4024bf4:	e0bffe17 	ldw	r2,-8(fp)
 4024bf8:	10bfffc4 	addi	r2,r2,-1
 4024bfc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4024c00:	e0bffe17 	ldw	r2,-8(fp)
 4024c04:	e0ffff17 	ldw	r3,-4(fp)
 4024c08:	1885883a 	add	r2,r3,r2
 4024c0c:	10800003 	ldbu	r2,0(r2)
 4024c10:	10803fcc 	andi	r2,r2,255
 4024c14:	1080201c 	xori	r2,r2,128
 4024c18:	10bfe004 	addi	r2,r2,-128
 4024c1c:	10800be0 	cmpeqi	r2,r2,47
 4024c20:	1000081e 	bne	r2,zero,4024c44 <alt_find_file+0xb0>
 4024c24:	e0bffe17 	ldw	r2,-8(fp)
 4024c28:	e0ffff17 	ldw	r3,-4(fp)
 4024c2c:	1885883a 	add	r2,r3,r2
 4024c30:	10800003 	ldbu	r2,0(r2)
 4024c34:	10803fcc 	andi	r2,r2,255
 4024c38:	1080201c 	xori	r2,r2,128
 4024c3c:	10bfe004 	addi	r2,r2,-128
 4024c40:	10000a1e 	bne	r2,zero,4024c6c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4024c44:	e0bffd17 	ldw	r2,-12(fp)
 4024c48:	10800217 	ldw	r2,8(r2)
 4024c4c:	e0fffe17 	ldw	r3,-8(fp)
 4024c50:	180d883a 	mov	r6,r3
 4024c54:	e17fff17 	ldw	r5,-4(fp)
 4024c58:	1009883a 	mov	r4,r2
 4024c5c:	4024e480 	call	4024e48 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4024c60:	1000021e 	bne	r2,zero,4024c6c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4024c64:	e0bffd17 	ldw	r2,-12(fp)
 4024c68:	00000706 	br	4024c88 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4024c6c:	e0bffd17 	ldw	r2,-12(fp)
 4024c70:	10800017 	ldw	r2,0(r2)
 4024c74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4024c78:	e0fffd17 	ldw	r3,-12(fp)
 4024c7c:	d0a00e04 	addi	r2,gp,-32712
 4024c80:	18bfcc1e 	bne	r3,r2,4024bb4 <__alt_mem_onchip_memory2_0+0xfc01f9f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4024c84:	0005883a 	mov	r2,zero
}
 4024c88:	e037883a 	mov	sp,fp
 4024c8c:	dfc00117 	ldw	ra,4(sp)
 4024c90:	df000017 	ldw	fp,0(sp)
 4024c94:	dec00204 	addi	sp,sp,8
 4024c98:	f800283a 	ret

04024c9c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4024c9c:	defffa04 	addi	sp,sp,-24
 4024ca0:	dfc00515 	stw	ra,20(sp)
 4024ca4:	df000415 	stw	fp,16(sp)
 4024ca8:	dc000315 	stw	r16,12(sp)
 4024cac:	df000404 	addi	fp,sp,16
 4024cb0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4024cb4:	00bffa04 	movi	r2,-24
 4024cb8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4024cbc:	e03ffc15 	stw	zero,-16(fp)
 4024cc0:	00001d06 	br	4024d38 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4024cc4:	040100b4 	movhi	r16,1026
 4024cc8:	84195c04 	addi	r16,r16,25968
 4024ccc:	e0bffc17 	ldw	r2,-16(fp)
 4024cd0:	01400304 	movi	r5,12
 4024cd4:	1009883a 	mov	r4,r2
 4024cd8:	40118340 	call	4011834 <__mulsi3>
 4024cdc:	8085883a 	add	r2,r16,r2
 4024ce0:	10800017 	ldw	r2,0(r2)
 4024ce4:	1000111e 	bne	r2,zero,4024d2c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4024ce8:	040100b4 	movhi	r16,1026
 4024cec:	84195c04 	addi	r16,r16,25968
 4024cf0:	e0bffc17 	ldw	r2,-16(fp)
 4024cf4:	01400304 	movi	r5,12
 4024cf8:	1009883a 	mov	r4,r2
 4024cfc:	40118340 	call	4011834 <__mulsi3>
 4024d00:	8085883a 	add	r2,r16,r2
 4024d04:	e0fffe17 	ldw	r3,-8(fp)
 4024d08:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4024d0c:	d0e01217 	ldw	r3,-32696(gp)
 4024d10:	e0bffc17 	ldw	r2,-16(fp)
 4024d14:	1880020e 	bge	r3,r2,4024d20 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4024d18:	e0bffc17 	ldw	r2,-16(fp)
 4024d1c:	d0a01215 	stw	r2,-32696(gp)
      }
      rc = i;
 4024d20:	e0bffc17 	ldw	r2,-16(fp)
 4024d24:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4024d28:	00000606 	br	4024d44 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4024d2c:	e0bffc17 	ldw	r2,-16(fp)
 4024d30:	10800044 	addi	r2,r2,1
 4024d34:	e0bffc15 	stw	r2,-16(fp)
 4024d38:	e0bffc17 	ldw	r2,-16(fp)
 4024d3c:	10800810 	cmplti	r2,r2,32
 4024d40:	103fe01e 	bne	r2,zero,4024cc4 <__alt_mem_onchip_memory2_0+0xfc01fb04>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4024d44:	e0bffd17 	ldw	r2,-12(fp)
}
 4024d48:	e6ffff04 	addi	sp,fp,-4
 4024d4c:	dfc00217 	ldw	ra,8(sp)
 4024d50:	df000117 	ldw	fp,4(sp)
 4024d54:	dc000017 	ldw	r16,0(sp)
 4024d58:	dec00304 	addi	sp,sp,12
 4024d5c:	f800283a 	ret

04024d60 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4024d60:	defffe04 	addi	sp,sp,-8
 4024d64:	df000115 	stw	fp,4(sp)
 4024d68:	df000104 	addi	fp,sp,4
 4024d6c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4024d70:	e0bfff17 	ldw	r2,-4(fp)
 4024d74:	10bffe84 	addi	r2,r2,-6
 4024d78:	10c00428 	cmpgeui	r3,r2,16
 4024d7c:	18001a1e 	bne	r3,zero,4024de8 <alt_exception_cause_generated_bad_addr+0x88>
 4024d80:	100690ba 	slli	r3,r2,2
 4024d84:	008100b4 	movhi	r2,1026
 4024d88:	10936604 	addi	r2,r2,19864
 4024d8c:	1885883a 	add	r2,r3,r2
 4024d90:	10800017 	ldw	r2,0(r2)
 4024d94:	1000683a 	jmp	r2
 4024d98:	04024dd8 	cmpnei	r16,zero,2359
 4024d9c:	04024dd8 	cmpnei	r16,zero,2359
 4024da0:	04024de8 	cmpgeui	r16,zero,2359
 4024da4:	04024de8 	cmpgeui	r16,zero,2359
 4024da8:	04024de8 	cmpgeui	r16,zero,2359
 4024dac:	04024dd8 	cmpnei	r16,zero,2359
 4024db0:	04024de0 	cmpeqi	r16,zero,2359
 4024db4:	04024de8 	cmpgeui	r16,zero,2359
 4024db8:	04024dd8 	cmpnei	r16,zero,2359
 4024dbc:	04024dd8 	cmpnei	r16,zero,2359
 4024dc0:	04024de8 	cmpgeui	r16,zero,2359
 4024dc4:	04024dd8 	cmpnei	r16,zero,2359
 4024dc8:	04024de0 	cmpeqi	r16,zero,2359
 4024dcc:	04024de8 	cmpgeui	r16,zero,2359
 4024dd0:	04024de8 	cmpgeui	r16,zero,2359
 4024dd4:	04024dd8 	cmpnei	r16,zero,2359
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4024dd8:	00800044 	movi	r2,1
 4024ddc:	00000306 	br	4024dec <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4024de0:	0005883a 	mov	r2,zero
 4024de4:	00000106 	br	4024dec <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4024de8:	0005883a 	mov	r2,zero
  }
}
 4024dec:	e037883a 	mov	sp,fp
 4024df0:	df000017 	ldw	fp,0(sp)
 4024df4:	dec00104 	addi	sp,sp,4
 4024df8:	f800283a 	ret

04024dfc <atexit>:
 4024dfc:	200b883a 	mov	r5,r4
 4024e00:	000f883a 	mov	r7,zero
 4024e04:	000d883a 	mov	r6,zero
 4024e08:	0009883a 	mov	r4,zero
 4024e0c:	4024ec41 	jmpi	4024ec4 <__register_exitproc>

04024e10 <exit>:
 4024e10:	defffe04 	addi	sp,sp,-8
 4024e14:	000b883a 	mov	r5,zero
 4024e18:	dc000015 	stw	r16,0(sp)
 4024e1c:	dfc00115 	stw	ra,4(sp)
 4024e20:	2021883a 	mov	r16,r4
 4024e24:	4024fdc0 	call	4024fdc <__call_exitprocs>
 4024e28:	008100b4 	movhi	r2,1026
 4024e2c:	109ddc04 	addi	r2,r2,30576
 4024e30:	11000017 	ldw	r4,0(r2)
 4024e34:	20800f17 	ldw	r2,60(r4)
 4024e38:	10000126 	beq	r2,zero,4024e40 <exit+0x30>
 4024e3c:	103ee83a 	callr	r2
 4024e40:	8009883a 	mov	r4,r16
 4024e44:	402515c0 	call	402515c <_exit>

04024e48 <memcmp>:
 4024e48:	01c000c4 	movi	r7,3
 4024e4c:	3980192e 	bgeu	r7,r6,4024eb4 <memcmp+0x6c>
 4024e50:	2144b03a 	or	r2,r4,r5
 4024e54:	11c4703a 	and	r2,r2,r7
 4024e58:	10000f26 	beq	r2,zero,4024e98 <memcmp+0x50>
 4024e5c:	20800003 	ldbu	r2,0(r4)
 4024e60:	28c00003 	ldbu	r3,0(r5)
 4024e64:	10c0151e 	bne	r2,r3,4024ebc <memcmp+0x74>
 4024e68:	31bfff84 	addi	r6,r6,-2
 4024e6c:	01ffffc4 	movi	r7,-1
 4024e70:	00000406 	br	4024e84 <memcmp+0x3c>
 4024e74:	20800003 	ldbu	r2,0(r4)
 4024e78:	28c00003 	ldbu	r3,0(r5)
 4024e7c:	31bfffc4 	addi	r6,r6,-1
 4024e80:	10c00e1e 	bne	r2,r3,4024ebc <memcmp+0x74>
 4024e84:	21000044 	addi	r4,r4,1
 4024e88:	29400044 	addi	r5,r5,1
 4024e8c:	31fff91e 	bne	r6,r7,4024e74 <__alt_mem_onchip_memory2_0+0xfc01fcb4>
 4024e90:	0005883a 	mov	r2,zero
 4024e94:	f800283a 	ret
 4024e98:	20c00017 	ldw	r3,0(r4)
 4024e9c:	28800017 	ldw	r2,0(r5)
 4024ea0:	18bfee1e 	bne	r3,r2,4024e5c <__alt_mem_onchip_memory2_0+0xfc01fc9c>
 4024ea4:	31bfff04 	addi	r6,r6,-4
 4024ea8:	21000104 	addi	r4,r4,4
 4024eac:	29400104 	addi	r5,r5,4
 4024eb0:	39bff936 	bltu	r7,r6,4024e98 <__alt_mem_onchip_memory2_0+0xfc01fcd8>
 4024eb4:	303fe91e 	bne	r6,zero,4024e5c <__alt_mem_onchip_memory2_0+0xfc01fc9c>
 4024eb8:	003ff506 	br	4024e90 <__alt_mem_onchip_memory2_0+0xfc01fcd0>
 4024ebc:	10c5c83a 	sub	r2,r2,r3
 4024ec0:	f800283a 	ret

04024ec4 <__register_exitproc>:
 4024ec4:	defffa04 	addi	sp,sp,-24
 4024ec8:	dc000315 	stw	r16,12(sp)
 4024ecc:	040100b4 	movhi	r16,1026
 4024ed0:	841ddc04 	addi	r16,r16,30576
 4024ed4:	80c00017 	ldw	r3,0(r16)
 4024ed8:	dc400415 	stw	r17,16(sp)
 4024edc:	dfc00515 	stw	ra,20(sp)
 4024ee0:	18805217 	ldw	r2,328(r3)
 4024ee4:	2023883a 	mov	r17,r4
 4024ee8:	10003726 	beq	r2,zero,4024fc8 <__register_exitproc+0x104>
 4024eec:	10c00117 	ldw	r3,4(r2)
 4024ef0:	010007c4 	movi	r4,31
 4024ef4:	20c00e16 	blt	r4,r3,4024f30 <__register_exitproc+0x6c>
 4024ef8:	1a000044 	addi	r8,r3,1
 4024efc:	8800221e 	bne	r17,zero,4024f88 <__register_exitproc+0xc4>
 4024f00:	18c00084 	addi	r3,r3,2
 4024f04:	18c7883a 	add	r3,r3,r3
 4024f08:	18c7883a 	add	r3,r3,r3
 4024f0c:	12000115 	stw	r8,4(r2)
 4024f10:	10c7883a 	add	r3,r2,r3
 4024f14:	19400015 	stw	r5,0(r3)
 4024f18:	0005883a 	mov	r2,zero
 4024f1c:	dfc00517 	ldw	ra,20(sp)
 4024f20:	dc400417 	ldw	r17,16(sp)
 4024f24:	dc000317 	ldw	r16,12(sp)
 4024f28:	dec00604 	addi	sp,sp,24
 4024f2c:	f800283a 	ret
 4024f30:	00800034 	movhi	r2,0
 4024f34:	10800004 	addi	r2,r2,0
 4024f38:	10002626 	beq	r2,zero,4024fd4 <__register_exitproc+0x110>
 4024f3c:	01006404 	movi	r4,400
 4024f40:	d9400015 	stw	r5,0(sp)
 4024f44:	d9800115 	stw	r6,4(sp)
 4024f48:	d9c00215 	stw	r7,8(sp)
 4024f4c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4024f50:	d9400017 	ldw	r5,0(sp)
 4024f54:	d9800117 	ldw	r6,4(sp)
 4024f58:	d9c00217 	ldw	r7,8(sp)
 4024f5c:	10001d26 	beq	r2,zero,4024fd4 <__register_exitproc+0x110>
 4024f60:	81000017 	ldw	r4,0(r16)
 4024f64:	10000115 	stw	zero,4(r2)
 4024f68:	02000044 	movi	r8,1
 4024f6c:	22405217 	ldw	r9,328(r4)
 4024f70:	0007883a 	mov	r3,zero
 4024f74:	12400015 	stw	r9,0(r2)
 4024f78:	20805215 	stw	r2,328(r4)
 4024f7c:	10006215 	stw	zero,392(r2)
 4024f80:	10006315 	stw	zero,396(r2)
 4024f84:	883fde26 	beq	r17,zero,4024f00 <__alt_mem_onchip_memory2_0+0xfc01fd40>
 4024f88:	18c9883a 	add	r4,r3,r3
 4024f8c:	2109883a 	add	r4,r4,r4
 4024f90:	1109883a 	add	r4,r2,r4
 4024f94:	21802215 	stw	r6,136(r4)
 4024f98:	01800044 	movi	r6,1
 4024f9c:	12406217 	ldw	r9,392(r2)
 4024fa0:	30cc983a 	sll	r6,r6,r3
 4024fa4:	4992b03a 	or	r9,r9,r6
 4024fa8:	12406215 	stw	r9,392(r2)
 4024fac:	21c04215 	stw	r7,264(r4)
 4024fb0:	01000084 	movi	r4,2
 4024fb4:	893fd21e 	bne	r17,r4,4024f00 <__alt_mem_onchip_memory2_0+0xfc01fd40>
 4024fb8:	11006317 	ldw	r4,396(r2)
 4024fbc:	218cb03a 	or	r6,r4,r6
 4024fc0:	11806315 	stw	r6,396(r2)
 4024fc4:	003fce06 	br	4024f00 <__alt_mem_onchip_memory2_0+0xfc01fd40>
 4024fc8:	18805304 	addi	r2,r3,332
 4024fcc:	18805215 	stw	r2,328(r3)
 4024fd0:	003fc606 	br	4024eec <__alt_mem_onchip_memory2_0+0xfc01fd2c>
 4024fd4:	00bfffc4 	movi	r2,-1
 4024fd8:	003fd006 	br	4024f1c <__alt_mem_onchip_memory2_0+0xfc01fd5c>

04024fdc <__call_exitprocs>:
 4024fdc:	defff504 	addi	sp,sp,-44
 4024fe0:	df000915 	stw	fp,36(sp)
 4024fe4:	dd400615 	stw	r21,24(sp)
 4024fe8:	dc800315 	stw	r18,12(sp)
 4024fec:	dfc00a15 	stw	ra,40(sp)
 4024ff0:	ddc00815 	stw	r23,32(sp)
 4024ff4:	dd800715 	stw	r22,28(sp)
 4024ff8:	dd000515 	stw	r20,20(sp)
 4024ffc:	dcc00415 	stw	r19,16(sp)
 4025000:	dc400215 	stw	r17,8(sp)
 4025004:	dc000115 	stw	r16,4(sp)
 4025008:	d9000015 	stw	r4,0(sp)
 402500c:	2839883a 	mov	fp,r5
 4025010:	04800044 	movi	r18,1
 4025014:	057fffc4 	movi	r21,-1
 4025018:	008100b4 	movhi	r2,1026
 402501c:	109ddc04 	addi	r2,r2,30576
 4025020:	12000017 	ldw	r8,0(r2)
 4025024:	45005217 	ldw	r20,328(r8)
 4025028:	44c05204 	addi	r19,r8,328
 402502c:	a0001c26 	beq	r20,zero,40250a0 <__call_exitprocs+0xc4>
 4025030:	a0800117 	ldw	r2,4(r20)
 4025034:	15ffffc4 	addi	r23,r2,-1
 4025038:	b8000d16 	blt	r23,zero,4025070 <__call_exitprocs+0x94>
 402503c:	14000044 	addi	r16,r2,1
 4025040:	8421883a 	add	r16,r16,r16
 4025044:	8421883a 	add	r16,r16,r16
 4025048:	84402004 	addi	r17,r16,128
 402504c:	a463883a 	add	r17,r20,r17
 4025050:	a421883a 	add	r16,r20,r16
 4025054:	e0001e26 	beq	fp,zero,40250d0 <__call_exitprocs+0xf4>
 4025058:	80804017 	ldw	r2,256(r16)
 402505c:	e0801c26 	beq	fp,r2,40250d0 <__call_exitprocs+0xf4>
 4025060:	bdffffc4 	addi	r23,r23,-1
 4025064:	843fff04 	addi	r16,r16,-4
 4025068:	8c7fff04 	addi	r17,r17,-4
 402506c:	bd7ff91e 	bne	r23,r21,4025054 <__alt_mem_onchip_memory2_0+0xfc01fe94>
 4025070:	00800034 	movhi	r2,0
 4025074:	10800004 	addi	r2,r2,0
 4025078:	10000926 	beq	r2,zero,40250a0 <__call_exitprocs+0xc4>
 402507c:	a0800117 	ldw	r2,4(r20)
 4025080:	1000301e 	bne	r2,zero,4025144 <__call_exitprocs+0x168>
 4025084:	a0800017 	ldw	r2,0(r20)
 4025088:	10003226 	beq	r2,zero,4025154 <__call_exitprocs+0x178>
 402508c:	a009883a 	mov	r4,r20
 4025090:	98800015 	stw	r2,0(r19)
 4025094:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4025098:	9d000017 	ldw	r20,0(r19)
 402509c:	a03fe41e 	bne	r20,zero,4025030 <__alt_mem_onchip_memory2_0+0xfc01fe70>
 40250a0:	dfc00a17 	ldw	ra,40(sp)
 40250a4:	df000917 	ldw	fp,36(sp)
 40250a8:	ddc00817 	ldw	r23,32(sp)
 40250ac:	dd800717 	ldw	r22,28(sp)
 40250b0:	dd400617 	ldw	r21,24(sp)
 40250b4:	dd000517 	ldw	r20,20(sp)
 40250b8:	dcc00417 	ldw	r19,16(sp)
 40250bc:	dc800317 	ldw	r18,12(sp)
 40250c0:	dc400217 	ldw	r17,8(sp)
 40250c4:	dc000117 	ldw	r16,4(sp)
 40250c8:	dec00b04 	addi	sp,sp,44
 40250cc:	f800283a 	ret
 40250d0:	a0800117 	ldw	r2,4(r20)
 40250d4:	80c00017 	ldw	r3,0(r16)
 40250d8:	10bfffc4 	addi	r2,r2,-1
 40250dc:	15c01426 	beq	r2,r23,4025130 <__call_exitprocs+0x154>
 40250e0:	80000015 	stw	zero,0(r16)
 40250e4:	183fde26 	beq	r3,zero,4025060 <__alt_mem_onchip_memory2_0+0xfc01fea0>
 40250e8:	95c8983a 	sll	r4,r18,r23
 40250ec:	a0806217 	ldw	r2,392(r20)
 40250f0:	a5800117 	ldw	r22,4(r20)
 40250f4:	2084703a 	and	r2,r4,r2
 40250f8:	10000b26 	beq	r2,zero,4025128 <__call_exitprocs+0x14c>
 40250fc:	a0806317 	ldw	r2,396(r20)
 4025100:	2088703a 	and	r4,r4,r2
 4025104:	20000c1e 	bne	r4,zero,4025138 <__call_exitprocs+0x15c>
 4025108:	89400017 	ldw	r5,0(r17)
 402510c:	d9000017 	ldw	r4,0(sp)
 4025110:	183ee83a 	callr	r3
 4025114:	a0800117 	ldw	r2,4(r20)
 4025118:	15bfbf1e 	bne	r2,r22,4025018 <__alt_mem_onchip_memory2_0+0xfc01fe58>
 402511c:	98800017 	ldw	r2,0(r19)
 4025120:	153fcf26 	beq	r2,r20,4025060 <__alt_mem_onchip_memory2_0+0xfc01fea0>
 4025124:	003fbc06 	br	4025018 <__alt_mem_onchip_memory2_0+0xfc01fe58>
 4025128:	183ee83a 	callr	r3
 402512c:	003ff906 	br	4025114 <__alt_mem_onchip_memory2_0+0xfc01ff54>
 4025130:	a5c00115 	stw	r23,4(r20)
 4025134:	003feb06 	br	40250e4 <__alt_mem_onchip_memory2_0+0xfc01ff24>
 4025138:	89000017 	ldw	r4,0(r17)
 402513c:	183ee83a 	callr	r3
 4025140:	003ff406 	br	4025114 <__alt_mem_onchip_memory2_0+0xfc01ff54>
 4025144:	a0800017 	ldw	r2,0(r20)
 4025148:	a027883a 	mov	r19,r20
 402514c:	1029883a 	mov	r20,r2
 4025150:	003fb606 	br	402502c <__alt_mem_onchip_memory2_0+0xfc01fe6c>
 4025154:	0005883a 	mov	r2,zero
 4025158:	003ffb06 	br	4025148 <__alt_mem_onchip_memory2_0+0xfc01ff88>

0402515c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 402515c:	defffd04 	addi	sp,sp,-12
 4025160:	df000215 	stw	fp,8(sp)
 4025164:	df000204 	addi	fp,sp,8
 4025168:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 402516c:	0001883a 	nop
 4025170:	e0bfff17 	ldw	r2,-4(fp)
 4025174:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4025178:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 402517c:	10000226 	beq	r2,zero,4025188 <_exit+0x2c>
    ALT_SIM_FAIL();
 4025180:	002af070 	cmpltui	zero,zero,43969
 4025184:	00000106 	br	402518c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4025188:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 402518c:	003fff06 	br	402518c <__alt_mem_onchip_memory2_0+0xfc01ffcc>
